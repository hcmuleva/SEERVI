// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  address: (where?: AddressWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  content: (where?: ContentWhereInput) => Promise<boolean>;
  educationProfile: (where?: EducationProfileWhereInput) => Promise<boolean>;
  group: (where?: GroupWhereInput) => Promise<boolean>;
  groupMember: (where?: GroupMemberWhereInput) => Promise<boolean>;
  medium: (where?: MediumWhereInput) => Promise<boolean>;
  option: (where?: OptionWhereInput) => Promise<boolean>;
  organization: (where?: OrganizationWhereInput) => Promise<boolean>;
  personalProfile: (where?: PersonalProfileWhereInput) => Promise<boolean>;
  poll: (where?: PollWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  profile: (where?: ProfileWhereInput) => Promise<boolean>;
  question: (where?: QuestionWhereInput) => Promise<boolean>;
  quiz: (where?: QuizWhereInput) => Promise<boolean>;
  result: (where?: ResultWhereInput) => Promise<boolean>;
  role: (where?: RoleWhereInput) => Promise<boolean>;
  roleMember: (where?: RoleMemberWhereInput) => Promise<boolean>;
  std: (where?: StdWhereInput) => Promise<boolean>;
  subGroup: (where?: SubGroupWhereInput) => Promise<boolean>;
  subGroupMember: (where?: SubGroupMemberWhereInput) => Promise<boolean>;
  subject: (where?: SubjectWhereInput) => Promise<boolean>;
  subjectSubscription: (
    where?: SubjectSubscriptionWhereInput
  ) => Promise<boolean>;
  suborg: (where?: SuborgWhereInput) => Promise<boolean>;
  topic: (where?: TopicWhereInput) => Promise<boolean>;
  unit: (where?: UnitWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vote: (where?: VoteWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  address: (where: AddressWhereUniqueInput) => AddressNullablePromise;
  addresses: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Address>;
  addressesConnection: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AddressConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  content: (where: ContentWhereUniqueInput) => ContentNullablePromise;
  contents: (args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Content>;
  contentsConnection: (args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContentConnectionPromise;
  educationProfile: (
    where: EducationProfileWhereUniqueInput
  ) => EducationProfileNullablePromise;
  educationProfiles: (args?: {
    where?: EducationProfileWhereInput;
    orderBy?: EducationProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<EducationProfile>;
  educationProfilesConnection: (args?: {
    where?: EducationProfileWhereInput;
    orderBy?: EducationProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EducationProfileConnectionPromise;
  group: (where: GroupWhereUniqueInput) => GroupNullablePromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  groupMember: (
    where: GroupMemberWhereUniqueInput
  ) => GroupMemberNullablePromise;
  groupMembers: (args?: {
    where?: GroupMemberWhereInput;
    orderBy?: GroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GroupMember>;
  groupMembersConnection: (args?: {
    where?: GroupMemberWhereInput;
    orderBy?: GroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupMemberConnectionPromise;
  medium: (where: MediumWhereUniqueInput) => MediumNullablePromise;
  mediums: (args?: {
    where?: MediumWhereInput;
    orderBy?: MediumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Medium>;
  mediumsConnection: (args?: {
    where?: MediumWhereInput;
    orderBy?: MediumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MediumConnectionPromise;
  option: (where: OptionWhereUniqueInput) => OptionNullablePromise;
  options: (args?: {
    where?: OptionWhereInput;
    orderBy?: OptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Option>;
  optionsConnection: (args?: {
    where?: OptionWhereInput;
    orderBy?: OptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OptionConnectionPromise;
  organization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationNullablePromise;
  organizations: (args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Organization>;
  organizationsConnection: (args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrganizationConnectionPromise;
  personalProfile: (
    where: PersonalProfileWhereUniqueInput
  ) => PersonalProfileNullablePromise;
  personalProfiles: (args?: {
    where?: PersonalProfileWhereInput;
    orderBy?: PersonalProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PersonalProfile>;
  personalProfilesConnection: (args?: {
    where?: PersonalProfileWhereInput;
    orderBy?: PersonalProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PersonalProfileConnectionPromise;
  poll: (where: PollWhereUniqueInput) => PollNullablePromise;
  polls: (args?: {
    where?: PollWhereInput;
    orderBy?: PollOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Poll>;
  pollsConnection: (args?: {
    where?: PollWhereInput;
    orderBy?: PollOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PollConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  profile: (where: ProfileWhereUniqueInput) => ProfileNullablePromise;
  profiles: (args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Profile>;
  profilesConnection: (args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProfileConnectionPromise;
  question: (where: QuestionWhereUniqueInput) => QuestionNullablePromise;
  questions: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Question>;
  questionsConnection: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuestionConnectionPromise;
  quiz: (where: QuizWhereUniqueInput) => QuizNullablePromise;
  quizzes: (args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Quiz>;
  quizzesConnection: (args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuizConnectionPromise;
  result: (where: ResultWhereUniqueInput) => ResultNullablePromise;
  results: (args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Result>;
  resultsConnection: (args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ResultConnectionPromise;
  role: (where: RoleWhereUniqueInput) => RoleNullablePromise;
  roles: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Role>;
  rolesConnection: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoleConnectionPromise;
  roleMember: (where: RoleMemberWhereUniqueInput) => RoleMemberNullablePromise;
  roleMembers: (args?: {
    where?: RoleMemberWhereInput;
    orderBy?: RoleMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<RoleMember>;
  roleMembersConnection: (args?: {
    where?: RoleMemberWhereInput;
    orderBy?: RoleMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoleMemberConnectionPromise;
  std: (where: StdWhereUniqueInput) => StdNullablePromise;
  stds: (args?: {
    where?: StdWhereInput;
    orderBy?: StdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Std>;
  stdsConnection: (args?: {
    where?: StdWhereInput;
    orderBy?: StdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StdConnectionPromise;
  subGroup: (where: SubGroupWhereUniqueInput) => SubGroupNullablePromise;
  subGroups: (args?: {
    where?: SubGroupWhereInput;
    orderBy?: SubGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SubGroup>;
  subGroupsConnection: (args?: {
    where?: SubGroupWhereInput;
    orderBy?: SubGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SubGroupConnectionPromise;
  subGroupMember: (
    where: SubGroupMemberWhereUniqueInput
  ) => SubGroupMemberNullablePromise;
  subGroupMembers: (args?: {
    where?: SubGroupMemberWhereInput;
    orderBy?: SubGroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SubGroupMember>;
  subGroupMembersConnection: (args?: {
    where?: SubGroupMemberWhereInput;
    orderBy?: SubGroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SubGroupMemberConnectionPromise;
  subject: (where: SubjectWhereUniqueInput) => SubjectNullablePromise;
  subjects: (args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Subject>;
  subjectsConnection: (args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SubjectConnectionPromise;
  subjectSubscription: (
    where: SubjectSubscriptionWhereUniqueInput
  ) => SubjectSubscriptionNullablePromise;
  subjectSubscriptions: (args?: {
    where?: SubjectSubscriptionWhereInput;
    orderBy?: SubjectSubscriptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SubjectSubscription>;
  subjectSubscriptionsConnection: (args?: {
    where?: SubjectSubscriptionWhereInput;
    orderBy?: SubjectSubscriptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SubjectSubscriptionConnectionPromise;
  suborg: (where: SuborgWhereUniqueInput) => SuborgNullablePromise;
  suborgs: (args?: {
    where?: SuborgWhereInput;
    orderBy?: SuborgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Suborg>;
  suborgsConnection: (args?: {
    where?: SuborgWhereInput;
    orderBy?: SuborgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SuborgConnectionPromise;
  topic: (where: TopicWhereUniqueInput) => TopicNullablePromise;
  topics: (args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Topic>;
  topicsConnection: (args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TopicConnectionPromise;
  unit: (where: UnitWhereUniqueInput) => UnitNullablePromise;
  units: (args?: {
    where?: UnitWhereInput;
    orderBy?: UnitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Unit>;
  unitsConnection: (args?: {
    where?: UnitWhereInput;
    orderBy?: UnitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UnitConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  vote: (where: VoteWhereUniqueInput) => VoteNullablePromise;
  votes: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Vote>;
  votesConnection: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VoteConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAddress: (data: AddressCreateInput) => AddressPromise;
  updateAddress: (args: {
    data: AddressUpdateInput;
    where: AddressWhereUniqueInput;
  }) => AddressPromise;
  updateManyAddresses: (args: {
    data: AddressUpdateManyMutationInput;
    where?: AddressWhereInput;
  }) => BatchPayloadPromise;
  upsertAddress: (args: {
    where: AddressWhereUniqueInput;
    create: AddressCreateInput;
    update: AddressUpdateInput;
  }) => AddressPromise;
  deleteAddress: (where: AddressWhereUniqueInput) => AddressPromise;
  deleteManyAddresses: (where?: AddressWhereInput) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createContent: (data: ContentCreateInput) => ContentPromise;
  updateContent: (args: {
    data: ContentUpdateInput;
    where: ContentWhereUniqueInput;
  }) => ContentPromise;
  updateManyContents: (args: {
    data: ContentUpdateManyMutationInput;
    where?: ContentWhereInput;
  }) => BatchPayloadPromise;
  upsertContent: (args: {
    where: ContentWhereUniqueInput;
    create: ContentCreateInput;
    update: ContentUpdateInput;
  }) => ContentPromise;
  deleteContent: (where: ContentWhereUniqueInput) => ContentPromise;
  deleteManyContents: (where?: ContentWhereInput) => BatchPayloadPromise;
  createEducationProfile: (
    data: EducationProfileCreateInput
  ) => EducationProfilePromise;
  updateEducationProfile: (args: {
    data: EducationProfileUpdateInput;
    where: EducationProfileWhereUniqueInput;
  }) => EducationProfilePromise;
  updateManyEducationProfiles: (args: {
    data: EducationProfileUpdateManyMutationInput;
    where?: EducationProfileWhereInput;
  }) => BatchPayloadPromise;
  upsertEducationProfile: (args: {
    where: EducationProfileWhereUniqueInput;
    create: EducationProfileCreateInput;
    update: EducationProfileUpdateInput;
  }) => EducationProfilePromise;
  deleteEducationProfile: (
    where: EducationProfileWhereUniqueInput
  ) => EducationProfilePromise;
  deleteManyEducationProfiles: (
    where?: EducationProfileWhereInput
  ) => BatchPayloadPromise;
  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  updateManyGroups: (args: {
    data: GroupUpdateManyMutationInput;
    where?: GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createGroupMember: (data: GroupMemberCreateInput) => GroupMemberPromise;
  updateGroupMember: (args: {
    data: GroupMemberUpdateInput;
    where: GroupMemberWhereUniqueInput;
  }) => GroupMemberPromise;
  updateManyGroupMembers: (args: {
    data: GroupMemberUpdateManyMutationInput;
    where?: GroupMemberWhereInput;
  }) => BatchPayloadPromise;
  upsertGroupMember: (args: {
    where: GroupMemberWhereUniqueInput;
    create: GroupMemberCreateInput;
    update: GroupMemberUpdateInput;
  }) => GroupMemberPromise;
  deleteGroupMember: (where: GroupMemberWhereUniqueInput) => GroupMemberPromise;
  deleteManyGroupMembers: (
    where?: GroupMemberWhereInput
  ) => BatchPayloadPromise;
  createMedium: (data: MediumCreateInput) => MediumPromise;
  updateMedium: (args: {
    data: MediumUpdateInput;
    where: MediumWhereUniqueInput;
  }) => MediumPromise;
  updateManyMediums: (args: {
    data: MediumUpdateManyMutationInput;
    where?: MediumWhereInput;
  }) => BatchPayloadPromise;
  upsertMedium: (args: {
    where: MediumWhereUniqueInput;
    create: MediumCreateInput;
    update: MediumUpdateInput;
  }) => MediumPromise;
  deleteMedium: (where: MediumWhereUniqueInput) => MediumPromise;
  deleteManyMediums: (where?: MediumWhereInput) => BatchPayloadPromise;
  createOption: (data: OptionCreateInput) => OptionPromise;
  updateOption: (args: {
    data: OptionUpdateInput;
    where: OptionWhereUniqueInput;
  }) => OptionPromise;
  updateManyOptions: (args: {
    data: OptionUpdateManyMutationInput;
    where?: OptionWhereInput;
  }) => BatchPayloadPromise;
  upsertOption: (args: {
    where: OptionWhereUniqueInput;
    create: OptionCreateInput;
    update: OptionUpdateInput;
  }) => OptionPromise;
  deleteOption: (where: OptionWhereUniqueInput) => OptionPromise;
  deleteManyOptions: (where?: OptionWhereInput) => BatchPayloadPromise;
  createOrganization: (data: OrganizationCreateInput) => OrganizationPromise;
  updateOrganization: (args: {
    data: OrganizationUpdateInput;
    where: OrganizationWhereUniqueInput;
  }) => OrganizationPromise;
  updateManyOrganizations: (args: {
    data: OrganizationUpdateManyMutationInput;
    where?: OrganizationWhereInput;
  }) => BatchPayloadPromise;
  upsertOrganization: (args: {
    where: OrganizationWhereUniqueInput;
    create: OrganizationCreateInput;
    update: OrganizationUpdateInput;
  }) => OrganizationPromise;
  deleteOrganization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationPromise;
  deleteManyOrganizations: (
    where?: OrganizationWhereInput
  ) => BatchPayloadPromise;
  createPersonalProfile: (
    data: PersonalProfileCreateInput
  ) => PersonalProfilePromise;
  updatePersonalProfile: (args: {
    data: PersonalProfileUpdateInput;
    where: PersonalProfileWhereUniqueInput;
  }) => PersonalProfilePromise;
  updateManyPersonalProfiles: (args: {
    data: PersonalProfileUpdateManyMutationInput;
    where?: PersonalProfileWhereInput;
  }) => BatchPayloadPromise;
  upsertPersonalProfile: (args: {
    where: PersonalProfileWhereUniqueInput;
    create: PersonalProfileCreateInput;
    update: PersonalProfileUpdateInput;
  }) => PersonalProfilePromise;
  deletePersonalProfile: (
    where: PersonalProfileWhereUniqueInput
  ) => PersonalProfilePromise;
  deleteManyPersonalProfiles: (
    where?: PersonalProfileWhereInput
  ) => BatchPayloadPromise;
  createPoll: (data: PollCreateInput) => PollPromise;
  updatePoll: (args: {
    data: PollUpdateInput;
    where: PollWhereUniqueInput;
  }) => PollPromise;
  updateManyPolls: (args: {
    data: PollUpdateManyMutationInput;
    where?: PollWhereInput;
  }) => BatchPayloadPromise;
  upsertPoll: (args: {
    where: PollWhereUniqueInput;
    create: PollCreateInput;
    update: PollUpdateInput;
  }) => PollPromise;
  deletePoll: (where: PollWhereUniqueInput) => PollPromise;
  deleteManyPolls: (where?: PollWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createProfile: (data: ProfileCreateInput) => ProfilePromise;
  updateProfile: (args: {
    data: ProfileUpdateInput;
    where: ProfileWhereUniqueInput;
  }) => ProfilePromise;
  updateManyProfiles: (args: {
    data: ProfileUpdateManyMutationInput;
    where?: ProfileWhereInput;
  }) => BatchPayloadPromise;
  upsertProfile: (args: {
    where: ProfileWhereUniqueInput;
    create: ProfileCreateInput;
    update: ProfileUpdateInput;
  }) => ProfilePromise;
  deleteProfile: (where: ProfileWhereUniqueInput) => ProfilePromise;
  deleteManyProfiles: (where?: ProfileWhereInput) => BatchPayloadPromise;
  createQuestion: (data: QuestionCreateInput) => QuestionPromise;
  updateQuestion: (args: {
    data: QuestionUpdateInput;
    where: QuestionWhereUniqueInput;
  }) => QuestionPromise;
  updateManyQuestions: (args: {
    data: QuestionUpdateManyMutationInput;
    where?: QuestionWhereInput;
  }) => BatchPayloadPromise;
  upsertQuestion: (args: {
    where: QuestionWhereUniqueInput;
    create: QuestionCreateInput;
    update: QuestionUpdateInput;
  }) => QuestionPromise;
  deleteQuestion: (where: QuestionWhereUniqueInput) => QuestionPromise;
  deleteManyQuestions: (where?: QuestionWhereInput) => BatchPayloadPromise;
  createQuiz: (data: QuizCreateInput) => QuizPromise;
  updateQuiz: (args: {
    data: QuizUpdateInput;
    where: QuizWhereUniqueInput;
  }) => QuizPromise;
  updateManyQuizzes: (args: {
    data: QuizUpdateManyMutationInput;
    where?: QuizWhereInput;
  }) => BatchPayloadPromise;
  upsertQuiz: (args: {
    where: QuizWhereUniqueInput;
    create: QuizCreateInput;
    update: QuizUpdateInput;
  }) => QuizPromise;
  deleteQuiz: (where: QuizWhereUniqueInput) => QuizPromise;
  deleteManyQuizzes: (where?: QuizWhereInput) => BatchPayloadPromise;
  createResult: (data: ResultCreateInput) => ResultPromise;
  updateResult: (args: {
    data: ResultUpdateInput;
    where: ResultWhereUniqueInput;
  }) => ResultPromise;
  updateManyResults: (args: {
    data: ResultUpdateManyMutationInput;
    where?: ResultWhereInput;
  }) => BatchPayloadPromise;
  upsertResult: (args: {
    where: ResultWhereUniqueInput;
    create: ResultCreateInput;
    update: ResultUpdateInput;
  }) => ResultPromise;
  deleteResult: (where: ResultWhereUniqueInput) => ResultPromise;
  deleteManyResults: (where?: ResultWhereInput) => BatchPayloadPromise;
  createRole: (data: RoleCreateInput) => RolePromise;
  updateRole: (args: {
    data: RoleUpdateInput;
    where: RoleWhereUniqueInput;
  }) => RolePromise;
  updateManyRoles: (args: {
    data: RoleUpdateManyMutationInput;
    where?: RoleWhereInput;
  }) => BatchPayloadPromise;
  upsertRole: (args: {
    where: RoleWhereUniqueInput;
    create: RoleCreateInput;
    update: RoleUpdateInput;
  }) => RolePromise;
  deleteRole: (where: RoleWhereUniqueInput) => RolePromise;
  deleteManyRoles: (where?: RoleWhereInput) => BatchPayloadPromise;
  createRoleMember: (data: RoleMemberCreateInput) => RoleMemberPromise;
  updateRoleMember: (args: {
    data: RoleMemberUpdateInput;
    where: RoleMemberWhereUniqueInput;
  }) => RoleMemberPromise;
  updateManyRoleMembers: (args: {
    data: RoleMemberUpdateManyMutationInput;
    where?: RoleMemberWhereInput;
  }) => BatchPayloadPromise;
  upsertRoleMember: (args: {
    where: RoleMemberWhereUniqueInput;
    create: RoleMemberCreateInput;
    update: RoleMemberUpdateInput;
  }) => RoleMemberPromise;
  deleteRoleMember: (where: RoleMemberWhereUniqueInput) => RoleMemberPromise;
  deleteManyRoleMembers: (where?: RoleMemberWhereInput) => BatchPayloadPromise;
  createStd: (data: StdCreateInput) => StdPromise;
  updateStd: (args: {
    data: StdUpdateInput;
    where: StdWhereUniqueInput;
  }) => StdPromise;
  updateManyStds: (args: {
    data: StdUpdateManyMutationInput;
    where?: StdWhereInput;
  }) => BatchPayloadPromise;
  upsertStd: (args: {
    where: StdWhereUniqueInput;
    create: StdCreateInput;
    update: StdUpdateInput;
  }) => StdPromise;
  deleteStd: (where: StdWhereUniqueInput) => StdPromise;
  deleteManyStds: (where?: StdWhereInput) => BatchPayloadPromise;
  createSubGroup: (data: SubGroupCreateInput) => SubGroupPromise;
  updateSubGroup: (args: {
    data: SubGroupUpdateInput;
    where: SubGroupWhereUniqueInput;
  }) => SubGroupPromise;
  updateManySubGroups: (args: {
    data: SubGroupUpdateManyMutationInput;
    where?: SubGroupWhereInput;
  }) => BatchPayloadPromise;
  upsertSubGroup: (args: {
    where: SubGroupWhereUniqueInput;
    create: SubGroupCreateInput;
    update: SubGroupUpdateInput;
  }) => SubGroupPromise;
  deleteSubGroup: (where: SubGroupWhereUniqueInput) => SubGroupPromise;
  deleteManySubGroups: (where?: SubGroupWhereInput) => BatchPayloadPromise;
  createSubGroupMember: (
    data: SubGroupMemberCreateInput
  ) => SubGroupMemberPromise;
  updateSubGroupMember: (args: {
    data: SubGroupMemberUpdateInput;
    where: SubGroupMemberWhereUniqueInput;
  }) => SubGroupMemberPromise;
  updateManySubGroupMembers: (args: {
    data: SubGroupMemberUpdateManyMutationInput;
    where?: SubGroupMemberWhereInput;
  }) => BatchPayloadPromise;
  upsertSubGroupMember: (args: {
    where: SubGroupMemberWhereUniqueInput;
    create: SubGroupMemberCreateInput;
    update: SubGroupMemberUpdateInput;
  }) => SubGroupMemberPromise;
  deleteSubGroupMember: (
    where: SubGroupMemberWhereUniqueInput
  ) => SubGroupMemberPromise;
  deleteManySubGroupMembers: (
    where?: SubGroupMemberWhereInput
  ) => BatchPayloadPromise;
  createSubject: (data: SubjectCreateInput) => SubjectPromise;
  updateSubject: (args: {
    data: SubjectUpdateInput;
    where: SubjectWhereUniqueInput;
  }) => SubjectPromise;
  updateManySubjects: (args: {
    data: SubjectUpdateManyMutationInput;
    where?: SubjectWhereInput;
  }) => BatchPayloadPromise;
  upsertSubject: (args: {
    where: SubjectWhereUniqueInput;
    create: SubjectCreateInput;
    update: SubjectUpdateInput;
  }) => SubjectPromise;
  deleteSubject: (where: SubjectWhereUniqueInput) => SubjectPromise;
  deleteManySubjects: (where?: SubjectWhereInput) => BatchPayloadPromise;
  createSubjectSubscription: (
    data: SubjectSubscriptionCreateInput
  ) => SubjectSubscriptionPromise;
  updateSubjectSubscription: (args: {
    data: SubjectSubscriptionUpdateInput;
    where: SubjectSubscriptionWhereUniqueInput;
  }) => SubjectSubscriptionPromise;
  updateManySubjectSubscriptions: (args: {
    data: SubjectSubscriptionUpdateManyMutationInput;
    where?: SubjectSubscriptionWhereInput;
  }) => BatchPayloadPromise;
  upsertSubjectSubscription: (args: {
    where: SubjectSubscriptionWhereUniqueInput;
    create: SubjectSubscriptionCreateInput;
    update: SubjectSubscriptionUpdateInput;
  }) => SubjectSubscriptionPromise;
  deleteSubjectSubscription: (
    where: SubjectSubscriptionWhereUniqueInput
  ) => SubjectSubscriptionPromise;
  deleteManySubjectSubscriptions: (
    where?: SubjectSubscriptionWhereInput
  ) => BatchPayloadPromise;
  createSuborg: (data: SuborgCreateInput) => SuborgPromise;
  updateSuborg: (args: {
    data: SuborgUpdateInput;
    where: SuborgWhereUniqueInput;
  }) => SuborgPromise;
  updateManySuborgs: (args: {
    data: SuborgUpdateManyMutationInput;
    where?: SuborgWhereInput;
  }) => BatchPayloadPromise;
  upsertSuborg: (args: {
    where: SuborgWhereUniqueInput;
    create: SuborgCreateInput;
    update: SuborgUpdateInput;
  }) => SuborgPromise;
  deleteSuborg: (where: SuborgWhereUniqueInput) => SuborgPromise;
  deleteManySuborgs: (where?: SuborgWhereInput) => BatchPayloadPromise;
  createTopic: (data: TopicCreateInput) => TopicPromise;
  updateTopic: (args: {
    data: TopicUpdateInput;
    where: TopicWhereUniqueInput;
  }) => TopicPromise;
  updateManyTopics: (args: {
    data: TopicUpdateManyMutationInput;
    where?: TopicWhereInput;
  }) => BatchPayloadPromise;
  upsertTopic: (args: {
    where: TopicWhereUniqueInput;
    create: TopicCreateInput;
    update: TopicUpdateInput;
  }) => TopicPromise;
  deleteTopic: (where: TopicWhereUniqueInput) => TopicPromise;
  deleteManyTopics: (where?: TopicWhereInput) => BatchPayloadPromise;
  createUnit: (data: UnitCreateInput) => UnitPromise;
  updateUnit: (args: {
    data: UnitUpdateInput;
    where: UnitWhereUniqueInput;
  }) => UnitPromise;
  updateManyUnits: (args: {
    data: UnitUpdateManyMutationInput;
    where?: UnitWhereInput;
  }) => BatchPayloadPromise;
  upsertUnit: (args: {
    where: UnitWhereUniqueInput;
    create: UnitCreateInput;
    update: UnitUpdateInput;
  }) => UnitPromise;
  deleteUnit: (where: UnitWhereUniqueInput) => UnitPromise;
  deleteManyUnits: (where?: UnitWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVote: (data: VoteCreateInput) => VotePromise;
  updateVote: (args: {
    data: VoteUpdateInput;
    where: VoteWhereUniqueInput;
  }) => VotePromise;
  upsertVote: (args: {
    where: VoteWhereUniqueInput;
    create: VoteCreateInput;
    update: VoteUpdateInput;
  }) => VotePromise;
  deleteVote: (where: VoteWhereUniqueInput) => VotePromise;
  deleteManyVotes: (where?: VoteWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  address: (
    where?: AddressSubscriptionWhereInput
  ) => AddressSubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  content: (
    where?: ContentSubscriptionWhereInput
  ) => ContentSubscriptionPayloadSubscription;
  educationProfile: (
    where?: EducationProfileSubscriptionWhereInput
  ) => EducationProfileSubscriptionPayloadSubscription;
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  groupMember: (
    where?: GroupMemberSubscriptionWhereInput
  ) => GroupMemberSubscriptionPayloadSubscription;
  medium: (
    where?: MediumSubscriptionWhereInput
  ) => MediumSubscriptionPayloadSubscription;
  option: (
    where?: OptionSubscriptionWhereInput
  ) => OptionSubscriptionPayloadSubscription;
  organization: (
    where?: OrganizationSubscriptionWhereInput
  ) => OrganizationSubscriptionPayloadSubscription;
  personalProfile: (
    where?: PersonalProfileSubscriptionWhereInput
  ) => PersonalProfileSubscriptionPayloadSubscription;
  poll: (
    where?: PollSubscriptionWhereInput
  ) => PollSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  profile: (
    where?: ProfileSubscriptionWhereInput
  ) => ProfileSubscriptionPayloadSubscription;
  question: (
    where?: QuestionSubscriptionWhereInput
  ) => QuestionSubscriptionPayloadSubscription;
  quiz: (
    where?: QuizSubscriptionWhereInput
  ) => QuizSubscriptionPayloadSubscription;
  result: (
    where?: ResultSubscriptionWhereInput
  ) => ResultSubscriptionPayloadSubscription;
  role: (
    where?: RoleSubscriptionWhereInput
  ) => RoleSubscriptionPayloadSubscription;
  roleMember: (
    where?: RoleMemberSubscriptionWhereInput
  ) => RoleMemberSubscriptionPayloadSubscription;
  std: (
    where?: StdSubscriptionWhereInput
  ) => StdSubscriptionPayloadSubscription;
  subGroup: (
    where?: SubGroupSubscriptionWhereInput
  ) => SubGroupSubscriptionPayloadSubscription;
  subGroupMember: (
    where?: SubGroupMemberSubscriptionWhereInput
  ) => SubGroupMemberSubscriptionPayloadSubscription;
  subject: (
    where?: SubjectSubscriptionWhereInput
  ) => SubjectSubscriptionPayloadSubscription;
  subjectSubscription: (
    where?: SubjectSubscriptionSubscriptionWhereInput
  ) => SubjectSubscriptionSubscriptionPayloadSubscription;
  suborg: (
    where?: SuborgSubscriptionWhereInput
  ) => SuborgSubscriptionPayloadSubscription;
  topic: (
    where?: TopicSubscriptionWhereInput
  ) => TopicSubscriptionPayloadSubscription;
  unit: (
    where?: UnitSubscriptionWhereInput
  ) => UnitSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vote: (
    where?: VoteSubscriptionWhereInput
  ) => VoteSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MemberStatus =
  | "ACTIVE"
  | "EXPIRED"
  | "INACTIVE"
  | "DORMANT"
  | "RENEWED"
  | "SPECIALGRANT";

export type ROLENAME =
  | "SUPERADMIN"
  | "ORGADMIN"
  | "SUBORGADMIN"
  | "GROUPADMIN"
  | "SUBGROUPADMIN"
  | "PARENT"
  | "TEACHER"
  | "PRINCIPAL"
  | "TUTOR"
  | "CONTRIBUTOR"
  | "STUDENT"
  | "PLAYER"
  | "CAPTAIN"
  | "OWNER"
  | "SERVENT"
  | "SERVICE"
  | "LEAD"
  | "SOCIALWORKER"
  | "DONNER"
  | "COLLECTOR";

export type GRADENAME =
  | "LKG"
  | "UKG"
  | "I"
  | "II"
  | "III"
  | "IV"
  | "V"
  | "VI"
  | "VII"
  | "VIII"
  | "IX"
  | "X"
  | "XI"
  | "XII"
  | "UG"
  | "PG";

export type Color = "RED" | "BLLUE" | "GREEN";

export type AddressOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "adressline_ASC"
  | "adressline_DESC"
  | "tehsil_ASC"
  | "tehsil_DESC"
  | "city_ASC"
  | "city_DESC"
  | "district_ASC"
  | "district_DESC"
  | "state_ASC"
  | "state_DESC"
  | "pincode_ASC"
  | "pincode_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdBy_ASC"
  | "createdBy_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type SuborgOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type SubGroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type SubGroupMemberOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type RoleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "status_ASC"
  | "status_DESC"
  | "state_ASC"
  | "state_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type EducationProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "profiileType_ASC"
  | "profiileType_DESC"
  | "educationLevel_ASC"
  | "educationLevel_DESC"
  | "educationType_ASC"
  | "educationType_DESC"
  | "specialization_ASC"
  | "specialization_DESC"
  | "startedYear_ASC"
  | "startedYear_DESC"
  | "completedYear_ASC"
  | "completedYear_DESC"
  | "result_ASC"
  | "result_DESC"
  | "status_ASC"
  | "status_DESC"
  | "remark_ASC"
  | "remark_DESC";

export type SubjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "picture_ASC"
  | "picture_DESC"
  | "board_ASC"
  | "board_DESC"
  | "category_ASC"
  | "category_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "plantDate_ASC"
  | "plantDate_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "state_ASC"
  | "state_DESC"
  | "status_ASC"
  | "status_DESC"
  | "available_ASC"
  | "available_DESC"
  | "description_ASC"
  | "description_DESC";

export type UnitOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "plantDate_ASC"
  | "plantDate_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "state_ASC"
  | "state_DESC"
  | "status_ASC"
  | "status_DESC"
  | "available_ASC"
  | "available_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type TopicOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "plantDate_ASC"
  | "plantDate_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "state_ASC"
  | "state_DESC"
  | "status_ASC"
  | "status_DESC"
  | "available_ASC"
  | "available_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ContentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "number_ASC"
  | "number_DESC"
  | "fileInfo_ASC"
  | "fileInfo_DESC"
  | "type_ASC"
  | "type_DESC"
  | "url_ASC"
  | "url_DESC"
  | "plantDate_ASC"
  | "plantDate_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "state_ASC"
  | "state_DESC"
  | "status_ASC"
  | "status_DESC"
  | "available_ASC"
  | "available_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type QuestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "quetype_ASC"
  | "quetype_DESC"
  | "categories_ASC"
  | "categories_DESC"
  | "title_ASC"
  | "title_DESC"
  | "descriptionType_ASC"
  | "descriptionType_DESC"
  | "descriptionurl_ASC"
  | "descriptionurl_DESC"
  | "options_ASC"
  | "options_DESC"
  | "level_ASC"
  | "level_DESC"
  | "plandate_ASC"
  | "plandate_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "state_ASC"
  | "state_DESC"
  | "status_ASC"
  | "status_DESC"
  | "available_ASC"
  | "available_DESC"
  | "isReviewed_ASC"
  | "isReviewed_DESC"
  | "explainationType_ASC"
  | "explainationType_DESC"
  | "explaination_ASC"
  | "explaination_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type QuizOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "quizName_ASC"
  | "quizName_DESC"
  | "quizType_ASC"
  | "quizType_DESC"
  | "markingscheme_ASC"
  | "markingscheme_DESC"
  | "quizlevel_ASC"
  | "quizlevel_DESC"
  | "threshold_ASC"
  | "threshold_DESC"
  | "isForLevelPromotion_ASC"
  | "isForLevelPromotion_DESC"
  | "showExplaination_ASC"
  | "showExplaination_DESC"
  | "showanswer_ASC"
  | "showanswer_DESC"
  | "description_ASC"
  | "description_DESC"
  | "allowedCorrection_ASC"
  | "allowedCorrection_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "commentFromTeacher_ASC"
  | "commentFromTeacher_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "isApproved_ASC"
  | "isApproved_DESC"
  | "weightage_ASC"
  | "weightage_DESC"
  | "totalmarks_ASC"
  | "totalmarks_DESC"
  | "validFrom_ASC"
  | "validFrom_DESC"
  | "validTo_ASC"
  | "validTo_DESC"
  | "retryAllowed_ASC"
  | "retryAllowed_DESC";

export type ResultOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "quizName_ASC"
  | "quizName_DESC"
  | "quizType_ASC"
  | "quizType_DESC"
  | "result_ASC"
  | "result_DESC"
  | "quizlevel_ASC"
  | "quizlevel_DESC"
  | "score_ASC"
  | "score_DESC"
  | "achievement_ASC"
  | "achievement_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "attemptedDate_ASC"
  | "attemptedDate_DESC"
  | "commentFromTeacher_ASC"
  | "commentFromTeacher_DESC"
  | "rank_ASC"
  | "rank_DESC";

export type StdOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "gradename_ASC"
  | "gradename_DESC"
  | "category_ASC"
  | "category_DESC"
  | "branch_ASC"
  | "branch_DESC"
  | "year_ASC"
  | "year_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type SubjectSubscriptionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "subsType_ASC"
  | "subsType_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type GroupMemberOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "body_ASC"
  | "body_DESC"
  | "published_ASC"
  | "published_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type VoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OptionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "color_ASC"
  | "color_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PersonalProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "mobile_ASC"
  | "mobile_DESC"
  | "isMobilePublished_ASC"
  | "isMobilePublished_DESC";

export type MediumOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type OrganizationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "logo_ASC"
  | "logo_DESC"
  | "color_ASC"
  | "color_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type PollOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RoleStatus =
  | "ACTIVE"
  | "EXPIRED"
  | "INACTIVE"
  | "DORMANT"
  | "RENEWED"
  | "SPECIALGRANT";

export type RoleMemberOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AddressWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AddressWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  adressline?: Maybe<String>;
  adressline_not?: Maybe<String>;
  adressline_in?: Maybe<String[] | String>;
  adressline_not_in?: Maybe<String[] | String>;
  adressline_lt?: Maybe<String>;
  adressline_lte?: Maybe<String>;
  adressline_gt?: Maybe<String>;
  adressline_gte?: Maybe<String>;
  adressline_contains?: Maybe<String>;
  adressline_not_contains?: Maybe<String>;
  adressline_starts_with?: Maybe<String>;
  adressline_not_starts_with?: Maybe<String>;
  adressline_ends_with?: Maybe<String>;
  adressline_not_ends_with?: Maybe<String>;
  tehsil?: Maybe<String>;
  tehsil_not?: Maybe<String>;
  tehsil_in?: Maybe<String[] | String>;
  tehsil_not_in?: Maybe<String[] | String>;
  tehsil_lt?: Maybe<String>;
  tehsil_lte?: Maybe<String>;
  tehsil_gt?: Maybe<String>;
  tehsil_gte?: Maybe<String>;
  tehsil_contains?: Maybe<String>;
  tehsil_not_contains?: Maybe<String>;
  tehsil_starts_with?: Maybe<String>;
  tehsil_not_starts_with?: Maybe<String>;
  tehsil_ends_with?: Maybe<String>;
  tehsil_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  district?: Maybe<String>;
  district_not?: Maybe<String>;
  district_in?: Maybe<String[] | String>;
  district_not_in?: Maybe<String[] | String>;
  district_lt?: Maybe<String>;
  district_lte?: Maybe<String>;
  district_gt?: Maybe<String>;
  district_gte?: Maybe<String>;
  district_contains?: Maybe<String>;
  district_not_contains?: Maybe<String>;
  district_starts_with?: Maybe<String>;
  district_not_starts_with?: Maybe<String>;
  district_ends_with?: Maybe<String>;
  district_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  pincode?: Maybe<String>;
  pincode_not?: Maybe<String>;
  pincode_in?: Maybe<String[] | String>;
  pincode_not_in?: Maybe<String[] | String>;
  pincode_lt?: Maybe<String>;
  pincode_lte?: Maybe<String>;
  pincode_gt?: Maybe<String>;
  pincode_gte?: Maybe<String>;
  pincode_contains?: Maybe<String>;
  pincode_not_contains?: Maybe<String>;
  pincode_starts_with?: Maybe<String>;
  pincode_not_starts_with?: Maybe<String>;
  pincode_ends_with?: Maybe<String>;
  pincode_not_ends_with?: Maybe<String>;
  personalProfile?: Maybe<PersonalProfileWhereInput>;
  AND?: Maybe<AddressWhereInput[] | AddressWhereInput>;
  OR?: Maybe<AddressWhereInput[] | AddressWhereInput>;
  NOT?: Maybe<AddressWhereInput[] | AddressWhereInput>;
}

export interface PersonalProfileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  mobile?: Maybe<String>;
  mobile_not?: Maybe<String>;
  mobile_in?: Maybe<String[] | String>;
  mobile_not_in?: Maybe<String[] | String>;
  mobile_lt?: Maybe<String>;
  mobile_lte?: Maybe<String>;
  mobile_gt?: Maybe<String>;
  mobile_gte?: Maybe<String>;
  mobile_contains?: Maybe<String>;
  mobile_not_contains?: Maybe<String>;
  mobile_starts_with?: Maybe<String>;
  mobile_not_starts_with?: Maybe<String>;
  mobile_ends_with?: Maybe<String>;
  mobile_not_ends_with?: Maybe<String>;
  isMobilePublished?: Maybe<Boolean>;
  isMobilePublished_not?: Maybe<Boolean>;
  addresses_every?: Maybe<AddressWhereInput>;
  addresses_some?: Maybe<AddressWhereInput>;
  addresses_none?: Maybe<AddressWhereInput>;
  profileId?: Maybe<ProfileWhereInput>;
  AND?: Maybe<PersonalProfileWhereInput[] | PersonalProfileWhereInput>;
  OR?: Maybe<PersonalProfileWhereInput[] | PersonalProfileWhereInput>;
  NOT?: Maybe<PersonalProfileWhereInput[] | PersonalProfileWhereInput>;
}

export interface ProfileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  userId?: Maybe<UserWhereInput>;
  EducationProfiles_every?: Maybe<EducationProfileWhereInput>;
  EducationProfiles_some?: Maybe<EducationProfileWhereInput>;
  EducationProfiles_none?: Maybe<EducationProfileWhereInput>;
  personalProfiile_every?: Maybe<PersonalProfileWhereInput>;
  personalProfiile_some?: Maybe<PersonalProfileWhereInput>;
  personalProfiile_none?: Maybe<PersonalProfileWhereInput>;
  AND?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
  OR?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
  NOT?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  org?: Maybe<OrganizationWhereInput>;
  suborg_every?: Maybe<SuborgWhereInput>;
  suborg_some?: Maybe<SuborgWhereInput>;
  suborg_none?: Maybe<SuborgWhereInput>;
  groupmembers_every?: Maybe<GroupMemberWhereInput>;
  groupmembers_some?: Maybe<GroupMemberWhereInput>;
  groupmembers_none?: Maybe<GroupMemberWhereInput>;
  subgroupmembers_every?: Maybe<SubGroupMemberWhereInput>;
  subgroupmembers_some?: Maybe<SubGroupMemberWhereInput>;
  subgroupmembers_none?: Maybe<SubGroupMemberWhereInput>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  roles_every?: Maybe<RoleWhereInput>;
  roles_some?: Maybe<RoleWhereInput>;
  roles_none?: Maybe<RoleWhereInput>;
  myprofiles_every?: Maybe<ProfileWhereInput>;
  myprofiles_some?: Maybe<ProfileWhereInput>;
  myprofiles_none?: Maybe<ProfileWhereInput>;
  subjectSubscription_every?: Maybe<SubjectSubscriptionWhereInput>;
  subjectSubscription_some?: Maybe<SubjectSubscriptionWhereInput>;
  subjectSubscription_none?: Maybe<SubjectSubscriptionWhereInput>;
  createdBy?: Maybe<String>;
  createdBy_not?: Maybe<String>;
  createdBy_in?: Maybe<String[] | String>;
  createdBy_not_in?: Maybe<String[] | String>;
  createdBy_lt?: Maybe<String>;
  createdBy_lte?: Maybe<String>;
  createdBy_gt?: Maybe<String>;
  createdBy_gte?: Maybe<String>;
  createdBy_contains?: Maybe<String>;
  createdBy_not_contains?: Maybe<String>;
  createdBy_starts_with?: Maybe<String>;
  createdBy_not_starts_with?: Maybe<String>;
  createdBy_ends_with?: Maybe<String>;
  createdBy_not_ends_with?: Maybe<String>;
  subjectByMe_every?: Maybe<SubjectWhereInput>;
  subjectByMe_some?: Maybe<SubjectWhereInput>;
  subjectByMe_none?: Maybe<SubjectWhereInput>;
  subjectUpddateByMe_every?: Maybe<SubjectWhereInput>;
  subjectUpddateByMe_some?: Maybe<SubjectWhereInput>;
  subjectUpddateByMe_none?: Maybe<SubjectWhereInput>;
  unitByMe_every?: Maybe<UnitWhereInput>;
  unitByMe_some?: Maybe<UnitWhereInput>;
  unitByMe_none?: Maybe<UnitWhereInput>;
  unitUpdatedByMe_every?: Maybe<UnitWhereInput>;
  unitUpdatedByMe_some?: Maybe<UnitWhereInput>;
  unitUpdatedByMe_none?: Maybe<UnitWhereInput>;
  topicByMe_every?: Maybe<TopicWhereInput>;
  topicByMe_some?: Maybe<TopicWhereInput>;
  topicByMe_none?: Maybe<TopicWhereInput>;
  topicUpdateByMe_every?: Maybe<TopicWhereInput>;
  topicUpdateByMe_some?: Maybe<TopicWhereInput>;
  topicUpdateByMe_none?: Maybe<TopicWhereInput>;
  contentByMe_every?: Maybe<ContentWhereInput>;
  contentByMe_some?: Maybe<ContentWhereInput>;
  contentByMe_none?: Maybe<ContentWhereInput>;
  contentUpdateByMe_every?: Maybe<ContentWhereInput>;
  contentUpdateByMe_some?: Maybe<ContentWhereInput>;
  contentUpdateByMe_none?: Maybe<ContentWhereInput>;
  questionCreatedBy_every?: Maybe<QuestionWhereInput>;
  questionCreatedBy_some?: Maybe<QuestionWhereInput>;
  questionCreatedBy_none?: Maybe<QuestionWhereInput>;
  questionUpdateddBy_every?: Maybe<QuestionWhereInput>;
  questionUpdateddBy_some?: Maybe<QuestionWhereInput>;
  questionUpdateddBy_none?: Maybe<QuestionWhereInput>;
  quizCreatedBy_every?: Maybe<QuizWhereInput>;
  quizCreatedBy_some?: Maybe<QuizWhereInput>;
  quizCreatedBy_none?: Maybe<QuizWhereInput>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  result_every?: Maybe<ResultWhereInput>;
  result_some?: Maybe<ResultWhereInput>;
  result_none?: Maybe<ResultWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface OrganizationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  logo?: Maybe<String>;
  logo_not?: Maybe<String>;
  logo_in?: Maybe<String[] | String>;
  logo_not_in?: Maybe<String[] | String>;
  logo_lt?: Maybe<String>;
  logo_lte?: Maybe<String>;
  logo_gt?: Maybe<String>;
  logo_gte?: Maybe<String>;
  logo_contains?: Maybe<String>;
  logo_not_contains?: Maybe<String>;
  logo_starts_with?: Maybe<String>;
  logo_not_starts_with?: Maybe<String>;
  logo_ends_with?: Maybe<String>;
  logo_not_ends_with?: Maybe<String>;
  color?: Maybe<String>;
  color_not?: Maybe<String>;
  color_in?: Maybe<String[] | String>;
  color_not_in?: Maybe<String[] | String>;
  color_lt?: Maybe<String>;
  color_lte?: Maybe<String>;
  color_gt?: Maybe<String>;
  color_gte?: Maybe<String>;
  color_contains?: Maybe<String>;
  color_not_contains?: Maybe<String>;
  color_starts_with?: Maybe<String>;
  color_not_starts_with?: Maybe<String>;
  color_ends_with?: Maybe<String>;
  color_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  author_every?: Maybe<UserWhereInput>;
  author_some?: Maybe<UserWhereInput>;
  author_none?: Maybe<UserWhereInput>;
  suborgs_every?: Maybe<SuborgWhereInput>;
  suborgs_some?: Maybe<SuborgWhereInput>;
  suborgs_none?: Maybe<SuborgWhereInput>;
  orgRoles_every?: Maybe<RoleWhereInput>;
  orgRoles_some?: Maybe<RoleWhereInput>;
  orgRoles_none?: Maybe<RoleWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
  OR?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
  NOT?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
}

export interface SuborgWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  author_every?: Maybe<UserWhereInput>;
  author_some?: Maybe<UserWhereInput>;
  author_none?: Maybe<UserWhereInput>;
  org?: Maybe<OrganizationWhereInput>;
  userGroups_every?: Maybe<GroupWhereInput>;
  userGroups_some?: Maybe<GroupWhereInput>;
  userGroups_none?: Maybe<GroupWhereInput>;
  suborgRoles_every?: Maybe<RoleWhereInput>;
  suborgRoles_some?: Maybe<RoleWhereInput>;
  suborgRoles_none?: Maybe<RoleWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SuborgWhereInput[] | SuborgWhereInput>;
  OR?: Maybe<SuborgWhereInput[] | SuborgWhereInput>;
  NOT?: Maybe<SuborgWhereInput[] | SuborgWhereInput>;
}

export interface GroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  suborgid?: Maybe<SuborgWhereInput>;
  subgroups_every?: Maybe<SubGroupWhereInput>;
  subgroups_some?: Maybe<SubGroupWhereInput>;
  subgroups_none?: Maybe<SubGroupWhereInput>;
  members_every?: Maybe<GroupMemberWhereInput>;
  members_some?: Maybe<GroupMemberWhereInput>;
  members_none?: Maybe<GroupMemberWhereInput>;
  groupRoles_every?: Maybe<RoleWhereInput>;
  groupRoles_some?: Maybe<RoleWhereInput>;
  groupRoles_none?: Maybe<RoleWhereInput>;
  subjects_every?: Maybe<SubjectWhereInput>;
  subjects_some?: Maybe<SubjectWhereInput>;
  subjects_none?: Maybe<SubjectWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  OR?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  NOT?: Maybe<GroupWhereInput[] | GroupWhereInput>;
}

export interface SubGroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  groupid?: Maybe<GroupWhereInput>;
  members_every?: Maybe<SubGroupMemberWhereInput>;
  members_some?: Maybe<SubGroupMemberWhereInput>;
  members_none?: Maybe<SubGroupMemberWhereInput>;
  subgroupRoles_every?: Maybe<RoleWhereInput>;
  subgroupRoles_some?: Maybe<RoleWhereInput>;
  subgroupRoles_none?: Maybe<RoleWhereInput>;
  subjects_every?: Maybe<SubjectWhereInput>;
  subjects_some?: Maybe<SubjectWhereInput>;
  subjects_none?: Maybe<SubjectWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SubGroupWhereInput[] | SubGroupWhereInput>;
  OR?: Maybe<SubGroupWhereInput[] | SubGroupWhereInput>;
  NOT?: Maybe<SubGroupWhereInput[] | SubGroupWhereInput>;
}

export interface SubGroupMemberWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userid?: Maybe<UserWhereInput>;
  member?: Maybe<SubGroupWhereInput>;
  status?: Maybe<MemberStatus>;
  status_not?: Maybe<MemberStatus>;
  status_in?: Maybe<MemberStatus[] | MemberStatus>;
  status_not_in?: Maybe<MemberStatus[] | MemberStatus>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SubGroupMemberWhereInput[] | SubGroupMemberWhereInput>;
  OR?: Maybe<SubGroupMemberWhereInput[] | SubGroupMemberWhereInput>;
  NOT?: Maybe<SubGroupMemberWhereInput[] | SubGroupMemberWhereInput>;
}

export interface RoleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<ROLENAME>;
  name_not?: Maybe<ROLENAME>;
  name_in?: Maybe<ROLENAME[] | ROLENAME>;
  name_not_in?: Maybe<ROLENAME[] | ROLENAME>;
  org?: Maybe<OrganizationWhereInput>;
  suborg?: Maybe<SuborgWhereInput>;
  group?: Maybe<GroupWhereInput>;
  subgroup?: Maybe<SubGroupWhereInput>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  educationprofiles_every?: Maybe<EducationProfileWhereInput>;
  educationprofiles_some?: Maybe<EducationProfileWhereInput>;
  educationprofiles_none?: Maybe<EducationProfileWhereInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  subjectSubscriptions_every?: Maybe<SubjectSubscriptionWhereInput>;
  subjectSubscriptions_some?: Maybe<SubjectSubscriptionWhereInput>;
  subjectSubscriptions_none?: Maybe<SubjectSubscriptionWhereInput>;
  AND?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  OR?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  NOT?: Maybe<RoleWhereInput[] | RoleWhereInput>;
}

export interface EducationProfileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  profiileType?: Maybe<String>;
  profiileType_not?: Maybe<String>;
  profiileType_in?: Maybe<String[] | String>;
  profiileType_not_in?: Maybe<String[] | String>;
  profiileType_lt?: Maybe<String>;
  profiileType_lte?: Maybe<String>;
  profiileType_gt?: Maybe<String>;
  profiileType_gte?: Maybe<String>;
  profiileType_contains?: Maybe<String>;
  profiileType_not_contains?: Maybe<String>;
  profiileType_starts_with?: Maybe<String>;
  profiileType_not_starts_with?: Maybe<String>;
  profiileType_ends_with?: Maybe<String>;
  profiileType_not_ends_with?: Maybe<String>;
  educationLevel?: Maybe<String>;
  educationLevel_not?: Maybe<String>;
  educationLevel_in?: Maybe<String[] | String>;
  educationLevel_not_in?: Maybe<String[] | String>;
  educationLevel_lt?: Maybe<String>;
  educationLevel_lte?: Maybe<String>;
  educationLevel_gt?: Maybe<String>;
  educationLevel_gte?: Maybe<String>;
  educationLevel_contains?: Maybe<String>;
  educationLevel_not_contains?: Maybe<String>;
  educationLevel_starts_with?: Maybe<String>;
  educationLevel_not_starts_with?: Maybe<String>;
  educationLevel_ends_with?: Maybe<String>;
  educationLevel_not_ends_with?: Maybe<String>;
  educationType?: Maybe<String>;
  educationType_not?: Maybe<String>;
  educationType_in?: Maybe<String[] | String>;
  educationType_not_in?: Maybe<String[] | String>;
  educationType_lt?: Maybe<String>;
  educationType_lte?: Maybe<String>;
  educationType_gt?: Maybe<String>;
  educationType_gte?: Maybe<String>;
  educationType_contains?: Maybe<String>;
  educationType_not_contains?: Maybe<String>;
  educationType_starts_with?: Maybe<String>;
  educationType_not_starts_with?: Maybe<String>;
  educationType_ends_with?: Maybe<String>;
  educationType_not_ends_with?: Maybe<String>;
  specialization?: Maybe<String>;
  specialization_not?: Maybe<String>;
  specialization_in?: Maybe<String[] | String>;
  specialization_not_in?: Maybe<String[] | String>;
  specialization_lt?: Maybe<String>;
  specialization_lte?: Maybe<String>;
  specialization_gt?: Maybe<String>;
  specialization_gte?: Maybe<String>;
  specialization_contains?: Maybe<String>;
  specialization_not_contains?: Maybe<String>;
  specialization_starts_with?: Maybe<String>;
  specialization_not_starts_with?: Maybe<String>;
  specialization_ends_with?: Maybe<String>;
  specialization_not_ends_with?: Maybe<String>;
  roles_every?: Maybe<RoleWhereInput>;
  roles_some?: Maybe<RoleWhereInput>;
  roles_none?: Maybe<RoleWhereInput>;
  subjects_every?: Maybe<SubjectWhereInput>;
  subjects_some?: Maybe<SubjectWhereInput>;
  subjects_none?: Maybe<SubjectWhereInput>;
  std_every?: Maybe<StdWhereInput>;
  std_some?: Maybe<StdWhereInput>;
  std_none?: Maybe<StdWhereInput>;
  startedYear?: Maybe<DateTimeInput>;
  startedYear_not?: Maybe<DateTimeInput>;
  startedYear_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startedYear_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startedYear_lt?: Maybe<DateTimeInput>;
  startedYear_lte?: Maybe<DateTimeInput>;
  startedYear_gt?: Maybe<DateTimeInput>;
  startedYear_gte?: Maybe<DateTimeInput>;
  completedYear?: Maybe<DateTimeInput>;
  completedYear_not?: Maybe<DateTimeInput>;
  completedYear_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  completedYear_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  completedYear_lt?: Maybe<DateTimeInput>;
  completedYear_lte?: Maybe<DateTimeInput>;
  completedYear_gt?: Maybe<DateTimeInput>;
  completedYear_gte?: Maybe<DateTimeInput>;
  result?: Maybe<String>;
  result_not?: Maybe<String>;
  result_in?: Maybe<String[] | String>;
  result_not_in?: Maybe<String[] | String>;
  result_lt?: Maybe<String>;
  result_lte?: Maybe<String>;
  result_gt?: Maybe<String>;
  result_gte?: Maybe<String>;
  result_contains?: Maybe<String>;
  result_not_contains?: Maybe<String>;
  result_starts_with?: Maybe<String>;
  result_not_starts_with?: Maybe<String>;
  result_ends_with?: Maybe<String>;
  result_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  remark?: Maybe<String>;
  remark_not?: Maybe<String>;
  remark_in?: Maybe<String[] | String>;
  remark_not_in?: Maybe<String[] | String>;
  remark_lt?: Maybe<String>;
  remark_lte?: Maybe<String>;
  remark_gt?: Maybe<String>;
  remark_gte?: Maybe<String>;
  remark_contains?: Maybe<String>;
  remark_not_contains?: Maybe<String>;
  remark_starts_with?: Maybe<String>;
  remark_not_starts_with?: Maybe<String>;
  remark_ends_with?: Maybe<String>;
  remark_not_ends_with?: Maybe<String>;
  profileId?: Maybe<ProfileWhereInput>;
  AND?: Maybe<EducationProfileWhereInput[] | EducationProfileWhereInput>;
  OR?: Maybe<EducationProfileWhereInput[] | EducationProfileWhereInput>;
  NOT?: Maybe<EducationProfileWhereInput[] | EducationProfileWhereInput>;
}

export interface SubjectWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  picture?: Maybe<String>;
  picture_not?: Maybe<String>;
  picture_in?: Maybe<String[] | String>;
  picture_not_in?: Maybe<String[] | String>;
  picture_lt?: Maybe<String>;
  picture_lte?: Maybe<String>;
  picture_gt?: Maybe<String>;
  picture_gte?: Maybe<String>;
  picture_contains?: Maybe<String>;
  picture_not_contains?: Maybe<String>;
  picture_starts_with?: Maybe<String>;
  picture_not_starts_with?: Maybe<String>;
  picture_ends_with?: Maybe<String>;
  picture_not_ends_with?: Maybe<String>;
  medium?: Maybe<MediumWhereInput>;
  std?: Maybe<StdWhereInput>;
  board?: Maybe<String>;
  board_not?: Maybe<String>;
  board_in?: Maybe<String[] | String>;
  board_not_in?: Maybe<String[] | String>;
  board_lt?: Maybe<String>;
  board_lte?: Maybe<String>;
  board_gt?: Maybe<String>;
  board_gte?: Maybe<String>;
  board_contains?: Maybe<String>;
  board_not_contains?: Maybe<String>;
  board_starts_with?: Maybe<String>;
  board_not_starts_with?: Maybe<String>;
  board_ends_with?: Maybe<String>;
  board_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  group?: Maybe<GroupWhereInput>;
  subgroup?: Maybe<SubGroupWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  educationProfiles_every?: Maybe<EducationProfileWhereInput>;
  educationProfiles_some?: Maybe<EducationProfileWhereInput>;
  educationProfiles_none?: Maybe<EducationProfileWhereInput>;
  units_every?: Maybe<UnitWhereInput>;
  units_some?: Maybe<UnitWhereInput>;
  units_none?: Maybe<UnitWhereInput>;
  topic_every?: Maybe<TopicWhereInput>;
  topic_some?: Maybe<TopicWhereInput>;
  topic_none?: Maybe<TopicWhereInput>;
  contents_every?: Maybe<ContentWhereInput>;
  contents_some?: Maybe<ContentWhereInput>;
  contents_none?: Maybe<ContentWhereInput>;
  createdBy?: Maybe<UserWhereInput>;
  updateBy_every?: Maybe<UserWhereInput>;
  updateBy_some?: Maybe<UserWhereInput>;
  updateBy_none?: Maybe<UserWhereInput>;
  plantDate?: Maybe<DateTimeInput>;
  plantDate_not?: Maybe<DateTimeInput>;
  plantDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plantDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plantDate_lt?: Maybe<DateTimeInput>;
  plantDate_lte?: Maybe<DateTimeInput>;
  plantDate_gt?: Maybe<DateTimeInput>;
  plantDate_gte?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  available?: Maybe<String>;
  available_not?: Maybe<String>;
  available_in?: Maybe<String[] | String>;
  available_not_in?: Maybe<String[] | String>;
  available_lt?: Maybe<String>;
  available_lte?: Maybe<String>;
  available_gt?: Maybe<String>;
  available_gte?: Maybe<String>;
  available_contains?: Maybe<String>;
  available_not_contains?: Maybe<String>;
  available_starts_with?: Maybe<String>;
  available_not_starts_with?: Maybe<String>;
  available_ends_with?: Maybe<String>;
  available_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  questions_every?: Maybe<QuestionWhereInput>;
  questions_some?: Maybe<QuestionWhereInput>;
  questions_none?: Maybe<QuestionWhereInput>;
  quizes_every?: Maybe<QuizWhereInput>;
  quizes_some?: Maybe<QuizWhereInput>;
  quizes_none?: Maybe<QuizWhereInput>;
  AND?: Maybe<SubjectWhereInput[] | SubjectWhereInput>;
  OR?: Maybe<SubjectWhereInput[] | SubjectWhereInput>;
  NOT?: Maybe<SubjectWhereInput[] | SubjectWhereInput>;
}

export interface MediumWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  subjects_every?: Maybe<SubjectWhereInput>;
  subjects_some?: Maybe<SubjectWhereInput>;
  subjects_none?: Maybe<SubjectWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MediumWhereInput[] | MediumWhereInput>;
  OR?: Maybe<MediumWhereInput[] | MediumWhereInput>;
  NOT?: Maybe<MediumWhereInput[] | MediumWhereInput>;
}

export interface StdWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  gradename?: Maybe<GRADENAME>;
  gradename_not?: Maybe<GRADENAME>;
  gradename_in?: Maybe<GRADENAME[] | GRADENAME>;
  gradename_not_in?: Maybe<GRADENAME[] | GRADENAME>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  branch?: Maybe<String>;
  branch_not?: Maybe<String>;
  branch_in?: Maybe<String[] | String>;
  branch_not_in?: Maybe<String[] | String>;
  branch_lt?: Maybe<String>;
  branch_lte?: Maybe<String>;
  branch_gt?: Maybe<String>;
  branch_gte?: Maybe<String>;
  branch_contains?: Maybe<String>;
  branch_not_contains?: Maybe<String>;
  branch_starts_with?: Maybe<String>;
  branch_not_starts_with?: Maybe<String>;
  branch_ends_with?: Maybe<String>;
  branch_not_ends_with?: Maybe<String>;
  year?: Maybe<String>;
  year_not?: Maybe<String>;
  year_in?: Maybe<String[] | String>;
  year_not_in?: Maybe<String[] | String>;
  year_lt?: Maybe<String>;
  year_lte?: Maybe<String>;
  year_gt?: Maybe<String>;
  year_gte?: Maybe<String>;
  year_contains?: Maybe<String>;
  year_not_contains?: Maybe<String>;
  year_starts_with?: Maybe<String>;
  year_not_starts_with?: Maybe<String>;
  year_ends_with?: Maybe<String>;
  year_not_ends_with?: Maybe<String>;
  educationprofiles_every?: Maybe<EducationProfileWhereInput>;
  educationprofiles_some?: Maybe<EducationProfileWhereInput>;
  educationprofiles_none?: Maybe<EducationProfileWhereInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  subjects_every?: Maybe<SubjectWhereInput>;
  subjects_some?: Maybe<SubjectWhereInput>;
  subjects_none?: Maybe<SubjectWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<StdWhereInput[] | StdWhereInput>;
  OR?: Maybe<StdWhereInput[] | StdWhereInput>;
  NOT?: Maybe<StdWhereInput[] | StdWhereInput>;
}

export interface UnitWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  subject?: Maybe<SubjectWhereInput>;
  topics_every?: Maybe<TopicWhereInput>;
  topics_some?: Maybe<TopicWhereInput>;
  topics_none?: Maybe<TopicWhereInput>;
  contents_every?: Maybe<ContentWhereInput>;
  contents_some?: Maybe<ContentWhereInput>;
  contents_none?: Maybe<ContentWhereInput>;
  createdBy?: Maybe<UserWhereInput>;
  updateBy_every?: Maybe<UserWhereInput>;
  updateBy_some?: Maybe<UserWhereInput>;
  updateBy_none?: Maybe<UserWhereInput>;
  plantDate?: Maybe<DateTimeInput>;
  plantDate_not?: Maybe<DateTimeInput>;
  plantDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plantDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plantDate_lt?: Maybe<DateTimeInput>;
  plantDate_lte?: Maybe<DateTimeInput>;
  plantDate_gt?: Maybe<DateTimeInput>;
  plantDate_gte?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  available?: Maybe<String>;
  available_not?: Maybe<String>;
  available_in?: Maybe<String[] | String>;
  available_not_in?: Maybe<String[] | String>;
  available_lt?: Maybe<String>;
  available_lte?: Maybe<String>;
  available_gt?: Maybe<String>;
  available_gte?: Maybe<String>;
  available_contains?: Maybe<String>;
  available_not_contains?: Maybe<String>;
  available_starts_with?: Maybe<String>;
  available_not_starts_with?: Maybe<String>;
  available_ends_with?: Maybe<String>;
  available_not_ends_with?: Maybe<String>;
  questions_every?: Maybe<QuestionWhereInput>;
  questions_some?: Maybe<QuestionWhereInput>;
  questions_none?: Maybe<QuestionWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  quizs_every?: Maybe<QuizWhereInput>;
  quizs_some?: Maybe<QuizWhereInput>;
  quizs_none?: Maybe<QuizWhereInput>;
  AND?: Maybe<UnitWhereInput[] | UnitWhereInput>;
  OR?: Maybe<UnitWhereInput[] | UnitWhereInput>;
  NOT?: Maybe<UnitWhereInput[] | UnitWhereInput>;
}

export interface TopicWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  subject?: Maybe<SubjectWhereInput>;
  unit?: Maybe<UnitWhereInput>;
  contents_every?: Maybe<ContentWhereInput>;
  contents_some?: Maybe<ContentWhereInput>;
  contents_none?: Maybe<ContentWhereInput>;
  createdBy?: Maybe<UserWhereInput>;
  updateBy?: Maybe<UserWhereInput>;
  plantDate?: Maybe<DateTimeInput>;
  plantDate_not?: Maybe<DateTimeInput>;
  plantDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plantDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plantDate_lt?: Maybe<DateTimeInput>;
  plantDate_lte?: Maybe<DateTimeInput>;
  plantDate_gt?: Maybe<DateTimeInput>;
  plantDate_gte?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  available?: Maybe<String>;
  available_not?: Maybe<String>;
  available_in?: Maybe<String[] | String>;
  available_not_in?: Maybe<String[] | String>;
  available_lt?: Maybe<String>;
  available_lte?: Maybe<String>;
  available_gt?: Maybe<String>;
  available_gte?: Maybe<String>;
  available_contains?: Maybe<String>;
  available_not_contains?: Maybe<String>;
  available_starts_with?: Maybe<String>;
  available_not_starts_with?: Maybe<String>;
  available_ends_with?: Maybe<String>;
  available_not_ends_with?: Maybe<String>;
  questions_every?: Maybe<QuestionWhereInput>;
  questions_some?: Maybe<QuestionWhereInput>;
  questions_none?: Maybe<QuestionWhereInput>;
  quizs_every?: Maybe<QuizWhereInput>;
  quizs_some?: Maybe<QuizWhereInput>;
  quizs_none?: Maybe<QuizWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TopicWhereInput[] | TopicWhereInput>;
  OR?: Maybe<TopicWhereInput[] | TopicWhereInput>;
  NOT?: Maybe<TopicWhereInput[] | TopicWhereInput>;
}

export interface ContentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  subject?: Maybe<SubjectWhereInput>;
  unit?: Maybe<UnitWhereInput>;
  topic?: Maybe<TopicWhereInput>;
  createdBy?: Maybe<UserWhereInput>;
  updateBy_every?: Maybe<UserWhereInput>;
  updateBy_some?: Maybe<UserWhereInput>;
  updateBy_none?: Maybe<UserWhereInput>;
  plantDate?: Maybe<DateTimeInput>;
  plantDate_not?: Maybe<DateTimeInput>;
  plantDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plantDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plantDate_lt?: Maybe<DateTimeInput>;
  plantDate_lte?: Maybe<DateTimeInput>;
  plantDate_gt?: Maybe<DateTimeInput>;
  plantDate_gte?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  available?: Maybe<String>;
  available_not?: Maybe<String>;
  available_in?: Maybe<String[] | String>;
  available_not_in?: Maybe<String[] | String>;
  available_lt?: Maybe<String>;
  available_lte?: Maybe<String>;
  available_gt?: Maybe<String>;
  available_gte?: Maybe<String>;
  available_contains?: Maybe<String>;
  available_not_contains?: Maybe<String>;
  available_starts_with?: Maybe<String>;
  available_not_starts_with?: Maybe<String>;
  available_ends_with?: Maybe<String>;
  available_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ContentWhereInput[] | ContentWhereInput>;
  OR?: Maybe<ContentWhereInput[] | ContentWhereInput>;
  NOT?: Maybe<ContentWhereInput[] | ContentWhereInput>;
}

export interface QuestionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  subject?: Maybe<SubjectWhereInput>;
  unit?: Maybe<UnitWhereInput>;
  topic?: Maybe<TopicWhereInput>;
  quetype?: Maybe<String>;
  quetype_not?: Maybe<String>;
  quetype_in?: Maybe<String[] | String>;
  quetype_not_in?: Maybe<String[] | String>;
  quetype_lt?: Maybe<String>;
  quetype_lte?: Maybe<String>;
  quetype_gt?: Maybe<String>;
  quetype_gte?: Maybe<String>;
  quetype_contains?: Maybe<String>;
  quetype_not_contains?: Maybe<String>;
  quetype_starts_with?: Maybe<String>;
  quetype_not_starts_with?: Maybe<String>;
  quetype_ends_with?: Maybe<String>;
  quetype_not_ends_with?: Maybe<String>;
  categories?: Maybe<String>;
  categories_not?: Maybe<String>;
  categories_in?: Maybe<String[] | String>;
  categories_not_in?: Maybe<String[] | String>;
  categories_lt?: Maybe<String>;
  categories_lte?: Maybe<String>;
  categories_gt?: Maybe<String>;
  categories_gte?: Maybe<String>;
  categories_contains?: Maybe<String>;
  categories_not_contains?: Maybe<String>;
  categories_starts_with?: Maybe<String>;
  categories_not_starts_with?: Maybe<String>;
  categories_ends_with?: Maybe<String>;
  categories_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  descriptionType?: Maybe<String>;
  descriptionType_not?: Maybe<String>;
  descriptionType_in?: Maybe<String[] | String>;
  descriptionType_not_in?: Maybe<String[] | String>;
  descriptionType_lt?: Maybe<String>;
  descriptionType_lte?: Maybe<String>;
  descriptionType_gt?: Maybe<String>;
  descriptionType_gte?: Maybe<String>;
  descriptionType_contains?: Maybe<String>;
  descriptionType_not_contains?: Maybe<String>;
  descriptionType_starts_with?: Maybe<String>;
  descriptionType_not_starts_with?: Maybe<String>;
  descriptionType_ends_with?: Maybe<String>;
  descriptionType_not_ends_with?: Maybe<String>;
  descriptionurl?: Maybe<String>;
  descriptionurl_not?: Maybe<String>;
  descriptionurl_in?: Maybe<String[] | String>;
  descriptionurl_not_in?: Maybe<String[] | String>;
  descriptionurl_lt?: Maybe<String>;
  descriptionurl_lte?: Maybe<String>;
  descriptionurl_gt?: Maybe<String>;
  descriptionurl_gte?: Maybe<String>;
  descriptionurl_contains?: Maybe<String>;
  descriptionurl_not_contains?: Maybe<String>;
  descriptionurl_starts_with?: Maybe<String>;
  descriptionurl_not_starts_with?: Maybe<String>;
  descriptionurl_ends_with?: Maybe<String>;
  descriptionurl_not_ends_with?: Maybe<String>;
  createdBy?: Maybe<UserWhereInput>;
  level?: Maybe<Int>;
  level_not?: Maybe<Int>;
  level_in?: Maybe<Int[] | Int>;
  level_not_in?: Maybe<Int[] | Int>;
  level_lt?: Maybe<Int>;
  level_lte?: Maybe<Int>;
  level_gt?: Maybe<Int>;
  level_gte?: Maybe<Int>;
  updatedBy?: Maybe<UserWhereInput>;
  plandate?: Maybe<DateTimeInput>;
  plandate_not?: Maybe<DateTimeInput>;
  plandate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plandate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plandate_lt?: Maybe<DateTimeInput>;
  plandate_lte?: Maybe<DateTimeInput>;
  plandate_gt?: Maybe<DateTimeInput>;
  plandate_gte?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  available?: Maybe<String>;
  available_not?: Maybe<String>;
  available_in?: Maybe<String[] | String>;
  available_not_in?: Maybe<String[] | String>;
  available_lt?: Maybe<String>;
  available_lte?: Maybe<String>;
  available_gt?: Maybe<String>;
  available_gte?: Maybe<String>;
  available_contains?: Maybe<String>;
  available_not_contains?: Maybe<String>;
  available_starts_with?: Maybe<String>;
  available_not_starts_with?: Maybe<String>;
  available_ends_with?: Maybe<String>;
  available_not_ends_with?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  isReviewed_not?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  explainationType_not?: Maybe<String>;
  explainationType_in?: Maybe<String[] | String>;
  explainationType_not_in?: Maybe<String[] | String>;
  explainationType_lt?: Maybe<String>;
  explainationType_lte?: Maybe<String>;
  explainationType_gt?: Maybe<String>;
  explainationType_gte?: Maybe<String>;
  explainationType_contains?: Maybe<String>;
  explainationType_not_contains?: Maybe<String>;
  explainationType_starts_with?: Maybe<String>;
  explainationType_not_starts_with?: Maybe<String>;
  explainationType_ends_with?: Maybe<String>;
  explainationType_not_ends_with?: Maybe<String>;
  quiz_every?: Maybe<QuizWhereInput>;
  quiz_some?: Maybe<QuizWhereInput>;
  quiz_none?: Maybe<QuizWhereInput>;
  explaination?: Maybe<String>;
  explaination_not?: Maybe<String>;
  explaination_in?: Maybe<String[] | String>;
  explaination_not_in?: Maybe<String[] | String>;
  explaination_lt?: Maybe<String>;
  explaination_lte?: Maybe<String>;
  explaination_gt?: Maybe<String>;
  explaination_gte?: Maybe<String>;
  explaination_contains?: Maybe<String>;
  explaination_not_contains?: Maybe<String>;
  explaination_starts_with?: Maybe<String>;
  explaination_not_starts_with?: Maybe<String>;
  explaination_ends_with?: Maybe<String>;
  explaination_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  results_every?: Maybe<ResultWhereInput>;
  results_some?: Maybe<ResultWhereInput>;
  results_none?: Maybe<ResultWhereInput>;
  atemptedResult_every?: Maybe<ResultWhereInput>;
  atemptedResult_some?: Maybe<ResultWhereInput>;
  atemptedResult_none?: Maybe<ResultWhereInput>;
  notattempted_every?: Maybe<ResultWhereInput>;
  notattempted_some?: Maybe<ResultWhereInput>;
  notattempted_none?: Maybe<ResultWhereInput>;
  correct_every?: Maybe<ResultWhereInput>;
  correct_some?: Maybe<ResultWhereInput>;
  correct_none?: Maybe<ResultWhereInput>;
  wrong_every?: Maybe<ResultWhereInput>;
  wrong_some?: Maybe<ResultWhereInput>;
  wrong_none?: Maybe<ResultWhereInput>;
  AND?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
  OR?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
  NOT?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
}

export interface QuizWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  quizName?: Maybe<String>;
  quizName_not?: Maybe<String>;
  quizName_in?: Maybe<String[] | String>;
  quizName_not_in?: Maybe<String[] | String>;
  quizName_lt?: Maybe<String>;
  quizName_lte?: Maybe<String>;
  quizName_gt?: Maybe<String>;
  quizName_gte?: Maybe<String>;
  quizName_contains?: Maybe<String>;
  quizName_not_contains?: Maybe<String>;
  quizName_starts_with?: Maybe<String>;
  quizName_not_starts_with?: Maybe<String>;
  quizName_ends_with?: Maybe<String>;
  quizName_not_ends_with?: Maybe<String>;
  quizType?: Maybe<String>;
  quizType_not?: Maybe<String>;
  quizType_in?: Maybe<String[] | String>;
  quizType_not_in?: Maybe<String[] | String>;
  quizType_lt?: Maybe<String>;
  quizType_lte?: Maybe<String>;
  quizType_gt?: Maybe<String>;
  quizType_gte?: Maybe<String>;
  quizType_contains?: Maybe<String>;
  quizType_not_contains?: Maybe<String>;
  quizType_starts_with?: Maybe<String>;
  quizType_not_starts_with?: Maybe<String>;
  quizType_ends_with?: Maybe<String>;
  quizType_not_ends_with?: Maybe<String>;
  subject?: Maybe<SubjectWhereInput>;
  unit?: Maybe<UnitWhereInput>;
  topic?: Maybe<TopicWhereInput>;
  questions_every?: Maybe<QuestionWhereInput>;
  questions_some?: Maybe<QuestionWhereInput>;
  questions_none?: Maybe<QuestionWhereInput>;
  quizlevel?: Maybe<Int>;
  quizlevel_not?: Maybe<Int>;
  quizlevel_in?: Maybe<Int[] | Int>;
  quizlevel_not_in?: Maybe<Int[] | Int>;
  quizlevel_lt?: Maybe<Int>;
  quizlevel_lte?: Maybe<Int>;
  quizlevel_gt?: Maybe<Int>;
  quizlevel_gte?: Maybe<Int>;
  isForLevelPromotion?: Maybe<Boolean>;
  isForLevelPromotion_not?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showExplaination_not?: Maybe<String>;
  showExplaination_in?: Maybe<String[] | String>;
  showExplaination_not_in?: Maybe<String[] | String>;
  showExplaination_lt?: Maybe<String>;
  showExplaination_lte?: Maybe<String>;
  showExplaination_gt?: Maybe<String>;
  showExplaination_gte?: Maybe<String>;
  showExplaination_contains?: Maybe<String>;
  showExplaination_not_contains?: Maybe<String>;
  showExplaination_starts_with?: Maybe<String>;
  showExplaination_not_starts_with?: Maybe<String>;
  showExplaination_ends_with?: Maybe<String>;
  showExplaination_not_ends_with?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  showanswer_not?: Maybe<Boolean>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  allowedCorrection_not?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  duration_not?: Maybe<Int>;
  duration_in?: Maybe<Int[] | Int>;
  duration_not_in?: Maybe<Int[] | Int>;
  duration_lt?: Maybe<Int>;
  duration_lte?: Maybe<Int>;
  duration_gt?: Maybe<Int>;
  duration_gte?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  commentFromTeacher_not?: Maybe<String>;
  commentFromTeacher_in?: Maybe<String[] | String>;
  commentFromTeacher_not_in?: Maybe<String[] | String>;
  commentFromTeacher_lt?: Maybe<String>;
  commentFromTeacher_lte?: Maybe<String>;
  commentFromTeacher_gt?: Maybe<String>;
  commentFromTeacher_gte?: Maybe<String>;
  commentFromTeacher_contains?: Maybe<String>;
  commentFromTeacher_not_contains?: Maybe<String>;
  commentFromTeacher_starts_with?: Maybe<String>;
  commentFromTeacher_not_starts_with?: Maybe<String>;
  commentFromTeacher_ends_with?: Maybe<String>;
  commentFromTeacher_not_ends_with?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  isApproved_not?: Maybe<Boolean>;
  createdBy?: Maybe<UserWhereInput>;
  weightage?: Maybe<Float>;
  weightage_not?: Maybe<Float>;
  weightage_in?: Maybe<Float[] | Float>;
  weightage_not_in?: Maybe<Float[] | Float>;
  weightage_lt?: Maybe<Float>;
  weightage_lte?: Maybe<Float>;
  weightage_gt?: Maybe<Float>;
  weightage_gte?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  totalmarks_not?: Maybe<Float>;
  totalmarks_in?: Maybe<Float[] | Float>;
  totalmarks_not_in?: Maybe<Float[] | Float>;
  totalmarks_lt?: Maybe<Float>;
  totalmarks_lte?: Maybe<Float>;
  totalmarks_gt?: Maybe<Float>;
  totalmarks_gte?: Maybe<Float>;
  validFrom?: Maybe<DateTimeInput>;
  validFrom_not?: Maybe<DateTimeInput>;
  validFrom_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validFrom_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validFrom_lt?: Maybe<DateTimeInput>;
  validFrom_lte?: Maybe<DateTimeInput>;
  validFrom_gt?: Maybe<DateTimeInput>;
  validFrom_gte?: Maybe<DateTimeInput>;
  validTo?: Maybe<DateTimeInput>;
  validTo_not?: Maybe<DateTimeInput>;
  validTo_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validTo_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validTo_lt?: Maybe<DateTimeInput>;
  validTo_lte?: Maybe<DateTimeInput>;
  validTo_gt?: Maybe<DateTimeInput>;
  validTo_gte?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
  retryAllowed_not?: Maybe<Boolean>;
  results_every?: Maybe<ResultWhereInput>;
  results_some?: Maybe<ResultWhereInput>;
  results_none?: Maybe<ResultWhereInput>;
  courses_every?: Maybe<QuizWhereInput>;
  courses_some?: Maybe<QuizWhereInput>;
  courses_none?: Maybe<QuizWhereInput>;
  AND?: Maybe<QuizWhereInput[] | QuizWhereInput>;
  OR?: Maybe<QuizWhereInput[] | QuizWhereInput>;
  NOT?: Maybe<QuizWhereInput[] | QuizWhereInput>;
}

export interface ResultWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  quiz?: Maybe<QuizWhereInput>;
  quizName?: Maybe<String>;
  quizName_not?: Maybe<String>;
  quizName_in?: Maybe<String[] | String>;
  quizName_not_in?: Maybe<String[] | String>;
  quizName_lt?: Maybe<String>;
  quizName_lte?: Maybe<String>;
  quizName_gt?: Maybe<String>;
  quizName_gte?: Maybe<String>;
  quizName_contains?: Maybe<String>;
  quizName_not_contains?: Maybe<String>;
  quizName_starts_with?: Maybe<String>;
  quizName_not_starts_with?: Maybe<String>;
  quizName_ends_with?: Maybe<String>;
  quizName_not_ends_with?: Maybe<String>;
  quizType?: Maybe<String>;
  quizType_not?: Maybe<String>;
  quizType_in?: Maybe<String[] | String>;
  quizType_not_in?: Maybe<String[] | String>;
  quizType_lt?: Maybe<String>;
  quizType_lte?: Maybe<String>;
  quizType_gt?: Maybe<String>;
  quizType_gte?: Maybe<String>;
  quizType_contains?: Maybe<String>;
  quizType_not_contains?: Maybe<String>;
  quizType_starts_with?: Maybe<String>;
  quizType_not_starts_with?: Maybe<String>;
  quizType_ends_with?: Maybe<String>;
  quizType_not_ends_with?: Maybe<String>;
  questions_every?: Maybe<QuestionWhereInput>;
  questions_some?: Maybe<QuestionWhereInput>;
  questions_none?: Maybe<QuestionWhereInput>;
  result?: Maybe<String>;
  result_not?: Maybe<String>;
  result_in?: Maybe<String[] | String>;
  result_not_in?: Maybe<String[] | String>;
  result_lt?: Maybe<String>;
  result_lte?: Maybe<String>;
  result_gt?: Maybe<String>;
  result_gte?: Maybe<String>;
  result_contains?: Maybe<String>;
  result_not_contains?: Maybe<String>;
  result_starts_with?: Maybe<String>;
  result_not_starts_with?: Maybe<String>;
  result_ends_with?: Maybe<String>;
  result_not_ends_with?: Maybe<String>;
  quizlevel?: Maybe<Int>;
  quizlevel_not?: Maybe<Int>;
  quizlevel_in?: Maybe<Int[] | Int>;
  quizlevel_not_in?: Maybe<Int[] | Int>;
  quizlevel_lt?: Maybe<Int>;
  quizlevel_lte?: Maybe<Int>;
  quizlevel_gt?: Maybe<Int>;
  quizlevel_gte?: Maybe<Int>;
  score?: Maybe<Float>;
  score_not?: Maybe<Float>;
  score_in?: Maybe<Float[] | Float>;
  score_not_in?: Maybe<Float[] | Float>;
  score_lt?: Maybe<Float>;
  score_lte?: Maybe<Float>;
  score_gt?: Maybe<Float>;
  score_gte?: Maybe<Float>;
  attempted_every?: Maybe<QuestionWhereInput>;
  attempted_some?: Maybe<QuestionWhereInput>;
  attempted_none?: Maybe<QuestionWhereInput>;
  notattempted_every?: Maybe<QuestionWhereInput>;
  notattempted_some?: Maybe<QuestionWhereInput>;
  notattempted_none?: Maybe<QuestionWhereInput>;
  correct_every?: Maybe<QuestionWhereInput>;
  correct_some?: Maybe<QuestionWhereInput>;
  correct_none?: Maybe<QuestionWhereInput>;
  wrong_every?: Maybe<QuestionWhereInput>;
  wrong_some?: Maybe<QuestionWhereInput>;
  wrong_none?: Maybe<QuestionWhereInput>;
  achievement?: Maybe<String>;
  achievement_not?: Maybe<String>;
  achievement_in?: Maybe<String[] | String>;
  achievement_not_in?: Maybe<String[] | String>;
  achievement_lt?: Maybe<String>;
  achievement_lte?: Maybe<String>;
  achievement_gt?: Maybe<String>;
  achievement_gte?: Maybe<String>;
  achievement_contains?: Maybe<String>;
  achievement_not_contains?: Maybe<String>;
  achievement_starts_with?: Maybe<String>;
  achievement_not_starts_with?: Maybe<String>;
  achievement_ends_with?: Maybe<String>;
  achievement_not_ends_with?: Maybe<String>;
  duration?: Maybe<Int>;
  duration_not?: Maybe<Int>;
  duration_in?: Maybe<Int[] | Int>;
  duration_not_in?: Maybe<Int[] | Int>;
  duration_lt?: Maybe<Int>;
  duration_lte?: Maybe<Int>;
  duration_gt?: Maybe<Int>;
  duration_gte?: Maybe<Int>;
  attemptedDate?: Maybe<DateTimeInput>;
  attemptedDate_not?: Maybe<DateTimeInput>;
  attemptedDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  attemptedDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  attemptedDate_lt?: Maybe<DateTimeInput>;
  attemptedDate_lte?: Maybe<DateTimeInput>;
  attemptedDate_gt?: Maybe<DateTimeInput>;
  attemptedDate_gte?: Maybe<DateTimeInput>;
  commentFromTeacher?: Maybe<String>;
  commentFromTeacher_not?: Maybe<String>;
  commentFromTeacher_in?: Maybe<String[] | String>;
  commentFromTeacher_not_in?: Maybe<String[] | String>;
  commentFromTeacher_lt?: Maybe<String>;
  commentFromTeacher_lte?: Maybe<String>;
  commentFromTeacher_gt?: Maybe<String>;
  commentFromTeacher_gte?: Maybe<String>;
  commentFromTeacher_contains?: Maybe<String>;
  commentFromTeacher_not_contains?: Maybe<String>;
  commentFromTeacher_starts_with?: Maybe<String>;
  commentFromTeacher_not_starts_with?: Maybe<String>;
  commentFromTeacher_ends_with?: Maybe<String>;
  commentFromTeacher_not_ends_with?: Maybe<String>;
  rank?: Maybe<Int>;
  rank_not?: Maybe<Int>;
  rank_in?: Maybe<Int[] | Int>;
  rank_not_in?: Maybe<Int[] | Int>;
  rank_lt?: Maybe<Int>;
  rank_lte?: Maybe<Int>;
  rank_gt?: Maybe<Int>;
  rank_gte?: Maybe<Int>;
  userId?: Maybe<UserWhereInput>;
  AND?: Maybe<ResultWhereInput[] | ResultWhereInput>;
  OR?: Maybe<ResultWhereInput[] | ResultWhereInput>;
  NOT?: Maybe<ResultWhereInput[] | ResultWhereInput>;
}

export interface SubjectSubscriptionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  subsType?: Maybe<String>;
  subsType_not?: Maybe<String>;
  subsType_in?: Maybe<String[] | String>;
  subsType_not_in?: Maybe<String[] | String>;
  subsType_lt?: Maybe<String>;
  subsType_lte?: Maybe<String>;
  subsType_gt?: Maybe<String>;
  subsType_gte?: Maybe<String>;
  subsType_contains?: Maybe<String>;
  subsType_not_contains?: Maybe<String>;
  subsType_starts_with?: Maybe<String>;
  subsType_not_starts_with?: Maybe<String>;
  subsType_ends_with?: Maybe<String>;
  subsType_not_ends_with?: Maybe<String>;
  mySubjects_every?: Maybe<SubjectWhereInput>;
  mySubjects_some?: Maybe<SubjectWhereInput>;
  mySubjects_none?: Maybe<SubjectWhereInput>;
  userid?: Maybe<UserWhereInput>;
  subscribedAs?: Maybe<RoleWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SubjectSubscriptionWhereInput[] | SubjectSubscriptionWhereInput>;
  OR?: Maybe<SubjectSubscriptionWhereInput[] | SubjectSubscriptionWhereInput>;
  NOT?: Maybe<SubjectSubscriptionWhereInput[] | SubjectSubscriptionWhereInput>;
}

export interface GroupMemberWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userid?: Maybe<UserWhereInput>;
  member?: Maybe<GroupWhereInput>;
  status?: Maybe<MemberStatus>;
  status_not?: Maybe<MemberStatus>;
  status_in?: Maybe<MemberStatus[] | MemberStatus>;
  status_not_in?: Maybe<MemberStatus[] | MemberStatus>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GroupMemberWhereInput[] | GroupMemberWhereInput>;
  OR?: Maybe<GroupMemberWhereInput[] | GroupMemberWhereInput>;
  NOT?: Maybe<GroupMemberWhereInput[] | GroupMemberWhereInput>;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  author?: Maybe<UserWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  post?: Maybe<PostWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface VoteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  option?: Maybe<OptionWhereInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  OR?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  NOT?: Maybe<VoteWhereInput[] | VoteWhereInput>;
}

export interface OptionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  color?: Maybe<Color>;
  color_not?: Maybe<Color>;
  color_in?: Maybe<Color[] | Color>;
  color_not_in?: Maybe<Color[] | Color>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  poll?: Maybe<PollWhereInput>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  AND?: Maybe<OptionWhereInput[] | OptionWhereInput>;
  OR?: Maybe<OptionWhereInput[] | OptionWhereInput>;
  NOT?: Maybe<OptionWhereInput[] | OptionWhereInput>;
}

export interface PollWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  options_every?: Maybe<OptionWhereInput>;
  options_some?: Maybe<OptionWhereInput>;
  options_none?: Maybe<OptionWhereInput>;
  AND?: Maybe<PollWhereInput[] | PollWhereInput>;
  OR?: Maybe<PollWhereInput[] | PollWhereInput>;
  NOT?: Maybe<PollWhereInput[] | PollWhereInput>;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ContentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type EducationProfileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type GroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type GroupMemberWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MediumWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OptionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OrganizationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PersonalProfileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PollWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProfileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type QuestionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type QuizWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ResultWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RoleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RoleMemberWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RoleMemberWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userid?: Maybe<UserWhereInput>;
  role?: Maybe<RoleWhereInput>;
  status?: Maybe<RoleStatus>;
  status_not?: Maybe<RoleStatus>;
  status_in?: Maybe<RoleStatus[] | RoleStatus>;
  status_not_in?: Maybe<RoleStatus[] | RoleStatus>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RoleMemberWhereInput[] | RoleMemberWhereInput>;
  OR?: Maybe<RoleMemberWhereInput[] | RoleMemberWhereInput>;
  NOT?: Maybe<RoleMemberWhereInput[] | RoleMemberWhereInput>;
}

export type StdWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SubGroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SubGroupMemberWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SubjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SubjectSubscriptionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SuborgWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TopicWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UnitWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export type VoteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AddressCreateInput {
  id?: Maybe<ID_Input>;
  adressline: String;
  tehsil: String;
  city: String;
  district: String;
  state: String;
  pincode: String;
  personalProfile?: Maybe<PersonalProfileCreateOneWithoutAddressesInput>;
}

export interface PersonalProfileCreateOneWithoutAddressesInput {
  create?: Maybe<PersonalProfileCreateWithoutAddressesInput>;
  connect?: Maybe<PersonalProfileWhereUniqueInput>;
}

export interface PersonalProfileCreateWithoutAddressesInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  avatar: String;
  mobile: String;
  isMobilePublished?: Maybe<Boolean>;
  profileId: ProfileCreateOneWithoutPersonalProfiileInput;
}

export interface ProfileCreateOneWithoutPersonalProfiileInput {
  create?: Maybe<ProfileCreateWithoutPersonalProfiileInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface ProfileCreateWithoutPersonalProfiileInput {
  id?: Maybe<ID_Input>;
  name: String;
  userId: UserCreateOneWithoutMyprofilesInput;
  EducationProfiles?: Maybe<EducationProfileCreateManyWithoutProfileIdInput>;
}

export interface UserCreateOneWithoutMyprofilesInput {
  create?: Maybe<UserCreateWithoutMyprofilesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMyprofilesInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface OrganizationCreateOneWithoutAuthorInput {
  create?: Maybe<OrganizationCreateWithoutAuthorInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  name: String;
  logo?: Maybe<String>;
  color?: Maybe<String>;
  description?: Maybe<String>;
  suborgs?: Maybe<SuborgCreateManyWithoutOrgInput>;
  orgRoles?: Maybe<RoleCreateManyWithoutOrgInput>;
}

export interface SuborgCreateManyWithoutOrgInput {
  create?: Maybe<SuborgCreateWithoutOrgInput[] | SuborgCreateWithoutOrgInput>;
  connect?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
}

export interface SuborgCreateWithoutOrgInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  author?: Maybe<UserCreateManyWithoutSuborgInput>;
  userGroups?: Maybe<GroupCreateManyWithoutSuborgidInput>;
  suborgRoles?: Maybe<RoleCreateManyWithoutSuborgInput>;
}

export interface UserCreateManyWithoutSuborgInput {
  create?: Maybe<UserCreateWithoutSuborgInput[] | UserCreateWithoutSuborgInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutSuborgInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface GroupMemberCreateManyWithoutUseridInput {
  create?: Maybe<
    GroupMemberCreateWithoutUseridInput[] | GroupMemberCreateWithoutUseridInput
  >;
  connect?: Maybe<GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput>;
}

export interface GroupMemberCreateWithoutUseridInput {
  id?: Maybe<ID_Input>;
  member: GroupCreateOneWithoutMembersInput;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface GroupCreateOneWithoutMembersInput {
  create?: Maybe<GroupCreateWithoutMembersInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  suborgid: SuborgCreateOneWithoutUserGroupsInput;
  subgroups?: Maybe<SubGroupCreateManyWithoutGroupidInput>;
  groupRoles?: Maybe<RoleCreateManyWithoutGroupInput>;
  subjects?: Maybe<SubjectCreateManyWithoutGroupInput>;
}

export interface SuborgCreateOneWithoutUserGroupsInput {
  create?: Maybe<SuborgCreateWithoutUserGroupsInput>;
  connect?: Maybe<SuborgWhereUniqueInput>;
}

export interface SuborgCreateWithoutUserGroupsInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  author?: Maybe<UserCreateManyWithoutSuborgInput>;
  org: OrganizationCreateOneWithoutSuborgsInput;
  suborgRoles?: Maybe<RoleCreateManyWithoutSuborgInput>;
}

export interface OrganizationCreateOneWithoutSuborgsInput {
  create?: Maybe<OrganizationCreateWithoutSuborgsInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationCreateWithoutSuborgsInput {
  id?: Maybe<ID_Input>;
  name: String;
  logo?: Maybe<String>;
  color?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserCreateManyWithoutOrgInput>;
  orgRoles?: Maybe<RoleCreateManyWithoutOrgInput>;
}

export interface UserCreateManyWithoutOrgInput {
  create?: Maybe<UserCreateWithoutOrgInput[] | UserCreateWithoutOrgInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutOrgInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface SuborgCreateManyWithoutAuthorInput {
  create?: Maybe<
    SuborgCreateWithoutAuthorInput[] | SuborgCreateWithoutAuthorInput
  >;
  connect?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
}

export interface SuborgCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  org: OrganizationCreateOneWithoutSuborgsInput;
  userGroups?: Maybe<GroupCreateManyWithoutSuborgidInput>;
  suborgRoles?: Maybe<RoleCreateManyWithoutSuborgInput>;
}

export interface GroupCreateManyWithoutSuborgidInput {
  create?: Maybe<
    GroupCreateWithoutSuborgidInput[] | GroupCreateWithoutSuborgidInput
  >;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutSuborgidInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  subgroups?: Maybe<SubGroupCreateManyWithoutGroupidInput>;
  members?: Maybe<GroupMemberCreateManyWithoutMemberInput>;
  groupRoles?: Maybe<RoleCreateManyWithoutGroupInput>;
  subjects?: Maybe<SubjectCreateManyWithoutGroupInput>;
}

export interface SubGroupCreateManyWithoutGroupidInput {
  create?: Maybe<
    SubGroupCreateWithoutGroupidInput[] | SubGroupCreateWithoutGroupidInput
  >;
  connect?: Maybe<SubGroupWhereUniqueInput[] | SubGroupWhereUniqueInput>;
}

export interface SubGroupCreateWithoutGroupidInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  members?: Maybe<SubGroupMemberCreateManyWithoutMemberInput>;
  subgroupRoles?: Maybe<RoleCreateManyWithoutSubgroupInput>;
  subjects?: Maybe<SubjectCreateManyWithoutSubgroupInput>;
}

export interface SubGroupMemberCreateManyWithoutMemberInput {
  create?: Maybe<
    | SubGroupMemberCreateWithoutMemberInput[]
    | SubGroupMemberCreateWithoutMemberInput
  >;
  connect?: Maybe<
    SubGroupMemberWhereUniqueInput[] | SubGroupMemberWhereUniqueInput
  >;
}

export interface SubGroupMemberCreateWithoutMemberInput {
  id?: Maybe<ID_Input>;
  userid: UserCreateOneWithoutSubgroupmembersInput;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface UserCreateOneWithoutSubgroupmembersInput {
  create?: Maybe<UserCreateWithoutSubgroupmembersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutSubgroupmembersInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  title: String;
  body: String;
  published: Boolean;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
}

export interface CommentCreateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  text: String;
  author: UserCreateOneWithoutCommentsInput;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface SubGroupMemberCreateManyWithoutUseridInput {
  create?: Maybe<
    | SubGroupMemberCreateWithoutUseridInput[]
    | SubGroupMemberCreateWithoutUseridInput
  >;
  connect?: Maybe<
    SubGroupMemberWhereUniqueInput[] | SubGroupMemberWhereUniqueInput
  >;
}

export interface SubGroupMemberCreateWithoutUseridInput {
  id?: Maybe<ID_Input>;
  member: SubGroupCreateOneWithoutMembersInput;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface SubGroupCreateOneWithoutMembersInput {
  create?: Maybe<SubGroupCreateWithoutMembersInput>;
  connect?: Maybe<SubGroupWhereUniqueInput>;
}

export interface SubGroupCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  groupid: GroupCreateOneWithoutSubgroupsInput;
  subgroupRoles?: Maybe<RoleCreateManyWithoutSubgroupInput>;
  subjects?: Maybe<SubjectCreateManyWithoutSubgroupInput>;
}

export interface GroupCreateOneWithoutSubgroupsInput {
  create?: Maybe<GroupCreateWithoutSubgroupsInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutSubgroupsInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  suborgid: SuborgCreateOneWithoutUserGroupsInput;
  members?: Maybe<GroupMemberCreateManyWithoutMemberInput>;
  groupRoles?: Maybe<RoleCreateManyWithoutGroupInput>;
  subjects?: Maybe<SubjectCreateManyWithoutGroupInput>;
}

export interface GroupMemberCreateManyWithoutMemberInput {
  create?: Maybe<
    GroupMemberCreateWithoutMemberInput[] | GroupMemberCreateWithoutMemberInput
  >;
  connect?: Maybe<GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput>;
}

export interface GroupMemberCreateWithoutMemberInput {
  id?: Maybe<ID_Input>;
  userid: UserCreateOneWithoutGroupmembersInput;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface UserCreateOneWithoutGroupmembersInput {
  create?: Maybe<UserCreateWithoutGroupmembersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutGroupmembersInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface CommentCreateManyWithoutAuthorInput {
  create?: Maybe<
    CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  text: String;
  post: PostCreateOneWithoutCommentsInput;
}

export interface PostCreateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  title: String;
  body: String;
  published: Boolean;
  author: UserCreateOneWithoutPostsInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface RoleCreateManyWithoutUsersInput {
  create?: Maybe<RoleCreateWithoutUsersInput[] | RoleCreateWithoutUsersInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
}

export interface RoleCreateWithoutUsersInput {
  id?: Maybe<ID_Input>;
  name: ROLENAME;
  org?: Maybe<OrganizationCreateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgCreateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupCreateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubgroupRolesInput>;
  educationprofiles?: Maybe<EducationProfileCreateManyWithoutRolesInput>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
  subjectSubscriptions?: Maybe<
    SubjectSubscriptionCreateManyWithoutSubscribedAsInput
  >;
}

export interface OrganizationCreateOneWithoutOrgRolesInput {
  create?: Maybe<OrganizationCreateWithoutOrgRolesInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationCreateWithoutOrgRolesInput {
  id?: Maybe<ID_Input>;
  name: String;
  logo?: Maybe<String>;
  color?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserCreateManyWithoutOrgInput>;
  suborgs?: Maybe<SuborgCreateManyWithoutOrgInput>;
}

export interface SuborgCreateOneWithoutSuborgRolesInput {
  create?: Maybe<SuborgCreateWithoutSuborgRolesInput>;
  connect?: Maybe<SuborgWhereUniqueInput>;
}

export interface SuborgCreateWithoutSuborgRolesInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  author?: Maybe<UserCreateManyWithoutSuborgInput>;
  org: OrganizationCreateOneWithoutSuborgsInput;
  userGroups?: Maybe<GroupCreateManyWithoutSuborgidInput>;
}

export interface GroupCreateOneWithoutGroupRolesInput {
  create?: Maybe<GroupCreateWithoutGroupRolesInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutGroupRolesInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  suborgid: SuborgCreateOneWithoutUserGroupsInput;
  subgroups?: Maybe<SubGroupCreateManyWithoutGroupidInput>;
  members?: Maybe<GroupMemberCreateManyWithoutMemberInput>;
  subjects?: Maybe<SubjectCreateManyWithoutGroupInput>;
}

export interface SubjectCreateManyWithoutGroupInput {
  create?: Maybe<
    SubjectCreateWithoutGroupInput[] | SubjectCreateWithoutGroupInput
  >;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
}

export interface SubjectCreateWithoutGroupInput {
  id?: Maybe<ID_Input>;
  name: String;
  picture?: Maybe<String>;
  medium?: Maybe<MediumCreateOneWithoutSubjectsInput>;
  std: StdCreateOneWithoutSubjectsInput;
  board?: Maybe<String>;
  category?: Maybe<String>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileCreateManyWithoutSubjectsInput>;
  units?: Maybe<UnitCreateManyWithoutSubjectInput>;
  topic?: Maybe<TopicCreateManyWithoutSubjectInput>;
  contents?: Maybe<ContentCreateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserCreateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizCreateManyWithoutSubjectInput>;
}

export interface MediumCreateOneWithoutSubjectsInput {
  create?: Maybe<MediumCreateWithoutSubjectsInput>;
  connect?: Maybe<MediumWhereUniqueInput>;
}

export interface MediumCreateWithoutSubjectsInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface StdCreateOneWithoutSubjectsInput {
  create?: Maybe<StdCreateWithoutSubjectsInput>;
  connect?: Maybe<StdWhereUniqueInput>;
}

export interface StdCreateWithoutSubjectsInput {
  id?: Maybe<ID_Input>;
  gradename: GRADENAME;
  category: String;
  branch?: Maybe<String>;
  year?: Maybe<String>;
  educationprofiles?: Maybe<EducationProfileCreateManyWithoutStdInput>;
  isPublished?: Maybe<Boolean>;
}

export interface EducationProfileCreateManyWithoutStdInput {
  create?: Maybe<
    | EducationProfileCreateWithoutStdInput[]
    | EducationProfileCreateWithoutStdInput
  >;
  connect?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
}

export interface EducationProfileCreateWithoutStdInput {
  id?: Maybe<ID_Input>;
  name: String;
  profiileType?: Maybe<String>;
  educationLevel?: Maybe<String>;
  educationType?: Maybe<String>;
  specialization?: Maybe<String>;
  roles?: Maybe<RoleCreateManyWithoutEducationprofilesInput>;
  subjects?: Maybe<SubjectCreateManyWithoutEducationProfilesInput>;
  startedYear?: Maybe<DateTimeInput>;
  completedYear?: Maybe<DateTimeInput>;
  result?: Maybe<String>;
  status?: Maybe<String>;
  remark?: Maybe<String>;
  profileId: ProfileCreateOneWithoutEducationProfilesInput;
}

export interface RoleCreateManyWithoutEducationprofilesInput {
  create?: Maybe<
    | RoleCreateWithoutEducationprofilesInput[]
    | RoleCreateWithoutEducationprofilesInput
  >;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
}

export interface RoleCreateWithoutEducationprofilesInput {
  id?: Maybe<ID_Input>;
  name: ROLENAME;
  org?: Maybe<OrganizationCreateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgCreateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupCreateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubgroupRolesInput>;
  users?: Maybe<UserCreateManyWithoutRolesInput>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
  subjectSubscriptions?: Maybe<
    SubjectSubscriptionCreateManyWithoutSubscribedAsInput
  >;
}

export interface SubGroupCreateOneWithoutSubgroupRolesInput {
  create?: Maybe<SubGroupCreateWithoutSubgroupRolesInput>;
  connect?: Maybe<SubGroupWhereUniqueInput>;
}

export interface SubGroupCreateWithoutSubgroupRolesInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  groupid: GroupCreateOneWithoutSubgroupsInput;
  members?: Maybe<SubGroupMemberCreateManyWithoutMemberInput>;
  subjects?: Maybe<SubjectCreateManyWithoutSubgroupInput>;
}

export interface SubjectCreateManyWithoutSubgroupInput {
  create?: Maybe<
    SubjectCreateWithoutSubgroupInput[] | SubjectCreateWithoutSubgroupInput
  >;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
}

export interface SubjectCreateWithoutSubgroupInput {
  id?: Maybe<ID_Input>;
  name: String;
  picture?: Maybe<String>;
  medium?: Maybe<MediumCreateOneWithoutSubjectsInput>;
  std: StdCreateOneWithoutSubjectsInput;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupCreateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileCreateManyWithoutSubjectsInput>;
  units?: Maybe<UnitCreateManyWithoutSubjectInput>;
  topic?: Maybe<TopicCreateManyWithoutSubjectInput>;
  contents?: Maybe<ContentCreateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserCreateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizCreateManyWithoutSubjectInput>;
}

export interface GroupCreateOneWithoutSubjectsInput {
  create?: Maybe<GroupCreateWithoutSubjectsInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutSubjectsInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  suborgid: SuborgCreateOneWithoutUserGroupsInput;
  subgroups?: Maybe<SubGroupCreateManyWithoutGroupidInput>;
  members?: Maybe<GroupMemberCreateManyWithoutMemberInput>;
  groupRoles?: Maybe<RoleCreateManyWithoutGroupInput>;
}

export interface RoleCreateManyWithoutGroupInput {
  create?: Maybe<RoleCreateWithoutGroupInput[] | RoleCreateWithoutGroupInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
}

export interface RoleCreateWithoutGroupInput {
  id?: Maybe<ID_Input>;
  name: ROLENAME;
  org?: Maybe<OrganizationCreateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgCreateOneWithoutSuborgRolesInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubgroupRolesInput>;
  users?: Maybe<UserCreateManyWithoutRolesInput>;
  educationprofiles?: Maybe<EducationProfileCreateManyWithoutRolesInput>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
  subjectSubscriptions?: Maybe<
    SubjectSubscriptionCreateManyWithoutSubscribedAsInput
  >;
}

export interface UserCreateManyWithoutRolesInput {
  create?: Maybe<UserCreateWithoutRolesInput[] | UserCreateWithoutRolesInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutRolesInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface ProfileCreateManyWithoutUserIdInput {
  create?: Maybe<
    ProfileCreateWithoutUserIdInput[] | ProfileCreateWithoutUserIdInput
  >;
  connect?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
}

export interface ProfileCreateWithoutUserIdInput {
  id?: Maybe<ID_Input>;
  name: String;
  EducationProfiles?: Maybe<EducationProfileCreateManyWithoutProfileIdInput>;
  personalProfiile?: Maybe<PersonalProfileCreateManyWithoutProfileIdInput>;
}

export interface EducationProfileCreateManyWithoutProfileIdInput {
  create?: Maybe<
    | EducationProfileCreateWithoutProfileIdInput[]
    | EducationProfileCreateWithoutProfileIdInput
  >;
  connect?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
}

export interface EducationProfileCreateWithoutProfileIdInput {
  id?: Maybe<ID_Input>;
  name: String;
  profiileType?: Maybe<String>;
  educationLevel?: Maybe<String>;
  educationType?: Maybe<String>;
  specialization?: Maybe<String>;
  roles?: Maybe<RoleCreateManyWithoutEducationprofilesInput>;
  subjects?: Maybe<SubjectCreateManyWithoutEducationProfilesInput>;
  std?: Maybe<StdCreateManyWithoutEducationprofilesInput>;
  startedYear?: Maybe<DateTimeInput>;
  completedYear?: Maybe<DateTimeInput>;
  result?: Maybe<String>;
  status?: Maybe<String>;
  remark?: Maybe<String>;
}

export interface SubjectCreateManyWithoutEducationProfilesInput {
  create?: Maybe<
    | SubjectCreateWithoutEducationProfilesInput[]
    | SubjectCreateWithoutEducationProfilesInput
  >;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
}

export interface SubjectCreateWithoutEducationProfilesInput {
  id?: Maybe<ID_Input>;
  name: String;
  picture?: Maybe<String>;
  medium?: Maybe<MediumCreateOneWithoutSubjectsInput>;
  std: StdCreateOneWithoutSubjectsInput;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupCreateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubjectsInput>;
  units?: Maybe<UnitCreateManyWithoutSubjectInput>;
  topic?: Maybe<TopicCreateManyWithoutSubjectInput>;
  contents?: Maybe<ContentCreateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserCreateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizCreateManyWithoutSubjectInput>;
}

export interface SubGroupCreateOneWithoutSubjectsInput {
  create?: Maybe<SubGroupCreateWithoutSubjectsInput>;
  connect?: Maybe<SubGroupWhereUniqueInput>;
}

export interface SubGroupCreateWithoutSubjectsInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  groupid: GroupCreateOneWithoutSubgroupsInput;
  members?: Maybe<SubGroupMemberCreateManyWithoutMemberInput>;
  subgroupRoles?: Maybe<RoleCreateManyWithoutSubgroupInput>;
}

export interface RoleCreateManyWithoutSubgroupInput {
  create?: Maybe<
    RoleCreateWithoutSubgroupInput[] | RoleCreateWithoutSubgroupInput
  >;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
}

export interface RoleCreateWithoutSubgroupInput {
  id?: Maybe<ID_Input>;
  name: ROLENAME;
  org?: Maybe<OrganizationCreateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgCreateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupCreateOneWithoutGroupRolesInput>;
  users?: Maybe<UserCreateManyWithoutRolesInput>;
  educationprofiles?: Maybe<EducationProfileCreateManyWithoutRolesInput>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
  subjectSubscriptions?: Maybe<
    SubjectSubscriptionCreateManyWithoutSubscribedAsInput
  >;
}

export interface EducationProfileCreateManyWithoutRolesInput {
  create?: Maybe<
    | EducationProfileCreateWithoutRolesInput[]
    | EducationProfileCreateWithoutRolesInput
  >;
  connect?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
}

export interface EducationProfileCreateWithoutRolesInput {
  id?: Maybe<ID_Input>;
  name: String;
  profiileType?: Maybe<String>;
  educationLevel?: Maybe<String>;
  educationType?: Maybe<String>;
  specialization?: Maybe<String>;
  subjects?: Maybe<SubjectCreateManyWithoutEducationProfilesInput>;
  std?: Maybe<StdCreateManyWithoutEducationprofilesInput>;
  startedYear?: Maybe<DateTimeInput>;
  completedYear?: Maybe<DateTimeInput>;
  result?: Maybe<String>;
  status?: Maybe<String>;
  remark?: Maybe<String>;
  profileId: ProfileCreateOneWithoutEducationProfilesInput;
}

export interface StdCreateManyWithoutEducationprofilesInput {
  create?: Maybe<
    | StdCreateWithoutEducationprofilesInput[]
    | StdCreateWithoutEducationprofilesInput
  >;
  connect?: Maybe<StdWhereUniqueInput[] | StdWhereUniqueInput>;
}

export interface StdCreateWithoutEducationprofilesInput {
  id?: Maybe<ID_Input>;
  gradename: GRADENAME;
  category: String;
  branch?: Maybe<String>;
  year?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  subjects?: Maybe<SubjectCreateManyWithoutStdInput>;
}

export interface SubjectCreateManyWithoutStdInput {
  create?: Maybe<SubjectCreateWithoutStdInput[] | SubjectCreateWithoutStdInput>;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
}

export interface SubjectCreateWithoutStdInput {
  id?: Maybe<ID_Input>;
  name: String;
  picture?: Maybe<String>;
  medium?: Maybe<MediumCreateOneWithoutSubjectsInput>;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupCreateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileCreateManyWithoutSubjectsInput>;
  units?: Maybe<UnitCreateManyWithoutSubjectInput>;
  topic?: Maybe<TopicCreateManyWithoutSubjectInput>;
  contents?: Maybe<ContentCreateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserCreateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizCreateManyWithoutSubjectInput>;
}

export interface EducationProfileCreateManyWithoutSubjectsInput {
  create?: Maybe<
    | EducationProfileCreateWithoutSubjectsInput[]
    | EducationProfileCreateWithoutSubjectsInput
  >;
  connect?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
}

export interface EducationProfileCreateWithoutSubjectsInput {
  id?: Maybe<ID_Input>;
  name: String;
  profiileType?: Maybe<String>;
  educationLevel?: Maybe<String>;
  educationType?: Maybe<String>;
  specialization?: Maybe<String>;
  roles?: Maybe<RoleCreateManyWithoutEducationprofilesInput>;
  std?: Maybe<StdCreateManyWithoutEducationprofilesInput>;
  startedYear?: Maybe<DateTimeInput>;
  completedYear?: Maybe<DateTimeInput>;
  result?: Maybe<String>;
  status?: Maybe<String>;
  remark?: Maybe<String>;
  profileId: ProfileCreateOneWithoutEducationProfilesInput;
}

export interface ProfileCreateOneWithoutEducationProfilesInput {
  create?: Maybe<ProfileCreateWithoutEducationProfilesInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface ProfileCreateWithoutEducationProfilesInput {
  id?: Maybe<ID_Input>;
  name: String;
  userId: UserCreateOneWithoutMyprofilesInput;
  personalProfiile?: Maybe<PersonalProfileCreateManyWithoutProfileIdInput>;
}

export interface PersonalProfileCreateManyWithoutProfileIdInput {
  create?: Maybe<
    | PersonalProfileCreateWithoutProfileIdInput[]
    | PersonalProfileCreateWithoutProfileIdInput
  >;
  connect?: Maybe<
    PersonalProfileWhereUniqueInput[] | PersonalProfileWhereUniqueInput
  >;
}

export interface PersonalProfileCreateWithoutProfileIdInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  avatar: String;
  mobile: String;
  isMobilePublished?: Maybe<Boolean>;
  addresses?: Maybe<AddressCreateManyWithoutPersonalProfileInput>;
}

export interface AddressCreateManyWithoutPersonalProfileInput {
  create?: Maybe<
    | AddressCreateWithoutPersonalProfileInput[]
    | AddressCreateWithoutPersonalProfileInput
  >;
  connect?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
}

export interface AddressCreateWithoutPersonalProfileInput {
  id?: Maybe<ID_Input>;
  adressline: String;
  tehsil: String;
  city: String;
  district: String;
  state: String;
  pincode: String;
}

export interface UnitCreateManyWithoutSubjectInput {
  create?: Maybe<
    UnitCreateWithoutSubjectInput[] | UnitCreateWithoutSubjectInput
  >;
  connect?: Maybe<UnitWhereUniqueInput[] | UnitWhereUniqueInput>;
}

export interface UnitCreateWithoutSubjectInput {
  id?: Maybe<ID_Input>;
  name: String;
  topics?: Maybe<TopicCreateManyWithoutUnitInput>;
  contents?: Maybe<ContentCreateManyWithoutUnitInput>;
  createdBy?: Maybe<UserCreateOneWithoutUnitByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutUnitUpdatedByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutUnitInput>;
  quizs?: Maybe<QuizCreateManyWithoutUnitInput>;
}

export interface TopicCreateManyWithoutUnitInput {
  create?: Maybe<TopicCreateWithoutUnitInput[] | TopicCreateWithoutUnitInput>;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
}

export interface TopicCreateWithoutUnitInput {
  id?: Maybe<ID_Input>;
  name: String;
  subject?: Maybe<SubjectCreateOneWithoutTopicInput>;
  contents?: Maybe<ContentCreateManyWithoutTopicInput>;
  createdBy?: Maybe<UserCreateOneWithoutTopicByMeInput>;
  updateBy?: Maybe<UserCreateOneWithoutTopicUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutTopicInput>;
  quizs?: Maybe<QuizCreateManyWithoutTopicInput>;
}

export interface SubjectCreateOneWithoutTopicInput {
  create?: Maybe<SubjectCreateWithoutTopicInput>;
  connect?: Maybe<SubjectWhereUniqueInput>;
}

export interface SubjectCreateWithoutTopicInput {
  id?: Maybe<ID_Input>;
  name: String;
  picture?: Maybe<String>;
  medium?: Maybe<MediumCreateOneWithoutSubjectsInput>;
  std: StdCreateOneWithoutSubjectsInput;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupCreateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileCreateManyWithoutSubjectsInput>;
  units?: Maybe<UnitCreateManyWithoutSubjectInput>;
  contents?: Maybe<ContentCreateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserCreateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizCreateManyWithoutSubjectInput>;
}

export interface ContentCreateManyWithoutSubjectInput {
  create?: Maybe<
    ContentCreateWithoutSubjectInput[] | ContentCreateWithoutSubjectInput
  >;
  connect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
}

export interface ContentCreateWithoutSubjectInput {
  id?: Maybe<ID_Input>;
  name: String;
  number?: Maybe<Int>;
  fileInfo?: Maybe<Json>;
  type: String;
  url?: Maybe<String>;
  unit?: Maybe<UnitCreateOneWithoutContentsInput>;
  topic?: Maybe<TopicCreateOneWithoutContentsInput>;
  createdBy?: Maybe<UserCreateOneWithoutContentByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutContentUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
}

export interface UnitCreateOneWithoutContentsInput {
  create?: Maybe<UnitCreateWithoutContentsInput>;
  connect?: Maybe<UnitWhereUniqueInput>;
}

export interface UnitCreateWithoutContentsInput {
  id?: Maybe<ID_Input>;
  name: String;
  subject: SubjectCreateOneWithoutUnitsInput;
  topics?: Maybe<TopicCreateManyWithoutUnitInput>;
  createdBy?: Maybe<UserCreateOneWithoutUnitByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutUnitUpdatedByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutUnitInput>;
  quizs?: Maybe<QuizCreateManyWithoutUnitInput>;
}

export interface SubjectCreateOneWithoutUnitsInput {
  create?: Maybe<SubjectCreateWithoutUnitsInput>;
  connect?: Maybe<SubjectWhereUniqueInput>;
}

export interface SubjectCreateWithoutUnitsInput {
  id?: Maybe<ID_Input>;
  name: String;
  picture?: Maybe<String>;
  medium?: Maybe<MediumCreateOneWithoutSubjectsInput>;
  std: StdCreateOneWithoutSubjectsInput;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupCreateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileCreateManyWithoutSubjectsInput>;
  topic?: Maybe<TopicCreateManyWithoutSubjectInput>;
  contents?: Maybe<ContentCreateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserCreateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizCreateManyWithoutSubjectInput>;
}

export interface TopicCreateManyWithoutSubjectInput {
  create?: Maybe<
    TopicCreateWithoutSubjectInput[] | TopicCreateWithoutSubjectInput
  >;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
}

export interface TopicCreateWithoutSubjectInput {
  id?: Maybe<ID_Input>;
  name: String;
  unit?: Maybe<UnitCreateOneWithoutTopicsInput>;
  contents?: Maybe<ContentCreateManyWithoutTopicInput>;
  createdBy?: Maybe<UserCreateOneWithoutTopicByMeInput>;
  updateBy?: Maybe<UserCreateOneWithoutTopicUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutTopicInput>;
  quizs?: Maybe<QuizCreateManyWithoutTopicInput>;
}

export interface UnitCreateOneWithoutTopicsInput {
  create?: Maybe<UnitCreateWithoutTopicsInput>;
  connect?: Maybe<UnitWhereUniqueInput>;
}

export interface UnitCreateWithoutTopicsInput {
  id?: Maybe<ID_Input>;
  name: String;
  subject: SubjectCreateOneWithoutUnitsInput;
  contents?: Maybe<ContentCreateManyWithoutUnitInput>;
  createdBy?: Maybe<UserCreateOneWithoutUnitByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutUnitUpdatedByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutUnitInput>;
  quizs?: Maybe<QuizCreateManyWithoutUnitInput>;
}

export interface ContentCreateManyWithoutUnitInput {
  create?: Maybe<
    ContentCreateWithoutUnitInput[] | ContentCreateWithoutUnitInput
  >;
  connect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
}

export interface ContentCreateWithoutUnitInput {
  id?: Maybe<ID_Input>;
  name: String;
  number?: Maybe<Int>;
  fileInfo?: Maybe<Json>;
  type: String;
  url?: Maybe<String>;
  subject: SubjectCreateOneWithoutContentsInput;
  topic?: Maybe<TopicCreateOneWithoutContentsInput>;
  createdBy?: Maybe<UserCreateOneWithoutContentByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutContentUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
}

export interface SubjectCreateOneWithoutContentsInput {
  create?: Maybe<SubjectCreateWithoutContentsInput>;
  connect?: Maybe<SubjectWhereUniqueInput>;
}

export interface SubjectCreateWithoutContentsInput {
  id?: Maybe<ID_Input>;
  name: String;
  picture?: Maybe<String>;
  medium?: Maybe<MediumCreateOneWithoutSubjectsInput>;
  std: StdCreateOneWithoutSubjectsInput;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupCreateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileCreateManyWithoutSubjectsInput>;
  units?: Maybe<UnitCreateManyWithoutSubjectInput>;
  topic?: Maybe<TopicCreateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserCreateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizCreateManyWithoutSubjectInput>;
}

export interface UserCreateOneWithoutSubjectByMeInput {
  create?: Maybe<UserCreateWithoutSubjectByMeInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutSubjectByMeInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface SubjectSubscriptionCreateManyWithoutUseridInput {
  create?: Maybe<
    | SubjectSubscriptionCreateWithoutUseridInput[]
    | SubjectSubscriptionCreateWithoutUseridInput
  >;
  connect?: Maybe<
    SubjectSubscriptionWhereUniqueInput[] | SubjectSubscriptionWhereUniqueInput
  >;
}

export interface SubjectSubscriptionCreateWithoutUseridInput {
  id?: Maybe<ID_Input>;
  subsType?: Maybe<String>;
  mySubjects?: Maybe<SubjectCreateManyInput>;
  subscribedAs: RoleCreateOneWithoutSubjectSubscriptionsInput;
}

export interface SubjectCreateManyInput {
  create?: Maybe<SubjectCreateInput[] | SubjectCreateInput>;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
}

export interface SubjectCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  picture?: Maybe<String>;
  medium?: Maybe<MediumCreateOneWithoutSubjectsInput>;
  std: StdCreateOneWithoutSubjectsInput;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupCreateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileCreateManyWithoutSubjectsInput>;
  units?: Maybe<UnitCreateManyWithoutSubjectInput>;
  topic?: Maybe<TopicCreateManyWithoutSubjectInput>;
  contents?: Maybe<ContentCreateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserCreateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizCreateManyWithoutSubjectInput>;
}

export interface UserCreateManyWithoutSubjectUpddateByMeInput {
  create?: Maybe<
    | UserCreateWithoutSubjectUpddateByMeInput[]
    | UserCreateWithoutSubjectUpddateByMeInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutSubjectUpddateByMeInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface SubjectCreateManyWithoutCreatedByInput {
  create?: Maybe<
    SubjectCreateWithoutCreatedByInput[] | SubjectCreateWithoutCreatedByInput
  >;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
}

export interface SubjectCreateWithoutCreatedByInput {
  id?: Maybe<ID_Input>;
  name: String;
  picture?: Maybe<String>;
  medium?: Maybe<MediumCreateOneWithoutSubjectsInput>;
  std: StdCreateOneWithoutSubjectsInput;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupCreateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileCreateManyWithoutSubjectsInput>;
  units?: Maybe<UnitCreateManyWithoutSubjectInput>;
  topic?: Maybe<TopicCreateManyWithoutSubjectInput>;
  contents?: Maybe<ContentCreateManyWithoutSubjectInput>;
  updateBy?: Maybe<UserCreateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizCreateManyWithoutSubjectInput>;
}

export interface QuestionCreateManyWithoutSubjectInput {
  create?: Maybe<
    QuestionCreateWithoutSubjectInput[] | QuestionCreateWithoutSubjectInput
  >;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutSubjectInput {
  id?: Maybe<ID_Input>;
  unit?: Maybe<UnitCreateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicCreateOneWithoutQuestionsInput>;
  quetype: String;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType: String;
  descriptionurl?: Maybe<String>;
  options: Json;
  createdBy?: Maybe<UserCreateOneWithoutQuestionCreatedByInput>;
  level: Int;
  updatedBy?: Maybe<UserCreateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizCreateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultCreateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultCreateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultCreateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultCreateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultCreateManyWithoutWrongInput>;
}

export interface UnitCreateOneWithoutQuestionsInput {
  create?: Maybe<UnitCreateWithoutQuestionsInput>;
  connect?: Maybe<UnitWhereUniqueInput>;
}

export interface UnitCreateWithoutQuestionsInput {
  id?: Maybe<ID_Input>;
  name: String;
  subject: SubjectCreateOneWithoutUnitsInput;
  topics?: Maybe<TopicCreateManyWithoutUnitInput>;
  contents?: Maybe<ContentCreateManyWithoutUnitInput>;
  createdBy?: Maybe<UserCreateOneWithoutUnitByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutUnitUpdatedByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
  quizs?: Maybe<QuizCreateManyWithoutUnitInput>;
}

export interface UserCreateOneWithoutUnitByMeInput {
  create?: Maybe<UserCreateWithoutUnitByMeInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutUnitByMeInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface SubjectCreateManyWithoutUpdateByInput {
  create?: Maybe<
    SubjectCreateWithoutUpdateByInput[] | SubjectCreateWithoutUpdateByInput
  >;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
}

export interface SubjectCreateWithoutUpdateByInput {
  id?: Maybe<ID_Input>;
  name: String;
  picture?: Maybe<String>;
  medium?: Maybe<MediumCreateOneWithoutSubjectsInput>;
  std: StdCreateOneWithoutSubjectsInput;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupCreateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileCreateManyWithoutSubjectsInput>;
  units?: Maybe<UnitCreateManyWithoutSubjectInput>;
  topic?: Maybe<TopicCreateManyWithoutSubjectInput>;
  contents?: Maybe<ContentCreateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserCreateOneWithoutSubjectByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizCreateManyWithoutSubjectInput>;
}

export interface QuizCreateManyWithoutSubjectInput {
  create?: Maybe<
    QuizCreateWithoutSubjectInput[] | QuizCreateWithoutSubjectInput
  >;
  connect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
}

export interface QuizCreateWithoutSubjectInput {
  id?: Maybe<ID_Input>;
  quizName: String;
  quizType: String;
  unit?: Maybe<UnitCreateOneWithoutQuizsInput>;
  topic?: Maybe<TopicCreateOneWithoutQuizsInput>;
  questions?: Maybe<QuestionCreateManyWithoutQuizInput>;
  markingscheme?: Maybe<Json>;
  quizlevel?: Maybe<Int>;
  threshold?: Maybe<Json>;
  isForLevelPromotion?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  description?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  createdBy: UserCreateOneWithoutQuizCreatedByInput;
  weightage?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  validTo?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
  results?: Maybe<ResultCreateManyWithoutQuizInput>;
  courses?: Maybe<QuizCreateManyWithoutCoursesInput>;
}

export interface UnitCreateOneWithoutQuizsInput {
  create?: Maybe<UnitCreateWithoutQuizsInput>;
  connect?: Maybe<UnitWhereUniqueInput>;
}

export interface UnitCreateWithoutQuizsInput {
  id?: Maybe<ID_Input>;
  name: String;
  subject: SubjectCreateOneWithoutUnitsInput;
  topics?: Maybe<TopicCreateManyWithoutUnitInput>;
  contents?: Maybe<ContentCreateManyWithoutUnitInput>;
  createdBy?: Maybe<UserCreateOneWithoutUnitByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutUnitUpdatedByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutUnitInput>;
}

export interface UserCreateManyWithoutUnitUpdatedByMeInput {
  create?: Maybe<
    | UserCreateWithoutUnitUpdatedByMeInput[]
    | UserCreateWithoutUnitUpdatedByMeInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutUnitUpdatedByMeInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface UnitCreateManyWithoutCreatedByInput {
  create?: Maybe<
    UnitCreateWithoutCreatedByInput[] | UnitCreateWithoutCreatedByInput
  >;
  connect?: Maybe<UnitWhereUniqueInput[] | UnitWhereUniqueInput>;
}

export interface UnitCreateWithoutCreatedByInput {
  id?: Maybe<ID_Input>;
  name: String;
  subject: SubjectCreateOneWithoutUnitsInput;
  topics?: Maybe<TopicCreateManyWithoutUnitInput>;
  contents?: Maybe<ContentCreateManyWithoutUnitInput>;
  updateBy?: Maybe<UserCreateManyWithoutUnitUpdatedByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutUnitInput>;
  quizs?: Maybe<QuizCreateManyWithoutUnitInput>;
}

export interface QuestionCreateManyWithoutUnitInput {
  create?: Maybe<
    QuestionCreateWithoutUnitInput[] | QuestionCreateWithoutUnitInput
  >;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutUnitInput {
  id?: Maybe<ID_Input>;
  subject?: Maybe<SubjectCreateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicCreateOneWithoutQuestionsInput>;
  quetype: String;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType: String;
  descriptionurl?: Maybe<String>;
  options: Json;
  createdBy?: Maybe<UserCreateOneWithoutQuestionCreatedByInput>;
  level: Int;
  updatedBy?: Maybe<UserCreateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizCreateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultCreateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultCreateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultCreateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultCreateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultCreateManyWithoutWrongInput>;
}

export interface SubjectCreateOneWithoutQuestionsInput {
  create?: Maybe<SubjectCreateWithoutQuestionsInput>;
  connect?: Maybe<SubjectWhereUniqueInput>;
}

export interface SubjectCreateWithoutQuestionsInput {
  id?: Maybe<ID_Input>;
  name: String;
  picture?: Maybe<String>;
  medium?: Maybe<MediumCreateOneWithoutSubjectsInput>;
  std: StdCreateOneWithoutSubjectsInput;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupCreateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileCreateManyWithoutSubjectsInput>;
  units?: Maybe<UnitCreateManyWithoutSubjectInput>;
  topic?: Maybe<TopicCreateManyWithoutSubjectInput>;
  contents?: Maybe<ContentCreateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserCreateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  quizes?: Maybe<QuizCreateManyWithoutSubjectInput>;
}

export interface TopicCreateOneWithoutQuestionsInput {
  create?: Maybe<TopicCreateWithoutQuestionsInput>;
  connect?: Maybe<TopicWhereUniqueInput>;
}

export interface TopicCreateWithoutQuestionsInput {
  id?: Maybe<ID_Input>;
  name: String;
  subject?: Maybe<SubjectCreateOneWithoutTopicInput>;
  unit?: Maybe<UnitCreateOneWithoutTopicsInput>;
  contents?: Maybe<ContentCreateManyWithoutTopicInput>;
  createdBy?: Maybe<UserCreateOneWithoutTopicByMeInput>;
  updateBy?: Maybe<UserCreateOneWithoutTopicUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
  quizs?: Maybe<QuizCreateManyWithoutTopicInput>;
}

export interface ContentCreateManyWithoutTopicInput {
  create?: Maybe<
    ContentCreateWithoutTopicInput[] | ContentCreateWithoutTopicInput
  >;
  connect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
}

export interface ContentCreateWithoutTopicInput {
  id?: Maybe<ID_Input>;
  name: String;
  number?: Maybe<Int>;
  fileInfo?: Maybe<Json>;
  type: String;
  url?: Maybe<String>;
  subject: SubjectCreateOneWithoutContentsInput;
  unit?: Maybe<UnitCreateOneWithoutContentsInput>;
  createdBy?: Maybe<UserCreateOneWithoutContentByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutContentUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
}

export interface UserCreateOneWithoutContentByMeInput {
  create?: Maybe<UserCreateWithoutContentByMeInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutContentByMeInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface UnitCreateManyWithoutUpdateByInput {
  create?: Maybe<
    UnitCreateWithoutUpdateByInput[] | UnitCreateWithoutUpdateByInput
  >;
  connect?: Maybe<UnitWhereUniqueInput[] | UnitWhereUniqueInput>;
}

export interface UnitCreateWithoutUpdateByInput {
  id?: Maybe<ID_Input>;
  name: String;
  subject: SubjectCreateOneWithoutUnitsInput;
  topics?: Maybe<TopicCreateManyWithoutUnitInput>;
  contents?: Maybe<ContentCreateManyWithoutUnitInput>;
  createdBy?: Maybe<UserCreateOneWithoutUnitByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutUnitInput>;
  quizs?: Maybe<QuizCreateManyWithoutUnitInput>;
}

export interface QuizCreateManyWithoutUnitInput {
  create?: Maybe<QuizCreateWithoutUnitInput[] | QuizCreateWithoutUnitInput>;
  connect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
}

export interface QuizCreateWithoutUnitInput {
  id?: Maybe<ID_Input>;
  quizName: String;
  quizType: String;
  subject?: Maybe<SubjectCreateOneWithoutQuizesInput>;
  topic?: Maybe<TopicCreateOneWithoutQuizsInput>;
  questions?: Maybe<QuestionCreateManyWithoutQuizInput>;
  markingscheme?: Maybe<Json>;
  quizlevel?: Maybe<Int>;
  threshold?: Maybe<Json>;
  isForLevelPromotion?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  description?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  createdBy: UserCreateOneWithoutQuizCreatedByInput;
  weightage?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  validTo?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
  results?: Maybe<ResultCreateManyWithoutQuizInput>;
  courses?: Maybe<QuizCreateManyWithoutCoursesInput>;
}

export interface SubjectCreateOneWithoutQuizesInput {
  create?: Maybe<SubjectCreateWithoutQuizesInput>;
  connect?: Maybe<SubjectWhereUniqueInput>;
}

export interface SubjectCreateWithoutQuizesInput {
  id?: Maybe<ID_Input>;
  name: String;
  picture?: Maybe<String>;
  medium?: Maybe<MediumCreateOneWithoutSubjectsInput>;
  std: StdCreateOneWithoutSubjectsInput;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupCreateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileCreateManyWithoutSubjectsInput>;
  units?: Maybe<UnitCreateManyWithoutSubjectInput>;
  topic?: Maybe<TopicCreateManyWithoutSubjectInput>;
  contents?: Maybe<ContentCreateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserCreateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutSubjectInput>;
}

export interface TopicCreateOneWithoutQuizsInput {
  create?: Maybe<TopicCreateWithoutQuizsInput>;
  connect?: Maybe<TopicWhereUniqueInput>;
}

export interface TopicCreateWithoutQuizsInput {
  id?: Maybe<ID_Input>;
  name: String;
  subject?: Maybe<SubjectCreateOneWithoutTopicInput>;
  unit?: Maybe<UnitCreateOneWithoutTopicsInput>;
  contents?: Maybe<ContentCreateManyWithoutTopicInput>;
  createdBy?: Maybe<UserCreateOneWithoutTopicByMeInput>;
  updateBy?: Maybe<UserCreateOneWithoutTopicUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutTopicInput>;
}

export interface UserCreateOneWithoutTopicByMeInput {
  create?: Maybe<UserCreateWithoutTopicByMeInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutTopicByMeInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface TopicCreateManyWithoutUpdateByInput {
  create?: Maybe<
    TopicCreateWithoutUpdateByInput[] | TopicCreateWithoutUpdateByInput
  >;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
}

export interface TopicCreateWithoutUpdateByInput {
  id?: Maybe<ID_Input>;
  name: String;
  subject?: Maybe<SubjectCreateOneWithoutTopicInput>;
  unit?: Maybe<UnitCreateOneWithoutTopicsInput>;
  contents?: Maybe<ContentCreateManyWithoutTopicInput>;
  createdBy?: Maybe<UserCreateOneWithoutTopicByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutTopicInput>;
  quizs?: Maybe<QuizCreateManyWithoutTopicInput>;
}

export interface QuestionCreateManyWithoutTopicInput {
  create?: Maybe<
    QuestionCreateWithoutTopicInput[] | QuestionCreateWithoutTopicInput
  >;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutTopicInput {
  id?: Maybe<ID_Input>;
  subject?: Maybe<SubjectCreateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitCreateOneWithoutQuestionsInput>;
  quetype: String;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType: String;
  descriptionurl?: Maybe<String>;
  options: Json;
  createdBy?: Maybe<UserCreateOneWithoutQuestionCreatedByInput>;
  level: Int;
  updatedBy?: Maybe<UserCreateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizCreateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultCreateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultCreateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultCreateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultCreateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultCreateManyWithoutWrongInput>;
}

export interface UserCreateOneWithoutQuestionCreatedByInput {
  create?: Maybe<UserCreateWithoutQuestionCreatedByInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutQuestionCreatedByInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface TopicCreateManyWithoutCreatedByInput {
  create?: Maybe<
    TopicCreateWithoutCreatedByInput[] | TopicCreateWithoutCreatedByInput
  >;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
}

export interface TopicCreateWithoutCreatedByInput {
  id?: Maybe<ID_Input>;
  name: String;
  subject?: Maybe<SubjectCreateOneWithoutTopicInput>;
  unit?: Maybe<UnitCreateOneWithoutTopicsInput>;
  contents?: Maybe<ContentCreateManyWithoutTopicInput>;
  updateBy?: Maybe<UserCreateOneWithoutTopicUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutTopicInput>;
  quizs?: Maybe<QuizCreateManyWithoutTopicInput>;
}

export interface UserCreateOneWithoutTopicUpdateByMeInput {
  create?: Maybe<UserCreateWithoutTopicUpdateByMeInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutTopicUpdateByMeInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface ContentCreateManyWithoutCreatedByInput {
  create?: Maybe<
    ContentCreateWithoutCreatedByInput[] | ContentCreateWithoutCreatedByInput
  >;
  connect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
}

export interface ContentCreateWithoutCreatedByInput {
  id?: Maybe<ID_Input>;
  name: String;
  number?: Maybe<Int>;
  fileInfo?: Maybe<Json>;
  type: String;
  url?: Maybe<String>;
  subject: SubjectCreateOneWithoutContentsInput;
  unit?: Maybe<UnitCreateOneWithoutContentsInput>;
  topic?: Maybe<TopicCreateOneWithoutContentsInput>;
  updateBy?: Maybe<UserCreateManyWithoutContentUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
}

export interface TopicCreateOneWithoutContentsInput {
  create?: Maybe<TopicCreateWithoutContentsInput>;
  connect?: Maybe<TopicWhereUniqueInput>;
}

export interface TopicCreateWithoutContentsInput {
  id?: Maybe<ID_Input>;
  name: String;
  subject?: Maybe<SubjectCreateOneWithoutTopicInput>;
  unit?: Maybe<UnitCreateOneWithoutTopicsInput>;
  createdBy?: Maybe<UserCreateOneWithoutTopicByMeInput>;
  updateBy?: Maybe<UserCreateOneWithoutTopicUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutTopicInput>;
  quizs?: Maybe<QuizCreateManyWithoutTopicInput>;
}

export interface QuizCreateManyWithoutTopicInput {
  create?: Maybe<QuizCreateWithoutTopicInput[] | QuizCreateWithoutTopicInput>;
  connect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
}

export interface QuizCreateWithoutTopicInput {
  id?: Maybe<ID_Input>;
  quizName: String;
  quizType: String;
  subject?: Maybe<SubjectCreateOneWithoutQuizesInput>;
  unit?: Maybe<UnitCreateOneWithoutQuizsInput>;
  questions?: Maybe<QuestionCreateManyWithoutQuizInput>;
  markingscheme?: Maybe<Json>;
  quizlevel?: Maybe<Int>;
  threshold?: Maybe<Json>;
  isForLevelPromotion?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  description?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  createdBy: UserCreateOneWithoutQuizCreatedByInput;
  weightage?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  validTo?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
  results?: Maybe<ResultCreateManyWithoutQuizInput>;
  courses?: Maybe<QuizCreateManyWithoutCoursesInput>;
}

export interface QuestionCreateManyWithoutQuizInput {
  create?: Maybe<
    QuestionCreateWithoutQuizInput[] | QuestionCreateWithoutQuizInput
  >;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutQuizInput {
  id?: Maybe<ID_Input>;
  subject?: Maybe<SubjectCreateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitCreateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicCreateOneWithoutQuestionsInput>;
  quetype: String;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType: String;
  descriptionurl?: Maybe<String>;
  options: Json;
  createdBy?: Maybe<UserCreateOneWithoutQuestionCreatedByInput>;
  level: Int;
  updatedBy?: Maybe<UserCreateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultCreateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultCreateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultCreateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultCreateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultCreateManyWithoutWrongInput>;
}

export interface UserCreateOneWithoutQuestionUpdateddByInput {
  create?: Maybe<UserCreateWithoutQuestionUpdateddByInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutQuestionUpdateddByInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface ContentCreateManyWithoutUpdateByInput {
  create?: Maybe<
    ContentCreateWithoutUpdateByInput[] | ContentCreateWithoutUpdateByInput
  >;
  connect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
}

export interface ContentCreateWithoutUpdateByInput {
  id?: Maybe<ID_Input>;
  name: String;
  number?: Maybe<Int>;
  fileInfo?: Maybe<Json>;
  type: String;
  url?: Maybe<String>;
  subject: SubjectCreateOneWithoutContentsInput;
  unit?: Maybe<UnitCreateOneWithoutContentsInput>;
  topic?: Maybe<TopicCreateOneWithoutContentsInput>;
  createdBy?: Maybe<UserCreateOneWithoutContentByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
}

export interface QuestionCreateManyWithoutCreatedByInput {
  create?: Maybe<
    QuestionCreateWithoutCreatedByInput[] | QuestionCreateWithoutCreatedByInput
  >;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutCreatedByInput {
  id?: Maybe<ID_Input>;
  subject?: Maybe<SubjectCreateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitCreateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicCreateOneWithoutQuestionsInput>;
  quetype: String;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType: String;
  descriptionurl?: Maybe<String>;
  options: Json;
  level: Int;
  updatedBy?: Maybe<UserCreateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizCreateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultCreateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultCreateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultCreateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultCreateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultCreateManyWithoutWrongInput>;
}

export interface QuizCreateManyWithoutQuestionsInput {
  create?: Maybe<
    QuizCreateWithoutQuestionsInput[] | QuizCreateWithoutQuestionsInput
  >;
  connect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
}

export interface QuizCreateWithoutQuestionsInput {
  id?: Maybe<ID_Input>;
  quizName: String;
  quizType: String;
  subject?: Maybe<SubjectCreateOneWithoutQuizesInput>;
  unit?: Maybe<UnitCreateOneWithoutQuizsInput>;
  topic?: Maybe<TopicCreateOneWithoutQuizsInput>;
  markingscheme?: Maybe<Json>;
  quizlevel?: Maybe<Int>;
  threshold?: Maybe<Json>;
  isForLevelPromotion?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  description?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  createdBy: UserCreateOneWithoutQuizCreatedByInput;
  weightage?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  validTo?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
  results?: Maybe<ResultCreateManyWithoutQuizInput>;
  courses?: Maybe<QuizCreateManyWithoutCoursesInput>;
}

export interface UserCreateOneWithoutQuizCreatedByInput {
  create?: Maybe<UserCreateWithoutQuizCreatedByInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutQuizCreatedByInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface QuestionCreateManyWithoutUpdatedByInput {
  create?: Maybe<
    QuestionCreateWithoutUpdatedByInput[] | QuestionCreateWithoutUpdatedByInput
  >;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutUpdatedByInput {
  id?: Maybe<ID_Input>;
  subject?: Maybe<SubjectCreateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitCreateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicCreateOneWithoutQuestionsInput>;
  quetype: String;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType: String;
  descriptionurl?: Maybe<String>;
  options: Json;
  createdBy?: Maybe<UserCreateOneWithoutQuestionCreatedByInput>;
  level: Int;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizCreateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultCreateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultCreateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultCreateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultCreateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultCreateManyWithoutWrongInput>;
}

export interface ResultCreateManyWithoutQuestionsInput {
  create?: Maybe<
    ResultCreateWithoutQuestionsInput[] | ResultCreateWithoutQuestionsInput
  >;
  connect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
}

export interface ResultCreateWithoutQuestionsInput {
  id?: Maybe<ID_Input>;
  quiz: QuizCreateOneWithoutResultsInput;
  quizName: String;
  quizType: String;
  result: String;
  quizlevel: Int;
  score?: Maybe<Float>;
  attempted?: Maybe<QuestionCreateManyWithoutAtemptedResultInput>;
  notattempted?: Maybe<QuestionCreateManyWithoutNotattemptedInput>;
  correct?: Maybe<QuestionCreateManyWithoutCorrectInput>;
  wrong?: Maybe<QuestionCreateManyWithoutWrongInput>;
  achievement?: Maybe<String>;
  duration?: Maybe<Int>;
  attemptedDate: DateTimeInput;
  commentFromTeacher?: Maybe<String>;
  rank?: Maybe<Int>;
  userId: UserCreateOneWithoutResultInput;
}

export interface QuizCreateOneWithoutResultsInput {
  create?: Maybe<QuizCreateWithoutResultsInput>;
  connect?: Maybe<QuizWhereUniqueInput>;
}

export interface QuizCreateWithoutResultsInput {
  id?: Maybe<ID_Input>;
  quizName: String;
  quizType: String;
  subject?: Maybe<SubjectCreateOneWithoutQuizesInput>;
  unit?: Maybe<UnitCreateOneWithoutQuizsInput>;
  topic?: Maybe<TopicCreateOneWithoutQuizsInput>;
  questions?: Maybe<QuestionCreateManyWithoutQuizInput>;
  markingscheme?: Maybe<Json>;
  quizlevel?: Maybe<Int>;
  threshold?: Maybe<Json>;
  isForLevelPromotion?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  description?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  createdBy: UserCreateOneWithoutQuizCreatedByInput;
  weightage?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  validTo?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
  courses?: Maybe<QuizCreateManyWithoutCoursesInput>;
}

export interface QuizCreateManyWithoutCoursesInput {
  create?: Maybe<
    QuizCreateWithoutCoursesInput[] | QuizCreateWithoutCoursesInput
  >;
  connect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
}

export interface QuizCreateWithoutCoursesInput {
  id?: Maybe<ID_Input>;
  quizName: String;
  quizType: String;
  subject?: Maybe<SubjectCreateOneWithoutQuizesInput>;
  unit?: Maybe<UnitCreateOneWithoutQuizsInput>;
  topic?: Maybe<TopicCreateOneWithoutQuizsInput>;
  questions?: Maybe<QuestionCreateManyWithoutQuizInput>;
  markingscheme?: Maybe<Json>;
  quizlevel?: Maybe<Int>;
  threshold?: Maybe<Json>;
  isForLevelPromotion?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  description?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  createdBy: UserCreateOneWithoutQuizCreatedByInput;
  weightage?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  validTo?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
  results?: Maybe<ResultCreateManyWithoutQuizInput>;
}

export interface ResultCreateManyWithoutQuizInput {
  create?: Maybe<ResultCreateWithoutQuizInput[] | ResultCreateWithoutQuizInput>;
  connect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
}

export interface ResultCreateWithoutQuizInput {
  id?: Maybe<ID_Input>;
  quizName: String;
  quizType: String;
  questions?: Maybe<QuestionCreateManyWithoutResultsInput>;
  result: String;
  quizlevel: Int;
  score?: Maybe<Float>;
  attempted?: Maybe<QuestionCreateManyWithoutAtemptedResultInput>;
  notattempted?: Maybe<QuestionCreateManyWithoutNotattemptedInput>;
  correct?: Maybe<QuestionCreateManyWithoutCorrectInput>;
  wrong?: Maybe<QuestionCreateManyWithoutWrongInput>;
  achievement?: Maybe<String>;
  duration?: Maybe<Int>;
  attemptedDate: DateTimeInput;
  commentFromTeacher?: Maybe<String>;
  rank?: Maybe<Int>;
  userId: UserCreateOneWithoutResultInput;
}

export interface QuestionCreateManyWithoutResultsInput {
  create?: Maybe<
    QuestionCreateWithoutResultsInput[] | QuestionCreateWithoutResultsInput
  >;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutResultsInput {
  id?: Maybe<ID_Input>;
  subject?: Maybe<SubjectCreateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitCreateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicCreateOneWithoutQuestionsInput>;
  quetype: String;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType: String;
  descriptionurl?: Maybe<String>;
  options: Json;
  createdBy?: Maybe<UserCreateOneWithoutQuestionCreatedByInput>;
  level: Int;
  updatedBy?: Maybe<UserCreateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizCreateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  atemptedResult?: Maybe<ResultCreateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultCreateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultCreateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultCreateManyWithoutWrongInput>;
}

export interface ResultCreateManyWithoutAttemptedInput {
  create?: Maybe<
    ResultCreateWithoutAttemptedInput[] | ResultCreateWithoutAttemptedInput
  >;
  connect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
}

export interface ResultCreateWithoutAttemptedInput {
  id?: Maybe<ID_Input>;
  quiz: QuizCreateOneWithoutResultsInput;
  quizName: String;
  quizType: String;
  questions?: Maybe<QuestionCreateManyWithoutResultsInput>;
  result: String;
  quizlevel: Int;
  score?: Maybe<Float>;
  notattempted?: Maybe<QuestionCreateManyWithoutNotattemptedInput>;
  correct?: Maybe<QuestionCreateManyWithoutCorrectInput>;
  wrong?: Maybe<QuestionCreateManyWithoutWrongInput>;
  achievement?: Maybe<String>;
  duration?: Maybe<Int>;
  attemptedDate: DateTimeInput;
  commentFromTeacher?: Maybe<String>;
  rank?: Maybe<Int>;
  userId: UserCreateOneWithoutResultInput;
}

export interface QuestionCreateManyWithoutNotattemptedInput {
  create?: Maybe<
    | QuestionCreateWithoutNotattemptedInput[]
    | QuestionCreateWithoutNotattemptedInput
  >;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutNotattemptedInput {
  id?: Maybe<ID_Input>;
  subject?: Maybe<SubjectCreateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitCreateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicCreateOneWithoutQuestionsInput>;
  quetype: String;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType: String;
  descriptionurl?: Maybe<String>;
  options: Json;
  createdBy?: Maybe<UserCreateOneWithoutQuestionCreatedByInput>;
  level: Int;
  updatedBy?: Maybe<UserCreateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizCreateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultCreateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultCreateManyWithoutAttemptedInput>;
  correct?: Maybe<ResultCreateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultCreateManyWithoutWrongInput>;
}

export interface ResultCreateManyWithoutCorrectInput {
  create?: Maybe<
    ResultCreateWithoutCorrectInput[] | ResultCreateWithoutCorrectInput
  >;
  connect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
}

export interface ResultCreateWithoutCorrectInput {
  id?: Maybe<ID_Input>;
  quiz: QuizCreateOneWithoutResultsInput;
  quizName: String;
  quizType: String;
  questions?: Maybe<QuestionCreateManyWithoutResultsInput>;
  result: String;
  quizlevel: Int;
  score?: Maybe<Float>;
  attempted?: Maybe<QuestionCreateManyWithoutAtemptedResultInput>;
  notattempted?: Maybe<QuestionCreateManyWithoutNotattemptedInput>;
  wrong?: Maybe<QuestionCreateManyWithoutWrongInput>;
  achievement?: Maybe<String>;
  duration?: Maybe<Int>;
  attemptedDate: DateTimeInput;
  commentFromTeacher?: Maybe<String>;
  rank?: Maybe<Int>;
  userId: UserCreateOneWithoutResultInput;
}

export interface QuestionCreateManyWithoutAtemptedResultInput {
  create?: Maybe<
    | QuestionCreateWithoutAtemptedResultInput[]
    | QuestionCreateWithoutAtemptedResultInput
  >;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutAtemptedResultInput {
  id?: Maybe<ID_Input>;
  subject?: Maybe<SubjectCreateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitCreateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicCreateOneWithoutQuestionsInput>;
  quetype: String;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType: String;
  descriptionurl?: Maybe<String>;
  options: Json;
  createdBy?: Maybe<UserCreateOneWithoutQuestionCreatedByInput>;
  level: Int;
  updatedBy?: Maybe<UserCreateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizCreateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultCreateManyWithoutQuestionsInput>;
  notattempted?: Maybe<ResultCreateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultCreateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultCreateManyWithoutWrongInput>;
}

export interface ResultCreateManyWithoutNotattemptedInput {
  create?: Maybe<
    | ResultCreateWithoutNotattemptedInput[]
    | ResultCreateWithoutNotattemptedInput
  >;
  connect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
}

export interface ResultCreateWithoutNotattemptedInput {
  id?: Maybe<ID_Input>;
  quiz: QuizCreateOneWithoutResultsInput;
  quizName: String;
  quizType: String;
  questions?: Maybe<QuestionCreateManyWithoutResultsInput>;
  result: String;
  quizlevel: Int;
  score?: Maybe<Float>;
  attempted?: Maybe<QuestionCreateManyWithoutAtemptedResultInput>;
  correct?: Maybe<QuestionCreateManyWithoutCorrectInput>;
  wrong?: Maybe<QuestionCreateManyWithoutWrongInput>;
  achievement?: Maybe<String>;
  duration?: Maybe<Int>;
  attemptedDate: DateTimeInput;
  commentFromTeacher?: Maybe<String>;
  rank?: Maybe<Int>;
  userId: UserCreateOneWithoutResultInput;
}

export interface QuestionCreateManyWithoutCorrectInput {
  create?: Maybe<
    QuestionCreateWithoutCorrectInput[] | QuestionCreateWithoutCorrectInput
  >;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutCorrectInput {
  id?: Maybe<ID_Input>;
  subject?: Maybe<SubjectCreateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitCreateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicCreateOneWithoutQuestionsInput>;
  quetype: String;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType: String;
  descriptionurl?: Maybe<String>;
  options: Json;
  createdBy?: Maybe<UserCreateOneWithoutQuestionCreatedByInput>;
  level: Int;
  updatedBy?: Maybe<UserCreateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizCreateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultCreateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultCreateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultCreateManyWithoutNotattemptedInput>;
  wrong?: Maybe<ResultCreateManyWithoutWrongInput>;
}

export interface ResultCreateManyWithoutWrongInput {
  create?: Maybe<
    ResultCreateWithoutWrongInput[] | ResultCreateWithoutWrongInput
  >;
  connect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
}

export interface ResultCreateWithoutWrongInput {
  id?: Maybe<ID_Input>;
  quiz: QuizCreateOneWithoutResultsInput;
  quizName: String;
  quizType: String;
  questions?: Maybe<QuestionCreateManyWithoutResultsInput>;
  result: String;
  quizlevel: Int;
  score?: Maybe<Float>;
  attempted?: Maybe<QuestionCreateManyWithoutAtemptedResultInput>;
  notattempted?: Maybe<QuestionCreateManyWithoutNotattemptedInput>;
  correct?: Maybe<QuestionCreateManyWithoutCorrectInput>;
  achievement?: Maybe<String>;
  duration?: Maybe<Int>;
  attemptedDate: DateTimeInput;
  commentFromTeacher?: Maybe<String>;
  rank?: Maybe<Int>;
  userId: UserCreateOneWithoutResultInput;
}

export interface UserCreateOneWithoutResultInput {
  create?: Maybe<UserCreateWithoutResultInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutResultInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
}

export interface QuizCreateManyWithoutCreatedByInput {
  create?: Maybe<
    QuizCreateWithoutCreatedByInput[] | QuizCreateWithoutCreatedByInput
  >;
  connect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
}

export interface QuizCreateWithoutCreatedByInput {
  id?: Maybe<ID_Input>;
  quizName: String;
  quizType: String;
  subject?: Maybe<SubjectCreateOneWithoutQuizesInput>;
  unit?: Maybe<UnitCreateOneWithoutQuizsInput>;
  topic?: Maybe<TopicCreateOneWithoutQuizsInput>;
  questions?: Maybe<QuestionCreateManyWithoutQuizInput>;
  markingscheme?: Maybe<Json>;
  quizlevel?: Maybe<Int>;
  threshold?: Maybe<Json>;
  isForLevelPromotion?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  description?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  weightage?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  validTo?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
  results?: Maybe<ResultCreateManyWithoutQuizInput>;
  courses?: Maybe<QuizCreateManyWithoutCoursesInput>;
}

export interface VoteCreateManyWithoutUserInput {
  create?: Maybe<VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface VoteCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  option?: Maybe<OptionCreateOneWithoutVotesInput>;
}

export interface OptionCreateOneWithoutVotesInput {
  create?: Maybe<OptionCreateWithoutVotesInput>;
  connect?: Maybe<OptionWhereUniqueInput>;
}

export interface OptionCreateWithoutVotesInput {
  id?: Maybe<ID_Input>;
  name: String;
  color: Color;
  poll?: Maybe<PollCreateOneWithoutOptionsInput>;
}

export interface PollCreateOneWithoutOptionsInput {
  create?: Maybe<PollCreateWithoutOptionsInput>;
  connect?: Maybe<PollWhereUniqueInput>;
}

export interface PollCreateWithoutOptionsInput {
  id?: Maybe<ID_Input>;
  title: String;
}

export interface QuestionCreateManyWithoutWrongInput {
  create?: Maybe<
    QuestionCreateWithoutWrongInput[] | QuestionCreateWithoutWrongInput
  >;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutWrongInput {
  id?: Maybe<ID_Input>;
  subject?: Maybe<SubjectCreateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitCreateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicCreateOneWithoutQuestionsInput>;
  quetype: String;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType: String;
  descriptionurl?: Maybe<String>;
  options: Json;
  createdBy?: Maybe<UserCreateOneWithoutQuestionCreatedByInput>;
  level: Int;
  updatedBy?: Maybe<UserCreateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizCreateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultCreateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultCreateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultCreateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultCreateManyWithoutCorrectInput>;
}

export interface ResultCreateManyWithoutUserIdInput {
  create?: Maybe<
    ResultCreateWithoutUserIdInput[] | ResultCreateWithoutUserIdInput
  >;
  connect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
}

export interface ResultCreateWithoutUserIdInput {
  id?: Maybe<ID_Input>;
  quiz: QuizCreateOneWithoutResultsInput;
  quizName: String;
  quizType: String;
  questions?: Maybe<QuestionCreateManyWithoutResultsInput>;
  result: String;
  quizlevel: Int;
  score?: Maybe<Float>;
  attempted?: Maybe<QuestionCreateManyWithoutAtemptedResultInput>;
  notattempted?: Maybe<QuestionCreateManyWithoutNotattemptedInput>;
  correct?: Maybe<QuestionCreateManyWithoutCorrectInput>;
  wrong?: Maybe<QuestionCreateManyWithoutWrongInput>;
  achievement?: Maybe<String>;
  duration?: Maybe<Int>;
  attemptedDate: DateTimeInput;
  commentFromTeacher?: Maybe<String>;
  rank?: Maybe<Int>;
}

export interface UserCreateManyWithoutContentUpdateByMeInput {
  create?: Maybe<
    | UserCreateWithoutContentUpdateByMeInput[]
    | UserCreateWithoutContentUpdateByMeInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutContentUpdateByMeInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface RoleCreateOneWithoutSubjectSubscriptionsInput {
  create?: Maybe<RoleCreateWithoutSubjectSubscriptionsInput>;
  connect?: Maybe<RoleWhereUniqueInput>;
}

export interface RoleCreateWithoutSubjectSubscriptionsInput {
  id?: Maybe<ID_Input>;
  name: ROLENAME;
  org?: Maybe<OrganizationCreateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgCreateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupCreateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubgroupRolesInput>;
  users?: Maybe<UserCreateManyWithoutRolesInput>;
  educationprofiles?: Maybe<EducationProfileCreateManyWithoutRolesInput>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
}

export interface SubjectSubscriptionCreateManyWithoutSubscribedAsInput {
  create?: Maybe<
    | SubjectSubscriptionCreateWithoutSubscribedAsInput[]
    | SubjectSubscriptionCreateWithoutSubscribedAsInput
  >;
  connect?: Maybe<
    SubjectSubscriptionWhereUniqueInput[] | SubjectSubscriptionWhereUniqueInput
  >;
}

export interface SubjectSubscriptionCreateWithoutSubscribedAsInput {
  id?: Maybe<ID_Input>;
  subsType?: Maybe<String>;
  mySubjects?: Maybe<SubjectCreateManyInput>;
  userid: UserCreateOneWithoutSubjectSubscriptionInput;
}

export interface UserCreateOneWithoutSubjectSubscriptionInput {
  create?: Maybe<UserCreateWithoutSubjectSubscriptionInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutSubjectSubscriptionInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface RoleCreateManyWithoutSuborgInput {
  create?: Maybe<RoleCreateWithoutSuborgInput[] | RoleCreateWithoutSuborgInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
}

export interface RoleCreateWithoutSuborgInput {
  id?: Maybe<ID_Input>;
  name: ROLENAME;
  org?: Maybe<OrganizationCreateOneWithoutOrgRolesInput>;
  group?: Maybe<GroupCreateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubgroupRolesInput>;
  users?: Maybe<UserCreateManyWithoutRolesInput>;
  educationprofiles?: Maybe<EducationProfileCreateManyWithoutRolesInput>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
  subjectSubscriptions?: Maybe<
    SubjectSubscriptionCreateManyWithoutSubscribedAsInput
  >;
}

export interface RoleCreateManyWithoutOrgInput {
  create?: Maybe<RoleCreateWithoutOrgInput[] | RoleCreateWithoutOrgInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
}

export interface RoleCreateWithoutOrgInput {
  id?: Maybe<ID_Input>;
  name: ROLENAME;
  suborg?: Maybe<SuborgCreateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupCreateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubgroupRolesInput>;
  users?: Maybe<UserCreateManyWithoutRolesInput>;
  educationprofiles?: Maybe<EducationProfileCreateManyWithoutRolesInput>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
  subjectSubscriptions?: Maybe<
    SubjectSubscriptionCreateManyWithoutSubscribedAsInput
  >;
}

export interface AddressUpdateInput {
  adressline?: Maybe<String>;
  tehsil?: Maybe<String>;
  city?: Maybe<String>;
  district?: Maybe<String>;
  state?: Maybe<String>;
  pincode?: Maybe<String>;
  personalProfile?: Maybe<PersonalProfileUpdateOneWithoutAddressesInput>;
}

export interface PersonalProfileUpdateOneWithoutAddressesInput {
  create?: Maybe<PersonalProfileCreateWithoutAddressesInput>;
  update?: Maybe<PersonalProfileUpdateWithoutAddressesDataInput>;
  upsert?: Maybe<PersonalProfileUpsertWithoutAddressesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PersonalProfileWhereUniqueInput>;
}

export interface PersonalProfileUpdateWithoutAddressesDataInput {
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  mobile?: Maybe<String>;
  isMobilePublished?: Maybe<Boolean>;
  profileId?: Maybe<ProfileUpdateOneRequiredWithoutPersonalProfiileInput>;
}

export interface ProfileUpdateOneRequiredWithoutPersonalProfiileInput {
  create?: Maybe<ProfileCreateWithoutPersonalProfiileInput>;
  update?: Maybe<ProfileUpdateWithoutPersonalProfiileDataInput>;
  upsert?: Maybe<ProfileUpsertWithoutPersonalProfiileInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface ProfileUpdateWithoutPersonalProfiileDataInput {
  name?: Maybe<String>;
  userId?: Maybe<UserUpdateOneRequiredWithoutMyprofilesInput>;
  EducationProfiles?: Maybe<EducationProfileUpdateManyWithoutProfileIdInput>;
}

export interface UserUpdateOneRequiredWithoutMyprofilesInput {
  create?: Maybe<UserCreateWithoutMyprofilesInput>;
  update?: Maybe<UserUpdateWithoutMyprofilesDataInput>;
  upsert?: Maybe<UserUpsertWithoutMyprofilesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMyprofilesDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface OrganizationUpdateOneWithoutAuthorInput {
  create?: Maybe<OrganizationCreateWithoutAuthorInput>;
  update?: Maybe<OrganizationUpdateWithoutAuthorDataInput>;
  upsert?: Maybe<OrganizationUpsertWithoutAuthorInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationUpdateWithoutAuthorDataInput {
  name?: Maybe<String>;
  logo?: Maybe<String>;
  color?: Maybe<String>;
  description?: Maybe<String>;
  suborgs?: Maybe<SuborgUpdateManyWithoutOrgInput>;
  orgRoles?: Maybe<RoleUpdateManyWithoutOrgInput>;
}

export interface SuborgUpdateManyWithoutOrgInput {
  create?: Maybe<SuborgCreateWithoutOrgInput[] | SuborgCreateWithoutOrgInput>;
  delete?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
  connect?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
  set?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
  disconnect?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
  update?: Maybe<
    | SuborgUpdateWithWhereUniqueWithoutOrgInput[]
    | SuborgUpdateWithWhereUniqueWithoutOrgInput
  >;
  upsert?: Maybe<
    | SuborgUpsertWithWhereUniqueWithoutOrgInput[]
    | SuborgUpsertWithWhereUniqueWithoutOrgInput
  >;
  deleteMany?: Maybe<SuborgScalarWhereInput[] | SuborgScalarWhereInput>;
  updateMany?: Maybe<
    | SuborgUpdateManyWithWhereNestedInput[]
    | SuborgUpdateManyWithWhereNestedInput
  >;
}

export interface SuborgUpdateWithWhereUniqueWithoutOrgInput {
  where: SuborgWhereUniqueInput;
  data: SuborgUpdateWithoutOrgDataInput;
}

export interface SuborgUpdateWithoutOrgDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateManyWithoutSuborgInput>;
  userGroups?: Maybe<GroupUpdateManyWithoutSuborgidInput>;
  suborgRoles?: Maybe<RoleUpdateManyWithoutSuborgInput>;
}

export interface UserUpdateManyWithoutSuborgInput {
  create?: Maybe<UserCreateWithoutSuborgInput[] | UserCreateWithoutSuborgInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutSuborgInput[]
    | UserUpdateWithWhereUniqueWithoutSuborgInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutSuborgInput[]
    | UserUpsertWithWhereUniqueWithoutSuborgInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutSuborgInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutSuborgDataInput;
}

export interface UserUpdateWithoutSuborgDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface GroupMemberUpdateManyWithoutUseridInput {
  create?: Maybe<
    GroupMemberCreateWithoutUseridInput[] | GroupMemberCreateWithoutUseridInput
  >;
  delete?: Maybe<GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput>;
  connect?: Maybe<GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput>;
  set?: Maybe<GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput>;
  disconnect?: Maybe<
    GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput
  >;
  update?: Maybe<
    | GroupMemberUpdateWithWhereUniqueWithoutUseridInput[]
    | GroupMemberUpdateWithWhereUniqueWithoutUseridInput
  >;
  upsert?: Maybe<
    | GroupMemberUpsertWithWhereUniqueWithoutUseridInput[]
    | GroupMemberUpsertWithWhereUniqueWithoutUseridInput
  >;
  deleteMany?: Maybe<
    GroupMemberScalarWhereInput[] | GroupMemberScalarWhereInput
  >;
  updateMany?: Maybe<
    | GroupMemberUpdateManyWithWhereNestedInput[]
    | GroupMemberUpdateManyWithWhereNestedInput
  >;
}

export interface GroupMemberUpdateWithWhereUniqueWithoutUseridInput {
  where: GroupMemberWhereUniqueInput;
  data: GroupMemberUpdateWithoutUseridDataInput;
}

export interface GroupMemberUpdateWithoutUseridDataInput {
  member?: Maybe<GroupUpdateOneRequiredWithoutMembersInput>;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface GroupUpdateOneRequiredWithoutMembersInput {
  create?: Maybe<GroupCreateWithoutMembersInput>;
  update?: Maybe<GroupUpdateWithoutMembersDataInput>;
  upsert?: Maybe<GroupUpsertWithoutMembersInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupUpdateWithoutMembersDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  suborgid?: Maybe<SuborgUpdateOneRequiredWithoutUserGroupsInput>;
  subgroups?: Maybe<SubGroupUpdateManyWithoutGroupidInput>;
  groupRoles?: Maybe<RoleUpdateManyWithoutGroupInput>;
  subjects?: Maybe<SubjectUpdateManyWithoutGroupInput>;
}

export interface SuborgUpdateOneRequiredWithoutUserGroupsInput {
  create?: Maybe<SuborgCreateWithoutUserGroupsInput>;
  update?: Maybe<SuborgUpdateWithoutUserGroupsDataInput>;
  upsert?: Maybe<SuborgUpsertWithoutUserGroupsInput>;
  connect?: Maybe<SuborgWhereUniqueInput>;
}

export interface SuborgUpdateWithoutUserGroupsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateManyWithoutSuborgInput>;
  org?: Maybe<OrganizationUpdateOneRequiredWithoutSuborgsInput>;
  suborgRoles?: Maybe<RoleUpdateManyWithoutSuborgInput>;
}

export interface OrganizationUpdateOneRequiredWithoutSuborgsInput {
  create?: Maybe<OrganizationCreateWithoutSuborgsInput>;
  update?: Maybe<OrganizationUpdateWithoutSuborgsDataInput>;
  upsert?: Maybe<OrganizationUpsertWithoutSuborgsInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationUpdateWithoutSuborgsDataInput {
  name?: Maybe<String>;
  logo?: Maybe<String>;
  color?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateManyWithoutOrgInput>;
  orgRoles?: Maybe<RoleUpdateManyWithoutOrgInput>;
}

export interface UserUpdateManyWithoutOrgInput {
  create?: Maybe<UserCreateWithoutOrgInput[] | UserCreateWithoutOrgInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutOrgInput[]
    | UserUpdateWithWhereUniqueWithoutOrgInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutOrgInput[]
    | UserUpsertWithWhereUniqueWithoutOrgInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutOrgInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutOrgDataInput;
}

export interface UserUpdateWithoutOrgDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface SuborgUpdateManyWithoutAuthorInput {
  create?: Maybe<
    SuborgCreateWithoutAuthorInput[] | SuborgCreateWithoutAuthorInput
  >;
  delete?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
  connect?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
  set?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
  disconnect?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
  update?: Maybe<
    | SuborgUpdateWithWhereUniqueWithoutAuthorInput[]
    | SuborgUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | SuborgUpsertWithWhereUniqueWithoutAuthorInput[]
    | SuborgUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<SuborgScalarWhereInput[] | SuborgScalarWhereInput>;
  updateMany?: Maybe<
    | SuborgUpdateManyWithWhereNestedInput[]
    | SuborgUpdateManyWithWhereNestedInput
  >;
}

export interface SuborgUpdateWithWhereUniqueWithoutAuthorInput {
  where: SuborgWhereUniqueInput;
  data: SuborgUpdateWithoutAuthorDataInput;
}

export interface SuborgUpdateWithoutAuthorDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneRequiredWithoutSuborgsInput>;
  userGroups?: Maybe<GroupUpdateManyWithoutSuborgidInput>;
  suborgRoles?: Maybe<RoleUpdateManyWithoutSuborgInput>;
}

export interface GroupUpdateManyWithoutSuborgidInput {
  create?: Maybe<
    GroupCreateWithoutSuborgidInput[] | GroupCreateWithoutSuborgidInput
  >;
  delete?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  set?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  disconnect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  update?: Maybe<
    | GroupUpdateWithWhereUniqueWithoutSuborgidInput[]
    | GroupUpdateWithWhereUniqueWithoutSuborgidInput
  >;
  upsert?: Maybe<
    | GroupUpsertWithWhereUniqueWithoutSuborgidInput[]
    | GroupUpsertWithWhereUniqueWithoutSuborgidInput
  >;
  deleteMany?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  updateMany?: Maybe<
    GroupUpdateManyWithWhereNestedInput[] | GroupUpdateManyWithWhereNestedInput
  >;
}

export interface GroupUpdateWithWhereUniqueWithoutSuborgidInput {
  where: GroupWhereUniqueInput;
  data: GroupUpdateWithoutSuborgidDataInput;
}

export interface GroupUpdateWithoutSuborgidDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  subgroups?: Maybe<SubGroupUpdateManyWithoutGroupidInput>;
  members?: Maybe<GroupMemberUpdateManyWithoutMemberInput>;
  groupRoles?: Maybe<RoleUpdateManyWithoutGroupInput>;
  subjects?: Maybe<SubjectUpdateManyWithoutGroupInput>;
}

export interface SubGroupUpdateManyWithoutGroupidInput {
  create?: Maybe<
    SubGroupCreateWithoutGroupidInput[] | SubGroupCreateWithoutGroupidInput
  >;
  delete?: Maybe<SubGroupWhereUniqueInput[] | SubGroupWhereUniqueInput>;
  connect?: Maybe<SubGroupWhereUniqueInput[] | SubGroupWhereUniqueInput>;
  set?: Maybe<SubGroupWhereUniqueInput[] | SubGroupWhereUniqueInput>;
  disconnect?: Maybe<SubGroupWhereUniqueInput[] | SubGroupWhereUniqueInput>;
  update?: Maybe<
    | SubGroupUpdateWithWhereUniqueWithoutGroupidInput[]
    | SubGroupUpdateWithWhereUniqueWithoutGroupidInput
  >;
  upsert?: Maybe<
    | SubGroupUpsertWithWhereUniqueWithoutGroupidInput[]
    | SubGroupUpsertWithWhereUniqueWithoutGroupidInput
  >;
  deleteMany?: Maybe<SubGroupScalarWhereInput[] | SubGroupScalarWhereInput>;
  updateMany?: Maybe<
    | SubGroupUpdateManyWithWhereNestedInput[]
    | SubGroupUpdateManyWithWhereNestedInput
  >;
}

export interface SubGroupUpdateWithWhereUniqueWithoutGroupidInput {
  where: SubGroupWhereUniqueInput;
  data: SubGroupUpdateWithoutGroupidDataInput;
}

export interface SubGroupUpdateWithoutGroupidDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  members?: Maybe<SubGroupMemberUpdateManyWithoutMemberInput>;
  subgroupRoles?: Maybe<RoleUpdateManyWithoutSubgroupInput>;
  subjects?: Maybe<SubjectUpdateManyWithoutSubgroupInput>;
}

export interface SubGroupMemberUpdateManyWithoutMemberInput {
  create?: Maybe<
    | SubGroupMemberCreateWithoutMemberInput[]
    | SubGroupMemberCreateWithoutMemberInput
  >;
  delete?: Maybe<
    SubGroupMemberWhereUniqueInput[] | SubGroupMemberWhereUniqueInput
  >;
  connect?: Maybe<
    SubGroupMemberWhereUniqueInput[] | SubGroupMemberWhereUniqueInput
  >;
  set?: Maybe<
    SubGroupMemberWhereUniqueInput[] | SubGroupMemberWhereUniqueInput
  >;
  disconnect?: Maybe<
    SubGroupMemberWhereUniqueInput[] | SubGroupMemberWhereUniqueInput
  >;
  update?: Maybe<
    | SubGroupMemberUpdateWithWhereUniqueWithoutMemberInput[]
    | SubGroupMemberUpdateWithWhereUniqueWithoutMemberInput
  >;
  upsert?: Maybe<
    | SubGroupMemberUpsertWithWhereUniqueWithoutMemberInput[]
    | SubGroupMemberUpsertWithWhereUniqueWithoutMemberInput
  >;
  deleteMany?: Maybe<
    SubGroupMemberScalarWhereInput[] | SubGroupMemberScalarWhereInput
  >;
  updateMany?: Maybe<
    | SubGroupMemberUpdateManyWithWhereNestedInput[]
    | SubGroupMemberUpdateManyWithWhereNestedInput
  >;
}

export interface SubGroupMemberUpdateWithWhereUniqueWithoutMemberInput {
  where: SubGroupMemberWhereUniqueInput;
  data: SubGroupMemberUpdateWithoutMemberDataInput;
}

export interface SubGroupMemberUpdateWithoutMemberDataInput {
  userid?: Maybe<UserUpdateOneRequiredWithoutSubgroupmembersInput>;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutSubgroupmembersInput {
  create?: Maybe<UserCreateWithoutSubgroupmembersInput>;
  update?: Maybe<UserUpdateWithoutSubgroupmembersDataInput>;
  upsert?: Maybe<UserUpsertWithoutSubgroupmembersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutSubgroupmembersDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  published?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
}

export interface CommentUpdateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutPostInput[]
    | CommentUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutPostInput[]
    | CommentUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPostDataInput;
}

export interface CommentUpdateWithoutPostDataInput {
  text?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
}

export interface UserUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface SubGroupMemberUpdateManyWithoutUseridInput {
  create?: Maybe<
    | SubGroupMemberCreateWithoutUseridInput[]
    | SubGroupMemberCreateWithoutUseridInput
  >;
  delete?: Maybe<
    SubGroupMemberWhereUniqueInput[] | SubGroupMemberWhereUniqueInput
  >;
  connect?: Maybe<
    SubGroupMemberWhereUniqueInput[] | SubGroupMemberWhereUniqueInput
  >;
  set?: Maybe<
    SubGroupMemberWhereUniqueInput[] | SubGroupMemberWhereUniqueInput
  >;
  disconnect?: Maybe<
    SubGroupMemberWhereUniqueInput[] | SubGroupMemberWhereUniqueInput
  >;
  update?: Maybe<
    | SubGroupMemberUpdateWithWhereUniqueWithoutUseridInput[]
    | SubGroupMemberUpdateWithWhereUniqueWithoutUseridInput
  >;
  upsert?: Maybe<
    | SubGroupMemberUpsertWithWhereUniqueWithoutUseridInput[]
    | SubGroupMemberUpsertWithWhereUniqueWithoutUseridInput
  >;
  deleteMany?: Maybe<
    SubGroupMemberScalarWhereInput[] | SubGroupMemberScalarWhereInput
  >;
  updateMany?: Maybe<
    | SubGroupMemberUpdateManyWithWhereNestedInput[]
    | SubGroupMemberUpdateManyWithWhereNestedInput
  >;
}

export interface SubGroupMemberUpdateWithWhereUniqueWithoutUseridInput {
  where: SubGroupMemberWhereUniqueInput;
  data: SubGroupMemberUpdateWithoutUseridDataInput;
}

export interface SubGroupMemberUpdateWithoutUseridDataInput {
  member?: Maybe<SubGroupUpdateOneRequiredWithoutMembersInput>;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface SubGroupUpdateOneRequiredWithoutMembersInput {
  create?: Maybe<SubGroupCreateWithoutMembersInput>;
  update?: Maybe<SubGroupUpdateWithoutMembersDataInput>;
  upsert?: Maybe<SubGroupUpsertWithoutMembersInput>;
  connect?: Maybe<SubGroupWhereUniqueInput>;
}

export interface SubGroupUpdateWithoutMembersDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  groupid?: Maybe<GroupUpdateOneRequiredWithoutSubgroupsInput>;
  subgroupRoles?: Maybe<RoleUpdateManyWithoutSubgroupInput>;
  subjects?: Maybe<SubjectUpdateManyWithoutSubgroupInput>;
}

export interface GroupUpdateOneRequiredWithoutSubgroupsInput {
  create?: Maybe<GroupCreateWithoutSubgroupsInput>;
  update?: Maybe<GroupUpdateWithoutSubgroupsDataInput>;
  upsert?: Maybe<GroupUpsertWithoutSubgroupsInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupUpdateWithoutSubgroupsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  suborgid?: Maybe<SuborgUpdateOneRequiredWithoutUserGroupsInput>;
  members?: Maybe<GroupMemberUpdateManyWithoutMemberInput>;
  groupRoles?: Maybe<RoleUpdateManyWithoutGroupInput>;
  subjects?: Maybe<SubjectUpdateManyWithoutGroupInput>;
}

export interface GroupMemberUpdateManyWithoutMemberInput {
  create?: Maybe<
    GroupMemberCreateWithoutMemberInput[] | GroupMemberCreateWithoutMemberInput
  >;
  delete?: Maybe<GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput>;
  connect?: Maybe<GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput>;
  set?: Maybe<GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput>;
  disconnect?: Maybe<
    GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput
  >;
  update?: Maybe<
    | GroupMemberUpdateWithWhereUniqueWithoutMemberInput[]
    | GroupMemberUpdateWithWhereUniqueWithoutMemberInput
  >;
  upsert?: Maybe<
    | GroupMemberUpsertWithWhereUniqueWithoutMemberInput[]
    | GroupMemberUpsertWithWhereUniqueWithoutMemberInput
  >;
  deleteMany?: Maybe<
    GroupMemberScalarWhereInput[] | GroupMemberScalarWhereInput
  >;
  updateMany?: Maybe<
    | GroupMemberUpdateManyWithWhereNestedInput[]
    | GroupMemberUpdateManyWithWhereNestedInput
  >;
}

export interface GroupMemberUpdateWithWhereUniqueWithoutMemberInput {
  where: GroupMemberWhereUniqueInput;
  data: GroupMemberUpdateWithoutMemberDataInput;
}

export interface GroupMemberUpdateWithoutMemberDataInput {
  userid?: Maybe<UserUpdateOneRequiredWithoutGroupmembersInput>;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutGroupmembersInput {
  create?: Maybe<UserCreateWithoutGroupmembersInput>;
  update?: Maybe<UserUpdateWithoutGroupmembersDataInput>;
  upsert?: Maybe<UserUpsertWithoutGroupmembersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutGroupmembersDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface CommentUpdateManyWithoutAuthorInput {
  create?: Maybe<
    CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    | CommentUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    | CommentUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutAuthorDataInput;
}

export interface CommentUpdateWithoutAuthorDataInput {
  text?: Maybe<String>;
  post?: Maybe<PostUpdateOneRequiredWithoutCommentsInput>;
}

export interface PostUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  update?: Maybe<PostUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<PostUpsertWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutCommentsDataInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  published?: Maybe<Boolean>;
  author?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface RoleUpdateManyWithoutUsersInput {
  create?: Maybe<RoleCreateWithoutUsersInput[] | RoleCreateWithoutUsersInput>;
  delete?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  set?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  disconnect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  update?: Maybe<
    | RoleUpdateWithWhereUniqueWithoutUsersInput[]
    | RoleUpdateWithWhereUniqueWithoutUsersInput
  >;
  upsert?: Maybe<
    | RoleUpsertWithWhereUniqueWithoutUsersInput[]
    | RoleUpsertWithWhereUniqueWithoutUsersInput
  >;
  deleteMany?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  updateMany?: Maybe<
    RoleUpdateManyWithWhereNestedInput[] | RoleUpdateManyWithWhereNestedInput
  >;
}

export interface RoleUpdateWithWhereUniqueWithoutUsersInput {
  where: RoleWhereUniqueInput;
  data: RoleUpdateWithoutUsersDataInput;
}

export interface RoleUpdateWithoutUsersDataInput {
  name?: Maybe<ROLENAME>;
  org?: Maybe<OrganizationUpdateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgUpdateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupUpdateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubgroupRolesInput>;
  educationprofiles?: Maybe<EducationProfileUpdateManyWithoutRolesInput>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
  subjectSubscriptions?: Maybe<
    SubjectSubscriptionUpdateManyWithoutSubscribedAsInput
  >;
}

export interface OrganizationUpdateOneWithoutOrgRolesInput {
  create?: Maybe<OrganizationCreateWithoutOrgRolesInput>;
  update?: Maybe<OrganizationUpdateWithoutOrgRolesDataInput>;
  upsert?: Maybe<OrganizationUpsertWithoutOrgRolesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationUpdateWithoutOrgRolesDataInput {
  name?: Maybe<String>;
  logo?: Maybe<String>;
  color?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateManyWithoutOrgInput>;
  suborgs?: Maybe<SuborgUpdateManyWithoutOrgInput>;
}

export interface OrganizationUpsertWithoutOrgRolesInput {
  update: OrganizationUpdateWithoutOrgRolesDataInput;
  create: OrganizationCreateWithoutOrgRolesInput;
}

export interface SuborgUpdateOneWithoutSuborgRolesInput {
  create?: Maybe<SuborgCreateWithoutSuborgRolesInput>;
  update?: Maybe<SuborgUpdateWithoutSuborgRolesDataInput>;
  upsert?: Maybe<SuborgUpsertWithoutSuborgRolesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SuborgWhereUniqueInput>;
}

export interface SuborgUpdateWithoutSuborgRolesDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateManyWithoutSuborgInput>;
  org?: Maybe<OrganizationUpdateOneRequiredWithoutSuborgsInput>;
  userGroups?: Maybe<GroupUpdateManyWithoutSuborgidInput>;
}

export interface SuborgUpsertWithoutSuborgRolesInput {
  update: SuborgUpdateWithoutSuborgRolesDataInput;
  create: SuborgCreateWithoutSuborgRolesInput;
}

export interface GroupUpdateOneWithoutGroupRolesInput {
  create?: Maybe<GroupCreateWithoutGroupRolesInput>;
  update?: Maybe<GroupUpdateWithoutGroupRolesDataInput>;
  upsert?: Maybe<GroupUpsertWithoutGroupRolesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupUpdateWithoutGroupRolesDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  suborgid?: Maybe<SuborgUpdateOneRequiredWithoutUserGroupsInput>;
  subgroups?: Maybe<SubGroupUpdateManyWithoutGroupidInput>;
  members?: Maybe<GroupMemberUpdateManyWithoutMemberInput>;
  subjects?: Maybe<SubjectUpdateManyWithoutGroupInput>;
}

export interface SubjectUpdateManyWithoutGroupInput {
  create?: Maybe<
    SubjectCreateWithoutGroupInput[] | SubjectCreateWithoutGroupInput
  >;
  delete?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  set?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  disconnect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  update?: Maybe<
    | SubjectUpdateWithWhereUniqueWithoutGroupInput[]
    | SubjectUpdateWithWhereUniqueWithoutGroupInput
  >;
  upsert?: Maybe<
    | SubjectUpsertWithWhereUniqueWithoutGroupInput[]
    | SubjectUpsertWithWhereUniqueWithoutGroupInput
  >;
  deleteMany?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
  updateMany?: Maybe<
    | SubjectUpdateManyWithWhereNestedInput[]
    | SubjectUpdateManyWithWhereNestedInput
  >;
}

export interface SubjectUpdateWithWhereUniqueWithoutGroupInput {
  where: SubjectWhereUniqueInput;
  data: SubjectUpdateWithoutGroupDataInput;
}

export interface SubjectUpdateWithoutGroupDataInput {
  name?: Maybe<String>;
  picture?: Maybe<String>;
  medium?: Maybe<MediumUpdateOneWithoutSubjectsInput>;
  std?: Maybe<StdUpdateOneRequiredWithoutSubjectsInput>;
  board?: Maybe<String>;
  category?: Maybe<String>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileUpdateManyWithoutSubjectsInput>;
  units?: Maybe<UnitUpdateManyWithoutSubjectInput>;
  topic?: Maybe<TopicUpdateManyWithoutSubjectInput>;
  contents?: Maybe<ContentUpdateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserUpdateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizUpdateManyWithoutSubjectInput>;
}

export interface MediumUpdateOneWithoutSubjectsInput {
  create?: Maybe<MediumCreateWithoutSubjectsInput>;
  update?: Maybe<MediumUpdateWithoutSubjectsDataInput>;
  upsert?: Maybe<MediumUpsertWithoutSubjectsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MediumWhereUniqueInput>;
}

export interface MediumUpdateWithoutSubjectsDataInput {
  name?: Maybe<String>;
}

export interface MediumUpsertWithoutSubjectsInput {
  update: MediumUpdateWithoutSubjectsDataInput;
  create: MediumCreateWithoutSubjectsInput;
}

export interface StdUpdateOneRequiredWithoutSubjectsInput {
  create?: Maybe<StdCreateWithoutSubjectsInput>;
  update?: Maybe<StdUpdateWithoutSubjectsDataInput>;
  upsert?: Maybe<StdUpsertWithoutSubjectsInput>;
  connect?: Maybe<StdWhereUniqueInput>;
}

export interface StdUpdateWithoutSubjectsDataInput {
  gradename?: Maybe<GRADENAME>;
  category?: Maybe<String>;
  branch?: Maybe<String>;
  year?: Maybe<String>;
  educationprofiles?: Maybe<EducationProfileUpdateManyWithoutStdInput>;
  isPublished?: Maybe<Boolean>;
}

export interface EducationProfileUpdateManyWithoutStdInput {
  create?: Maybe<
    | EducationProfileCreateWithoutStdInput[]
    | EducationProfileCreateWithoutStdInput
  >;
  delete?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
  connect?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
  set?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
  disconnect?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
  update?: Maybe<
    | EducationProfileUpdateWithWhereUniqueWithoutStdInput[]
    | EducationProfileUpdateWithWhereUniqueWithoutStdInput
  >;
  upsert?: Maybe<
    | EducationProfileUpsertWithWhereUniqueWithoutStdInput[]
    | EducationProfileUpsertWithWhereUniqueWithoutStdInput
  >;
  deleteMany?: Maybe<
    EducationProfileScalarWhereInput[] | EducationProfileScalarWhereInput
  >;
  updateMany?: Maybe<
    | EducationProfileUpdateManyWithWhereNestedInput[]
    | EducationProfileUpdateManyWithWhereNestedInput
  >;
}

export interface EducationProfileUpdateWithWhereUniqueWithoutStdInput {
  where: EducationProfileWhereUniqueInput;
  data: EducationProfileUpdateWithoutStdDataInput;
}

export interface EducationProfileUpdateWithoutStdDataInput {
  name?: Maybe<String>;
  profiileType?: Maybe<String>;
  educationLevel?: Maybe<String>;
  educationType?: Maybe<String>;
  specialization?: Maybe<String>;
  roles?: Maybe<RoleUpdateManyWithoutEducationprofilesInput>;
  subjects?: Maybe<SubjectUpdateManyWithoutEducationProfilesInput>;
  startedYear?: Maybe<DateTimeInput>;
  completedYear?: Maybe<DateTimeInput>;
  result?: Maybe<String>;
  status?: Maybe<String>;
  remark?: Maybe<String>;
  profileId?: Maybe<ProfileUpdateOneRequiredWithoutEducationProfilesInput>;
}

export interface RoleUpdateManyWithoutEducationprofilesInput {
  create?: Maybe<
    | RoleCreateWithoutEducationprofilesInput[]
    | RoleCreateWithoutEducationprofilesInput
  >;
  delete?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  set?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  disconnect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  update?: Maybe<
    | RoleUpdateWithWhereUniqueWithoutEducationprofilesInput[]
    | RoleUpdateWithWhereUniqueWithoutEducationprofilesInput
  >;
  upsert?: Maybe<
    | RoleUpsertWithWhereUniqueWithoutEducationprofilesInput[]
    | RoleUpsertWithWhereUniqueWithoutEducationprofilesInput
  >;
  deleteMany?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  updateMany?: Maybe<
    RoleUpdateManyWithWhereNestedInput[] | RoleUpdateManyWithWhereNestedInput
  >;
}

export interface RoleUpdateWithWhereUniqueWithoutEducationprofilesInput {
  where: RoleWhereUniqueInput;
  data: RoleUpdateWithoutEducationprofilesDataInput;
}

export interface RoleUpdateWithoutEducationprofilesDataInput {
  name?: Maybe<ROLENAME>;
  org?: Maybe<OrganizationUpdateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgUpdateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupUpdateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubgroupRolesInput>;
  users?: Maybe<UserUpdateManyWithoutRolesInput>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
  subjectSubscriptions?: Maybe<
    SubjectSubscriptionUpdateManyWithoutSubscribedAsInput
  >;
}

export interface SubGroupUpdateOneWithoutSubgroupRolesInput {
  create?: Maybe<SubGroupCreateWithoutSubgroupRolesInput>;
  update?: Maybe<SubGroupUpdateWithoutSubgroupRolesDataInput>;
  upsert?: Maybe<SubGroupUpsertWithoutSubgroupRolesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SubGroupWhereUniqueInput>;
}

export interface SubGroupUpdateWithoutSubgroupRolesDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  groupid?: Maybe<GroupUpdateOneRequiredWithoutSubgroupsInput>;
  members?: Maybe<SubGroupMemberUpdateManyWithoutMemberInput>;
  subjects?: Maybe<SubjectUpdateManyWithoutSubgroupInput>;
}

export interface SubjectUpdateManyWithoutSubgroupInput {
  create?: Maybe<
    SubjectCreateWithoutSubgroupInput[] | SubjectCreateWithoutSubgroupInput
  >;
  delete?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  set?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  disconnect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  update?: Maybe<
    | SubjectUpdateWithWhereUniqueWithoutSubgroupInput[]
    | SubjectUpdateWithWhereUniqueWithoutSubgroupInput
  >;
  upsert?: Maybe<
    | SubjectUpsertWithWhereUniqueWithoutSubgroupInput[]
    | SubjectUpsertWithWhereUniqueWithoutSubgroupInput
  >;
  deleteMany?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
  updateMany?: Maybe<
    | SubjectUpdateManyWithWhereNestedInput[]
    | SubjectUpdateManyWithWhereNestedInput
  >;
}

export interface SubjectUpdateWithWhereUniqueWithoutSubgroupInput {
  where: SubjectWhereUniqueInput;
  data: SubjectUpdateWithoutSubgroupDataInput;
}

export interface SubjectUpdateWithoutSubgroupDataInput {
  name?: Maybe<String>;
  picture?: Maybe<String>;
  medium?: Maybe<MediumUpdateOneWithoutSubjectsInput>;
  std?: Maybe<StdUpdateOneRequiredWithoutSubjectsInput>;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupUpdateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileUpdateManyWithoutSubjectsInput>;
  units?: Maybe<UnitUpdateManyWithoutSubjectInput>;
  topic?: Maybe<TopicUpdateManyWithoutSubjectInput>;
  contents?: Maybe<ContentUpdateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserUpdateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizUpdateManyWithoutSubjectInput>;
}

export interface GroupUpdateOneWithoutSubjectsInput {
  create?: Maybe<GroupCreateWithoutSubjectsInput>;
  update?: Maybe<GroupUpdateWithoutSubjectsDataInput>;
  upsert?: Maybe<GroupUpsertWithoutSubjectsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupUpdateWithoutSubjectsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  suborgid?: Maybe<SuborgUpdateOneRequiredWithoutUserGroupsInput>;
  subgroups?: Maybe<SubGroupUpdateManyWithoutGroupidInput>;
  members?: Maybe<GroupMemberUpdateManyWithoutMemberInput>;
  groupRoles?: Maybe<RoleUpdateManyWithoutGroupInput>;
}

export interface RoleUpdateManyWithoutGroupInput {
  create?: Maybe<RoleCreateWithoutGroupInput[] | RoleCreateWithoutGroupInput>;
  delete?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  set?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  disconnect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  update?: Maybe<
    | RoleUpdateWithWhereUniqueWithoutGroupInput[]
    | RoleUpdateWithWhereUniqueWithoutGroupInput
  >;
  upsert?: Maybe<
    | RoleUpsertWithWhereUniqueWithoutGroupInput[]
    | RoleUpsertWithWhereUniqueWithoutGroupInput
  >;
  deleteMany?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  updateMany?: Maybe<
    RoleUpdateManyWithWhereNestedInput[] | RoleUpdateManyWithWhereNestedInput
  >;
}

export interface RoleUpdateWithWhereUniqueWithoutGroupInput {
  where: RoleWhereUniqueInput;
  data: RoleUpdateWithoutGroupDataInput;
}

export interface RoleUpdateWithoutGroupDataInput {
  name?: Maybe<ROLENAME>;
  org?: Maybe<OrganizationUpdateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgUpdateOneWithoutSuborgRolesInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubgroupRolesInput>;
  users?: Maybe<UserUpdateManyWithoutRolesInput>;
  educationprofiles?: Maybe<EducationProfileUpdateManyWithoutRolesInput>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
  subjectSubscriptions?: Maybe<
    SubjectSubscriptionUpdateManyWithoutSubscribedAsInput
  >;
}

export interface UserUpdateManyWithoutRolesInput {
  create?: Maybe<UserCreateWithoutRolesInput[] | UserCreateWithoutRolesInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutRolesInput[]
    | UserUpdateWithWhereUniqueWithoutRolesInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutRolesInput[]
    | UserUpsertWithWhereUniqueWithoutRolesInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutRolesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutRolesDataInput;
}

export interface UserUpdateWithoutRolesDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface ProfileUpdateManyWithoutUserIdInput {
  create?: Maybe<
    ProfileCreateWithoutUserIdInput[] | ProfileCreateWithoutUserIdInput
  >;
  delete?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
  connect?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
  set?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
  disconnect?: Maybe<ProfileWhereUniqueInput[] | ProfileWhereUniqueInput>;
  update?: Maybe<
    | ProfileUpdateWithWhereUniqueWithoutUserIdInput[]
    | ProfileUpdateWithWhereUniqueWithoutUserIdInput
  >;
  upsert?: Maybe<
    | ProfileUpsertWithWhereUniqueWithoutUserIdInput[]
    | ProfileUpsertWithWhereUniqueWithoutUserIdInput
  >;
  deleteMany?: Maybe<ProfileScalarWhereInput[] | ProfileScalarWhereInput>;
  updateMany?: Maybe<
    | ProfileUpdateManyWithWhereNestedInput[]
    | ProfileUpdateManyWithWhereNestedInput
  >;
}

export interface ProfileUpdateWithWhereUniqueWithoutUserIdInput {
  where: ProfileWhereUniqueInput;
  data: ProfileUpdateWithoutUserIdDataInput;
}

export interface ProfileUpdateWithoutUserIdDataInput {
  name?: Maybe<String>;
  EducationProfiles?: Maybe<EducationProfileUpdateManyWithoutProfileIdInput>;
  personalProfiile?: Maybe<PersonalProfileUpdateManyWithoutProfileIdInput>;
}

export interface EducationProfileUpdateManyWithoutProfileIdInput {
  create?: Maybe<
    | EducationProfileCreateWithoutProfileIdInput[]
    | EducationProfileCreateWithoutProfileIdInput
  >;
  delete?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
  connect?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
  set?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
  disconnect?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
  update?: Maybe<
    | EducationProfileUpdateWithWhereUniqueWithoutProfileIdInput[]
    | EducationProfileUpdateWithWhereUniqueWithoutProfileIdInput
  >;
  upsert?: Maybe<
    | EducationProfileUpsertWithWhereUniqueWithoutProfileIdInput[]
    | EducationProfileUpsertWithWhereUniqueWithoutProfileIdInput
  >;
  deleteMany?: Maybe<
    EducationProfileScalarWhereInput[] | EducationProfileScalarWhereInput
  >;
  updateMany?: Maybe<
    | EducationProfileUpdateManyWithWhereNestedInput[]
    | EducationProfileUpdateManyWithWhereNestedInput
  >;
}

export interface EducationProfileUpdateWithWhereUniqueWithoutProfileIdInput {
  where: EducationProfileWhereUniqueInput;
  data: EducationProfileUpdateWithoutProfileIdDataInput;
}

export interface EducationProfileUpdateWithoutProfileIdDataInput {
  name?: Maybe<String>;
  profiileType?: Maybe<String>;
  educationLevel?: Maybe<String>;
  educationType?: Maybe<String>;
  specialization?: Maybe<String>;
  roles?: Maybe<RoleUpdateManyWithoutEducationprofilesInput>;
  subjects?: Maybe<SubjectUpdateManyWithoutEducationProfilesInput>;
  std?: Maybe<StdUpdateManyWithoutEducationprofilesInput>;
  startedYear?: Maybe<DateTimeInput>;
  completedYear?: Maybe<DateTimeInput>;
  result?: Maybe<String>;
  status?: Maybe<String>;
  remark?: Maybe<String>;
}

export interface SubjectUpdateManyWithoutEducationProfilesInput {
  create?: Maybe<
    | SubjectCreateWithoutEducationProfilesInput[]
    | SubjectCreateWithoutEducationProfilesInput
  >;
  delete?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  set?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  disconnect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  update?: Maybe<
    | SubjectUpdateWithWhereUniqueWithoutEducationProfilesInput[]
    | SubjectUpdateWithWhereUniqueWithoutEducationProfilesInput
  >;
  upsert?: Maybe<
    | SubjectUpsertWithWhereUniqueWithoutEducationProfilesInput[]
    | SubjectUpsertWithWhereUniqueWithoutEducationProfilesInput
  >;
  deleteMany?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
  updateMany?: Maybe<
    | SubjectUpdateManyWithWhereNestedInput[]
    | SubjectUpdateManyWithWhereNestedInput
  >;
}

export interface SubjectUpdateWithWhereUniqueWithoutEducationProfilesInput {
  where: SubjectWhereUniqueInput;
  data: SubjectUpdateWithoutEducationProfilesDataInput;
}

export interface SubjectUpdateWithoutEducationProfilesDataInput {
  name?: Maybe<String>;
  picture?: Maybe<String>;
  medium?: Maybe<MediumUpdateOneWithoutSubjectsInput>;
  std?: Maybe<StdUpdateOneRequiredWithoutSubjectsInput>;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupUpdateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubjectsInput>;
  units?: Maybe<UnitUpdateManyWithoutSubjectInput>;
  topic?: Maybe<TopicUpdateManyWithoutSubjectInput>;
  contents?: Maybe<ContentUpdateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserUpdateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizUpdateManyWithoutSubjectInput>;
}

export interface SubGroupUpdateOneWithoutSubjectsInput {
  create?: Maybe<SubGroupCreateWithoutSubjectsInput>;
  update?: Maybe<SubGroupUpdateWithoutSubjectsDataInput>;
  upsert?: Maybe<SubGroupUpsertWithoutSubjectsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SubGroupWhereUniqueInput>;
}

export interface SubGroupUpdateWithoutSubjectsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  groupid?: Maybe<GroupUpdateOneRequiredWithoutSubgroupsInput>;
  members?: Maybe<SubGroupMemberUpdateManyWithoutMemberInput>;
  subgroupRoles?: Maybe<RoleUpdateManyWithoutSubgroupInput>;
}

export interface RoleUpdateManyWithoutSubgroupInput {
  create?: Maybe<
    RoleCreateWithoutSubgroupInput[] | RoleCreateWithoutSubgroupInput
  >;
  delete?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  set?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  disconnect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  update?: Maybe<
    | RoleUpdateWithWhereUniqueWithoutSubgroupInput[]
    | RoleUpdateWithWhereUniqueWithoutSubgroupInput
  >;
  upsert?: Maybe<
    | RoleUpsertWithWhereUniqueWithoutSubgroupInput[]
    | RoleUpsertWithWhereUniqueWithoutSubgroupInput
  >;
  deleteMany?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  updateMany?: Maybe<
    RoleUpdateManyWithWhereNestedInput[] | RoleUpdateManyWithWhereNestedInput
  >;
}

export interface RoleUpdateWithWhereUniqueWithoutSubgroupInput {
  where: RoleWhereUniqueInput;
  data: RoleUpdateWithoutSubgroupDataInput;
}

export interface RoleUpdateWithoutSubgroupDataInput {
  name?: Maybe<ROLENAME>;
  org?: Maybe<OrganizationUpdateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgUpdateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupUpdateOneWithoutGroupRolesInput>;
  users?: Maybe<UserUpdateManyWithoutRolesInput>;
  educationprofiles?: Maybe<EducationProfileUpdateManyWithoutRolesInput>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
  subjectSubscriptions?: Maybe<
    SubjectSubscriptionUpdateManyWithoutSubscribedAsInput
  >;
}

export interface EducationProfileUpdateManyWithoutRolesInput {
  create?: Maybe<
    | EducationProfileCreateWithoutRolesInput[]
    | EducationProfileCreateWithoutRolesInput
  >;
  delete?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
  connect?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
  set?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
  disconnect?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
  update?: Maybe<
    | EducationProfileUpdateWithWhereUniqueWithoutRolesInput[]
    | EducationProfileUpdateWithWhereUniqueWithoutRolesInput
  >;
  upsert?: Maybe<
    | EducationProfileUpsertWithWhereUniqueWithoutRolesInput[]
    | EducationProfileUpsertWithWhereUniqueWithoutRolesInput
  >;
  deleteMany?: Maybe<
    EducationProfileScalarWhereInput[] | EducationProfileScalarWhereInput
  >;
  updateMany?: Maybe<
    | EducationProfileUpdateManyWithWhereNestedInput[]
    | EducationProfileUpdateManyWithWhereNestedInput
  >;
}

export interface EducationProfileUpdateWithWhereUniqueWithoutRolesInput {
  where: EducationProfileWhereUniqueInput;
  data: EducationProfileUpdateWithoutRolesDataInput;
}

export interface EducationProfileUpdateWithoutRolesDataInput {
  name?: Maybe<String>;
  profiileType?: Maybe<String>;
  educationLevel?: Maybe<String>;
  educationType?: Maybe<String>;
  specialization?: Maybe<String>;
  subjects?: Maybe<SubjectUpdateManyWithoutEducationProfilesInput>;
  std?: Maybe<StdUpdateManyWithoutEducationprofilesInput>;
  startedYear?: Maybe<DateTimeInput>;
  completedYear?: Maybe<DateTimeInput>;
  result?: Maybe<String>;
  status?: Maybe<String>;
  remark?: Maybe<String>;
  profileId?: Maybe<ProfileUpdateOneRequiredWithoutEducationProfilesInput>;
}

export interface StdUpdateManyWithoutEducationprofilesInput {
  create?: Maybe<
    | StdCreateWithoutEducationprofilesInput[]
    | StdCreateWithoutEducationprofilesInput
  >;
  delete?: Maybe<StdWhereUniqueInput[] | StdWhereUniqueInput>;
  connect?: Maybe<StdWhereUniqueInput[] | StdWhereUniqueInput>;
  set?: Maybe<StdWhereUniqueInput[] | StdWhereUniqueInput>;
  disconnect?: Maybe<StdWhereUniqueInput[] | StdWhereUniqueInput>;
  update?: Maybe<
    | StdUpdateWithWhereUniqueWithoutEducationprofilesInput[]
    | StdUpdateWithWhereUniqueWithoutEducationprofilesInput
  >;
  upsert?: Maybe<
    | StdUpsertWithWhereUniqueWithoutEducationprofilesInput[]
    | StdUpsertWithWhereUniqueWithoutEducationprofilesInput
  >;
  deleteMany?: Maybe<StdScalarWhereInput[] | StdScalarWhereInput>;
  updateMany?: Maybe<
    StdUpdateManyWithWhereNestedInput[] | StdUpdateManyWithWhereNestedInput
  >;
}

export interface StdUpdateWithWhereUniqueWithoutEducationprofilesInput {
  where: StdWhereUniqueInput;
  data: StdUpdateWithoutEducationprofilesDataInput;
}

export interface StdUpdateWithoutEducationprofilesDataInput {
  gradename?: Maybe<GRADENAME>;
  category?: Maybe<String>;
  branch?: Maybe<String>;
  year?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  subjects?: Maybe<SubjectUpdateManyWithoutStdInput>;
}

export interface SubjectUpdateManyWithoutStdInput {
  create?: Maybe<SubjectCreateWithoutStdInput[] | SubjectCreateWithoutStdInput>;
  delete?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  set?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  disconnect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  update?: Maybe<
    | SubjectUpdateWithWhereUniqueWithoutStdInput[]
    | SubjectUpdateWithWhereUniqueWithoutStdInput
  >;
  upsert?: Maybe<
    | SubjectUpsertWithWhereUniqueWithoutStdInput[]
    | SubjectUpsertWithWhereUniqueWithoutStdInput
  >;
  deleteMany?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
  updateMany?: Maybe<
    | SubjectUpdateManyWithWhereNestedInput[]
    | SubjectUpdateManyWithWhereNestedInput
  >;
}

export interface SubjectUpdateWithWhereUniqueWithoutStdInput {
  where: SubjectWhereUniqueInput;
  data: SubjectUpdateWithoutStdDataInput;
}

export interface SubjectUpdateWithoutStdDataInput {
  name?: Maybe<String>;
  picture?: Maybe<String>;
  medium?: Maybe<MediumUpdateOneWithoutSubjectsInput>;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupUpdateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileUpdateManyWithoutSubjectsInput>;
  units?: Maybe<UnitUpdateManyWithoutSubjectInput>;
  topic?: Maybe<TopicUpdateManyWithoutSubjectInput>;
  contents?: Maybe<ContentUpdateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserUpdateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizUpdateManyWithoutSubjectInput>;
}

export interface EducationProfileUpdateManyWithoutSubjectsInput {
  create?: Maybe<
    | EducationProfileCreateWithoutSubjectsInput[]
    | EducationProfileCreateWithoutSubjectsInput
  >;
  delete?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
  connect?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
  set?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
  disconnect?: Maybe<
    EducationProfileWhereUniqueInput[] | EducationProfileWhereUniqueInput
  >;
  update?: Maybe<
    | EducationProfileUpdateWithWhereUniqueWithoutSubjectsInput[]
    | EducationProfileUpdateWithWhereUniqueWithoutSubjectsInput
  >;
  upsert?: Maybe<
    | EducationProfileUpsertWithWhereUniqueWithoutSubjectsInput[]
    | EducationProfileUpsertWithWhereUniqueWithoutSubjectsInput
  >;
  deleteMany?: Maybe<
    EducationProfileScalarWhereInput[] | EducationProfileScalarWhereInput
  >;
  updateMany?: Maybe<
    | EducationProfileUpdateManyWithWhereNestedInput[]
    | EducationProfileUpdateManyWithWhereNestedInput
  >;
}

export interface EducationProfileUpdateWithWhereUniqueWithoutSubjectsInput {
  where: EducationProfileWhereUniqueInput;
  data: EducationProfileUpdateWithoutSubjectsDataInput;
}

export interface EducationProfileUpdateWithoutSubjectsDataInput {
  name?: Maybe<String>;
  profiileType?: Maybe<String>;
  educationLevel?: Maybe<String>;
  educationType?: Maybe<String>;
  specialization?: Maybe<String>;
  roles?: Maybe<RoleUpdateManyWithoutEducationprofilesInput>;
  std?: Maybe<StdUpdateManyWithoutEducationprofilesInput>;
  startedYear?: Maybe<DateTimeInput>;
  completedYear?: Maybe<DateTimeInput>;
  result?: Maybe<String>;
  status?: Maybe<String>;
  remark?: Maybe<String>;
  profileId?: Maybe<ProfileUpdateOneRequiredWithoutEducationProfilesInput>;
}

export interface ProfileUpdateOneRequiredWithoutEducationProfilesInput {
  create?: Maybe<ProfileCreateWithoutEducationProfilesInput>;
  update?: Maybe<ProfileUpdateWithoutEducationProfilesDataInput>;
  upsert?: Maybe<ProfileUpsertWithoutEducationProfilesInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface ProfileUpdateWithoutEducationProfilesDataInput {
  name?: Maybe<String>;
  userId?: Maybe<UserUpdateOneRequiredWithoutMyprofilesInput>;
  personalProfiile?: Maybe<PersonalProfileUpdateManyWithoutProfileIdInput>;
}

export interface PersonalProfileUpdateManyWithoutProfileIdInput {
  create?: Maybe<
    | PersonalProfileCreateWithoutProfileIdInput[]
    | PersonalProfileCreateWithoutProfileIdInput
  >;
  delete?: Maybe<
    PersonalProfileWhereUniqueInput[] | PersonalProfileWhereUniqueInput
  >;
  connect?: Maybe<
    PersonalProfileWhereUniqueInput[] | PersonalProfileWhereUniqueInput
  >;
  set?: Maybe<
    PersonalProfileWhereUniqueInput[] | PersonalProfileWhereUniqueInput
  >;
  disconnect?: Maybe<
    PersonalProfileWhereUniqueInput[] | PersonalProfileWhereUniqueInput
  >;
  update?: Maybe<
    | PersonalProfileUpdateWithWhereUniqueWithoutProfileIdInput[]
    | PersonalProfileUpdateWithWhereUniqueWithoutProfileIdInput
  >;
  upsert?: Maybe<
    | PersonalProfileUpsertWithWhereUniqueWithoutProfileIdInput[]
    | PersonalProfileUpsertWithWhereUniqueWithoutProfileIdInput
  >;
  deleteMany?: Maybe<
    PersonalProfileScalarWhereInput[] | PersonalProfileScalarWhereInput
  >;
  updateMany?: Maybe<
    | PersonalProfileUpdateManyWithWhereNestedInput[]
    | PersonalProfileUpdateManyWithWhereNestedInput
  >;
}

export interface PersonalProfileUpdateWithWhereUniqueWithoutProfileIdInput {
  where: PersonalProfileWhereUniqueInput;
  data: PersonalProfileUpdateWithoutProfileIdDataInput;
}

export interface PersonalProfileUpdateWithoutProfileIdDataInput {
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  mobile?: Maybe<String>;
  isMobilePublished?: Maybe<Boolean>;
  addresses?: Maybe<AddressUpdateManyWithoutPersonalProfileInput>;
}

export interface AddressUpdateManyWithoutPersonalProfileInput {
  create?: Maybe<
    | AddressCreateWithoutPersonalProfileInput[]
    | AddressCreateWithoutPersonalProfileInput
  >;
  delete?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  connect?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  set?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  disconnect?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  update?: Maybe<
    | AddressUpdateWithWhereUniqueWithoutPersonalProfileInput[]
    | AddressUpdateWithWhereUniqueWithoutPersonalProfileInput
  >;
  upsert?: Maybe<
    | AddressUpsertWithWhereUniqueWithoutPersonalProfileInput[]
    | AddressUpsertWithWhereUniqueWithoutPersonalProfileInput
  >;
  deleteMany?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
  updateMany?: Maybe<
    | AddressUpdateManyWithWhereNestedInput[]
    | AddressUpdateManyWithWhereNestedInput
  >;
}

export interface AddressUpdateWithWhereUniqueWithoutPersonalProfileInput {
  where: AddressWhereUniqueInput;
  data: AddressUpdateWithoutPersonalProfileDataInput;
}

export interface AddressUpdateWithoutPersonalProfileDataInput {
  adressline?: Maybe<String>;
  tehsil?: Maybe<String>;
  city?: Maybe<String>;
  district?: Maybe<String>;
  state?: Maybe<String>;
  pincode?: Maybe<String>;
}

export interface AddressUpsertWithWhereUniqueWithoutPersonalProfileInput {
  where: AddressWhereUniqueInput;
  update: AddressUpdateWithoutPersonalProfileDataInput;
  create: AddressCreateWithoutPersonalProfileInput;
}

export interface AddressScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  adressline?: Maybe<String>;
  adressline_not?: Maybe<String>;
  adressline_in?: Maybe<String[] | String>;
  adressline_not_in?: Maybe<String[] | String>;
  adressline_lt?: Maybe<String>;
  adressline_lte?: Maybe<String>;
  adressline_gt?: Maybe<String>;
  adressline_gte?: Maybe<String>;
  adressline_contains?: Maybe<String>;
  adressline_not_contains?: Maybe<String>;
  adressline_starts_with?: Maybe<String>;
  adressline_not_starts_with?: Maybe<String>;
  adressline_ends_with?: Maybe<String>;
  adressline_not_ends_with?: Maybe<String>;
  tehsil?: Maybe<String>;
  tehsil_not?: Maybe<String>;
  tehsil_in?: Maybe<String[] | String>;
  tehsil_not_in?: Maybe<String[] | String>;
  tehsil_lt?: Maybe<String>;
  tehsil_lte?: Maybe<String>;
  tehsil_gt?: Maybe<String>;
  tehsil_gte?: Maybe<String>;
  tehsil_contains?: Maybe<String>;
  tehsil_not_contains?: Maybe<String>;
  tehsil_starts_with?: Maybe<String>;
  tehsil_not_starts_with?: Maybe<String>;
  tehsil_ends_with?: Maybe<String>;
  tehsil_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  district?: Maybe<String>;
  district_not?: Maybe<String>;
  district_in?: Maybe<String[] | String>;
  district_not_in?: Maybe<String[] | String>;
  district_lt?: Maybe<String>;
  district_lte?: Maybe<String>;
  district_gt?: Maybe<String>;
  district_gte?: Maybe<String>;
  district_contains?: Maybe<String>;
  district_not_contains?: Maybe<String>;
  district_starts_with?: Maybe<String>;
  district_not_starts_with?: Maybe<String>;
  district_ends_with?: Maybe<String>;
  district_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  pincode?: Maybe<String>;
  pincode_not?: Maybe<String>;
  pincode_in?: Maybe<String[] | String>;
  pincode_not_in?: Maybe<String[] | String>;
  pincode_lt?: Maybe<String>;
  pincode_lte?: Maybe<String>;
  pincode_gt?: Maybe<String>;
  pincode_gte?: Maybe<String>;
  pincode_contains?: Maybe<String>;
  pincode_not_contains?: Maybe<String>;
  pincode_starts_with?: Maybe<String>;
  pincode_not_starts_with?: Maybe<String>;
  pincode_ends_with?: Maybe<String>;
  pincode_not_ends_with?: Maybe<String>;
  AND?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
  OR?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
  NOT?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
}

export interface AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput;
  data: AddressUpdateManyDataInput;
}

export interface AddressUpdateManyDataInput {
  adressline?: Maybe<String>;
  tehsil?: Maybe<String>;
  city?: Maybe<String>;
  district?: Maybe<String>;
  state?: Maybe<String>;
  pincode?: Maybe<String>;
}

export interface PersonalProfileUpsertWithWhereUniqueWithoutProfileIdInput {
  where: PersonalProfileWhereUniqueInput;
  update: PersonalProfileUpdateWithoutProfileIdDataInput;
  create: PersonalProfileCreateWithoutProfileIdInput;
}

export interface PersonalProfileScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  mobile?: Maybe<String>;
  mobile_not?: Maybe<String>;
  mobile_in?: Maybe<String[] | String>;
  mobile_not_in?: Maybe<String[] | String>;
  mobile_lt?: Maybe<String>;
  mobile_lte?: Maybe<String>;
  mobile_gt?: Maybe<String>;
  mobile_gte?: Maybe<String>;
  mobile_contains?: Maybe<String>;
  mobile_not_contains?: Maybe<String>;
  mobile_starts_with?: Maybe<String>;
  mobile_not_starts_with?: Maybe<String>;
  mobile_ends_with?: Maybe<String>;
  mobile_not_ends_with?: Maybe<String>;
  isMobilePublished?: Maybe<Boolean>;
  isMobilePublished_not?: Maybe<Boolean>;
  AND?: Maybe<
    PersonalProfileScalarWhereInput[] | PersonalProfileScalarWhereInput
  >;
  OR?: Maybe<
    PersonalProfileScalarWhereInput[] | PersonalProfileScalarWhereInput
  >;
  NOT?: Maybe<
    PersonalProfileScalarWhereInput[] | PersonalProfileScalarWhereInput
  >;
}

export interface PersonalProfileUpdateManyWithWhereNestedInput {
  where: PersonalProfileScalarWhereInput;
  data: PersonalProfileUpdateManyDataInput;
}

export interface PersonalProfileUpdateManyDataInput {
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  mobile?: Maybe<String>;
  isMobilePublished?: Maybe<Boolean>;
}

export interface ProfileUpsertWithoutEducationProfilesInput {
  update: ProfileUpdateWithoutEducationProfilesDataInput;
  create: ProfileCreateWithoutEducationProfilesInput;
}

export interface EducationProfileUpsertWithWhereUniqueWithoutSubjectsInput {
  where: EducationProfileWhereUniqueInput;
  update: EducationProfileUpdateWithoutSubjectsDataInput;
  create: EducationProfileCreateWithoutSubjectsInput;
}

export interface EducationProfileScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  profiileType?: Maybe<String>;
  profiileType_not?: Maybe<String>;
  profiileType_in?: Maybe<String[] | String>;
  profiileType_not_in?: Maybe<String[] | String>;
  profiileType_lt?: Maybe<String>;
  profiileType_lte?: Maybe<String>;
  profiileType_gt?: Maybe<String>;
  profiileType_gte?: Maybe<String>;
  profiileType_contains?: Maybe<String>;
  profiileType_not_contains?: Maybe<String>;
  profiileType_starts_with?: Maybe<String>;
  profiileType_not_starts_with?: Maybe<String>;
  profiileType_ends_with?: Maybe<String>;
  profiileType_not_ends_with?: Maybe<String>;
  educationLevel?: Maybe<String>;
  educationLevel_not?: Maybe<String>;
  educationLevel_in?: Maybe<String[] | String>;
  educationLevel_not_in?: Maybe<String[] | String>;
  educationLevel_lt?: Maybe<String>;
  educationLevel_lte?: Maybe<String>;
  educationLevel_gt?: Maybe<String>;
  educationLevel_gte?: Maybe<String>;
  educationLevel_contains?: Maybe<String>;
  educationLevel_not_contains?: Maybe<String>;
  educationLevel_starts_with?: Maybe<String>;
  educationLevel_not_starts_with?: Maybe<String>;
  educationLevel_ends_with?: Maybe<String>;
  educationLevel_not_ends_with?: Maybe<String>;
  educationType?: Maybe<String>;
  educationType_not?: Maybe<String>;
  educationType_in?: Maybe<String[] | String>;
  educationType_not_in?: Maybe<String[] | String>;
  educationType_lt?: Maybe<String>;
  educationType_lte?: Maybe<String>;
  educationType_gt?: Maybe<String>;
  educationType_gte?: Maybe<String>;
  educationType_contains?: Maybe<String>;
  educationType_not_contains?: Maybe<String>;
  educationType_starts_with?: Maybe<String>;
  educationType_not_starts_with?: Maybe<String>;
  educationType_ends_with?: Maybe<String>;
  educationType_not_ends_with?: Maybe<String>;
  specialization?: Maybe<String>;
  specialization_not?: Maybe<String>;
  specialization_in?: Maybe<String[] | String>;
  specialization_not_in?: Maybe<String[] | String>;
  specialization_lt?: Maybe<String>;
  specialization_lte?: Maybe<String>;
  specialization_gt?: Maybe<String>;
  specialization_gte?: Maybe<String>;
  specialization_contains?: Maybe<String>;
  specialization_not_contains?: Maybe<String>;
  specialization_starts_with?: Maybe<String>;
  specialization_not_starts_with?: Maybe<String>;
  specialization_ends_with?: Maybe<String>;
  specialization_not_ends_with?: Maybe<String>;
  startedYear?: Maybe<DateTimeInput>;
  startedYear_not?: Maybe<DateTimeInput>;
  startedYear_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startedYear_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startedYear_lt?: Maybe<DateTimeInput>;
  startedYear_lte?: Maybe<DateTimeInput>;
  startedYear_gt?: Maybe<DateTimeInput>;
  startedYear_gte?: Maybe<DateTimeInput>;
  completedYear?: Maybe<DateTimeInput>;
  completedYear_not?: Maybe<DateTimeInput>;
  completedYear_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  completedYear_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  completedYear_lt?: Maybe<DateTimeInput>;
  completedYear_lte?: Maybe<DateTimeInput>;
  completedYear_gt?: Maybe<DateTimeInput>;
  completedYear_gte?: Maybe<DateTimeInput>;
  result?: Maybe<String>;
  result_not?: Maybe<String>;
  result_in?: Maybe<String[] | String>;
  result_not_in?: Maybe<String[] | String>;
  result_lt?: Maybe<String>;
  result_lte?: Maybe<String>;
  result_gt?: Maybe<String>;
  result_gte?: Maybe<String>;
  result_contains?: Maybe<String>;
  result_not_contains?: Maybe<String>;
  result_starts_with?: Maybe<String>;
  result_not_starts_with?: Maybe<String>;
  result_ends_with?: Maybe<String>;
  result_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  remark?: Maybe<String>;
  remark_not?: Maybe<String>;
  remark_in?: Maybe<String[] | String>;
  remark_not_in?: Maybe<String[] | String>;
  remark_lt?: Maybe<String>;
  remark_lte?: Maybe<String>;
  remark_gt?: Maybe<String>;
  remark_gte?: Maybe<String>;
  remark_contains?: Maybe<String>;
  remark_not_contains?: Maybe<String>;
  remark_starts_with?: Maybe<String>;
  remark_not_starts_with?: Maybe<String>;
  remark_ends_with?: Maybe<String>;
  remark_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    EducationProfileScalarWhereInput[] | EducationProfileScalarWhereInput
  >;
  OR?: Maybe<
    EducationProfileScalarWhereInput[] | EducationProfileScalarWhereInput
  >;
  NOT?: Maybe<
    EducationProfileScalarWhereInput[] | EducationProfileScalarWhereInput
  >;
}

export interface EducationProfileUpdateManyWithWhereNestedInput {
  where: EducationProfileScalarWhereInput;
  data: EducationProfileUpdateManyDataInput;
}

export interface EducationProfileUpdateManyDataInput {
  name?: Maybe<String>;
  profiileType?: Maybe<String>;
  educationLevel?: Maybe<String>;
  educationType?: Maybe<String>;
  specialization?: Maybe<String>;
  startedYear?: Maybe<DateTimeInput>;
  completedYear?: Maybe<DateTimeInput>;
  result?: Maybe<String>;
  status?: Maybe<String>;
  remark?: Maybe<String>;
}

export interface UnitUpdateManyWithoutSubjectInput {
  create?: Maybe<
    UnitCreateWithoutSubjectInput[] | UnitCreateWithoutSubjectInput
  >;
  delete?: Maybe<UnitWhereUniqueInput[] | UnitWhereUniqueInput>;
  connect?: Maybe<UnitWhereUniqueInput[] | UnitWhereUniqueInput>;
  set?: Maybe<UnitWhereUniqueInput[] | UnitWhereUniqueInput>;
  disconnect?: Maybe<UnitWhereUniqueInput[] | UnitWhereUniqueInput>;
  update?: Maybe<
    | UnitUpdateWithWhereUniqueWithoutSubjectInput[]
    | UnitUpdateWithWhereUniqueWithoutSubjectInput
  >;
  upsert?: Maybe<
    | UnitUpsertWithWhereUniqueWithoutSubjectInput[]
    | UnitUpsertWithWhereUniqueWithoutSubjectInput
  >;
  deleteMany?: Maybe<UnitScalarWhereInput[] | UnitScalarWhereInput>;
  updateMany?: Maybe<
    UnitUpdateManyWithWhereNestedInput[] | UnitUpdateManyWithWhereNestedInput
  >;
}

export interface UnitUpdateWithWhereUniqueWithoutSubjectInput {
  where: UnitWhereUniqueInput;
  data: UnitUpdateWithoutSubjectDataInput;
}

export interface UnitUpdateWithoutSubjectDataInput {
  name?: Maybe<String>;
  topics?: Maybe<TopicUpdateManyWithoutUnitInput>;
  contents?: Maybe<ContentUpdateManyWithoutUnitInput>;
  createdBy?: Maybe<UserUpdateOneWithoutUnitByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutUnitUpdatedByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutUnitInput>;
  quizs?: Maybe<QuizUpdateManyWithoutUnitInput>;
}

export interface TopicUpdateManyWithoutUnitInput {
  create?: Maybe<TopicCreateWithoutUnitInput[] | TopicCreateWithoutUnitInput>;
  delete?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  set?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  disconnect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  update?: Maybe<
    | TopicUpdateWithWhereUniqueWithoutUnitInput[]
    | TopicUpdateWithWhereUniqueWithoutUnitInput
  >;
  upsert?: Maybe<
    | TopicUpsertWithWhereUniqueWithoutUnitInput[]
    | TopicUpsertWithWhereUniqueWithoutUnitInput
  >;
  deleteMany?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
  updateMany?: Maybe<
    TopicUpdateManyWithWhereNestedInput[] | TopicUpdateManyWithWhereNestedInput
  >;
}

export interface TopicUpdateWithWhereUniqueWithoutUnitInput {
  where: TopicWhereUniqueInput;
  data: TopicUpdateWithoutUnitDataInput;
}

export interface TopicUpdateWithoutUnitDataInput {
  name?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneWithoutTopicInput>;
  contents?: Maybe<ContentUpdateManyWithoutTopicInput>;
  createdBy?: Maybe<UserUpdateOneWithoutTopicByMeInput>;
  updateBy?: Maybe<UserUpdateOneWithoutTopicUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutTopicInput>;
  quizs?: Maybe<QuizUpdateManyWithoutTopicInput>;
}

export interface SubjectUpdateOneWithoutTopicInput {
  create?: Maybe<SubjectCreateWithoutTopicInput>;
  update?: Maybe<SubjectUpdateWithoutTopicDataInput>;
  upsert?: Maybe<SubjectUpsertWithoutTopicInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SubjectWhereUniqueInput>;
}

export interface SubjectUpdateWithoutTopicDataInput {
  name?: Maybe<String>;
  picture?: Maybe<String>;
  medium?: Maybe<MediumUpdateOneWithoutSubjectsInput>;
  std?: Maybe<StdUpdateOneRequiredWithoutSubjectsInput>;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupUpdateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileUpdateManyWithoutSubjectsInput>;
  units?: Maybe<UnitUpdateManyWithoutSubjectInput>;
  contents?: Maybe<ContentUpdateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserUpdateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizUpdateManyWithoutSubjectInput>;
}

export interface ContentUpdateManyWithoutSubjectInput {
  create?: Maybe<
    ContentCreateWithoutSubjectInput[] | ContentCreateWithoutSubjectInput
  >;
  delete?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  connect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  set?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  disconnect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  update?: Maybe<
    | ContentUpdateWithWhereUniqueWithoutSubjectInput[]
    | ContentUpdateWithWhereUniqueWithoutSubjectInput
  >;
  upsert?: Maybe<
    | ContentUpsertWithWhereUniqueWithoutSubjectInput[]
    | ContentUpsertWithWhereUniqueWithoutSubjectInput
  >;
  deleteMany?: Maybe<ContentScalarWhereInput[] | ContentScalarWhereInput>;
  updateMany?: Maybe<
    | ContentUpdateManyWithWhereNestedInput[]
    | ContentUpdateManyWithWhereNestedInput
  >;
}

export interface ContentUpdateWithWhereUniqueWithoutSubjectInput {
  where: ContentWhereUniqueInput;
  data: ContentUpdateWithoutSubjectDataInput;
}

export interface ContentUpdateWithoutSubjectDataInput {
  name?: Maybe<String>;
  number?: Maybe<Int>;
  fileInfo?: Maybe<Json>;
  type?: Maybe<String>;
  url?: Maybe<String>;
  unit?: Maybe<UnitUpdateOneWithoutContentsInput>;
  topic?: Maybe<TopicUpdateOneWithoutContentsInput>;
  createdBy?: Maybe<UserUpdateOneWithoutContentByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutContentUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
}

export interface UnitUpdateOneWithoutContentsInput {
  create?: Maybe<UnitCreateWithoutContentsInput>;
  update?: Maybe<UnitUpdateWithoutContentsDataInput>;
  upsert?: Maybe<UnitUpsertWithoutContentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UnitWhereUniqueInput>;
}

export interface UnitUpdateWithoutContentsDataInput {
  name?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneRequiredWithoutUnitsInput>;
  topics?: Maybe<TopicUpdateManyWithoutUnitInput>;
  createdBy?: Maybe<UserUpdateOneWithoutUnitByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutUnitUpdatedByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutUnitInput>;
  quizs?: Maybe<QuizUpdateManyWithoutUnitInput>;
}

export interface SubjectUpdateOneRequiredWithoutUnitsInput {
  create?: Maybe<SubjectCreateWithoutUnitsInput>;
  update?: Maybe<SubjectUpdateWithoutUnitsDataInput>;
  upsert?: Maybe<SubjectUpsertWithoutUnitsInput>;
  connect?: Maybe<SubjectWhereUniqueInput>;
}

export interface SubjectUpdateWithoutUnitsDataInput {
  name?: Maybe<String>;
  picture?: Maybe<String>;
  medium?: Maybe<MediumUpdateOneWithoutSubjectsInput>;
  std?: Maybe<StdUpdateOneRequiredWithoutSubjectsInput>;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupUpdateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileUpdateManyWithoutSubjectsInput>;
  topic?: Maybe<TopicUpdateManyWithoutSubjectInput>;
  contents?: Maybe<ContentUpdateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserUpdateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizUpdateManyWithoutSubjectInput>;
}

export interface TopicUpdateManyWithoutSubjectInput {
  create?: Maybe<
    TopicCreateWithoutSubjectInput[] | TopicCreateWithoutSubjectInput
  >;
  delete?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  set?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  disconnect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  update?: Maybe<
    | TopicUpdateWithWhereUniqueWithoutSubjectInput[]
    | TopicUpdateWithWhereUniqueWithoutSubjectInput
  >;
  upsert?: Maybe<
    | TopicUpsertWithWhereUniqueWithoutSubjectInput[]
    | TopicUpsertWithWhereUniqueWithoutSubjectInput
  >;
  deleteMany?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
  updateMany?: Maybe<
    TopicUpdateManyWithWhereNestedInput[] | TopicUpdateManyWithWhereNestedInput
  >;
}

export interface TopicUpdateWithWhereUniqueWithoutSubjectInput {
  where: TopicWhereUniqueInput;
  data: TopicUpdateWithoutSubjectDataInput;
}

export interface TopicUpdateWithoutSubjectDataInput {
  name?: Maybe<String>;
  unit?: Maybe<UnitUpdateOneWithoutTopicsInput>;
  contents?: Maybe<ContentUpdateManyWithoutTopicInput>;
  createdBy?: Maybe<UserUpdateOneWithoutTopicByMeInput>;
  updateBy?: Maybe<UserUpdateOneWithoutTopicUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutTopicInput>;
  quizs?: Maybe<QuizUpdateManyWithoutTopicInput>;
}

export interface UnitUpdateOneWithoutTopicsInput {
  create?: Maybe<UnitCreateWithoutTopicsInput>;
  update?: Maybe<UnitUpdateWithoutTopicsDataInput>;
  upsert?: Maybe<UnitUpsertWithoutTopicsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UnitWhereUniqueInput>;
}

export interface UnitUpdateWithoutTopicsDataInput {
  name?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneRequiredWithoutUnitsInput>;
  contents?: Maybe<ContentUpdateManyWithoutUnitInput>;
  createdBy?: Maybe<UserUpdateOneWithoutUnitByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutUnitUpdatedByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutUnitInput>;
  quizs?: Maybe<QuizUpdateManyWithoutUnitInput>;
}

export interface ContentUpdateManyWithoutUnitInput {
  create?: Maybe<
    ContentCreateWithoutUnitInput[] | ContentCreateWithoutUnitInput
  >;
  delete?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  connect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  set?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  disconnect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  update?: Maybe<
    | ContentUpdateWithWhereUniqueWithoutUnitInput[]
    | ContentUpdateWithWhereUniqueWithoutUnitInput
  >;
  upsert?: Maybe<
    | ContentUpsertWithWhereUniqueWithoutUnitInput[]
    | ContentUpsertWithWhereUniqueWithoutUnitInput
  >;
  deleteMany?: Maybe<ContentScalarWhereInput[] | ContentScalarWhereInput>;
  updateMany?: Maybe<
    | ContentUpdateManyWithWhereNestedInput[]
    | ContentUpdateManyWithWhereNestedInput
  >;
}

export interface ContentUpdateWithWhereUniqueWithoutUnitInput {
  where: ContentWhereUniqueInput;
  data: ContentUpdateWithoutUnitDataInput;
}

export interface ContentUpdateWithoutUnitDataInput {
  name?: Maybe<String>;
  number?: Maybe<Int>;
  fileInfo?: Maybe<Json>;
  type?: Maybe<String>;
  url?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneRequiredWithoutContentsInput>;
  topic?: Maybe<TopicUpdateOneWithoutContentsInput>;
  createdBy?: Maybe<UserUpdateOneWithoutContentByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutContentUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
}

export interface SubjectUpdateOneRequiredWithoutContentsInput {
  create?: Maybe<SubjectCreateWithoutContentsInput>;
  update?: Maybe<SubjectUpdateWithoutContentsDataInput>;
  upsert?: Maybe<SubjectUpsertWithoutContentsInput>;
  connect?: Maybe<SubjectWhereUniqueInput>;
}

export interface SubjectUpdateWithoutContentsDataInput {
  name?: Maybe<String>;
  picture?: Maybe<String>;
  medium?: Maybe<MediumUpdateOneWithoutSubjectsInput>;
  std?: Maybe<StdUpdateOneRequiredWithoutSubjectsInput>;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupUpdateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileUpdateManyWithoutSubjectsInput>;
  units?: Maybe<UnitUpdateManyWithoutSubjectInput>;
  topic?: Maybe<TopicUpdateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserUpdateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizUpdateManyWithoutSubjectInput>;
}

export interface UserUpdateOneWithoutSubjectByMeInput {
  create?: Maybe<UserCreateWithoutSubjectByMeInput>;
  update?: Maybe<UserUpdateWithoutSubjectByMeDataInput>;
  upsert?: Maybe<UserUpsertWithoutSubjectByMeInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutSubjectByMeDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface SubjectSubscriptionUpdateManyWithoutUseridInput {
  create?: Maybe<
    | SubjectSubscriptionCreateWithoutUseridInput[]
    | SubjectSubscriptionCreateWithoutUseridInput
  >;
  delete?: Maybe<
    SubjectSubscriptionWhereUniqueInput[] | SubjectSubscriptionWhereUniqueInput
  >;
  connect?: Maybe<
    SubjectSubscriptionWhereUniqueInput[] | SubjectSubscriptionWhereUniqueInput
  >;
  set?: Maybe<
    SubjectSubscriptionWhereUniqueInput[] | SubjectSubscriptionWhereUniqueInput
  >;
  disconnect?: Maybe<
    SubjectSubscriptionWhereUniqueInput[] | SubjectSubscriptionWhereUniqueInput
  >;
  update?: Maybe<
    | SubjectSubscriptionUpdateWithWhereUniqueWithoutUseridInput[]
    | SubjectSubscriptionUpdateWithWhereUniqueWithoutUseridInput
  >;
  upsert?: Maybe<
    | SubjectSubscriptionUpsertWithWhereUniqueWithoutUseridInput[]
    | SubjectSubscriptionUpsertWithWhereUniqueWithoutUseridInput
  >;
  deleteMany?: Maybe<
    SubjectSubscriptionScalarWhereInput[] | SubjectSubscriptionScalarWhereInput
  >;
  updateMany?: Maybe<
    | SubjectSubscriptionUpdateManyWithWhereNestedInput[]
    | SubjectSubscriptionUpdateManyWithWhereNestedInput
  >;
}

export interface SubjectSubscriptionUpdateWithWhereUniqueWithoutUseridInput {
  where: SubjectSubscriptionWhereUniqueInput;
  data: SubjectSubscriptionUpdateWithoutUseridDataInput;
}

export interface SubjectSubscriptionUpdateWithoutUseridDataInput {
  subsType?: Maybe<String>;
  mySubjects?: Maybe<SubjectUpdateManyInput>;
  subscribedAs?: Maybe<RoleUpdateOneRequiredWithoutSubjectSubscriptionsInput>;
}

export interface SubjectUpdateManyInput {
  create?: Maybe<SubjectCreateInput[] | SubjectCreateInput>;
  update?: Maybe<
    | SubjectUpdateWithWhereUniqueNestedInput[]
    | SubjectUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | SubjectUpsertWithWhereUniqueNestedInput[]
    | SubjectUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  set?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  disconnect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  deleteMany?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
  updateMany?: Maybe<
    | SubjectUpdateManyWithWhereNestedInput[]
    | SubjectUpdateManyWithWhereNestedInput
  >;
}

export interface SubjectUpdateWithWhereUniqueNestedInput {
  where: SubjectWhereUniqueInput;
  data: SubjectUpdateDataInput;
}

export interface SubjectUpdateDataInput {
  name?: Maybe<String>;
  picture?: Maybe<String>;
  medium?: Maybe<MediumUpdateOneWithoutSubjectsInput>;
  std?: Maybe<StdUpdateOneRequiredWithoutSubjectsInput>;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupUpdateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileUpdateManyWithoutSubjectsInput>;
  units?: Maybe<UnitUpdateManyWithoutSubjectInput>;
  topic?: Maybe<TopicUpdateManyWithoutSubjectInput>;
  contents?: Maybe<ContentUpdateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserUpdateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizUpdateManyWithoutSubjectInput>;
}

export interface UserUpdateManyWithoutSubjectUpddateByMeInput {
  create?: Maybe<
    | UserCreateWithoutSubjectUpddateByMeInput[]
    | UserCreateWithoutSubjectUpddateByMeInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutSubjectUpddateByMeInput[]
    | UserUpdateWithWhereUniqueWithoutSubjectUpddateByMeInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutSubjectUpddateByMeInput[]
    | UserUpsertWithWhereUniqueWithoutSubjectUpddateByMeInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutSubjectUpddateByMeInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutSubjectUpddateByMeDataInput;
}

export interface UserUpdateWithoutSubjectUpddateByMeDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface SubjectUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    SubjectCreateWithoutCreatedByInput[] | SubjectCreateWithoutCreatedByInput
  >;
  delete?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  set?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  disconnect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  update?: Maybe<
    | SubjectUpdateWithWhereUniqueWithoutCreatedByInput[]
    | SubjectUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | SubjectUpsertWithWhereUniqueWithoutCreatedByInput[]
    | SubjectUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
  updateMany?: Maybe<
    | SubjectUpdateManyWithWhereNestedInput[]
    | SubjectUpdateManyWithWhereNestedInput
  >;
}

export interface SubjectUpdateWithWhereUniqueWithoutCreatedByInput {
  where: SubjectWhereUniqueInput;
  data: SubjectUpdateWithoutCreatedByDataInput;
}

export interface SubjectUpdateWithoutCreatedByDataInput {
  name?: Maybe<String>;
  picture?: Maybe<String>;
  medium?: Maybe<MediumUpdateOneWithoutSubjectsInput>;
  std?: Maybe<StdUpdateOneRequiredWithoutSubjectsInput>;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupUpdateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileUpdateManyWithoutSubjectsInput>;
  units?: Maybe<UnitUpdateManyWithoutSubjectInput>;
  topic?: Maybe<TopicUpdateManyWithoutSubjectInput>;
  contents?: Maybe<ContentUpdateManyWithoutSubjectInput>;
  updateBy?: Maybe<UserUpdateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizUpdateManyWithoutSubjectInput>;
}

export interface QuestionUpdateManyWithoutSubjectInput {
  create?: Maybe<
    QuestionCreateWithoutSubjectInput[] | QuestionCreateWithoutSubjectInput
  >;
  delete?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  set?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  disconnect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  update?: Maybe<
    | QuestionUpdateWithWhereUniqueWithoutSubjectInput[]
    | QuestionUpdateWithWhereUniqueWithoutSubjectInput
  >;
  upsert?: Maybe<
    | QuestionUpsertWithWhereUniqueWithoutSubjectInput[]
    | QuestionUpsertWithWhereUniqueWithoutSubjectInput
  >;
  deleteMany?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  updateMany?: Maybe<
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionUpdateWithWhereUniqueWithoutSubjectInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateWithoutSubjectDataInput;
}

export interface QuestionUpdateWithoutSubjectDataInput {
  unit?: Maybe<UnitUpdateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicUpdateOneWithoutQuestionsInput>;
  quetype?: Maybe<String>;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType?: Maybe<String>;
  descriptionurl?: Maybe<String>;
  options?: Maybe<Json>;
  createdBy?: Maybe<UserUpdateOneWithoutQuestionCreatedByInput>;
  level?: Maybe<Int>;
  updatedBy?: Maybe<UserUpdateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizUpdateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultUpdateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultUpdateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultUpdateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultUpdateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultUpdateManyWithoutWrongInput>;
}

export interface UnitUpdateOneWithoutQuestionsInput {
  create?: Maybe<UnitCreateWithoutQuestionsInput>;
  update?: Maybe<UnitUpdateWithoutQuestionsDataInput>;
  upsert?: Maybe<UnitUpsertWithoutQuestionsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UnitWhereUniqueInput>;
}

export interface UnitUpdateWithoutQuestionsDataInput {
  name?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneRequiredWithoutUnitsInput>;
  topics?: Maybe<TopicUpdateManyWithoutUnitInput>;
  contents?: Maybe<ContentUpdateManyWithoutUnitInput>;
  createdBy?: Maybe<UserUpdateOneWithoutUnitByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutUnitUpdatedByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  quizs?: Maybe<QuizUpdateManyWithoutUnitInput>;
}

export interface UserUpdateOneWithoutUnitByMeInput {
  create?: Maybe<UserCreateWithoutUnitByMeInput>;
  update?: Maybe<UserUpdateWithoutUnitByMeDataInput>;
  upsert?: Maybe<UserUpsertWithoutUnitByMeInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutUnitByMeDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface SubjectUpdateManyWithoutUpdateByInput {
  create?: Maybe<
    SubjectCreateWithoutUpdateByInput[] | SubjectCreateWithoutUpdateByInput
  >;
  delete?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  set?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  disconnect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  update?: Maybe<
    | SubjectUpdateWithWhereUniqueWithoutUpdateByInput[]
    | SubjectUpdateWithWhereUniqueWithoutUpdateByInput
  >;
  upsert?: Maybe<
    | SubjectUpsertWithWhereUniqueWithoutUpdateByInput[]
    | SubjectUpsertWithWhereUniqueWithoutUpdateByInput
  >;
  deleteMany?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
  updateMany?: Maybe<
    | SubjectUpdateManyWithWhereNestedInput[]
    | SubjectUpdateManyWithWhereNestedInput
  >;
}

export interface SubjectUpdateWithWhereUniqueWithoutUpdateByInput {
  where: SubjectWhereUniqueInput;
  data: SubjectUpdateWithoutUpdateByDataInput;
}

export interface SubjectUpdateWithoutUpdateByDataInput {
  name?: Maybe<String>;
  picture?: Maybe<String>;
  medium?: Maybe<MediumUpdateOneWithoutSubjectsInput>;
  std?: Maybe<StdUpdateOneRequiredWithoutSubjectsInput>;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupUpdateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileUpdateManyWithoutSubjectsInput>;
  units?: Maybe<UnitUpdateManyWithoutSubjectInput>;
  topic?: Maybe<TopicUpdateManyWithoutSubjectInput>;
  contents?: Maybe<ContentUpdateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserUpdateOneWithoutSubjectByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizUpdateManyWithoutSubjectInput>;
}

export interface QuizUpdateManyWithoutSubjectInput {
  create?: Maybe<
    QuizCreateWithoutSubjectInput[] | QuizCreateWithoutSubjectInput
  >;
  delete?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  connect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  set?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  disconnect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  update?: Maybe<
    | QuizUpdateWithWhereUniqueWithoutSubjectInput[]
    | QuizUpdateWithWhereUniqueWithoutSubjectInput
  >;
  upsert?: Maybe<
    | QuizUpsertWithWhereUniqueWithoutSubjectInput[]
    | QuizUpsertWithWhereUniqueWithoutSubjectInput
  >;
  deleteMany?: Maybe<QuizScalarWhereInput[] | QuizScalarWhereInput>;
  updateMany?: Maybe<
    QuizUpdateManyWithWhereNestedInput[] | QuizUpdateManyWithWhereNestedInput
  >;
}

export interface QuizUpdateWithWhereUniqueWithoutSubjectInput {
  where: QuizWhereUniqueInput;
  data: QuizUpdateWithoutSubjectDataInput;
}

export interface QuizUpdateWithoutSubjectDataInput {
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  unit?: Maybe<UnitUpdateOneWithoutQuizsInput>;
  topic?: Maybe<TopicUpdateOneWithoutQuizsInput>;
  questions?: Maybe<QuestionUpdateManyWithoutQuizInput>;
  markingscheme?: Maybe<Json>;
  quizlevel?: Maybe<Int>;
  threshold?: Maybe<Json>;
  isForLevelPromotion?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  description?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutQuizCreatedByInput>;
  weightage?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  validTo?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
  results?: Maybe<ResultUpdateManyWithoutQuizInput>;
  courses?: Maybe<QuizUpdateManyWithoutCoursesInput>;
}

export interface UnitUpdateOneWithoutQuizsInput {
  create?: Maybe<UnitCreateWithoutQuizsInput>;
  update?: Maybe<UnitUpdateWithoutQuizsDataInput>;
  upsert?: Maybe<UnitUpsertWithoutQuizsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UnitWhereUniqueInput>;
}

export interface UnitUpdateWithoutQuizsDataInput {
  name?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneRequiredWithoutUnitsInput>;
  topics?: Maybe<TopicUpdateManyWithoutUnitInput>;
  contents?: Maybe<ContentUpdateManyWithoutUnitInput>;
  createdBy?: Maybe<UserUpdateOneWithoutUnitByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutUnitUpdatedByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutUnitInput>;
}

export interface UserUpdateManyWithoutUnitUpdatedByMeInput {
  create?: Maybe<
    | UserCreateWithoutUnitUpdatedByMeInput[]
    | UserCreateWithoutUnitUpdatedByMeInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutUnitUpdatedByMeInput[]
    | UserUpdateWithWhereUniqueWithoutUnitUpdatedByMeInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutUnitUpdatedByMeInput[]
    | UserUpsertWithWhereUniqueWithoutUnitUpdatedByMeInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutUnitUpdatedByMeInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutUnitUpdatedByMeDataInput;
}

export interface UserUpdateWithoutUnitUpdatedByMeDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface UnitUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    UnitCreateWithoutCreatedByInput[] | UnitCreateWithoutCreatedByInput
  >;
  delete?: Maybe<UnitWhereUniqueInput[] | UnitWhereUniqueInput>;
  connect?: Maybe<UnitWhereUniqueInput[] | UnitWhereUniqueInput>;
  set?: Maybe<UnitWhereUniqueInput[] | UnitWhereUniqueInput>;
  disconnect?: Maybe<UnitWhereUniqueInput[] | UnitWhereUniqueInput>;
  update?: Maybe<
    | UnitUpdateWithWhereUniqueWithoutCreatedByInput[]
    | UnitUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | UnitUpsertWithWhereUniqueWithoutCreatedByInput[]
    | UnitUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<UnitScalarWhereInput[] | UnitScalarWhereInput>;
  updateMany?: Maybe<
    UnitUpdateManyWithWhereNestedInput[] | UnitUpdateManyWithWhereNestedInput
  >;
}

export interface UnitUpdateWithWhereUniqueWithoutCreatedByInput {
  where: UnitWhereUniqueInput;
  data: UnitUpdateWithoutCreatedByDataInput;
}

export interface UnitUpdateWithoutCreatedByDataInput {
  name?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneRequiredWithoutUnitsInput>;
  topics?: Maybe<TopicUpdateManyWithoutUnitInput>;
  contents?: Maybe<ContentUpdateManyWithoutUnitInput>;
  updateBy?: Maybe<UserUpdateManyWithoutUnitUpdatedByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutUnitInput>;
  quizs?: Maybe<QuizUpdateManyWithoutUnitInput>;
}

export interface QuestionUpdateManyWithoutUnitInput {
  create?: Maybe<
    QuestionCreateWithoutUnitInput[] | QuestionCreateWithoutUnitInput
  >;
  delete?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  set?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  disconnect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  update?: Maybe<
    | QuestionUpdateWithWhereUniqueWithoutUnitInput[]
    | QuestionUpdateWithWhereUniqueWithoutUnitInput
  >;
  upsert?: Maybe<
    | QuestionUpsertWithWhereUniqueWithoutUnitInput[]
    | QuestionUpsertWithWhereUniqueWithoutUnitInput
  >;
  deleteMany?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  updateMany?: Maybe<
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionUpdateWithWhereUniqueWithoutUnitInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateWithoutUnitDataInput;
}

export interface QuestionUpdateWithoutUnitDataInput {
  subject?: Maybe<SubjectUpdateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicUpdateOneWithoutQuestionsInput>;
  quetype?: Maybe<String>;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType?: Maybe<String>;
  descriptionurl?: Maybe<String>;
  options?: Maybe<Json>;
  createdBy?: Maybe<UserUpdateOneWithoutQuestionCreatedByInput>;
  level?: Maybe<Int>;
  updatedBy?: Maybe<UserUpdateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizUpdateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultUpdateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultUpdateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultUpdateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultUpdateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultUpdateManyWithoutWrongInput>;
}

export interface SubjectUpdateOneWithoutQuestionsInput {
  create?: Maybe<SubjectCreateWithoutQuestionsInput>;
  update?: Maybe<SubjectUpdateWithoutQuestionsDataInput>;
  upsert?: Maybe<SubjectUpsertWithoutQuestionsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SubjectWhereUniqueInput>;
}

export interface SubjectUpdateWithoutQuestionsDataInput {
  name?: Maybe<String>;
  picture?: Maybe<String>;
  medium?: Maybe<MediumUpdateOneWithoutSubjectsInput>;
  std?: Maybe<StdUpdateOneRequiredWithoutSubjectsInput>;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupUpdateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileUpdateManyWithoutSubjectsInput>;
  units?: Maybe<UnitUpdateManyWithoutSubjectInput>;
  topic?: Maybe<TopicUpdateManyWithoutSubjectInput>;
  contents?: Maybe<ContentUpdateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserUpdateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  quizes?: Maybe<QuizUpdateManyWithoutSubjectInput>;
}

export interface SubjectUpsertWithoutQuestionsInput {
  update: SubjectUpdateWithoutQuestionsDataInput;
  create: SubjectCreateWithoutQuestionsInput;
}

export interface TopicUpdateOneWithoutQuestionsInput {
  create?: Maybe<TopicCreateWithoutQuestionsInput>;
  update?: Maybe<TopicUpdateWithoutQuestionsDataInput>;
  upsert?: Maybe<TopicUpsertWithoutQuestionsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TopicWhereUniqueInput>;
}

export interface TopicUpdateWithoutQuestionsDataInput {
  name?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneWithoutTopicInput>;
  unit?: Maybe<UnitUpdateOneWithoutTopicsInput>;
  contents?: Maybe<ContentUpdateManyWithoutTopicInput>;
  createdBy?: Maybe<UserUpdateOneWithoutTopicByMeInput>;
  updateBy?: Maybe<UserUpdateOneWithoutTopicUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  quizs?: Maybe<QuizUpdateManyWithoutTopicInput>;
}

export interface ContentUpdateManyWithoutTopicInput {
  create?: Maybe<
    ContentCreateWithoutTopicInput[] | ContentCreateWithoutTopicInput
  >;
  delete?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  connect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  set?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  disconnect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  update?: Maybe<
    | ContentUpdateWithWhereUniqueWithoutTopicInput[]
    | ContentUpdateWithWhereUniqueWithoutTopicInput
  >;
  upsert?: Maybe<
    | ContentUpsertWithWhereUniqueWithoutTopicInput[]
    | ContentUpsertWithWhereUniqueWithoutTopicInput
  >;
  deleteMany?: Maybe<ContentScalarWhereInput[] | ContentScalarWhereInput>;
  updateMany?: Maybe<
    | ContentUpdateManyWithWhereNestedInput[]
    | ContentUpdateManyWithWhereNestedInput
  >;
}

export interface ContentUpdateWithWhereUniqueWithoutTopicInput {
  where: ContentWhereUniqueInput;
  data: ContentUpdateWithoutTopicDataInput;
}

export interface ContentUpdateWithoutTopicDataInput {
  name?: Maybe<String>;
  number?: Maybe<Int>;
  fileInfo?: Maybe<Json>;
  type?: Maybe<String>;
  url?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneRequiredWithoutContentsInput>;
  unit?: Maybe<UnitUpdateOneWithoutContentsInput>;
  createdBy?: Maybe<UserUpdateOneWithoutContentByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutContentUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
}

export interface UserUpdateOneWithoutContentByMeInput {
  create?: Maybe<UserCreateWithoutContentByMeInput>;
  update?: Maybe<UserUpdateWithoutContentByMeDataInput>;
  upsert?: Maybe<UserUpsertWithoutContentByMeInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutContentByMeDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface UnitUpdateManyWithoutUpdateByInput {
  create?: Maybe<
    UnitCreateWithoutUpdateByInput[] | UnitCreateWithoutUpdateByInput
  >;
  delete?: Maybe<UnitWhereUniqueInput[] | UnitWhereUniqueInput>;
  connect?: Maybe<UnitWhereUniqueInput[] | UnitWhereUniqueInput>;
  set?: Maybe<UnitWhereUniqueInput[] | UnitWhereUniqueInput>;
  disconnect?: Maybe<UnitWhereUniqueInput[] | UnitWhereUniqueInput>;
  update?: Maybe<
    | UnitUpdateWithWhereUniqueWithoutUpdateByInput[]
    | UnitUpdateWithWhereUniqueWithoutUpdateByInput
  >;
  upsert?: Maybe<
    | UnitUpsertWithWhereUniqueWithoutUpdateByInput[]
    | UnitUpsertWithWhereUniqueWithoutUpdateByInput
  >;
  deleteMany?: Maybe<UnitScalarWhereInput[] | UnitScalarWhereInput>;
  updateMany?: Maybe<
    UnitUpdateManyWithWhereNestedInput[] | UnitUpdateManyWithWhereNestedInput
  >;
}

export interface UnitUpdateWithWhereUniqueWithoutUpdateByInput {
  where: UnitWhereUniqueInput;
  data: UnitUpdateWithoutUpdateByDataInput;
}

export interface UnitUpdateWithoutUpdateByDataInput {
  name?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneRequiredWithoutUnitsInput>;
  topics?: Maybe<TopicUpdateManyWithoutUnitInput>;
  contents?: Maybe<ContentUpdateManyWithoutUnitInput>;
  createdBy?: Maybe<UserUpdateOneWithoutUnitByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutUnitInput>;
  quizs?: Maybe<QuizUpdateManyWithoutUnitInput>;
}

export interface QuizUpdateManyWithoutUnitInput {
  create?: Maybe<QuizCreateWithoutUnitInput[] | QuizCreateWithoutUnitInput>;
  delete?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  connect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  set?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  disconnect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  update?: Maybe<
    | QuizUpdateWithWhereUniqueWithoutUnitInput[]
    | QuizUpdateWithWhereUniqueWithoutUnitInput
  >;
  upsert?: Maybe<
    | QuizUpsertWithWhereUniqueWithoutUnitInput[]
    | QuizUpsertWithWhereUniqueWithoutUnitInput
  >;
  deleteMany?: Maybe<QuizScalarWhereInput[] | QuizScalarWhereInput>;
  updateMany?: Maybe<
    QuizUpdateManyWithWhereNestedInput[] | QuizUpdateManyWithWhereNestedInput
  >;
}

export interface QuizUpdateWithWhereUniqueWithoutUnitInput {
  where: QuizWhereUniqueInput;
  data: QuizUpdateWithoutUnitDataInput;
}

export interface QuizUpdateWithoutUnitDataInput {
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneWithoutQuizesInput>;
  topic?: Maybe<TopicUpdateOneWithoutQuizsInput>;
  questions?: Maybe<QuestionUpdateManyWithoutQuizInput>;
  markingscheme?: Maybe<Json>;
  quizlevel?: Maybe<Int>;
  threshold?: Maybe<Json>;
  isForLevelPromotion?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  description?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutQuizCreatedByInput>;
  weightage?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  validTo?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
  results?: Maybe<ResultUpdateManyWithoutQuizInput>;
  courses?: Maybe<QuizUpdateManyWithoutCoursesInput>;
}

export interface SubjectUpdateOneWithoutQuizesInput {
  create?: Maybe<SubjectCreateWithoutQuizesInput>;
  update?: Maybe<SubjectUpdateWithoutQuizesDataInput>;
  upsert?: Maybe<SubjectUpsertWithoutQuizesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SubjectWhereUniqueInput>;
}

export interface SubjectUpdateWithoutQuizesDataInput {
  name?: Maybe<String>;
  picture?: Maybe<String>;
  medium?: Maybe<MediumUpdateOneWithoutSubjectsInput>;
  std?: Maybe<StdUpdateOneRequiredWithoutSubjectsInput>;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupUpdateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileUpdateManyWithoutSubjectsInput>;
  units?: Maybe<UnitUpdateManyWithoutSubjectInput>;
  topic?: Maybe<TopicUpdateManyWithoutSubjectInput>;
  contents?: Maybe<ContentUpdateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserUpdateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutSubjectInput>;
}

export interface SubjectUpsertWithoutQuizesInput {
  update: SubjectUpdateWithoutQuizesDataInput;
  create: SubjectCreateWithoutQuizesInput;
}

export interface TopicUpdateOneWithoutQuizsInput {
  create?: Maybe<TopicCreateWithoutQuizsInput>;
  update?: Maybe<TopicUpdateWithoutQuizsDataInput>;
  upsert?: Maybe<TopicUpsertWithoutQuizsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TopicWhereUniqueInput>;
}

export interface TopicUpdateWithoutQuizsDataInput {
  name?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneWithoutTopicInput>;
  unit?: Maybe<UnitUpdateOneWithoutTopicsInput>;
  contents?: Maybe<ContentUpdateManyWithoutTopicInput>;
  createdBy?: Maybe<UserUpdateOneWithoutTopicByMeInput>;
  updateBy?: Maybe<UserUpdateOneWithoutTopicUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutTopicInput>;
}

export interface UserUpdateOneWithoutTopicByMeInput {
  create?: Maybe<UserCreateWithoutTopicByMeInput>;
  update?: Maybe<UserUpdateWithoutTopicByMeDataInput>;
  upsert?: Maybe<UserUpsertWithoutTopicByMeInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutTopicByMeDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface TopicUpdateManyWithoutUpdateByInput {
  create?: Maybe<
    TopicCreateWithoutUpdateByInput[] | TopicCreateWithoutUpdateByInput
  >;
  delete?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  set?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  disconnect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  update?: Maybe<
    | TopicUpdateWithWhereUniqueWithoutUpdateByInput[]
    | TopicUpdateWithWhereUniqueWithoutUpdateByInput
  >;
  upsert?: Maybe<
    | TopicUpsertWithWhereUniqueWithoutUpdateByInput[]
    | TopicUpsertWithWhereUniqueWithoutUpdateByInput
  >;
  deleteMany?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
  updateMany?: Maybe<
    TopicUpdateManyWithWhereNestedInput[] | TopicUpdateManyWithWhereNestedInput
  >;
}

export interface TopicUpdateWithWhereUniqueWithoutUpdateByInput {
  where: TopicWhereUniqueInput;
  data: TopicUpdateWithoutUpdateByDataInput;
}

export interface TopicUpdateWithoutUpdateByDataInput {
  name?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneWithoutTopicInput>;
  unit?: Maybe<UnitUpdateOneWithoutTopicsInput>;
  contents?: Maybe<ContentUpdateManyWithoutTopicInput>;
  createdBy?: Maybe<UserUpdateOneWithoutTopicByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutTopicInput>;
  quizs?: Maybe<QuizUpdateManyWithoutTopicInput>;
}

export interface QuestionUpdateManyWithoutTopicInput {
  create?: Maybe<
    QuestionCreateWithoutTopicInput[] | QuestionCreateWithoutTopicInput
  >;
  delete?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  set?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  disconnect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  update?: Maybe<
    | QuestionUpdateWithWhereUniqueWithoutTopicInput[]
    | QuestionUpdateWithWhereUniqueWithoutTopicInput
  >;
  upsert?: Maybe<
    | QuestionUpsertWithWhereUniqueWithoutTopicInput[]
    | QuestionUpsertWithWhereUniqueWithoutTopicInput
  >;
  deleteMany?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  updateMany?: Maybe<
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionUpdateWithWhereUniqueWithoutTopicInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateWithoutTopicDataInput;
}

export interface QuestionUpdateWithoutTopicDataInput {
  subject?: Maybe<SubjectUpdateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitUpdateOneWithoutQuestionsInput>;
  quetype?: Maybe<String>;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType?: Maybe<String>;
  descriptionurl?: Maybe<String>;
  options?: Maybe<Json>;
  createdBy?: Maybe<UserUpdateOneWithoutQuestionCreatedByInput>;
  level?: Maybe<Int>;
  updatedBy?: Maybe<UserUpdateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizUpdateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultUpdateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultUpdateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultUpdateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultUpdateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultUpdateManyWithoutWrongInput>;
}

export interface UserUpdateOneWithoutQuestionCreatedByInput {
  create?: Maybe<UserCreateWithoutQuestionCreatedByInput>;
  update?: Maybe<UserUpdateWithoutQuestionCreatedByDataInput>;
  upsert?: Maybe<UserUpsertWithoutQuestionCreatedByInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutQuestionCreatedByDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface TopicUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    TopicCreateWithoutCreatedByInput[] | TopicCreateWithoutCreatedByInput
  >;
  delete?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  set?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  disconnect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  update?: Maybe<
    | TopicUpdateWithWhereUniqueWithoutCreatedByInput[]
    | TopicUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | TopicUpsertWithWhereUniqueWithoutCreatedByInput[]
    | TopicUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
  updateMany?: Maybe<
    TopicUpdateManyWithWhereNestedInput[] | TopicUpdateManyWithWhereNestedInput
  >;
}

export interface TopicUpdateWithWhereUniqueWithoutCreatedByInput {
  where: TopicWhereUniqueInput;
  data: TopicUpdateWithoutCreatedByDataInput;
}

export interface TopicUpdateWithoutCreatedByDataInput {
  name?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneWithoutTopicInput>;
  unit?: Maybe<UnitUpdateOneWithoutTopicsInput>;
  contents?: Maybe<ContentUpdateManyWithoutTopicInput>;
  updateBy?: Maybe<UserUpdateOneWithoutTopicUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutTopicInput>;
  quizs?: Maybe<QuizUpdateManyWithoutTopicInput>;
}

export interface UserUpdateOneWithoutTopicUpdateByMeInput {
  create?: Maybe<UserCreateWithoutTopicUpdateByMeInput>;
  update?: Maybe<UserUpdateWithoutTopicUpdateByMeDataInput>;
  upsert?: Maybe<UserUpsertWithoutTopicUpdateByMeInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutTopicUpdateByMeDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface ContentUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    ContentCreateWithoutCreatedByInput[] | ContentCreateWithoutCreatedByInput
  >;
  delete?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  connect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  set?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  disconnect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  update?: Maybe<
    | ContentUpdateWithWhereUniqueWithoutCreatedByInput[]
    | ContentUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | ContentUpsertWithWhereUniqueWithoutCreatedByInput[]
    | ContentUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<ContentScalarWhereInput[] | ContentScalarWhereInput>;
  updateMany?: Maybe<
    | ContentUpdateManyWithWhereNestedInput[]
    | ContentUpdateManyWithWhereNestedInput
  >;
}

export interface ContentUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ContentWhereUniqueInput;
  data: ContentUpdateWithoutCreatedByDataInput;
}

export interface ContentUpdateWithoutCreatedByDataInput {
  name?: Maybe<String>;
  number?: Maybe<Int>;
  fileInfo?: Maybe<Json>;
  type?: Maybe<String>;
  url?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneRequiredWithoutContentsInput>;
  unit?: Maybe<UnitUpdateOneWithoutContentsInput>;
  topic?: Maybe<TopicUpdateOneWithoutContentsInput>;
  updateBy?: Maybe<UserUpdateManyWithoutContentUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
}

export interface TopicUpdateOneWithoutContentsInput {
  create?: Maybe<TopicCreateWithoutContentsInput>;
  update?: Maybe<TopicUpdateWithoutContentsDataInput>;
  upsert?: Maybe<TopicUpsertWithoutContentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TopicWhereUniqueInput>;
}

export interface TopicUpdateWithoutContentsDataInput {
  name?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneWithoutTopicInput>;
  unit?: Maybe<UnitUpdateOneWithoutTopicsInput>;
  createdBy?: Maybe<UserUpdateOneWithoutTopicByMeInput>;
  updateBy?: Maybe<UserUpdateOneWithoutTopicUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutTopicInput>;
  quizs?: Maybe<QuizUpdateManyWithoutTopicInput>;
}

export interface QuizUpdateManyWithoutTopicInput {
  create?: Maybe<QuizCreateWithoutTopicInput[] | QuizCreateWithoutTopicInput>;
  delete?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  connect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  set?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  disconnect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  update?: Maybe<
    | QuizUpdateWithWhereUniqueWithoutTopicInput[]
    | QuizUpdateWithWhereUniqueWithoutTopicInput
  >;
  upsert?: Maybe<
    | QuizUpsertWithWhereUniqueWithoutTopicInput[]
    | QuizUpsertWithWhereUniqueWithoutTopicInput
  >;
  deleteMany?: Maybe<QuizScalarWhereInput[] | QuizScalarWhereInput>;
  updateMany?: Maybe<
    QuizUpdateManyWithWhereNestedInput[] | QuizUpdateManyWithWhereNestedInput
  >;
}

export interface QuizUpdateWithWhereUniqueWithoutTopicInput {
  where: QuizWhereUniqueInput;
  data: QuizUpdateWithoutTopicDataInput;
}

export interface QuizUpdateWithoutTopicDataInput {
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneWithoutQuizesInput>;
  unit?: Maybe<UnitUpdateOneWithoutQuizsInput>;
  questions?: Maybe<QuestionUpdateManyWithoutQuizInput>;
  markingscheme?: Maybe<Json>;
  quizlevel?: Maybe<Int>;
  threshold?: Maybe<Json>;
  isForLevelPromotion?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  description?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutQuizCreatedByInput>;
  weightage?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  validTo?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
  results?: Maybe<ResultUpdateManyWithoutQuizInput>;
  courses?: Maybe<QuizUpdateManyWithoutCoursesInput>;
}

export interface QuestionUpdateManyWithoutQuizInput {
  create?: Maybe<
    QuestionCreateWithoutQuizInput[] | QuestionCreateWithoutQuizInput
  >;
  delete?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  set?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  disconnect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  update?: Maybe<
    | QuestionUpdateWithWhereUniqueWithoutQuizInput[]
    | QuestionUpdateWithWhereUniqueWithoutQuizInput
  >;
  upsert?: Maybe<
    | QuestionUpsertWithWhereUniqueWithoutQuizInput[]
    | QuestionUpsertWithWhereUniqueWithoutQuizInput
  >;
  deleteMany?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  updateMany?: Maybe<
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionUpdateWithWhereUniqueWithoutQuizInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateWithoutQuizDataInput;
}

export interface QuestionUpdateWithoutQuizDataInput {
  subject?: Maybe<SubjectUpdateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitUpdateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicUpdateOneWithoutQuestionsInput>;
  quetype?: Maybe<String>;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType?: Maybe<String>;
  descriptionurl?: Maybe<String>;
  options?: Maybe<Json>;
  createdBy?: Maybe<UserUpdateOneWithoutQuestionCreatedByInput>;
  level?: Maybe<Int>;
  updatedBy?: Maybe<UserUpdateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultUpdateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultUpdateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultUpdateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultUpdateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultUpdateManyWithoutWrongInput>;
}

export interface UserUpdateOneWithoutQuestionUpdateddByInput {
  create?: Maybe<UserCreateWithoutQuestionUpdateddByInput>;
  update?: Maybe<UserUpdateWithoutQuestionUpdateddByDataInput>;
  upsert?: Maybe<UserUpsertWithoutQuestionUpdateddByInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutQuestionUpdateddByDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface ContentUpdateManyWithoutUpdateByInput {
  create?: Maybe<
    ContentCreateWithoutUpdateByInput[] | ContentCreateWithoutUpdateByInput
  >;
  delete?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  connect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  set?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  disconnect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  update?: Maybe<
    | ContentUpdateWithWhereUniqueWithoutUpdateByInput[]
    | ContentUpdateWithWhereUniqueWithoutUpdateByInput
  >;
  upsert?: Maybe<
    | ContentUpsertWithWhereUniqueWithoutUpdateByInput[]
    | ContentUpsertWithWhereUniqueWithoutUpdateByInput
  >;
  deleteMany?: Maybe<ContentScalarWhereInput[] | ContentScalarWhereInput>;
  updateMany?: Maybe<
    | ContentUpdateManyWithWhereNestedInput[]
    | ContentUpdateManyWithWhereNestedInput
  >;
}

export interface ContentUpdateWithWhereUniqueWithoutUpdateByInput {
  where: ContentWhereUniqueInput;
  data: ContentUpdateWithoutUpdateByDataInput;
}

export interface ContentUpdateWithoutUpdateByDataInput {
  name?: Maybe<String>;
  number?: Maybe<Int>;
  fileInfo?: Maybe<Json>;
  type?: Maybe<String>;
  url?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneRequiredWithoutContentsInput>;
  unit?: Maybe<UnitUpdateOneWithoutContentsInput>;
  topic?: Maybe<TopicUpdateOneWithoutContentsInput>;
  createdBy?: Maybe<UserUpdateOneWithoutContentByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
}

export interface ContentUpsertWithWhereUniqueWithoutUpdateByInput {
  where: ContentWhereUniqueInput;
  update: ContentUpdateWithoutUpdateByDataInput;
  create: ContentCreateWithoutUpdateByInput;
}

export interface ContentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  plantDate?: Maybe<DateTimeInput>;
  plantDate_not?: Maybe<DateTimeInput>;
  plantDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plantDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plantDate_lt?: Maybe<DateTimeInput>;
  plantDate_lte?: Maybe<DateTimeInput>;
  plantDate_gt?: Maybe<DateTimeInput>;
  plantDate_gte?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  available?: Maybe<String>;
  available_not?: Maybe<String>;
  available_in?: Maybe<String[] | String>;
  available_not_in?: Maybe<String[] | String>;
  available_lt?: Maybe<String>;
  available_lte?: Maybe<String>;
  available_gt?: Maybe<String>;
  available_gte?: Maybe<String>;
  available_contains?: Maybe<String>;
  available_not_contains?: Maybe<String>;
  available_starts_with?: Maybe<String>;
  available_not_starts_with?: Maybe<String>;
  available_ends_with?: Maybe<String>;
  available_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ContentScalarWhereInput[] | ContentScalarWhereInput>;
  OR?: Maybe<ContentScalarWhereInput[] | ContentScalarWhereInput>;
  NOT?: Maybe<ContentScalarWhereInput[] | ContentScalarWhereInput>;
}

export interface ContentUpdateManyWithWhereNestedInput {
  where: ContentScalarWhereInput;
  data: ContentUpdateManyDataInput;
}

export interface ContentUpdateManyDataInput {
  name?: Maybe<String>;
  number?: Maybe<Int>;
  fileInfo?: Maybe<Json>;
  type?: Maybe<String>;
  url?: Maybe<String>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
}

export interface QuestionUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    QuestionCreateWithoutCreatedByInput[] | QuestionCreateWithoutCreatedByInput
  >;
  delete?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  set?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  disconnect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  update?: Maybe<
    | QuestionUpdateWithWhereUniqueWithoutCreatedByInput[]
    | QuestionUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | QuestionUpsertWithWhereUniqueWithoutCreatedByInput[]
    | QuestionUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  updateMany?: Maybe<
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionUpdateWithWhereUniqueWithoutCreatedByInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateWithoutCreatedByDataInput;
}

export interface QuestionUpdateWithoutCreatedByDataInput {
  subject?: Maybe<SubjectUpdateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitUpdateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicUpdateOneWithoutQuestionsInput>;
  quetype?: Maybe<String>;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType?: Maybe<String>;
  descriptionurl?: Maybe<String>;
  options?: Maybe<Json>;
  level?: Maybe<Int>;
  updatedBy?: Maybe<UserUpdateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizUpdateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultUpdateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultUpdateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultUpdateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultUpdateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultUpdateManyWithoutWrongInput>;
}

export interface QuizUpdateManyWithoutQuestionsInput {
  create?: Maybe<
    QuizCreateWithoutQuestionsInput[] | QuizCreateWithoutQuestionsInput
  >;
  delete?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  connect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  set?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  disconnect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  update?: Maybe<
    | QuizUpdateWithWhereUniqueWithoutQuestionsInput[]
    | QuizUpdateWithWhereUniqueWithoutQuestionsInput
  >;
  upsert?: Maybe<
    | QuizUpsertWithWhereUniqueWithoutQuestionsInput[]
    | QuizUpsertWithWhereUniqueWithoutQuestionsInput
  >;
  deleteMany?: Maybe<QuizScalarWhereInput[] | QuizScalarWhereInput>;
  updateMany?: Maybe<
    QuizUpdateManyWithWhereNestedInput[] | QuizUpdateManyWithWhereNestedInput
  >;
}

export interface QuizUpdateWithWhereUniqueWithoutQuestionsInput {
  where: QuizWhereUniqueInput;
  data: QuizUpdateWithoutQuestionsDataInput;
}

export interface QuizUpdateWithoutQuestionsDataInput {
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneWithoutQuizesInput>;
  unit?: Maybe<UnitUpdateOneWithoutQuizsInput>;
  topic?: Maybe<TopicUpdateOneWithoutQuizsInput>;
  markingscheme?: Maybe<Json>;
  quizlevel?: Maybe<Int>;
  threshold?: Maybe<Json>;
  isForLevelPromotion?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  description?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutQuizCreatedByInput>;
  weightage?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  validTo?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
  results?: Maybe<ResultUpdateManyWithoutQuizInput>;
  courses?: Maybe<QuizUpdateManyWithoutCoursesInput>;
}

export interface UserUpdateOneRequiredWithoutQuizCreatedByInput {
  create?: Maybe<UserCreateWithoutQuizCreatedByInput>;
  update?: Maybe<UserUpdateWithoutQuizCreatedByDataInput>;
  upsert?: Maybe<UserUpsertWithoutQuizCreatedByInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutQuizCreatedByDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface QuestionUpdateManyWithoutUpdatedByInput {
  create?: Maybe<
    QuestionCreateWithoutUpdatedByInput[] | QuestionCreateWithoutUpdatedByInput
  >;
  delete?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  set?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  disconnect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  update?: Maybe<
    | QuestionUpdateWithWhereUniqueWithoutUpdatedByInput[]
    | QuestionUpdateWithWhereUniqueWithoutUpdatedByInput
  >;
  upsert?: Maybe<
    | QuestionUpsertWithWhereUniqueWithoutUpdatedByInput[]
    | QuestionUpsertWithWhereUniqueWithoutUpdatedByInput
  >;
  deleteMany?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  updateMany?: Maybe<
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateWithoutUpdatedByDataInput;
}

export interface QuestionUpdateWithoutUpdatedByDataInput {
  subject?: Maybe<SubjectUpdateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitUpdateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicUpdateOneWithoutQuestionsInput>;
  quetype?: Maybe<String>;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType?: Maybe<String>;
  descriptionurl?: Maybe<String>;
  options?: Maybe<Json>;
  createdBy?: Maybe<UserUpdateOneWithoutQuestionCreatedByInput>;
  level?: Maybe<Int>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizUpdateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultUpdateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultUpdateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultUpdateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultUpdateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultUpdateManyWithoutWrongInput>;
}

export interface ResultUpdateManyWithoutQuestionsInput {
  create?: Maybe<
    ResultCreateWithoutQuestionsInput[] | ResultCreateWithoutQuestionsInput
  >;
  delete?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  connect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  set?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  disconnect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  update?: Maybe<
    | ResultUpdateWithWhereUniqueWithoutQuestionsInput[]
    | ResultUpdateWithWhereUniqueWithoutQuestionsInput
  >;
  upsert?: Maybe<
    | ResultUpsertWithWhereUniqueWithoutQuestionsInput[]
    | ResultUpsertWithWhereUniqueWithoutQuestionsInput
  >;
  deleteMany?: Maybe<ResultScalarWhereInput[] | ResultScalarWhereInput>;
  updateMany?: Maybe<
    | ResultUpdateManyWithWhereNestedInput[]
    | ResultUpdateManyWithWhereNestedInput
  >;
}

export interface ResultUpdateWithWhereUniqueWithoutQuestionsInput {
  where: ResultWhereUniqueInput;
  data: ResultUpdateWithoutQuestionsDataInput;
}

export interface ResultUpdateWithoutQuestionsDataInput {
  quiz?: Maybe<QuizUpdateOneRequiredWithoutResultsInput>;
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  result?: Maybe<String>;
  quizlevel?: Maybe<Int>;
  score?: Maybe<Float>;
  attempted?: Maybe<QuestionUpdateManyWithoutAtemptedResultInput>;
  notattempted?: Maybe<QuestionUpdateManyWithoutNotattemptedInput>;
  correct?: Maybe<QuestionUpdateManyWithoutCorrectInput>;
  wrong?: Maybe<QuestionUpdateManyWithoutWrongInput>;
  achievement?: Maybe<String>;
  duration?: Maybe<Int>;
  attemptedDate?: Maybe<DateTimeInput>;
  commentFromTeacher?: Maybe<String>;
  rank?: Maybe<Int>;
  userId?: Maybe<UserUpdateOneRequiredWithoutResultInput>;
}

export interface QuizUpdateOneRequiredWithoutResultsInput {
  create?: Maybe<QuizCreateWithoutResultsInput>;
  update?: Maybe<QuizUpdateWithoutResultsDataInput>;
  upsert?: Maybe<QuizUpsertWithoutResultsInput>;
  connect?: Maybe<QuizWhereUniqueInput>;
}

export interface QuizUpdateWithoutResultsDataInput {
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneWithoutQuizesInput>;
  unit?: Maybe<UnitUpdateOneWithoutQuizsInput>;
  topic?: Maybe<TopicUpdateOneWithoutQuizsInput>;
  questions?: Maybe<QuestionUpdateManyWithoutQuizInput>;
  markingscheme?: Maybe<Json>;
  quizlevel?: Maybe<Int>;
  threshold?: Maybe<Json>;
  isForLevelPromotion?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  description?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutQuizCreatedByInput>;
  weightage?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  validTo?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
  courses?: Maybe<QuizUpdateManyWithoutCoursesInput>;
}

export interface QuizUpdateManyWithoutCoursesInput {
  create?: Maybe<
    QuizCreateWithoutCoursesInput[] | QuizCreateWithoutCoursesInput
  >;
  delete?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  connect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  set?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  disconnect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  update?: Maybe<
    | QuizUpdateWithWhereUniqueWithoutCoursesInput[]
    | QuizUpdateWithWhereUniqueWithoutCoursesInput
  >;
  upsert?: Maybe<
    | QuizUpsertWithWhereUniqueWithoutCoursesInput[]
    | QuizUpsertWithWhereUniqueWithoutCoursesInput
  >;
  deleteMany?: Maybe<QuizScalarWhereInput[] | QuizScalarWhereInput>;
  updateMany?: Maybe<
    QuizUpdateManyWithWhereNestedInput[] | QuizUpdateManyWithWhereNestedInput
  >;
}

export interface QuizUpdateWithWhereUniqueWithoutCoursesInput {
  where: QuizWhereUniqueInput;
  data: QuizUpdateWithoutCoursesDataInput;
}

export interface QuizUpdateWithoutCoursesDataInput {
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneWithoutQuizesInput>;
  unit?: Maybe<UnitUpdateOneWithoutQuizsInput>;
  topic?: Maybe<TopicUpdateOneWithoutQuizsInput>;
  questions?: Maybe<QuestionUpdateManyWithoutQuizInput>;
  markingscheme?: Maybe<Json>;
  quizlevel?: Maybe<Int>;
  threshold?: Maybe<Json>;
  isForLevelPromotion?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  description?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutQuizCreatedByInput>;
  weightage?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  validTo?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
  results?: Maybe<ResultUpdateManyWithoutQuizInput>;
}

export interface ResultUpdateManyWithoutQuizInput {
  create?: Maybe<ResultCreateWithoutQuizInput[] | ResultCreateWithoutQuizInput>;
  delete?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  connect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  set?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  disconnect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  update?: Maybe<
    | ResultUpdateWithWhereUniqueWithoutQuizInput[]
    | ResultUpdateWithWhereUniqueWithoutQuizInput
  >;
  upsert?: Maybe<
    | ResultUpsertWithWhereUniqueWithoutQuizInput[]
    | ResultUpsertWithWhereUniqueWithoutQuizInput
  >;
  deleteMany?: Maybe<ResultScalarWhereInput[] | ResultScalarWhereInput>;
  updateMany?: Maybe<
    | ResultUpdateManyWithWhereNestedInput[]
    | ResultUpdateManyWithWhereNestedInput
  >;
}

export interface ResultUpdateWithWhereUniqueWithoutQuizInput {
  where: ResultWhereUniqueInput;
  data: ResultUpdateWithoutQuizDataInput;
}

export interface ResultUpdateWithoutQuizDataInput {
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutResultsInput>;
  result?: Maybe<String>;
  quizlevel?: Maybe<Int>;
  score?: Maybe<Float>;
  attempted?: Maybe<QuestionUpdateManyWithoutAtemptedResultInput>;
  notattempted?: Maybe<QuestionUpdateManyWithoutNotattemptedInput>;
  correct?: Maybe<QuestionUpdateManyWithoutCorrectInput>;
  wrong?: Maybe<QuestionUpdateManyWithoutWrongInput>;
  achievement?: Maybe<String>;
  duration?: Maybe<Int>;
  attemptedDate?: Maybe<DateTimeInput>;
  commentFromTeacher?: Maybe<String>;
  rank?: Maybe<Int>;
  userId?: Maybe<UserUpdateOneRequiredWithoutResultInput>;
}

export interface QuestionUpdateManyWithoutResultsInput {
  create?: Maybe<
    QuestionCreateWithoutResultsInput[] | QuestionCreateWithoutResultsInput
  >;
  delete?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  set?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  disconnect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  update?: Maybe<
    | QuestionUpdateWithWhereUniqueWithoutResultsInput[]
    | QuestionUpdateWithWhereUniqueWithoutResultsInput
  >;
  upsert?: Maybe<
    | QuestionUpsertWithWhereUniqueWithoutResultsInput[]
    | QuestionUpsertWithWhereUniqueWithoutResultsInput
  >;
  deleteMany?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  updateMany?: Maybe<
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionUpdateWithWhereUniqueWithoutResultsInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateWithoutResultsDataInput;
}

export interface QuestionUpdateWithoutResultsDataInput {
  subject?: Maybe<SubjectUpdateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitUpdateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicUpdateOneWithoutQuestionsInput>;
  quetype?: Maybe<String>;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType?: Maybe<String>;
  descriptionurl?: Maybe<String>;
  options?: Maybe<Json>;
  createdBy?: Maybe<UserUpdateOneWithoutQuestionCreatedByInput>;
  level?: Maybe<Int>;
  updatedBy?: Maybe<UserUpdateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizUpdateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  atemptedResult?: Maybe<ResultUpdateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultUpdateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultUpdateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultUpdateManyWithoutWrongInput>;
}

export interface ResultUpdateManyWithoutAttemptedInput {
  create?: Maybe<
    ResultCreateWithoutAttemptedInput[] | ResultCreateWithoutAttemptedInput
  >;
  delete?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  connect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  set?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  disconnect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  update?: Maybe<
    | ResultUpdateWithWhereUniqueWithoutAttemptedInput[]
    | ResultUpdateWithWhereUniqueWithoutAttemptedInput
  >;
  upsert?: Maybe<
    | ResultUpsertWithWhereUniqueWithoutAttemptedInput[]
    | ResultUpsertWithWhereUniqueWithoutAttemptedInput
  >;
  deleteMany?: Maybe<ResultScalarWhereInput[] | ResultScalarWhereInput>;
  updateMany?: Maybe<
    | ResultUpdateManyWithWhereNestedInput[]
    | ResultUpdateManyWithWhereNestedInput
  >;
}

export interface ResultUpdateWithWhereUniqueWithoutAttemptedInput {
  where: ResultWhereUniqueInput;
  data: ResultUpdateWithoutAttemptedDataInput;
}

export interface ResultUpdateWithoutAttemptedDataInput {
  quiz?: Maybe<QuizUpdateOneRequiredWithoutResultsInput>;
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutResultsInput>;
  result?: Maybe<String>;
  quizlevel?: Maybe<Int>;
  score?: Maybe<Float>;
  notattempted?: Maybe<QuestionUpdateManyWithoutNotattemptedInput>;
  correct?: Maybe<QuestionUpdateManyWithoutCorrectInput>;
  wrong?: Maybe<QuestionUpdateManyWithoutWrongInput>;
  achievement?: Maybe<String>;
  duration?: Maybe<Int>;
  attemptedDate?: Maybe<DateTimeInput>;
  commentFromTeacher?: Maybe<String>;
  rank?: Maybe<Int>;
  userId?: Maybe<UserUpdateOneRequiredWithoutResultInput>;
}

export interface QuestionUpdateManyWithoutNotattemptedInput {
  create?: Maybe<
    | QuestionCreateWithoutNotattemptedInput[]
    | QuestionCreateWithoutNotattemptedInput
  >;
  delete?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  set?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  disconnect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  update?: Maybe<
    | QuestionUpdateWithWhereUniqueWithoutNotattemptedInput[]
    | QuestionUpdateWithWhereUniqueWithoutNotattemptedInput
  >;
  upsert?: Maybe<
    | QuestionUpsertWithWhereUniqueWithoutNotattemptedInput[]
    | QuestionUpsertWithWhereUniqueWithoutNotattemptedInput
  >;
  deleteMany?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  updateMany?: Maybe<
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionUpdateWithWhereUniqueWithoutNotattemptedInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateWithoutNotattemptedDataInput;
}

export interface QuestionUpdateWithoutNotattemptedDataInput {
  subject?: Maybe<SubjectUpdateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitUpdateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicUpdateOneWithoutQuestionsInput>;
  quetype?: Maybe<String>;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType?: Maybe<String>;
  descriptionurl?: Maybe<String>;
  options?: Maybe<Json>;
  createdBy?: Maybe<UserUpdateOneWithoutQuestionCreatedByInput>;
  level?: Maybe<Int>;
  updatedBy?: Maybe<UserUpdateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizUpdateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultUpdateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultUpdateManyWithoutAttemptedInput>;
  correct?: Maybe<ResultUpdateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultUpdateManyWithoutWrongInput>;
}

export interface ResultUpdateManyWithoutCorrectInput {
  create?: Maybe<
    ResultCreateWithoutCorrectInput[] | ResultCreateWithoutCorrectInput
  >;
  delete?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  connect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  set?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  disconnect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  update?: Maybe<
    | ResultUpdateWithWhereUniqueWithoutCorrectInput[]
    | ResultUpdateWithWhereUniqueWithoutCorrectInput
  >;
  upsert?: Maybe<
    | ResultUpsertWithWhereUniqueWithoutCorrectInput[]
    | ResultUpsertWithWhereUniqueWithoutCorrectInput
  >;
  deleteMany?: Maybe<ResultScalarWhereInput[] | ResultScalarWhereInput>;
  updateMany?: Maybe<
    | ResultUpdateManyWithWhereNestedInput[]
    | ResultUpdateManyWithWhereNestedInput
  >;
}

export interface ResultUpdateWithWhereUniqueWithoutCorrectInput {
  where: ResultWhereUniqueInput;
  data: ResultUpdateWithoutCorrectDataInput;
}

export interface ResultUpdateWithoutCorrectDataInput {
  quiz?: Maybe<QuizUpdateOneRequiredWithoutResultsInput>;
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutResultsInput>;
  result?: Maybe<String>;
  quizlevel?: Maybe<Int>;
  score?: Maybe<Float>;
  attempted?: Maybe<QuestionUpdateManyWithoutAtemptedResultInput>;
  notattempted?: Maybe<QuestionUpdateManyWithoutNotattemptedInput>;
  wrong?: Maybe<QuestionUpdateManyWithoutWrongInput>;
  achievement?: Maybe<String>;
  duration?: Maybe<Int>;
  attemptedDate?: Maybe<DateTimeInput>;
  commentFromTeacher?: Maybe<String>;
  rank?: Maybe<Int>;
  userId?: Maybe<UserUpdateOneRequiredWithoutResultInput>;
}

export interface QuestionUpdateManyWithoutAtemptedResultInput {
  create?: Maybe<
    | QuestionCreateWithoutAtemptedResultInput[]
    | QuestionCreateWithoutAtemptedResultInput
  >;
  delete?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  set?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  disconnect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  update?: Maybe<
    | QuestionUpdateWithWhereUniqueWithoutAtemptedResultInput[]
    | QuestionUpdateWithWhereUniqueWithoutAtemptedResultInput
  >;
  upsert?: Maybe<
    | QuestionUpsertWithWhereUniqueWithoutAtemptedResultInput[]
    | QuestionUpsertWithWhereUniqueWithoutAtemptedResultInput
  >;
  deleteMany?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  updateMany?: Maybe<
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionUpdateWithWhereUniqueWithoutAtemptedResultInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateWithoutAtemptedResultDataInput;
}

export interface QuestionUpdateWithoutAtemptedResultDataInput {
  subject?: Maybe<SubjectUpdateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitUpdateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicUpdateOneWithoutQuestionsInput>;
  quetype?: Maybe<String>;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType?: Maybe<String>;
  descriptionurl?: Maybe<String>;
  options?: Maybe<Json>;
  createdBy?: Maybe<UserUpdateOneWithoutQuestionCreatedByInput>;
  level?: Maybe<Int>;
  updatedBy?: Maybe<UserUpdateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizUpdateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultUpdateManyWithoutQuestionsInput>;
  notattempted?: Maybe<ResultUpdateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultUpdateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultUpdateManyWithoutWrongInput>;
}

export interface ResultUpdateManyWithoutNotattemptedInput {
  create?: Maybe<
    | ResultCreateWithoutNotattemptedInput[]
    | ResultCreateWithoutNotattemptedInput
  >;
  delete?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  connect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  set?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  disconnect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  update?: Maybe<
    | ResultUpdateWithWhereUniqueWithoutNotattemptedInput[]
    | ResultUpdateWithWhereUniqueWithoutNotattemptedInput
  >;
  upsert?: Maybe<
    | ResultUpsertWithWhereUniqueWithoutNotattemptedInput[]
    | ResultUpsertWithWhereUniqueWithoutNotattemptedInput
  >;
  deleteMany?: Maybe<ResultScalarWhereInput[] | ResultScalarWhereInput>;
  updateMany?: Maybe<
    | ResultUpdateManyWithWhereNestedInput[]
    | ResultUpdateManyWithWhereNestedInput
  >;
}

export interface ResultUpdateWithWhereUniqueWithoutNotattemptedInput {
  where: ResultWhereUniqueInput;
  data: ResultUpdateWithoutNotattemptedDataInput;
}

export interface ResultUpdateWithoutNotattemptedDataInput {
  quiz?: Maybe<QuizUpdateOneRequiredWithoutResultsInput>;
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutResultsInput>;
  result?: Maybe<String>;
  quizlevel?: Maybe<Int>;
  score?: Maybe<Float>;
  attempted?: Maybe<QuestionUpdateManyWithoutAtemptedResultInput>;
  correct?: Maybe<QuestionUpdateManyWithoutCorrectInput>;
  wrong?: Maybe<QuestionUpdateManyWithoutWrongInput>;
  achievement?: Maybe<String>;
  duration?: Maybe<Int>;
  attemptedDate?: Maybe<DateTimeInput>;
  commentFromTeacher?: Maybe<String>;
  rank?: Maybe<Int>;
  userId?: Maybe<UserUpdateOneRequiredWithoutResultInput>;
}

export interface QuestionUpdateManyWithoutCorrectInput {
  create?: Maybe<
    QuestionCreateWithoutCorrectInput[] | QuestionCreateWithoutCorrectInput
  >;
  delete?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  set?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  disconnect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  update?: Maybe<
    | QuestionUpdateWithWhereUniqueWithoutCorrectInput[]
    | QuestionUpdateWithWhereUniqueWithoutCorrectInput
  >;
  upsert?: Maybe<
    | QuestionUpsertWithWhereUniqueWithoutCorrectInput[]
    | QuestionUpsertWithWhereUniqueWithoutCorrectInput
  >;
  deleteMany?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  updateMany?: Maybe<
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionUpdateWithWhereUniqueWithoutCorrectInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateWithoutCorrectDataInput;
}

export interface QuestionUpdateWithoutCorrectDataInput {
  subject?: Maybe<SubjectUpdateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitUpdateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicUpdateOneWithoutQuestionsInput>;
  quetype?: Maybe<String>;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType?: Maybe<String>;
  descriptionurl?: Maybe<String>;
  options?: Maybe<Json>;
  createdBy?: Maybe<UserUpdateOneWithoutQuestionCreatedByInput>;
  level?: Maybe<Int>;
  updatedBy?: Maybe<UserUpdateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizUpdateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultUpdateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultUpdateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultUpdateManyWithoutNotattemptedInput>;
  wrong?: Maybe<ResultUpdateManyWithoutWrongInput>;
}

export interface ResultUpdateManyWithoutWrongInput {
  create?: Maybe<
    ResultCreateWithoutWrongInput[] | ResultCreateWithoutWrongInput
  >;
  delete?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  connect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  set?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  disconnect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  update?: Maybe<
    | ResultUpdateWithWhereUniqueWithoutWrongInput[]
    | ResultUpdateWithWhereUniqueWithoutWrongInput
  >;
  upsert?: Maybe<
    | ResultUpsertWithWhereUniqueWithoutWrongInput[]
    | ResultUpsertWithWhereUniqueWithoutWrongInput
  >;
  deleteMany?: Maybe<ResultScalarWhereInput[] | ResultScalarWhereInput>;
  updateMany?: Maybe<
    | ResultUpdateManyWithWhereNestedInput[]
    | ResultUpdateManyWithWhereNestedInput
  >;
}

export interface ResultUpdateWithWhereUniqueWithoutWrongInput {
  where: ResultWhereUniqueInput;
  data: ResultUpdateWithoutWrongDataInput;
}

export interface ResultUpdateWithoutWrongDataInput {
  quiz?: Maybe<QuizUpdateOneRequiredWithoutResultsInput>;
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutResultsInput>;
  result?: Maybe<String>;
  quizlevel?: Maybe<Int>;
  score?: Maybe<Float>;
  attempted?: Maybe<QuestionUpdateManyWithoutAtemptedResultInput>;
  notattempted?: Maybe<QuestionUpdateManyWithoutNotattemptedInput>;
  correct?: Maybe<QuestionUpdateManyWithoutCorrectInput>;
  achievement?: Maybe<String>;
  duration?: Maybe<Int>;
  attemptedDate?: Maybe<DateTimeInput>;
  commentFromTeacher?: Maybe<String>;
  rank?: Maybe<Int>;
  userId?: Maybe<UserUpdateOneRequiredWithoutResultInput>;
}

export interface UserUpdateOneRequiredWithoutResultInput {
  create?: Maybe<UserCreateWithoutResultInput>;
  update?: Maybe<UserUpdateWithoutResultDataInput>;
  upsert?: Maybe<UserUpsertWithoutResultInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutResultDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
}

export interface QuizUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    QuizCreateWithoutCreatedByInput[] | QuizCreateWithoutCreatedByInput
  >;
  delete?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  connect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  set?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  disconnect?: Maybe<QuizWhereUniqueInput[] | QuizWhereUniqueInput>;
  update?: Maybe<
    | QuizUpdateWithWhereUniqueWithoutCreatedByInput[]
    | QuizUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | QuizUpsertWithWhereUniqueWithoutCreatedByInput[]
    | QuizUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<QuizScalarWhereInput[] | QuizScalarWhereInput>;
  updateMany?: Maybe<
    QuizUpdateManyWithWhereNestedInput[] | QuizUpdateManyWithWhereNestedInput
  >;
}

export interface QuizUpdateWithWhereUniqueWithoutCreatedByInput {
  where: QuizWhereUniqueInput;
  data: QuizUpdateWithoutCreatedByDataInput;
}

export interface QuizUpdateWithoutCreatedByDataInput {
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneWithoutQuizesInput>;
  unit?: Maybe<UnitUpdateOneWithoutQuizsInput>;
  topic?: Maybe<TopicUpdateOneWithoutQuizsInput>;
  questions?: Maybe<QuestionUpdateManyWithoutQuizInput>;
  markingscheme?: Maybe<Json>;
  quizlevel?: Maybe<Int>;
  threshold?: Maybe<Json>;
  isForLevelPromotion?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  description?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  weightage?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  validTo?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
  results?: Maybe<ResultUpdateManyWithoutQuizInput>;
  courses?: Maybe<QuizUpdateManyWithoutCoursesInput>;
}

export interface QuizUpsertWithWhereUniqueWithoutCreatedByInput {
  where: QuizWhereUniqueInput;
  update: QuizUpdateWithoutCreatedByDataInput;
  create: QuizCreateWithoutCreatedByInput;
}

export interface QuizScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  quizName?: Maybe<String>;
  quizName_not?: Maybe<String>;
  quizName_in?: Maybe<String[] | String>;
  quizName_not_in?: Maybe<String[] | String>;
  quizName_lt?: Maybe<String>;
  quizName_lte?: Maybe<String>;
  quizName_gt?: Maybe<String>;
  quizName_gte?: Maybe<String>;
  quizName_contains?: Maybe<String>;
  quizName_not_contains?: Maybe<String>;
  quizName_starts_with?: Maybe<String>;
  quizName_not_starts_with?: Maybe<String>;
  quizName_ends_with?: Maybe<String>;
  quizName_not_ends_with?: Maybe<String>;
  quizType?: Maybe<String>;
  quizType_not?: Maybe<String>;
  quizType_in?: Maybe<String[] | String>;
  quizType_not_in?: Maybe<String[] | String>;
  quizType_lt?: Maybe<String>;
  quizType_lte?: Maybe<String>;
  quizType_gt?: Maybe<String>;
  quizType_gte?: Maybe<String>;
  quizType_contains?: Maybe<String>;
  quizType_not_contains?: Maybe<String>;
  quizType_starts_with?: Maybe<String>;
  quizType_not_starts_with?: Maybe<String>;
  quizType_ends_with?: Maybe<String>;
  quizType_not_ends_with?: Maybe<String>;
  quizlevel?: Maybe<Int>;
  quizlevel_not?: Maybe<Int>;
  quizlevel_in?: Maybe<Int[] | Int>;
  quizlevel_not_in?: Maybe<Int[] | Int>;
  quizlevel_lt?: Maybe<Int>;
  quizlevel_lte?: Maybe<Int>;
  quizlevel_gt?: Maybe<Int>;
  quizlevel_gte?: Maybe<Int>;
  isForLevelPromotion?: Maybe<Boolean>;
  isForLevelPromotion_not?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showExplaination_not?: Maybe<String>;
  showExplaination_in?: Maybe<String[] | String>;
  showExplaination_not_in?: Maybe<String[] | String>;
  showExplaination_lt?: Maybe<String>;
  showExplaination_lte?: Maybe<String>;
  showExplaination_gt?: Maybe<String>;
  showExplaination_gte?: Maybe<String>;
  showExplaination_contains?: Maybe<String>;
  showExplaination_not_contains?: Maybe<String>;
  showExplaination_starts_with?: Maybe<String>;
  showExplaination_not_starts_with?: Maybe<String>;
  showExplaination_ends_with?: Maybe<String>;
  showExplaination_not_ends_with?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  showanswer_not?: Maybe<Boolean>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  allowedCorrection_not?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  duration_not?: Maybe<Int>;
  duration_in?: Maybe<Int[] | Int>;
  duration_not_in?: Maybe<Int[] | Int>;
  duration_lt?: Maybe<Int>;
  duration_lte?: Maybe<Int>;
  duration_gt?: Maybe<Int>;
  duration_gte?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  commentFromTeacher_not?: Maybe<String>;
  commentFromTeacher_in?: Maybe<String[] | String>;
  commentFromTeacher_not_in?: Maybe<String[] | String>;
  commentFromTeacher_lt?: Maybe<String>;
  commentFromTeacher_lte?: Maybe<String>;
  commentFromTeacher_gt?: Maybe<String>;
  commentFromTeacher_gte?: Maybe<String>;
  commentFromTeacher_contains?: Maybe<String>;
  commentFromTeacher_not_contains?: Maybe<String>;
  commentFromTeacher_starts_with?: Maybe<String>;
  commentFromTeacher_not_starts_with?: Maybe<String>;
  commentFromTeacher_ends_with?: Maybe<String>;
  commentFromTeacher_not_ends_with?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  isApproved_not?: Maybe<Boolean>;
  weightage?: Maybe<Float>;
  weightage_not?: Maybe<Float>;
  weightage_in?: Maybe<Float[] | Float>;
  weightage_not_in?: Maybe<Float[] | Float>;
  weightage_lt?: Maybe<Float>;
  weightage_lte?: Maybe<Float>;
  weightage_gt?: Maybe<Float>;
  weightage_gte?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  totalmarks_not?: Maybe<Float>;
  totalmarks_in?: Maybe<Float[] | Float>;
  totalmarks_not_in?: Maybe<Float[] | Float>;
  totalmarks_lt?: Maybe<Float>;
  totalmarks_lte?: Maybe<Float>;
  totalmarks_gt?: Maybe<Float>;
  totalmarks_gte?: Maybe<Float>;
  validFrom?: Maybe<DateTimeInput>;
  validFrom_not?: Maybe<DateTimeInput>;
  validFrom_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validFrom_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validFrom_lt?: Maybe<DateTimeInput>;
  validFrom_lte?: Maybe<DateTimeInput>;
  validFrom_gt?: Maybe<DateTimeInput>;
  validFrom_gte?: Maybe<DateTimeInput>;
  validTo?: Maybe<DateTimeInput>;
  validTo_not?: Maybe<DateTimeInput>;
  validTo_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validTo_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  validTo_lt?: Maybe<DateTimeInput>;
  validTo_lte?: Maybe<DateTimeInput>;
  validTo_gt?: Maybe<DateTimeInput>;
  validTo_gte?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
  retryAllowed_not?: Maybe<Boolean>;
  AND?: Maybe<QuizScalarWhereInput[] | QuizScalarWhereInput>;
  OR?: Maybe<QuizScalarWhereInput[] | QuizScalarWhereInput>;
  NOT?: Maybe<QuizScalarWhereInput[] | QuizScalarWhereInput>;
}

export interface QuizUpdateManyWithWhereNestedInput {
  where: QuizScalarWhereInput;
  data: QuizUpdateManyDataInput;
}

export interface QuizUpdateManyDataInput {
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  markingscheme?: Maybe<Json>;
  quizlevel?: Maybe<Int>;
  threshold?: Maybe<Json>;
  isForLevelPromotion?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  description?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  weightage?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  validTo?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
}

export interface VoteUpdateManyWithoutUserInput {
  create?: Maybe<VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput>;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueWithoutUserInput[]
    | VoteUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueWithoutUserInput[]
    | VoteUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutUserDataInput;
}

export interface VoteUpdateWithoutUserDataInput {
  option?: Maybe<OptionUpdateOneWithoutVotesInput>;
}

export interface OptionUpdateOneWithoutVotesInput {
  create?: Maybe<OptionCreateWithoutVotesInput>;
  update?: Maybe<OptionUpdateWithoutVotesDataInput>;
  upsert?: Maybe<OptionUpsertWithoutVotesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<OptionWhereUniqueInput>;
}

export interface OptionUpdateWithoutVotesDataInput {
  name?: Maybe<String>;
  color?: Maybe<Color>;
  poll?: Maybe<PollUpdateOneWithoutOptionsInput>;
}

export interface PollUpdateOneWithoutOptionsInput {
  create?: Maybe<PollCreateWithoutOptionsInput>;
  update?: Maybe<PollUpdateWithoutOptionsDataInput>;
  upsert?: Maybe<PollUpsertWithoutOptionsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PollWhereUniqueInput>;
}

export interface PollUpdateWithoutOptionsDataInput {
  title?: Maybe<String>;
}

export interface PollUpsertWithoutOptionsInput {
  update: PollUpdateWithoutOptionsDataInput;
  create: PollCreateWithoutOptionsInput;
}

export interface OptionUpsertWithoutVotesInput {
  update: OptionUpdateWithoutVotesDataInput;
  create: OptionCreateWithoutVotesInput;
}

export interface VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutUserDataInput;
  create: VoteCreateWithoutUserInput;
}

export interface VoteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  OR?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  NOT?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface UserUpsertWithoutResultInput {
  update: UserUpdateWithoutResultDataInput;
  create: UserCreateWithoutResultInput;
}

export interface ResultUpsertWithWhereUniqueWithoutWrongInput {
  where: ResultWhereUniqueInput;
  update: ResultUpdateWithoutWrongDataInput;
  create: ResultCreateWithoutWrongInput;
}

export interface ResultScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  quizName?: Maybe<String>;
  quizName_not?: Maybe<String>;
  quizName_in?: Maybe<String[] | String>;
  quizName_not_in?: Maybe<String[] | String>;
  quizName_lt?: Maybe<String>;
  quizName_lte?: Maybe<String>;
  quizName_gt?: Maybe<String>;
  quizName_gte?: Maybe<String>;
  quizName_contains?: Maybe<String>;
  quizName_not_contains?: Maybe<String>;
  quizName_starts_with?: Maybe<String>;
  quizName_not_starts_with?: Maybe<String>;
  quizName_ends_with?: Maybe<String>;
  quizName_not_ends_with?: Maybe<String>;
  quizType?: Maybe<String>;
  quizType_not?: Maybe<String>;
  quizType_in?: Maybe<String[] | String>;
  quizType_not_in?: Maybe<String[] | String>;
  quizType_lt?: Maybe<String>;
  quizType_lte?: Maybe<String>;
  quizType_gt?: Maybe<String>;
  quizType_gte?: Maybe<String>;
  quizType_contains?: Maybe<String>;
  quizType_not_contains?: Maybe<String>;
  quizType_starts_with?: Maybe<String>;
  quizType_not_starts_with?: Maybe<String>;
  quizType_ends_with?: Maybe<String>;
  quizType_not_ends_with?: Maybe<String>;
  result?: Maybe<String>;
  result_not?: Maybe<String>;
  result_in?: Maybe<String[] | String>;
  result_not_in?: Maybe<String[] | String>;
  result_lt?: Maybe<String>;
  result_lte?: Maybe<String>;
  result_gt?: Maybe<String>;
  result_gte?: Maybe<String>;
  result_contains?: Maybe<String>;
  result_not_contains?: Maybe<String>;
  result_starts_with?: Maybe<String>;
  result_not_starts_with?: Maybe<String>;
  result_ends_with?: Maybe<String>;
  result_not_ends_with?: Maybe<String>;
  quizlevel?: Maybe<Int>;
  quizlevel_not?: Maybe<Int>;
  quizlevel_in?: Maybe<Int[] | Int>;
  quizlevel_not_in?: Maybe<Int[] | Int>;
  quizlevel_lt?: Maybe<Int>;
  quizlevel_lte?: Maybe<Int>;
  quizlevel_gt?: Maybe<Int>;
  quizlevel_gte?: Maybe<Int>;
  score?: Maybe<Float>;
  score_not?: Maybe<Float>;
  score_in?: Maybe<Float[] | Float>;
  score_not_in?: Maybe<Float[] | Float>;
  score_lt?: Maybe<Float>;
  score_lte?: Maybe<Float>;
  score_gt?: Maybe<Float>;
  score_gte?: Maybe<Float>;
  achievement?: Maybe<String>;
  achievement_not?: Maybe<String>;
  achievement_in?: Maybe<String[] | String>;
  achievement_not_in?: Maybe<String[] | String>;
  achievement_lt?: Maybe<String>;
  achievement_lte?: Maybe<String>;
  achievement_gt?: Maybe<String>;
  achievement_gte?: Maybe<String>;
  achievement_contains?: Maybe<String>;
  achievement_not_contains?: Maybe<String>;
  achievement_starts_with?: Maybe<String>;
  achievement_not_starts_with?: Maybe<String>;
  achievement_ends_with?: Maybe<String>;
  achievement_not_ends_with?: Maybe<String>;
  duration?: Maybe<Int>;
  duration_not?: Maybe<Int>;
  duration_in?: Maybe<Int[] | Int>;
  duration_not_in?: Maybe<Int[] | Int>;
  duration_lt?: Maybe<Int>;
  duration_lte?: Maybe<Int>;
  duration_gt?: Maybe<Int>;
  duration_gte?: Maybe<Int>;
  attemptedDate?: Maybe<DateTimeInput>;
  attemptedDate_not?: Maybe<DateTimeInput>;
  attemptedDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  attemptedDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  attemptedDate_lt?: Maybe<DateTimeInput>;
  attemptedDate_lte?: Maybe<DateTimeInput>;
  attemptedDate_gt?: Maybe<DateTimeInput>;
  attemptedDate_gte?: Maybe<DateTimeInput>;
  commentFromTeacher?: Maybe<String>;
  commentFromTeacher_not?: Maybe<String>;
  commentFromTeacher_in?: Maybe<String[] | String>;
  commentFromTeacher_not_in?: Maybe<String[] | String>;
  commentFromTeacher_lt?: Maybe<String>;
  commentFromTeacher_lte?: Maybe<String>;
  commentFromTeacher_gt?: Maybe<String>;
  commentFromTeacher_gte?: Maybe<String>;
  commentFromTeacher_contains?: Maybe<String>;
  commentFromTeacher_not_contains?: Maybe<String>;
  commentFromTeacher_starts_with?: Maybe<String>;
  commentFromTeacher_not_starts_with?: Maybe<String>;
  commentFromTeacher_ends_with?: Maybe<String>;
  commentFromTeacher_not_ends_with?: Maybe<String>;
  rank?: Maybe<Int>;
  rank_not?: Maybe<Int>;
  rank_in?: Maybe<Int[] | Int>;
  rank_not_in?: Maybe<Int[] | Int>;
  rank_lt?: Maybe<Int>;
  rank_lte?: Maybe<Int>;
  rank_gt?: Maybe<Int>;
  rank_gte?: Maybe<Int>;
  AND?: Maybe<ResultScalarWhereInput[] | ResultScalarWhereInput>;
  OR?: Maybe<ResultScalarWhereInput[] | ResultScalarWhereInput>;
  NOT?: Maybe<ResultScalarWhereInput[] | ResultScalarWhereInput>;
}

export interface ResultUpdateManyWithWhereNestedInput {
  where: ResultScalarWhereInput;
  data: ResultUpdateManyDataInput;
}

export interface ResultUpdateManyDataInput {
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  result?: Maybe<String>;
  quizlevel?: Maybe<Int>;
  score?: Maybe<Float>;
  achievement?: Maybe<String>;
  duration?: Maybe<Int>;
  attemptedDate?: Maybe<DateTimeInput>;
  commentFromTeacher?: Maybe<String>;
  rank?: Maybe<Int>;
}

export interface QuestionUpsertWithWhereUniqueWithoutCorrectInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateWithoutCorrectDataInput;
  create: QuestionCreateWithoutCorrectInput;
}

export interface QuestionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  quetype?: Maybe<String>;
  quetype_not?: Maybe<String>;
  quetype_in?: Maybe<String[] | String>;
  quetype_not_in?: Maybe<String[] | String>;
  quetype_lt?: Maybe<String>;
  quetype_lte?: Maybe<String>;
  quetype_gt?: Maybe<String>;
  quetype_gte?: Maybe<String>;
  quetype_contains?: Maybe<String>;
  quetype_not_contains?: Maybe<String>;
  quetype_starts_with?: Maybe<String>;
  quetype_not_starts_with?: Maybe<String>;
  quetype_ends_with?: Maybe<String>;
  quetype_not_ends_with?: Maybe<String>;
  categories?: Maybe<String>;
  categories_not?: Maybe<String>;
  categories_in?: Maybe<String[] | String>;
  categories_not_in?: Maybe<String[] | String>;
  categories_lt?: Maybe<String>;
  categories_lte?: Maybe<String>;
  categories_gt?: Maybe<String>;
  categories_gte?: Maybe<String>;
  categories_contains?: Maybe<String>;
  categories_not_contains?: Maybe<String>;
  categories_starts_with?: Maybe<String>;
  categories_not_starts_with?: Maybe<String>;
  categories_ends_with?: Maybe<String>;
  categories_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  descriptionType?: Maybe<String>;
  descriptionType_not?: Maybe<String>;
  descriptionType_in?: Maybe<String[] | String>;
  descriptionType_not_in?: Maybe<String[] | String>;
  descriptionType_lt?: Maybe<String>;
  descriptionType_lte?: Maybe<String>;
  descriptionType_gt?: Maybe<String>;
  descriptionType_gte?: Maybe<String>;
  descriptionType_contains?: Maybe<String>;
  descriptionType_not_contains?: Maybe<String>;
  descriptionType_starts_with?: Maybe<String>;
  descriptionType_not_starts_with?: Maybe<String>;
  descriptionType_ends_with?: Maybe<String>;
  descriptionType_not_ends_with?: Maybe<String>;
  descriptionurl?: Maybe<String>;
  descriptionurl_not?: Maybe<String>;
  descriptionurl_in?: Maybe<String[] | String>;
  descriptionurl_not_in?: Maybe<String[] | String>;
  descriptionurl_lt?: Maybe<String>;
  descriptionurl_lte?: Maybe<String>;
  descriptionurl_gt?: Maybe<String>;
  descriptionurl_gte?: Maybe<String>;
  descriptionurl_contains?: Maybe<String>;
  descriptionurl_not_contains?: Maybe<String>;
  descriptionurl_starts_with?: Maybe<String>;
  descriptionurl_not_starts_with?: Maybe<String>;
  descriptionurl_ends_with?: Maybe<String>;
  descriptionurl_not_ends_with?: Maybe<String>;
  level?: Maybe<Int>;
  level_not?: Maybe<Int>;
  level_in?: Maybe<Int[] | Int>;
  level_not_in?: Maybe<Int[] | Int>;
  level_lt?: Maybe<Int>;
  level_lte?: Maybe<Int>;
  level_gt?: Maybe<Int>;
  level_gte?: Maybe<Int>;
  plandate?: Maybe<DateTimeInput>;
  plandate_not?: Maybe<DateTimeInput>;
  plandate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plandate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plandate_lt?: Maybe<DateTimeInput>;
  plandate_lte?: Maybe<DateTimeInput>;
  plandate_gt?: Maybe<DateTimeInput>;
  plandate_gte?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  available?: Maybe<String>;
  available_not?: Maybe<String>;
  available_in?: Maybe<String[] | String>;
  available_not_in?: Maybe<String[] | String>;
  available_lt?: Maybe<String>;
  available_lte?: Maybe<String>;
  available_gt?: Maybe<String>;
  available_gte?: Maybe<String>;
  available_contains?: Maybe<String>;
  available_not_contains?: Maybe<String>;
  available_starts_with?: Maybe<String>;
  available_not_starts_with?: Maybe<String>;
  available_ends_with?: Maybe<String>;
  available_not_ends_with?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  isReviewed_not?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  explainationType_not?: Maybe<String>;
  explainationType_in?: Maybe<String[] | String>;
  explainationType_not_in?: Maybe<String[] | String>;
  explainationType_lt?: Maybe<String>;
  explainationType_lte?: Maybe<String>;
  explainationType_gt?: Maybe<String>;
  explainationType_gte?: Maybe<String>;
  explainationType_contains?: Maybe<String>;
  explainationType_not_contains?: Maybe<String>;
  explainationType_starts_with?: Maybe<String>;
  explainationType_not_starts_with?: Maybe<String>;
  explainationType_ends_with?: Maybe<String>;
  explainationType_not_ends_with?: Maybe<String>;
  explaination?: Maybe<String>;
  explaination_not?: Maybe<String>;
  explaination_in?: Maybe<String[] | String>;
  explaination_not_in?: Maybe<String[] | String>;
  explaination_lt?: Maybe<String>;
  explaination_lte?: Maybe<String>;
  explaination_gt?: Maybe<String>;
  explaination_gte?: Maybe<String>;
  explaination_contains?: Maybe<String>;
  explaination_not_contains?: Maybe<String>;
  explaination_starts_with?: Maybe<String>;
  explaination_not_starts_with?: Maybe<String>;
  explaination_ends_with?: Maybe<String>;
  explaination_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  OR?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  NOT?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
}

export interface QuestionUpdateManyWithWhereNestedInput {
  where: QuestionScalarWhereInput;
  data: QuestionUpdateManyDataInput;
}

export interface QuestionUpdateManyDataInput {
  quetype?: Maybe<String>;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType?: Maybe<String>;
  descriptionurl?: Maybe<String>;
  options?: Maybe<Json>;
  level?: Maybe<Int>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  explaination?: Maybe<String>;
}

export interface QuestionUpdateManyWithoutWrongInput {
  create?: Maybe<
    QuestionCreateWithoutWrongInput[] | QuestionCreateWithoutWrongInput
  >;
  delete?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  set?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  disconnect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  update?: Maybe<
    | QuestionUpdateWithWhereUniqueWithoutWrongInput[]
    | QuestionUpdateWithWhereUniqueWithoutWrongInput
  >;
  upsert?: Maybe<
    | QuestionUpsertWithWhereUniqueWithoutWrongInput[]
    | QuestionUpsertWithWhereUniqueWithoutWrongInput
  >;
  deleteMany?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  updateMany?: Maybe<
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionUpdateWithWhereUniqueWithoutWrongInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateWithoutWrongDataInput;
}

export interface QuestionUpdateWithoutWrongDataInput {
  subject?: Maybe<SubjectUpdateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitUpdateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicUpdateOneWithoutQuestionsInput>;
  quetype?: Maybe<String>;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType?: Maybe<String>;
  descriptionurl?: Maybe<String>;
  options?: Maybe<Json>;
  createdBy?: Maybe<UserUpdateOneWithoutQuestionCreatedByInput>;
  level?: Maybe<Int>;
  updatedBy?: Maybe<UserUpdateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizUpdateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultUpdateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultUpdateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultUpdateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultUpdateManyWithoutCorrectInput>;
}

export interface QuestionUpsertWithWhereUniqueWithoutWrongInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateWithoutWrongDataInput;
  create: QuestionCreateWithoutWrongInput;
}

export interface ResultUpsertWithWhereUniqueWithoutNotattemptedInput {
  where: ResultWhereUniqueInput;
  update: ResultUpdateWithoutNotattemptedDataInput;
  create: ResultCreateWithoutNotattemptedInput;
}

export interface QuestionUpsertWithWhereUniqueWithoutAtemptedResultInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateWithoutAtemptedResultDataInput;
  create: QuestionCreateWithoutAtemptedResultInput;
}

export interface ResultUpsertWithWhereUniqueWithoutCorrectInput {
  where: ResultWhereUniqueInput;
  update: ResultUpdateWithoutCorrectDataInput;
  create: ResultCreateWithoutCorrectInput;
}

export interface QuestionUpsertWithWhereUniqueWithoutNotattemptedInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateWithoutNotattemptedDataInput;
  create: QuestionCreateWithoutNotattemptedInput;
}

export interface ResultUpsertWithWhereUniqueWithoutAttemptedInput {
  where: ResultWhereUniqueInput;
  update: ResultUpdateWithoutAttemptedDataInput;
  create: ResultCreateWithoutAttemptedInput;
}

export interface QuestionUpsertWithWhereUniqueWithoutResultsInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateWithoutResultsDataInput;
  create: QuestionCreateWithoutResultsInput;
}

export interface ResultUpsertWithWhereUniqueWithoutQuizInput {
  where: ResultWhereUniqueInput;
  update: ResultUpdateWithoutQuizDataInput;
  create: ResultCreateWithoutQuizInput;
}

export interface QuizUpsertWithWhereUniqueWithoutCoursesInput {
  where: QuizWhereUniqueInput;
  update: QuizUpdateWithoutCoursesDataInput;
  create: QuizCreateWithoutCoursesInput;
}

export interface QuizUpsertWithoutResultsInput {
  update: QuizUpdateWithoutResultsDataInput;
  create: QuizCreateWithoutResultsInput;
}

export interface ResultUpsertWithWhereUniqueWithoutQuestionsInput {
  where: ResultWhereUniqueInput;
  update: ResultUpdateWithoutQuestionsDataInput;
  create: ResultCreateWithoutQuestionsInput;
}

export interface QuestionUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateWithoutUpdatedByDataInput;
  create: QuestionCreateWithoutUpdatedByInput;
}

export interface ResultUpdateManyWithoutUserIdInput {
  create?: Maybe<
    ResultCreateWithoutUserIdInput[] | ResultCreateWithoutUserIdInput
  >;
  delete?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  connect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  set?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  disconnect?: Maybe<ResultWhereUniqueInput[] | ResultWhereUniqueInput>;
  update?: Maybe<
    | ResultUpdateWithWhereUniqueWithoutUserIdInput[]
    | ResultUpdateWithWhereUniqueWithoutUserIdInput
  >;
  upsert?: Maybe<
    | ResultUpsertWithWhereUniqueWithoutUserIdInput[]
    | ResultUpsertWithWhereUniqueWithoutUserIdInput
  >;
  deleteMany?: Maybe<ResultScalarWhereInput[] | ResultScalarWhereInput>;
  updateMany?: Maybe<
    | ResultUpdateManyWithWhereNestedInput[]
    | ResultUpdateManyWithWhereNestedInput
  >;
}

export interface ResultUpdateWithWhereUniqueWithoutUserIdInput {
  where: ResultWhereUniqueInput;
  data: ResultUpdateWithoutUserIdDataInput;
}

export interface ResultUpdateWithoutUserIdDataInput {
  quiz?: Maybe<QuizUpdateOneRequiredWithoutResultsInput>;
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutResultsInput>;
  result?: Maybe<String>;
  quizlevel?: Maybe<Int>;
  score?: Maybe<Float>;
  attempted?: Maybe<QuestionUpdateManyWithoutAtemptedResultInput>;
  notattempted?: Maybe<QuestionUpdateManyWithoutNotattemptedInput>;
  correct?: Maybe<QuestionUpdateManyWithoutCorrectInput>;
  wrong?: Maybe<QuestionUpdateManyWithoutWrongInput>;
  achievement?: Maybe<String>;
  duration?: Maybe<Int>;
  attemptedDate?: Maybe<DateTimeInput>;
  commentFromTeacher?: Maybe<String>;
  rank?: Maybe<Int>;
}

export interface ResultUpsertWithWhereUniqueWithoutUserIdInput {
  where: ResultWhereUniqueInput;
  update: ResultUpdateWithoutUserIdDataInput;
  create: ResultCreateWithoutUserIdInput;
}

export interface UserUpsertWithoutQuizCreatedByInput {
  update: UserUpdateWithoutQuizCreatedByDataInput;
  create: UserCreateWithoutQuizCreatedByInput;
}

export interface QuizUpsertWithWhereUniqueWithoutQuestionsInput {
  where: QuizWhereUniqueInput;
  update: QuizUpdateWithoutQuestionsDataInput;
  create: QuizCreateWithoutQuestionsInput;
}

export interface QuestionUpsertWithWhereUniqueWithoutCreatedByInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateWithoutCreatedByDataInput;
  create: QuestionCreateWithoutCreatedByInput;
}

export interface UserUpsertWithoutQuestionUpdateddByInput {
  update: UserUpdateWithoutQuestionUpdateddByDataInput;
  create: UserCreateWithoutQuestionUpdateddByInput;
}

export interface QuestionUpsertWithWhereUniqueWithoutQuizInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateWithoutQuizDataInput;
  create: QuestionCreateWithoutQuizInput;
}

export interface QuizUpsertWithWhereUniqueWithoutTopicInput {
  where: QuizWhereUniqueInput;
  update: QuizUpdateWithoutTopicDataInput;
  create: QuizCreateWithoutTopicInput;
}

export interface TopicUpsertWithoutContentsInput {
  update: TopicUpdateWithoutContentsDataInput;
  create: TopicCreateWithoutContentsInput;
}

export interface UserUpdateManyWithoutContentUpdateByMeInput {
  create?: Maybe<
    | UserCreateWithoutContentUpdateByMeInput[]
    | UserCreateWithoutContentUpdateByMeInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutContentUpdateByMeInput[]
    | UserUpdateWithWhereUniqueWithoutContentUpdateByMeInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutContentUpdateByMeInput[]
    | UserUpsertWithWhereUniqueWithoutContentUpdateByMeInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutContentUpdateByMeInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutContentUpdateByMeDataInput;
}

export interface UserUpdateWithoutContentUpdateByMeDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface UserUpsertWithWhereUniqueWithoutContentUpdateByMeInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutContentUpdateByMeDataInput;
  create: UserCreateWithoutContentUpdateByMeInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  createdBy?: Maybe<String>;
  createdBy_not?: Maybe<String>;
  createdBy_in?: Maybe<String[] | String>;
  createdBy_not_in?: Maybe<String[] | String>;
  createdBy_lt?: Maybe<String>;
  createdBy_lte?: Maybe<String>;
  createdBy_gt?: Maybe<String>;
  createdBy_gte?: Maybe<String>;
  createdBy_contains?: Maybe<String>;
  createdBy_not_contains?: Maybe<String>;
  createdBy_starts_with?: Maybe<String>;
  createdBy_not_starts_with?: Maybe<String>;
  createdBy_ends_with?: Maybe<String>;
  createdBy_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  createdBy?: Maybe<String>;
}

export interface ContentUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ContentWhereUniqueInput;
  update: ContentUpdateWithoutCreatedByDataInput;
  create: ContentCreateWithoutCreatedByInput;
}

export interface UserUpsertWithoutTopicUpdateByMeInput {
  update: UserUpdateWithoutTopicUpdateByMeDataInput;
  create: UserCreateWithoutTopicUpdateByMeInput;
}

export interface TopicUpsertWithWhereUniqueWithoutCreatedByInput {
  where: TopicWhereUniqueInput;
  update: TopicUpdateWithoutCreatedByDataInput;
  create: TopicCreateWithoutCreatedByInput;
}

export interface TopicScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  plantDate?: Maybe<DateTimeInput>;
  plantDate_not?: Maybe<DateTimeInput>;
  plantDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plantDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plantDate_lt?: Maybe<DateTimeInput>;
  plantDate_lte?: Maybe<DateTimeInput>;
  plantDate_gt?: Maybe<DateTimeInput>;
  plantDate_gte?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  available?: Maybe<String>;
  available_not?: Maybe<String>;
  available_in?: Maybe<String[] | String>;
  available_not_in?: Maybe<String[] | String>;
  available_lt?: Maybe<String>;
  available_lte?: Maybe<String>;
  available_gt?: Maybe<String>;
  available_gte?: Maybe<String>;
  available_contains?: Maybe<String>;
  available_not_contains?: Maybe<String>;
  available_starts_with?: Maybe<String>;
  available_not_starts_with?: Maybe<String>;
  available_ends_with?: Maybe<String>;
  available_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
  OR?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
  NOT?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
}

export interface TopicUpdateManyWithWhereNestedInput {
  where: TopicScalarWhereInput;
  data: TopicUpdateManyDataInput;
}

export interface TopicUpdateManyDataInput {
  name?: Maybe<String>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
}

export interface UserUpsertWithoutQuestionCreatedByInput {
  update: UserUpdateWithoutQuestionCreatedByDataInput;
  create: UserCreateWithoutQuestionCreatedByInput;
}

export interface QuestionUpsertWithWhereUniqueWithoutTopicInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateWithoutTopicDataInput;
  create: QuestionCreateWithoutTopicInput;
}

export interface TopicUpsertWithWhereUniqueWithoutUpdateByInput {
  where: TopicWhereUniqueInput;
  update: TopicUpdateWithoutUpdateByDataInput;
  create: TopicCreateWithoutUpdateByInput;
}

export interface UserUpsertWithoutTopicByMeInput {
  update: UserUpdateWithoutTopicByMeDataInput;
  create: UserCreateWithoutTopicByMeInput;
}

export interface TopicUpsertWithoutQuizsInput {
  update: TopicUpdateWithoutQuizsDataInput;
  create: TopicCreateWithoutQuizsInput;
}

export interface QuizUpsertWithWhereUniqueWithoutUnitInput {
  where: QuizWhereUniqueInput;
  update: QuizUpdateWithoutUnitDataInput;
  create: QuizCreateWithoutUnitInput;
}

export interface UnitUpsertWithWhereUniqueWithoutUpdateByInput {
  where: UnitWhereUniqueInput;
  update: UnitUpdateWithoutUpdateByDataInput;
  create: UnitCreateWithoutUpdateByInput;
}

export interface UnitScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  plantDate?: Maybe<DateTimeInput>;
  plantDate_not?: Maybe<DateTimeInput>;
  plantDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plantDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plantDate_lt?: Maybe<DateTimeInput>;
  plantDate_lte?: Maybe<DateTimeInput>;
  plantDate_gt?: Maybe<DateTimeInput>;
  plantDate_gte?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  available?: Maybe<String>;
  available_not?: Maybe<String>;
  available_in?: Maybe<String[] | String>;
  available_not_in?: Maybe<String[] | String>;
  available_lt?: Maybe<String>;
  available_lte?: Maybe<String>;
  available_gt?: Maybe<String>;
  available_gte?: Maybe<String>;
  available_contains?: Maybe<String>;
  available_not_contains?: Maybe<String>;
  available_starts_with?: Maybe<String>;
  available_not_starts_with?: Maybe<String>;
  available_ends_with?: Maybe<String>;
  available_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UnitScalarWhereInput[] | UnitScalarWhereInput>;
  OR?: Maybe<UnitScalarWhereInput[] | UnitScalarWhereInput>;
  NOT?: Maybe<UnitScalarWhereInput[] | UnitScalarWhereInput>;
}

export interface UnitUpdateManyWithWhereNestedInput {
  where: UnitScalarWhereInput;
  data: UnitUpdateManyDataInput;
}

export interface UnitUpdateManyDataInput {
  name?: Maybe<String>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
}

export interface UserUpsertWithoutContentByMeInput {
  update: UserUpdateWithoutContentByMeDataInput;
  create: UserCreateWithoutContentByMeInput;
}

export interface ContentUpsertWithWhereUniqueWithoutTopicInput {
  where: ContentWhereUniqueInput;
  update: ContentUpdateWithoutTopicDataInput;
  create: ContentCreateWithoutTopicInput;
}

export interface TopicUpsertWithoutQuestionsInput {
  update: TopicUpdateWithoutQuestionsDataInput;
  create: TopicCreateWithoutQuestionsInput;
}

export interface QuestionUpsertWithWhereUniqueWithoutUnitInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateWithoutUnitDataInput;
  create: QuestionCreateWithoutUnitInput;
}

export interface UnitUpsertWithWhereUniqueWithoutCreatedByInput {
  where: UnitWhereUniqueInput;
  update: UnitUpdateWithoutCreatedByDataInput;
  create: UnitCreateWithoutCreatedByInput;
}

export interface UserUpsertWithWhereUniqueWithoutUnitUpdatedByMeInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutUnitUpdatedByMeDataInput;
  create: UserCreateWithoutUnitUpdatedByMeInput;
}

export interface UnitUpsertWithoutQuizsInput {
  update: UnitUpdateWithoutQuizsDataInput;
  create: UnitCreateWithoutQuizsInput;
}

export interface QuizUpsertWithWhereUniqueWithoutSubjectInput {
  where: QuizWhereUniqueInput;
  update: QuizUpdateWithoutSubjectDataInput;
  create: QuizCreateWithoutSubjectInput;
}

export interface SubjectUpsertWithWhereUniqueWithoutUpdateByInput {
  where: SubjectWhereUniqueInput;
  update: SubjectUpdateWithoutUpdateByDataInput;
  create: SubjectCreateWithoutUpdateByInput;
}

export interface SubjectScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  picture?: Maybe<String>;
  picture_not?: Maybe<String>;
  picture_in?: Maybe<String[] | String>;
  picture_not_in?: Maybe<String[] | String>;
  picture_lt?: Maybe<String>;
  picture_lte?: Maybe<String>;
  picture_gt?: Maybe<String>;
  picture_gte?: Maybe<String>;
  picture_contains?: Maybe<String>;
  picture_not_contains?: Maybe<String>;
  picture_starts_with?: Maybe<String>;
  picture_not_starts_with?: Maybe<String>;
  picture_ends_with?: Maybe<String>;
  picture_not_ends_with?: Maybe<String>;
  board?: Maybe<String>;
  board_not?: Maybe<String>;
  board_in?: Maybe<String[] | String>;
  board_not_in?: Maybe<String[] | String>;
  board_lt?: Maybe<String>;
  board_lte?: Maybe<String>;
  board_gt?: Maybe<String>;
  board_gte?: Maybe<String>;
  board_contains?: Maybe<String>;
  board_not_contains?: Maybe<String>;
  board_starts_with?: Maybe<String>;
  board_not_starts_with?: Maybe<String>;
  board_ends_with?: Maybe<String>;
  board_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  plantDate?: Maybe<DateTimeInput>;
  plantDate_not?: Maybe<DateTimeInput>;
  plantDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plantDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  plantDate_lt?: Maybe<DateTimeInput>;
  plantDate_lte?: Maybe<DateTimeInput>;
  plantDate_gt?: Maybe<DateTimeInput>;
  plantDate_gte?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  available?: Maybe<String>;
  available_not?: Maybe<String>;
  available_in?: Maybe<String[] | String>;
  available_not_in?: Maybe<String[] | String>;
  available_lt?: Maybe<String>;
  available_lte?: Maybe<String>;
  available_gt?: Maybe<String>;
  available_gte?: Maybe<String>;
  available_contains?: Maybe<String>;
  available_not_contains?: Maybe<String>;
  available_starts_with?: Maybe<String>;
  available_not_starts_with?: Maybe<String>;
  available_ends_with?: Maybe<String>;
  available_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
  OR?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
  NOT?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
}

export interface SubjectUpdateManyWithWhereNestedInput {
  where: SubjectScalarWhereInput;
  data: SubjectUpdateManyDataInput;
}

export interface SubjectUpdateManyDataInput {
  name?: Maybe<String>;
  picture?: Maybe<String>;
  board?: Maybe<String>;
  category?: Maybe<String>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserUpsertWithoutUnitByMeInput {
  update: UserUpdateWithoutUnitByMeDataInput;
  create: UserCreateWithoutUnitByMeInput;
}

export interface UnitUpsertWithoutQuestionsInput {
  update: UnitUpdateWithoutQuestionsDataInput;
  create: UnitCreateWithoutQuestionsInput;
}

export interface QuestionUpsertWithWhereUniqueWithoutSubjectInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateWithoutSubjectDataInput;
  create: QuestionCreateWithoutSubjectInput;
}

export interface SubjectUpsertWithWhereUniqueWithoutCreatedByInput {
  where: SubjectWhereUniqueInput;
  update: SubjectUpdateWithoutCreatedByDataInput;
  create: SubjectCreateWithoutCreatedByInput;
}

export interface UserUpsertWithWhereUniqueWithoutSubjectUpddateByMeInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutSubjectUpddateByMeDataInput;
  create: UserCreateWithoutSubjectUpddateByMeInput;
}

export interface SubjectUpsertWithWhereUniqueNestedInput {
  where: SubjectWhereUniqueInput;
  update: SubjectUpdateDataInput;
  create: SubjectCreateInput;
}

export interface RoleUpdateOneRequiredWithoutSubjectSubscriptionsInput {
  create?: Maybe<RoleCreateWithoutSubjectSubscriptionsInput>;
  update?: Maybe<RoleUpdateWithoutSubjectSubscriptionsDataInput>;
  upsert?: Maybe<RoleUpsertWithoutSubjectSubscriptionsInput>;
  connect?: Maybe<RoleWhereUniqueInput>;
}

export interface RoleUpdateWithoutSubjectSubscriptionsDataInput {
  name?: Maybe<ROLENAME>;
  org?: Maybe<OrganizationUpdateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgUpdateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupUpdateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubgroupRolesInput>;
  users?: Maybe<UserUpdateManyWithoutRolesInput>;
  educationprofiles?: Maybe<EducationProfileUpdateManyWithoutRolesInput>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
}

export interface RoleUpsertWithoutSubjectSubscriptionsInput {
  update: RoleUpdateWithoutSubjectSubscriptionsDataInput;
  create: RoleCreateWithoutSubjectSubscriptionsInput;
}

export interface SubjectSubscriptionUpsertWithWhereUniqueWithoutUseridInput {
  where: SubjectSubscriptionWhereUniqueInput;
  update: SubjectSubscriptionUpdateWithoutUseridDataInput;
  create: SubjectSubscriptionCreateWithoutUseridInput;
}

export interface SubjectSubscriptionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  subsType?: Maybe<String>;
  subsType_not?: Maybe<String>;
  subsType_in?: Maybe<String[] | String>;
  subsType_not_in?: Maybe<String[] | String>;
  subsType_lt?: Maybe<String>;
  subsType_lte?: Maybe<String>;
  subsType_gt?: Maybe<String>;
  subsType_gte?: Maybe<String>;
  subsType_contains?: Maybe<String>;
  subsType_not_contains?: Maybe<String>;
  subsType_starts_with?: Maybe<String>;
  subsType_not_starts_with?: Maybe<String>;
  subsType_ends_with?: Maybe<String>;
  subsType_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    SubjectSubscriptionScalarWhereInput[] | SubjectSubscriptionScalarWhereInput
  >;
  OR?: Maybe<
    SubjectSubscriptionScalarWhereInput[] | SubjectSubscriptionScalarWhereInput
  >;
  NOT?: Maybe<
    SubjectSubscriptionScalarWhereInput[] | SubjectSubscriptionScalarWhereInput
  >;
}

export interface SubjectSubscriptionUpdateManyWithWhereNestedInput {
  where: SubjectSubscriptionScalarWhereInput;
  data: SubjectSubscriptionUpdateManyDataInput;
}

export interface SubjectSubscriptionUpdateManyDataInput {
  subsType?: Maybe<String>;
}

export interface UserUpsertWithoutSubjectByMeInput {
  update: UserUpdateWithoutSubjectByMeDataInput;
  create: UserCreateWithoutSubjectByMeInput;
}

export interface SubjectUpsertWithoutContentsInput {
  update: SubjectUpdateWithoutContentsDataInput;
  create: SubjectCreateWithoutContentsInput;
}

export interface ContentUpsertWithWhereUniqueWithoutUnitInput {
  where: ContentWhereUniqueInput;
  update: ContentUpdateWithoutUnitDataInput;
  create: ContentCreateWithoutUnitInput;
}

export interface UnitUpsertWithoutTopicsInput {
  update: UnitUpdateWithoutTopicsDataInput;
  create: UnitCreateWithoutTopicsInput;
}

export interface TopicUpsertWithWhereUniqueWithoutSubjectInput {
  where: TopicWhereUniqueInput;
  update: TopicUpdateWithoutSubjectDataInput;
  create: TopicCreateWithoutSubjectInput;
}

export interface SubjectUpsertWithoutUnitsInput {
  update: SubjectUpdateWithoutUnitsDataInput;
  create: SubjectCreateWithoutUnitsInput;
}

export interface UnitUpsertWithoutContentsInput {
  update: UnitUpdateWithoutContentsDataInput;
  create: UnitCreateWithoutContentsInput;
}

export interface ContentUpsertWithWhereUniqueWithoutSubjectInput {
  where: ContentWhereUniqueInput;
  update: ContentUpdateWithoutSubjectDataInput;
  create: ContentCreateWithoutSubjectInput;
}

export interface SubjectUpsertWithoutTopicInput {
  update: SubjectUpdateWithoutTopicDataInput;
  create: SubjectCreateWithoutTopicInput;
}

export interface TopicUpsertWithWhereUniqueWithoutUnitInput {
  where: TopicWhereUniqueInput;
  update: TopicUpdateWithoutUnitDataInput;
  create: TopicCreateWithoutUnitInput;
}

export interface UnitUpsertWithWhereUniqueWithoutSubjectInput {
  where: UnitWhereUniqueInput;
  update: UnitUpdateWithoutSubjectDataInput;
  create: UnitCreateWithoutSubjectInput;
}

export interface SubjectUpsertWithWhereUniqueWithoutStdInput {
  where: SubjectWhereUniqueInput;
  update: SubjectUpdateWithoutStdDataInput;
  create: SubjectCreateWithoutStdInput;
}

export interface StdUpsertWithWhereUniqueWithoutEducationprofilesInput {
  where: StdWhereUniqueInput;
  update: StdUpdateWithoutEducationprofilesDataInput;
  create: StdCreateWithoutEducationprofilesInput;
}

export interface StdScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  gradename?: Maybe<GRADENAME>;
  gradename_not?: Maybe<GRADENAME>;
  gradename_in?: Maybe<GRADENAME[] | GRADENAME>;
  gradename_not_in?: Maybe<GRADENAME[] | GRADENAME>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  branch?: Maybe<String>;
  branch_not?: Maybe<String>;
  branch_in?: Maybe<String[] | String>;
  branch_not_in?: Maybe<String[] | String>;
  branch_lt?: Maybe<String>;
  branch_lte?: Maybe<String>;
  branch_gt?: Maybe<String>;
  branch_gte?: Maybe<String>;
  branch_contains?: Maybe<String>;
  branch_not_contains?: Maybe<String>;
  branch_starts_with?: Maybe<String>;
  branch_not_starts_with?: Maybe<String>;
  branch_ends_with?: Maybe<String>;
  branch_not_ends_with?: Maybe<String>;
  year?: Maybe<String>;
  year_not?: Maybe<String>;
  year_in?: Maybe<String[] | String>;
  year_not_in?: Maybe<String[] | String>;
  year_lt?: Maybe<String>;
  year_lte?: Maybe<String>;
  year_gt?: Maybe<String>;
  year_gte?: Maybe<String>;
  year_contains?: Maybe<String>;
  year_not_contains?: Maybe<String>;
  year_starts_with?: Maybe<String>;
  year_not_starts_with?: Maybe<String>;
  year_ends_with?: Maybe<String>;
  year_not_ends_with?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<StdScalarWhereInput[] | StdScalarWhereInput>;
  OR?: Maybe<StdScalarWhereInput[] | StdScalarWhereInput>;
  NOT?: Maybe<StdScalarWhereInput[] | StdScalarWhereInput>;
}

export interface StdUpdateManyWithWhereNestedInput {
  where: StdScalarWhereInput;
  data: StdUpdateManyDataInput;
}

export interface StdUpdateManyDataInput {
  gradename?: Maybe<GRADENAME>;
  category?: Maybe<String>;
  branch?: Maybe<String>;
  year?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
}

export interface EducationProfileUpsertWithWhereUniqueWithoutRolesInput {
  where: EducationProfileWhereUniqueInput;
  update: EducationProfileUpdateWithoutRolesDataInput;
  create: EducationProfileCreateWithoutRolesInput;
}

export interface SubjectSubscriptionUpdateManyWithoutSubscribedAsInput {
  create?: Maybe<
    | SubjectSubscriptionCreateWithoutSubscribedAsInput[]
    | SubjectSubscriptionCreateWithoutSubscribedAsInput
  >;
  delete?: Maybe<
    SubjectSubscriptionWhereUniqueInput[] | SubjectSubscriptionWhereUniqueInput
  >;
  connect?: Maybe<
    SubjectSubscriptionWhereUniqueInput[] | SubjectSubscriptionWhereUniqueInput
  >;
  set?: Maybe<
    SubjectSubscriptionWhereUniqueInput[] | SubjectSubscriptionWhereUniqueInput
  >;
  disconnect?: Maybe<
    SubjectSubscriptionWhereUniqueInput[] | SubjectSubscriptionWhereUniqueInput
  >;
  update?: Maybe<
    | SubjectSubscriptionUpdateWithWhereUniqueWithoutSubscribedAsInput[]
    | SubjectSubscriptionUpdateWithWhereUniqueWithoutSubscribedAsInput
  >;
  upsert?: Maybe<
    | SubjectSubscriptionUpsertWithWhereUniqueWithoutSubscribedAsInput[]
    | SubjectSubscriptionUpsertWithWhereUniqueWithoutSubscribedAsInput
  >;
  deleteMany?: Maybe<
    SubjectSubscriptionScalarWhereInput[] | SubjectSubscriptionScalarWhereInput
  >;
  updateMany?: Maybe<
    | SubjectSubscriptionUpdateManyWithWhereNestedInput[]
    | SubjectSubscriptionUpdateManyWithWhereNestedInput
  >;
}

export interface SubjectSubscriptionUpdateWithWhereUniqueWithoutSubscribedAsInput {
  where: SubjectSubscriptionWhereUniqueInput;
  data: SubjectSubscriptionUpdateWithoutSubscribedAsDataInput;
}

export interface SubjectSubscriptionUpdateWithoutSubscribedAsDataInput {
  subsType?: Maybe<String>;
  mySubjects?: Maybe<SubjectUpdateManyInput>;
  userid?: Maybe<UserUpdateOneRequiredWithoutSubjectSubscriptionInput>;
}

export interface UserUpdateOneRequiredWithoutSubjectSubscriptionInput {
  create?: Maybe<UserCreateWithoutSubjectSubscriptionInput>;
  update?: Maybe<UserUpdateWithoutSubjectSubscriptionDataInput>;
  upsert?: Maybe<UserUpsertWithoutSubjectSubscriptionInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutSubjectSubscriptionDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface UserUpsertWithoutSubjectSubscriptionInput {
  update: UserUpdateWithoutSubjectSubscriptionDataInput;
  create: UserCreateWithoutSubjectSubscriptionInput;
}

export interface SubjectSubscriptionUpsertWithWhereUniqueWithoutSubscribedAsInput {
  where: SubjectSubscriptionWhereUniqueInput;
  update: SubjectSubscriptionUpdateWithoutSubscribedAsDataInput;
  create: SubjectSubscriptionCreateWithoutSubscribedAsInput;
}

export interface RoleUpsertWithWhereUniqueWithoutSubgroupInput {
  where: RoleWhereUniqueInput;
  update: RoleUpdateWithoutSubgroupDataInput;
  create: RoleCreateWithoutSubgroupInput;
}

export interface RoleScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<ROLENAME>;
  name_not?: Maybe<ROLENAME>;
  name_in?: Maybe<ROLENAME[] | ROLENAME>;
  name_not_in?: Maybe<ROLENAME[] | ROLENAME>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  OR?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  NOT?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
}

export interface RoleUpdateManyWithWhereNestedInput {
  where: RoleScalarWhereInput;
  data: RoleUpdateManyDataInput;
}

export interface RoleUpdateManyDataInput {
  name?: Maybe<ROLENAME>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
}

export interface SubGroupUpsertWithoutSubjectsInput {
  update: SubGroupUpdateWithoutSubjectsDataInput;
  create: SubGroupCreateWithoutSubjectsInput;
}

export interface SubjectUpsertWithWhereUniqueWithoutEducationProfilesInput {
  where: SubjectWhereUniqueInput;
  update: SubjectUpdateWithoutEducationProfilesDataInput;
  create: SubjectCreateWithoutEducationProfilesInput;
}

export interface EducationProfileUpsertWithWhereUniqueWithoutProfileIdInput {
  where: EducationProfileWhereUniqueInput;
  update: EducationProfileUpdateWithoutProfileIdDataInput;
  create: EducationProfileCreateWithoutProfileIdInput;
}

export interface ProfileUpsertWithWhereUniqueWithoutUserIdInput {
  where: ProfileWhereUniqueInput;
  update: ProfileUpdateWithoutUserIdDataInput;
  create: ProfileCreateWithoutUserIdInput;
}

export interface ProfileScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProfileScalarWhereInput[] | ProfileScalarWhereInput>;
  OR?: Maybe<ProfileScalarWhereInput[] | ProfileScalarWhereInput>;
  NOT?: Maybe<ProfileScalarWhereInput[] | ProfileScalarWhereInput>;
}

export interface ProfileUpdateManyWithWhereNestedInput {
  where: ProfileScalarWhereInput;
  data: ProfileUpdateManyDataInput;
}

export interface ProfileUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutRolesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutRolesDataInput;
  create: UserCreateWithoutRolesInput;
}

export interface RoleUpsertWithWhereUniqueWithoutGroupInput {
  where: RoleWhereUniqueInput;
  update: RoleUpdateWithoutGroupDataInput;
  create: RoleCreateWithoutGroupInput;
}

export interface GroupUpsertWithoutSubjectsInput {
  update: GroupUpdateWithoutSubjectsDataInput;
  create: GroupCreateWithoutSubjectsInput;
}

export interface SubjectUpsertWithWhereUniqueWithoutSubgroupInput {
  where: SubjectWhereUniqueInput;
  update: SubjectUpdateWithoutSubgroupDataInput;
  create: SubjectCreateWithoutSubgroupInput;
}

export interface SubGroupUpsertWithoutSubgroupRolesInput {
  update: SubGroupUpdateWithoutSubgroupRolesDataInput;
  create: SubGroupCreateWithoutSubgroupRolesInput;
}

export interface RoleUpsertWithWhereUniqueWithoutEducationprofilesInput {
  where: RoleWhereUniqueInput;
  update: RoleUpdateWithoutEducationprofilesDataInput;
  create: RoleCreateWithoutEducationprofilesInput;
}

export interface EducationProfileUpsertWithWhereUniqueWithoutStdInput {
  where: EducationProfileWhereUniqueInput;
  update: EducationProfileUpdateWithoutStdDataInput;
  create: EducationProfileCreateWithoutStdInput;
}

export interface StdUpsertWithoutSubjectsInput {
  update: StdUpdateWithoutSubjectsDataInput;
  create: StdCreateWithoutSubjectsInput;
}

export interface SubjectUpsertWithWhereUniqueWithoutGroupInput {
  where: SubjectWhereUniqueInput;
  update: SubjectUpdateWithoutGroupDataInput;
  create: SubjectCreateWithoutGroupInput;
}

export interface GroupUpsertWithoutGroupRolesInput {
  update: GroupUpdateWithoutGroupRolesDataInput;
  create: GroupCreateWithoutGroupRolesInput;
}

export interface RoleUpsertWithWhereUniqueWithoutUsersInput {
  where: RoleWhereUniqueInput;
  update: RoleUpdateWithoutUsersDataInput;
  create: RoleCreateWithoutUsersInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput;
  create: PostCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutAuthorDataInput;
  create: CommentCreateWithoutAuthorInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface UserUpsertWithoutGroupmembersInput {
  update: UserUpdateWithoutGroupmembersDataInput;
  create: UserCreateWithoutGroupmembersInput;
}

export interface GroupMemberUpsertWithWhereUniqueWithoutMemberInput {
  where: GroupMemberWhereUniqueInput;
  update: GroupMemberUpdateWithoutMemberDataInput;
  create: GroupMemberCreateWithoutMemberInput;
}

export interface GroupMemberScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<MemberStatus>;
  status_not?: Maybe<MemberStatus>;
  status_in?: Maybe<MemberStatus[] | MemberStatus>;
  status_not_in?: Maybe<MemberStatus[] | MemberStatus>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GroupMemberScalarWhereInput[] | GroupMemberScalarWhereInput>;
  OR?: Maybe<GroupMemberScalarWhereInput[] | GroupMemberScalarWhereInput>;
  NOT?: Maybe<GroupMemberScalarWhereInput[] | GroupMemberScalarWhereInput>;
}

export interface GroupMemberUpdateManyWithWhereNestedInput {
  where: GroupMemberScalarWhereInput;
  data: GroupMemberUpdateManyDataInput;
}

export interface GroupMemberUpdateManyDataInput {
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface GroupUpsertWithoutSubgroupsInput {
  update: GroupUpdateWithoutSubgroupsDataInput;
  create: GroupCreateWithoutSubgroupsInput;
}

export interface SubGroupUpsertWithoutMembersInput {
  update: SubGroupUpdateWithoutMembersDataInput;
  create: SubGroupCreateWithoutMembersInput;
}

export interface SubGroupMemberUpsertWithWhereUniqueWithoutUseridInput {
  where: SubGroupMemberWhereUniqueInput;
  update: SubGroupMemberUpdateWithoutUseridDataInput;
  create: SubGroupMemberCreateWithoutUseridInput;
}

export interface SubGroupMemberScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<MemberStatus>;
  status_not?: Maybe<MemberStatus>;
  status_in?: Maybe<MemberStatus[] | MemberStatus>;
  status_not_in?: Maybe<MemberStatus[] | MemberStatus>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    SubGroupMemberScalarWhereInput[] | SubGroupMemberScalarWhereInput
  >;
  OR?: Maybe<SubGroupMemberScalarWhereInput[] | SubGroupMemberScalarWhereInput>;
  NOT?: Maybe<
    SubGroupMemberScalarWhereInput[] | SubGroupMemberScalarWhereInput
  >;
}

export interface SubGroupMemberUpdateManyWithWhereNestedInput {
  where: SubGroupMemberScalarWhereInput;
  data: SubGroupMemberUpdateManyDataInput;
}

export interface SubGroupMemberUpdateManyDataInput {
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPostDataInput;
  create: CommentCreateWithoutPostInput;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface UserUpsertWithoutSubgroupmembersInput {
  update: UserUpdateWithoutSubgroupmembersDataInput;
  create: UserCreateWithoutSubgroupmembersInput;
}

export interface SubGroupMemberUpsertWithWhereUniqueWithoutMemberInput {
  where: SubGroupMemberWhereUniqueInput;
  update: SubGroupMemberUpdateWithoutMemberDataInput;
  create: SubGroupMemberCreateWithoutMemberInput;
}

export interface SubGroupUpsertWithWhereUniqueWithoutGroupidInput {
  where: SubGroupWhereUniqueInput;
  update: SubGroupUpdateWithoutGroupidDataInput;
  create: SubGroupCreateWithoutGroupidInput;
}

export interface SubGroupScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SubGroupScalarWhereInput[] | SubGroupScalarWhereInput>;
  OR?: Maybe<SubGroupScalarWhereInput[] | SubGroupScalarWhereInput>;
  NOT?: Maybe<SubGroupScalarWhereInput[] | SubGroupScalarWhereInput>;
}

export interface SubGroupUpdateManyWithWhereNestedInput {
  where: SubGroupScalarWhereInput;
  data: SubGroupUpdateManyDataInput;
}

export interface SubGroupUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface GroupUpsertWithWhereUniqueWithoutSuborgidInput {
  where: GroupWhereUniqueInput;
  update: GroupUpdateWithoutSuborgidDataInput;
  create: GroupCreateWithoutSuborgidInput;
}

export interface GroupScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  OR?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  NOT?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
}

export interface GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput;
  data: GroupUpdateManyDataInput;
}

export interface GroupUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface RoleUpdateManyWithoutSuborgInput {
  create?: Maybe<RoleCreateWithoutSuborgInput[] | RoleCreateWithoutSuborgInput>;
  delete?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  set?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  disconnect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  update?: Maybe<
    | RoleUpdateWithWhereUniqueWithoutSuborgInput[]
    | RoleUpdateWithWhereUniqueWithoutSuborgInput
  >;
  upsert?: Maybe<
    | RoleUpsertWithWhereUniqueWithoutSuborgInput[]
    | RoleUpsertWithWhereUniqueWithoutSuborgInput
  >;
  deleteMany?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  updateMany?: Maybe<
    RoleUpdateManyWithWhereNestedInput[] | RoleUpdateManyWithWhereNestedInput
  >;
}

export interface RoleUpdateWithWhereUniqueWithoutSuborgInput {
  where: RoleWhereUniqueInput;
  data: RoleUpdateWithoutSuborgDataInput;
}

export interface RoleUpdateWithoutSuborgDataInput {
  name?: Maybe<ROLENAME>;
  org?: Maybe<OrganizationUpdateOneWithoutOrgRolesInput>;
  group?: Maybe<GroupUpdateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubgroupRolesInput>;
  users?: Maybe<UserUpdateManyWithoutRolesInput>;
  educationprofiles?: Maybe<EducationProfileUpdateManyWithoutRolesInput>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
  subjectSubscriptions?: Maybe<
    SubjectSubscriptionUpdateManyWithoutSubscribedAsInput
  >;
}

export interface RoleUpsertWithWhereUniqueWithoutSuborgInput {
  where: RoleWhereUniqueInput;
  update: RoleUpdateWithoutSuborgDataInput;
  create: RoleCreateWithoutSuborgInput;
}

export interface SuborgUpsertWithWhereUniqueWithoutAuthorInput {
  where: SuborgWhereUniqueInput;
  update: SuborgUpdateWithoutAuthorDataInput;
  create: SuborgCreateWithoutAuthorInput;
}

export interface SuborgScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SuborgScalarWhereInput[] | SuborgScalarWhereInput>;
  OR?: Maybe<SuborgScalarWhereInput[] | SuborgScalarWhereInput>;
  NOT?: Maybe<SuborgScalarWhereInput[] | SuborgScalarWhereInput>;
}

export interface SuborgUpdateManyWithWhereNestedInput {
  where: SuborgScalarWhereInput;
  data: SuborgUpdateManyDataInput;
}

export interface SuborgUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutOrgInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutOrgDataInput;
  create: UserCreateWithoutOrgInput;
}

export interface RoleUpdateManyWithoutOrgInput {
  create?: Maybe<RoleCreateWithoutOrgInput[] | RoleCreateWithoutOrgInput>;
  delete?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  set?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  disconnect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  update?: Maybe<
    | RoleUpdateWithWhereUniqueWithoutOrgInput[]
    | RoleUpdateWithWhereUniqueWithoutOrgInput
  >;
  upsert?: Maybe<
    | RoleUpsertWithWhereUniqueWithoutOrgInput[]
    | RoleUpsertWithWhereUniqueWithoutOrgInput
  >;
  deleteMany?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  updateMany?: Maybe<
    RoleUpdateManyWithWhereNestedInput[] | RoleUpdateManyWithWhereNestedInput
  >;
}

export interface RoleUpdateWithWhereUniqueWithoutOrgInput {
  where: RoleWhereUniqueInput;
  data: RoleUpdateWithoutOrgDataInput;
}

export interface RoleUpdateWithoutOrgDataInput {
  name?: Maybe<ROLENAME>;
  suborg?: Maybe<SuborgUpdateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupUpdateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubgroupRolesInput>;
  users?: Maybe<UserUpdateManyWithoutRolesInput>;
  educationprofiles?: Maybe<EducationProfileUpdateManyWithoutRolesInput>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
  subjectSubscriptions?: Maybe<
    SubjectSubscriptionUpdateManyWithoutSubscribedAsInput
  >;
}

export interface RoleUpsertWithWhereUniqueWithoutOrgInput {
  where: RoleWhereUniqueInput;
  update: RoleUpdateWithoutOrgDataInput;
  create: RoleCreateWithoutOrgInput;
}

export interface OrganizationUpsertWithoutSuborgsInput {
  update: OrganizationUpdateWithoutSuborgsDataInput;
  create: OrganizationCreateWithoutSuborgsInput;
}

export interface SuborgUpsertWithoutUserGroupsInput {
  update: SuborgUpdateWithoutUserGroupsDataInput;
  create: SuborgCreateWithoutUserGroupsInput;
}

export interface GroupUpsertWithoutMembersInput {
  update: GroupUpdateWithoutMembersDataInput;
  create: GroupCreateWithoutMembersInput;
}

export interface GroupMemberUpsertWithWhereUniqueWithoutUseridInput {
  where: GroupMemberWhereUniqueInput;
  update: GroupMemberUpdateWithoutUseridDataInput;
  create: GroupMemberCreateWithoutUseridInput;
}

export interface UserUpsertWithWhereUniqueWithoutSuborgInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutSuborgDataInput;
  create: UserCreateWithoutSuborgInput;
}

export interface SuborgUpsertWithWhereUniqueWithoutOrgInput {
  where: SuborgWhereUniqueInput;
  update: SuborgUpdateWithoutOrgDataInput;
  create: SuborgCreateWithoutOrgInput;
}

export interface OrganizationUpsertWithoutAuthorInput {
  update: OrganizationUpdateWithoutAuthorDataInput;
  create: OrganizationCreateWithoutAuthorInput;
}

export interface UserUpsertWithoutMyprofilesInput {
  update: UserUpdateWithoutMyprofilesDataInput;
  create: UserCreateWithoutMyprofilesInput;
}

export interface ProfileUpsertWithoutPersonalProfiileInput {
  update: ProfileUpdateWithoutPersonalProfiileDataInput;
  create: ProfileCreateWithoutPersonalProfiileInput;
}

export interface PersonalProfileUpsertWithoutAddressesInput {
  update: PersonalProfileUpdateWithoutAddressesDataInput;
  create: PersonalProfileCreateWithoutAddressesInput;
}

export interface AddressUpdateManyMutationInput {
  adressline?: Maybe<String>;
  tehsil?: Maybe<String>;
  city?: Maybe<String>;
  district?: Maybe<String>;
  state?: Maybe<String>;
  pincode?: Maybe<String>;
}

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  author: UserCreateOneWithoutCommentsInput;
  post: PostCreateOneWithoutCommentsInput;
}

export interface CommentUpdateInput {
  text?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  post?: Maybe<PostUpdateOneRequiredWithoutCommentsInput>;
}

export interface CommentUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface ContentCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  number?: Maybe<Int>;
  fileInfo?: Maybe<Json>;
  type: String;
  url?: Maybe<String>;
  subject: SubjectCreateOneWithoutContentsInput;
  unit?: Maybe<UnitCreateOneWithoutContentsInput>;
  topic?: Maybe<TopicCreateOneWithoutContentsInput>;
  createdBy?: Maybe<UserCreateOneWithoutContentByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutContentUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
}

export interface ContentUpdateInput {
  name?: Maybe<String>;
  number?: Maybe<Int>;
  fileInfo?: Maybe<Json>;
  type?: Maybe<String>;
  url?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneRequiredWithoutContentsInput>;
  unit?: Maybe<UnitUpdateOneWithoutContentsInput>;
  topic?: Maybe<TopicUpdateOneWithoutContentsInput>;
  createdBy?: Maybe<UserUpdateOneWithoutContentByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutContentUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
}

export interface ContentUpdateManyMutationInput {
  name?: Maybe<String>;
  number?: Maybe<Int>;
  fileInfo?: Maybe<Json>;
  type?: Maybe<String>;
  url?: Maybe<String>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
}

export interface EducationProfileCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  profiileType?: Maybe<String>;
  educationLevel?: Maybe<String>;
  educationType?: Maybe<String>;
  specialization?: Maybe<String>;
  roles?: Maybe<RoleCreateManyWithoutEducationprofilesInput>;
  subjects?: Maybe<SubjectCreateManyWithoutEducationProfilesInput>;
  std?: Maybe<StdCreateManyWithoutEducationprofilesInput>;
  startedYear?: Maybe<DateTimeInput>;
  completedYear?: Maybe<DateTimeInput>;
  result?: Maybe<String>;
  status?: Maybe<String>;
  remark?: Maybe<String>;
  profileId: ProfileCreateOneWithoutEducationProfilesInput;
}

export interface EducationProfileUpdateInput {
  name?: Maybe<String>;
  profiileType?: Maybe<String>;
  educationLevel?: Maybe<String>;
  educationType?: Maybe<String>;
  specialization?: Maybe<String>;
  roles?: Maybe<RoleUpdateManyWithoutEducationprofilesInput>;
  subjects?: Maybe<SubjectUpdateManyWithoutEducationProfilesInput>;
  std?: Maybe<StdUpdateManyWithoutEducationprofilesInput>;
  startedYear?: Maybe<DateTimeInput>;
  completedYear?: Maybe<DateTimeInput>;
  result?: Maybe<String>;
  status?: Maybe<String>;
  remark?: Maybe<String>;
  profileId?: Maybe<ProfileUpdateOneRequiredWithoutEducationProfilesInput>;
}

export interface EducationProfileUpdateManyMutationInput {
  name?: Maybe<String>;
  profiileType?: Maybe<String>;
  educationLevel?: Maybe<String>;
  educationType?: Maybe<String>;
  specialization?: Maybe<String>;
  startedYear?: Maybe<DateTimeInput>;
  completedYear?: Maybe<DateTimeInput>;
  result?: Maybe<String>;
  status?: Maybe<String>;
  remark?: Maybe<String>;
}

export interface GroupCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  suborgid: SuborgCreateOneWithoutUserGroupsInput;
  subgroups?: Maybe<SubGroupCreateManyWithoutGroupidInput>;
  members?: Maybe<GroupMemberCreateManyWithoutMemberInput>;
  groupRoles?: Maybe<RoleCreateManyWithoutGroupInput>;
  subjects?: Maybe<SubjectCreateManyWithoutGroupInput>;
}

export interface GroupUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  suborgid?: Maybe<SuborgUpdateOneRequiredWithoutUserGroupsInput>;
  subgroups?: Maybe<SubGroupUpdateManyWithoutGroupidInput>;
  members?: Maybe<GroupMemberUpdateManyWithoutMemberInput>;
  groupRoles?: Maybe<RoleUpdateManyWithoutGroupInput>;
  subjects?: Maybe<SubjectUpdateManyWithoutGroupInput>;
}

export interface GroupUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface GroupMemberCreateInput {
  id?: Maybe<ID_Input>;
  userid: UserCreateOneWithoutGroupmembersInput;
  member: GroupCreateOneWithoutMembersInput;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface GroupMemberUpdateInput {
  userid?: Maybe<UserUpdateOneRequiredWithoutGroupmembersInput>;
  member?: Maybe<GroupUpdateOneRequiredWithoutMembersInput>;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface GroupMemberUpdateManyMutationInput {
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface MediumCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  subjects?: Maybe<SubjectCreateManyWithoutMediumInput>;
}

export interface SubjectCreateManyWithoutMediumInput {
  create?: Maybe<
    SubjectCreateWithoutMediumInput[] | SubjectCreateWithoutMediumInput
  >;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
}

export interface SubjectCreateWithoutMediumInput {
  id?: Maybe<ID_Input>;
  name: String;
  picture?: Maybe<String>;
  std: StdCreateOneWithoutSubjectsInput;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupCreateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileCreateManyWithoutSubjectsInput>;
  units?: Maybe<UnitCreateManyWithoutSubjectInput>;
  topic?: Maybe<TopicCreateManyWithoutSubjectInput>;
  contents?: Maybe<ContentCreateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserCreateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizCreateManyWithoutSubjectInput>;
}

export interface MediumUpdateInput {
  name?: Maybe<String>;
  subjects?: Maybe<SubjectUpdateManyWithoutMediumInput>;
}

export interface SubjectUpdateManyWithoutMediumInput {
  create?: Maybe<
    SubjectCreateWithoutMediumInput[] | SubjectCreateWithoutMediumInput
  >;
  delete?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  set?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  disconnect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  update?: Maybe<
    | SubjectUpdateWithWhereUniqueWithoutMediumInput[]
    | SubjectUpdateWithWhereUniqueWithoutMediumInput
  >;
  upsert?: Maybe<
    | SubjectUpsertWithWhereUniqueWithoutMediumInput[]
    | SubjectUpsertWithWhereUniqueWithoutMediumInput
  >;
  deleteMany?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
  updateMany?: Maybe<
    | SubjectUpdateManyWithWhereNestedInput[]
    | SubjectUpdateManyWithWhereNestedInput
  >;
}

export interface SubjectUpdateWithWhereUniqueWithoutMediumInput {
  where: SubjectWhereUniqueInput;
  data: SubjectUpdateWithoutMediumDataInput;
}

export interface SubjectUpdateWithoutMediumDataInput {
  name?: Maybe<String>;
  picture?: Maybe<String>;
  std?: Maybe<StdUpdateOneRequiredWithoutSubjectsInput>;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupUpdateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileUpdateManyWithoutSubjectsInput>;
  units?: Maybe<UnitUpdateManyWithoutSubjectInput>;
  topic?: Maybe<TopicUpdateManyWithoutSubjectInput>;
  contents?: Maybe<ContentUpdateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserUpdateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizUpdateManyWithoutSubjectInput>;
}

export interface SubjectUpsertWithWhereUniqueWithoutMediumInput {
  where: SubjectWhereUniqueInput;
  update: SubjectUpdateWithoutMediumDataInput;
  create: SubjectCreateWithoutMediumInput;
}

export interface MediumUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface OptionCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  color: Color;
  poll?: Maybe<PollCreateOneWithoutOptionsInput>;
  votes?: Maybe<VoteCreateManyWithoutOptionInput>;
}

export interface VoteCreateManyWithoutOptionInput {
  create?: Maybe<VoteCreateWithoutOptionInput[] | VoteCreateWithoutOptionInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface VoteCreateWithoutOptionInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutVotesInput>;
}

export interface UserCreateOneWithoutVotesInput {
  create?: Maybe<UserCreateWithoutVotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutVotesInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface OptionUpdateInput {
  name?: Maybe<String>;
  color?: Maybe<Color>;
  poll?: Maybe<PollUpdateOneWithoutOptionsInput>;
  votes?: Maybe<VoteUpdateManyWithoutOptionInput>;
}

export interface VoteUpdateManyWithoutOptionInput {
  create?: Maybe<VoteCreateWithoutOptionInput[] | VoteCreateWithoutOptionInput>;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueWithoutOptionInput[]
    | VoteUpdateWithWhereUniqueWithoutOptionInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueWithoutOptionInput[]
    | VoteUpsertWithWhereUniqueWithoutOptionInput
  >;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface VoteUpdateWithWhereUniqueWithoutOptionInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutOptionDataInput;
}

export interface VoteUpdateWithoutOptionDataInput {
  user?: Maybe<UserUpdateOneWithoutVotesInput>;
}

export interface UserUpdateOneWithoutVotesInput {
  create?: Maybe<UserCreateWithoutVotesInput>;
  update?: Maybe<UserUpdateWithoutVotesDataInput>;
  upsert?: Maybe<UserUpsertWithoutVotesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutVotesDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput;
  create: UserCreateWithoutVotesInput;
}

export interface VoteUpsertWithWhereUniqueWithoutOptionInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutOptionDataInput;
  create: VoteCreateWithoutOptionInput;
}

export interface OptionUpdateManyMutationInput {
  name?: Maybe<String>;
  color?: Maybe<Color>;
}

export interface OrganizationCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  logo?: Maybe<String>;
  color?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserCreateManyWithoutOrgInput>;
  suborgs?: Maybe<SuborgCreateManyWithoutOrgInput>;
  orgRoles?: Maybe<RoleCreateManyWithoutOrgInput>;
}

export interface OrganizationUpdateInput {
  name?: Maybe<String>;
  logo?: Maybe<String>;
  color?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateManyWithoutOrgInput>;
  suborgs?: Maybe<SuborgUpdateManyWithoutOrgInput>;
  orgRoles?: Maybe<RoleUpdateManyWithoutOrgInput>;
}

export interface OrganizationUpdateManyMutationInput {
  name?: Maybe<String>;
  logo?: Maybe<String>;
  color?: Maybe<String>;
  description?: Maybe<String>;
}

export interface PersonalProfileCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  avatar: String;
  mobile: String;
  isMobilePublished?: Maybe<Boolean>;
  addresses?: Maybe<AddressCreateManyWithoutPersonalProfileInput>;
  profileId: ProfileCreateOneWithoutPersonalProfiileInput;
}

export interface PersonalProfileUpdateInput {
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  mobile?: Maybe<String>;
  isMobilePublished?: Maybe<Boolean>;
  addresses?: Maybe<AddressUpdateManyWithoutPersonalProfileInput>;
  profileId?: Maybe<ProfileUpdateOneRequiredWithoutPersonalProfiileInput>;
}

export interface PersonalProfileUpdateManyMutationInput {
  name?: Maybe<String>;
  avatar?: Maybe<String>;
  mobile?: Maybe<String>;
  isMobilePublished?: Maybe<Boolean>;
}

export interface PollCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  options?: Maybe<OptionCreateManyWithoutPollInput>;
}

export interface OptionCreateManyWithoutPollInput {
  create?: Maybe<OptionCreateWithoutPollInput[] | OptionCreateWithoutPollInput>;
  connect?: Maybe<OptionWhereUniqueInput[] | OptionWhereUniqueInput>;
}

export interface OptionCreateWithoutPollInput {
  id?: Maybe<ID_Input>;
  name: String;
  color: Color;
  votes?: Maybe<VoteCreateManyWithoutOptionInput>;
}

export interface PollUpdateInput {
  title?: Maybe<String>;
  options?: Maybe<OptionUpdateManyWithoutPollInput>;
}

export interface OptionUpdateManyWithoutPollInput {
  create?: Maybe<OptionCreateWithoutPollInput[] | OptionCreateWithoutPollInput>;
  delete?: Maybe<OptionWhereUniqueInput[] | OptionWhereUniqueInput>;
  connect?: Maybe<OptionWhereUniqueInput[] | OptionWhereUniqueInput>;
  set?: Maybe<OptionWhereUniqueInput[] | OptionWhereUniqueInput>;
  disconnect?: Maybe<OptionWhereUniqueInput[] | OptionWhereUniqueInput>;
  update?: Maybe<
    | OptionUpdateWithWhereUniqueWithoutPollInput[]
    | OptionUpdateWithWhereUniqueWithoutPollInput
  >;
  upsert?: Maybe<
    | OptionUpsertWithWhereUniqueWithoutPollInput[]
    | OptionUpsertWithWhereUniqueWithoutPollInput
  >;
  deleteMany?: Maybe<OptionScalarWhereInput[] | OptionScalarWhereInput>;
  updateMany?: Maybe<
    | OptionUpdateManyWithWhereNestedInput[]
    | OptionUpdateManyWithWhereNestedInput
  >;
}

export interface OptionUpdateWithWhereUniqueWithoutPollInput {
  where: OptionWhereUniqueInput;
  data: OptionUpdateWithoutPollDataInput;
}

export interface OptionUpdateWithoutPollDataInput {
  name?: Maybe<String>;
  color?: Maybe<Color>;
  votes?: Maybe<VoteUpdateManyWithoutOptionInput>;
}

export interface OptionUpsertWithWhereUniqueWithoutPollInput {
  where: OptionWhereUniqueInput;
  update: OptionUpdateWithoutPollDataInput;
  create: OptionCreateWithoutPollInput;
}

export interface OptionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  color?: Maybe<Color>;
  color_not?: Maybe<Color>;
  color_in?: Maybe<Color[] | Color>;
  color_not_in?: Maybe<Color[] | Color>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OptionScalarWhereInput[] | OptionScalarWhereInput>;
  OR?: Maybe<OptionScalarWhereInput[] | OptionScalarWhereInput>;
  NOT?: Maybe<OptionScalarWhereInput[] | OptionScalarWhereInput>;
}

export interface OptionUpdateManyWithWhereNestedInput {
  where: OptionScalarWhereInput;
  data: OptionUpdateManyDataInput;
}

export interface OptionUpdateManyDataInput {
  name?: Maybe<String>;
  color?: Maybe<Color>;
}

export interface PollUpdateManyMutationInput {
  title?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  body: String;
  published: Boolean;
  author: UserCreateOneWithoutPostsInput;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
}

export interface PostUpdateInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  published?: Maybe<Boolean>;
  author?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
}

export interface PostUpdateManyMutationInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface ProfileCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  userId: UserCreateOneWithoutMyprofilesInput;
  EducationProfiles?: Maybe<EducationProfileCreateManyWithoutProfileIdInput>;
  personalProfiile?: Maybe<PersonalProfileCreateManyWithoutProfileIdInput>;
}

export interface ProfileUpdateInput {
  name?: Maybe<String>;
  userId?: Maybe<UserUpdateOneRequiredWithoutMyprofilesInput>;
  EducationProfiles?: Maybe<EducationProfileUpdateManyWithoutProfileIdInput>;
  personalProfiile?: Maybe<PersonalProfileUpdateManyWithoutProfileIdInput>;
}

export interface ProfileUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface QuestionCreateInput {
  id?: Maybe<ID_Input>;
  subject?: Maybe<SubjectCreateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitCreateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicCreateOneWithoutQuestionsInput>;
  quetype: String;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType: String;
  descriptionurl?: Maybe<String>;
  options: Json;
  createdBy?: Maybe<UserCreateOneWithoutQuestionCreatedByInput>;
  level: Int;
  updatedBy?: Maybe<UserCreateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizCreateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultCreateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultCreateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultCreateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultCreateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultCreateManyWithoutWrongInput>;
}

export interface QuestionUpdateInput {
  subject?: Maybe<SubjectUpdateOneWithoutQuestionsInput>;
  unit?: Maybe<UnitUpdateOneWithoutQuestionsInput>;
  topic?: Maybe<TopicUpdateOneWithoutQuestionsInput>;
  quetype?: Maybe<String>;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType?: Maybe<String>;
  descriptionurl?: Maybe<String>;
  options?: Maybe<Json>;
  createdBy?: Maybe<UserUpdateOneWithoutQuestionCreatedByInput>;
  level?: Maybe<Int>;
  updatedBy?: Maybe<UserUpdateOneWithoutQuestionUpdateddByInput>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  quiz?: Maybe<QuizUpdateManyWithoutQuestionsInput>;
  explaination?: Maybe<String>;
  results?: Maybe<ResultUpdateManyWithoutQuestionsInput>;
  atemptedResult?: Maybe<ResultUpdateManyWithoutAttemptedInput>;
  notattempted?: Maybe<ResultUpdateManyWithoutNotattemptedInput>;
  correct?: Maybe<ResultUpdateManyWithoutCorrectInput>;
  wrong?: Maybe<ResultUpdateManyWithoutWrongInput>;
}

export interface QuestionUpdateManyMutationInput {
  quetype?: Maybe<String>;
  categories?: Maybe<String>;
  title?: Maybe<String>;
  descriptionType?: Maybe<String>;
  descriptionurl?: Maybe<String>;
  options?: Maybe<Json>;
  level?: Maybe<Int>;
  plandate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  isReviewed?: Maybe<Boolean>;
  explainationType?: Maybe<String>;
  explaination?: Maybe<String>;
}

export interface QuizCreateInput {
  id?: Maybe<ID_Input>;
  quizName: String;
  quizType: String;
  subject?: Maybe<SubjectCreateOneWithoutQuizesInput>;
  unit?: Maybe<UnitCreateOneWithoutQuizsInput>;
  topic?: Maybe<TopicCreateOneWithoutQuizsInput>;
  questions?: Maybe<QuestionCreateManyWithoutQuizInput>;
  markingscheme?: Maybe<Json>;
  quizlevel?: Maybe<Int>;
  threshold?: Maybe<Json>;
  isForLevelPromotion?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  description?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  createdBy: UserCreateOneWithoutQuizCreatedByInput;
  weightage?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  validTo?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
  results?: Maybe<ResultCreateManyWithoutQuizInput>;
  courses?: Maybe<QuizCreateManyWithoutCoursesInput>;
}

export interface QuizUpdateInput {
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneWithoutQuizesInput>;
  unit?: Maybe<UnitUpdateOneWithoutQuizsInput>;
  topic?: Maybe<TopicUpdateOneWithoutQuizsInput>;
  questions?: Maybe<QuestionUpdateManyWithoutQuizInput>;
  markingscheme?: Maybe<Json>;
  quizlevel?: Maybe<Int>;
  threshold?: Maybe<Json>;
  isForLevelPromotion?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  description?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutQuizCreatedByInput>;
  weightage?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  validTo?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
  results?: Maybe<ResultUpdateManyWithoutQuizInput>;
  courses?: Maybe<QuizUpdateManyWithoutCoursesInput>;
}

export interface QuizUpdateManyMutationInput {
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  markingscheme?: Maybe<Json>;
  quizlevel?: Maybe<Int>;
  threshold?: Maybe<Json>;
  isForLevelPromotion?: Maybe<Boolean>;
  showExplaination?: Maybe<String>;
  showanswer?: Maybe<Boolean>;
  description?: Maybe<String>;
  allowedCorrection?: Maybe<Boolean>;
  duration?: Maybe<Int>;
  commentFromTeacher?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isApproved?: Maybe<Boolean>;
  weightage?: Maybe<Float>;
  totalmarks?: Maybe<Float>;
  validTo?: Maybe<DateTimeInput>;
  retryAllowed?: Maybe<Boolean>;
}

export interface ResultCreateInput {
  id?: Maybe<ID_Input>;
  quiz: QuizCreateOneWithoutResultsInput;
  quizName: String;
  quizType: String;
  questions?: Maybe<QuestionCreateManyWithoutResultsInput>;
  result: String;
  quizlevel: Int;
  score?: Maybe<Float>;
  attempted?: Maybe<QuestionCreateManyWithoutAtemptedResultInput>;
  notattempted?: Maybe<QuestionCreateManyWithoutNotattemptedInput>;
  correct?: Maybe<QuestionCreateManyWithoutCorrectInput>;
  wrong?: Maybe<QuestionCreateManyWithoutWrongInput>;
  achievement?: Maybe<String>;
  duration?: Maybe<Int>;
  attemptedDate: DateTimeInput;
  commentFromTeacher?: Maybe<String>;
  rank?: Maybe<Int>;
  userId: UserCreateOneWithoutResultInput;
}

export interface ResultUpdateInput {
  quiz?: Maybe<QuizUpdateOneRequiredWithoutResultsInput>;
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutResultsInput>;
  result?: Maybe<String>;
  quizlevel?: Maybe<Int>;
  score?: Maybe<Float>;
  attempted?: Maybe<QuestionUpdateManyWithoutAtemptedResultInput>;
  notattempted?: Maybe<QuestionUpdateManyWithoutNotattemptedInput>;
  correct?: Maybe<QuestionUpdateManyWithoutCorrectInput>;
  wrong?: Maybe<QuestionUpdateManyWithoutWrongInput>;
  achievement?: Maybe<String>;
  duration?: Maybe<Int>;
  attemptedDate?: Maybe<DateTimeInput>;
  commentFromTeacher?: Maybe<String>;
  rank?: Maybe<Int>;
  userId?: Maybe<UserUpdateOneRequiredWithoutResultInput>;
}

export interface ResultUpdateManyMutationInput {
  quizName?: Maybe<String>;
  quizType?: Maybe<String>;
  result?: Maybe<String>;
  quizlevel?: Maybe<Int>;
  score?: Maybe<Float>;
  achievement?: Maybe<String>;
  duration?: Maybe<Int>;
  attemptedDate?: Maybe<DateTimeInput>;
  commentFromTeacher?: Maybe<String>;
  rank?: Maybe<Int>;
}

export interface RoleCreateInput {
  id?: Maybe<ID_Input>;
  name: ROLENAME;
  org?: Maybe<OrganizationCreateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgCreateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupCreateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubgroupRolesInput>;
  users?: Maybe<UserCreateManyWithoutRolesInput>;
  educationprofiles?: Maybe<EducationProfileCreateManyWithoutRolesInput>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
  subjectSubscriptions?: Maybe<
    SubjectSubscriptionCreateManyWithoutSubscribedAsInput
  >;
}

export interface RoleUpdateInput {
  name?: Maybe<ROLENAME>;
  org?: Maybe<OrganizationUpdateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgUpdateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupUpdateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubgroupRolesInput>;
  users?: Maybe<UserUpdateManyWithoutRolesInput>;
  educationprofiles?: Maybe<EducationProfileUpdateManyWithoutRolesInput>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
  subjectSubscriptions?: Maybe<
    SubjectSubscriptionUpdateManyWithoutSubscribedAsInput
  >;
}

export interface RoleUpdateManyMutationInput {
  name?: Maybe<ROLENAME>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
}

export interface RoleMemberCreateInput {
  id?: Maybe<ID_Input>;
  userid: UserCreateOneInput;
  role: RoleCreateOneInput;
  status?: Maybe<RoleStatus>;
  description?: Maybe<String>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileCreateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectCreateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectCreateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitCreateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitCreateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicCreateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicCreateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentCreateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentCreateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionCreateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionCreateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizCreateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  result?: Maybe<ResultCreateManyWithoutUserIdInput>;
}

export interface RoleCreateOneInput {
  create?: Maybe<RoleCreateInput>;
  connect?: Maybe<RoleWhereUniqueInput>;
}

export interface RoleMemberUpdateInput {
  userid?: Maybe<UserUpdateOneRequiredInput>;
  role?: Maybe<RoleUpdateOneRequiredInput>;
  status?: Maybe<RoleStatus>;
  description?: Maybe<String>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface RoleUpdateOneRequiredInput {
  create?: Maybe<RoleCreateInput>;
  update?: Maybe<RoleUpdateDataInput>;
  upsert?: Maybe<RoleUpsertNestedInput>;
  connect?: Maybe<RoleWhereUniqueInput>;
}

export interface RoleUpdateDataInput {
  name?: Maybe<ROLENAME>;
  org?: Maybe<OrganizationUpdateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgUpdateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupUpdateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubgroupRolesInput>;
  users?: Maybe<UserUpdateManyWithoutRolesInput>;
  educationprofiles?: Maybe<EducationProfileUpdateManyWithoutRolesInput>;
  description?: Maybe<String>;
  status?: Maybe<String>;
  state?: Maybe<String>;
  subjectSubscriptions?: Maybe<
    SubjectSubscriptionUpdateManyWithoutSubscribedAsInput
  >;
}

export interface RoleUpsertNestedInput {
  update: RoleUpdateDataInput;
  create: RoleCreateInput;
}

export interface RoleMemberUpdateManyMutationInput {
  status?: Maybe<RoleStatus>;
  description?: Maybe<String>;
}

export interface StdCreateInput {
  id?: Maybe<ID_Input>;
  gradename: GRADENAME;
  category: String;
  branch?: Maybe<String>;
  year?: Maybe<String>;
  educationprofiles?: Maybe<EducationProfileCreateManyWithoutStdInput>;
  isPublished?: Maybe<Boolean>;
  subjects?: Maybe<SubjectCreateManyWithoutStdInput>;
}

export interface StdUpdateInput {
  gradename?: Maybe<GRADENAME>;
  category?: Maybe<String>;
  branch?: Maybe<String>;
  year?: Maybe<String>;
  educationprofiles?: Maybe<EducationProfileUpdateManyWithoutStdInput>;
  isPublished?: Maybe<Boolean>;
  subjects?: Maybe<SubjectUpdateManyWithoutStdInput>;
}

export interface StdUpdateManyMutationInput {
  gradename?: Maybe<GRADENAME>;
  category?: Maybe<String>;
  branch?: Maybe<String>;
  year?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
}

export interface SubGroupCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  groupid: GroupCreateOneWithoutSubgroupsInput;
  members?: Maybe<SubGroupMemberCreateManyWithoutMemberInput>;
  subgroupRoles?: Maybe<RoleCreateManyWithoutSubgroupInput>;
  subjects?: Maybe<SubjectCreateManyWithoutSubgroupInput>;
}

export interface SubGroupUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  groupid?: Maybe<GroupUpdateOneRequiredWithoutSubgroupsInput>;
  members?: Maybe<SubGroupMemberUpdateManyWithoutMemberInput>;
  subgroupRoles?: Maybe<RoleUpdateManyWithoutSubgroupInput>;
  subjects?: Maybe<SubjectUpdateManyWithoutSubgroupInput>;
}

export interface SubGroupUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface SubGroupMemberCreateInput {
  id?: Maybe<ID_Input>;
  userid: UserCreateOneWithoutSubgroupmembersInput;
  member: SubGroupCreateOneWithoutMembersInput;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface SubGroupMemberUpdateInput {
  userid?: Maybe<UserUpdateOneRequiredWithoutSubgroupmembersInput>;
  member?: Maybe<SubGroupUpdateOneRequiredWithoutMembersInput>;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface SubGroupMemberUpdateManyMutationInput {
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface SubjectUpdateInput {
  name?: Maybe<String>;
  picture?: Maybe<String>;
  medium?: Maybe<MediumUpdateOneWithoutSubjectsInput>;
  std?: Maybe<StdUpdateOneRequiredWithoutSubjectsInput>;
  board?: Maybe<String>;
  category?: Maybe<String>;
  group?: Maybe<GroupUpdateOneWithoutSubjectsInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubjectsInput>;
  educationProfiles?: Maybe<EducationProfileUpdateManyWithoutSubjectsInput>;
  units?: Maybe<UnitUpdateManyWithoutSubjectInput>;
  topic?: Maybe<TopicUpdateManyWithoutSubjectInput>;
  contents?: Maybe<ContentUpdateManyWithoutSubjectInput>;
  createdBy?: Maybe<UserUpdateOneWithoutSubjectByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutSubjectUpddateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutSubjectInput>;
  quizes?: Maybe<QuizUpdateManyWithoutSubjectInput>;
}

export interface SubjectUpdateManyMutationInput {
  name?: Maybe<String>;
  picture?: Maybe<String>;
  board?: Maybe<String>;
  category?: Maybe<String>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  description?: Maybe<String>;
}

export interface SubjectSubscriptionCreateInput {
  id?: Maybe<ID_Input>;
  subsType?: Maybe<String>;
  mySubjects?: Maybe<SubjectCreateManyInput>;
  userid: UserCreateOneWithoutSubjectSubscriptionInput;
  subscribedAs: RoleCreateOneWithoutSubjectSubscriptionsInput;
}

export interface SubjectSubscriptionUpdateInput {
  subsType?: Maybe<String>;
  mySubjects?: Maybe<SubjectUpdateManyInput>;
  userid?: Maybe<UserUpdateOneRequiredWithoutSubjectSubscriptionInput>;
  subscribedAs?: Maybe<RoleUpdateOneRequiredWithoutSubjectSubscriptionsInput>;
}

export interface SubjectSubscriptionUpdateManyMutationInput {
  subsType?: Maybe<String>;
}

export interface SuborgCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  author?: Maybe<UserCreateManyWithoutSuborgInput>;
  org: OrganizationCreateOneWithoutSuborgsInput;
  userGroups?: Maybe<GroupCreateManyWithoutSuborgidInput>;
  suborgRoles?: Maybe<RoleCreateManyWithoutSuborgInput>;
}

export interface SuborgUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateManyWithoutSuborgInput>;
  org?: Maybe<OrganizationUpdateOneRequiredWithoutSuborgsInput>;
  userGroups?: Maybe<GroupUpdateManyWithoutSuborgidInput>;
  suborgRoles?: Maybe<RoleUpdateManyWithoutSuborgInput>;
}

export interface SuborgUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface TopicCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  subject?: Maybe<SubjectCreateOneWithoutTopicInput>;
  unit?: Maybe<UnitCreateOneWithoutTopicsInput>;
  contents?: Maybe<ContentCreateManyWithoutTopicInput>;
  createdBy?: Maybe<UserCreateOneWithoutTopicByMeInput>;
  updateBy?: Maybe<UserCreateOneWithoutTopicUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutTopicInput>;
  quizs?: Maybe<QuizCreateManyWithoutTopicInput>;
}

export interface TopicUpdateInput {
  name?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneWithoutTopicInput>;
  unit?: Maybe<UnitUpdateOneWithoutTopicsInput>;
  contents?: Maybe<ContentUpdateManyWithoutTopicInput>;
  createdBy?: Maybe<UserUpdateOneWithoutTopicByMeInput>;
  updateBy?: Maybe<UserUpdateOneWithoutTopicUpdateByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutTopicInput>;
  quizs?: Maybe<QuizUpdateManyWithoutTopicInput>;
}

export interface TopicUpdateManyMutationInput {
  name?: Maybe<String>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
}

export interface UnitCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  subject: SubjectCreateOneWithoutUnitsInput;
  topics?: Maybe<TopicCreateManyWithoutUnitInput>;
  contents?: Maybe<ContentCreateManyWithoutUnitInput>;
  createdBy?: Maybe<UserCreateOneWithoutUnitByMeInput>;
  updateBy?: Maybe<UserCreateManyWithoutUnitUpdatedByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: Maybe<String>;
  questions?: Maybe<QuestionCreateManyWithoutUnitInput>;
  quizs?: Maybe<QuizCreateManyWithoutUnitInput>;
}

export interface UnitUpdateInput {
  name?: Maybe<String>;
  subject?: Maybe<SubjectUpdateOneRequiredWithoutUnitsInput>;
  topics?: Maybe<TopicUpdateManyWithoutUnitInput>;
  contents?: Maybe<ContentUpdateManyWithoutUnitInput>;
  createdBy?: Maybe<UserUpdateOneWithoutUnitByMeInput>;
  updateBy?: Maybe<UserUpdateManyWithoutUnitUpdatedByMeInput>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
  questions?: Maybe<QuestionUpdateManyWithoutUnitInput>;
  quizs?: Maybe<QuizUpdateManyWithoutUnitInput>;
}

export interface UnitUpdateManyMutationInput {
  name?: Maybe<String>;
  plantDate?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  state?: Maybe<String>;
  status?: Maybe<String>;
  available?: Maybe<String>;
}

export interface UserUpdateInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  subgroupmembers?: Maybe<SubGroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  myprofiles?: Maybe<ProfileUpdateManyWithoutUserIdInput>;
  subjectSubscription?: Maybe<SubjectSubscriptionUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
  subjectByMe?: Maybe<SubjectUpdateManyWithoutCreatedByInput>;
  subjectUpddateByMe?: Maybe<SubjectUpdateManyWithoutUpdateByInput>;
  unitByMe?: Maybe<UnitUpdateManyWithoutCreatedByInput>;
  unitUpdatedByMe?: Maybe<UnitUpdateManyWithoutUpdateByInput>;
  topicByMe?: Maybe<TopicUpdateManyWithoutCreatedByInput>;
  topicUpdateByMe?: Maybe<TopicUpdateManyWithoutUpdateByInput>;
  contentByMe?: Maybe<ContentUpdateManyWithoutCreatedByInput>;
  contentUpdateByMe?: Maybe<ContentUpdateManyWithoutUpdateByInput>;
  questionCreatedBy?: Maybe<QuestionUpdateManyWithoutCreatedByInput>;
  questionUpdateddBy?: Maybe<QuestionUpdateManyWithoutUpdatedByInput>;
  quizCreatedBy?: Maybe<QuizUpdateManyWithoutCreatedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  result?: Maybe<ResultUpdateManyWithoutUserIdInput>;
}

export interface UserUpdateManyMutationInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  createdBy?: Maybe<String>;
}

export interface VoteCreateInput {
  id?: Maybe<ID_Input>;
  option?: Maybe<OptionCreateOneWithoutVotesInput>;
  user?: Maybe<UserCreateOneWithoutVotesInput>;
}

export interface VoteUpdateInput {
  option?: Maybe<OptionUpdateOneWithoutVotesInput>;
  user?: Maybe<UserUpdateOneWithoutVotesInput>;
}

export interface AddressSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AddressWhereInput>;
  AND?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
  OR?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
  NOT?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface ContentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContentWhereInput>;
  AND?: Maybe<ContentSubscriptionWhereInput[] | ContentSubscriptionWhereInput>;
  OR?: Maybe<ContentSubscriptionWhereInput[] | ContentSubscriptionWhereInput>;
  NOT?: Maybe<ContentSubscriptionWhereInput[] | ContentSubscriptionWhereInput>;
}

export interface EducationProfileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EducationProfileWhereInput>;
  AND?: Maybe<
    | EducationProfileSubscriptionWhereInput[]
    | EducationProfileSubscriptionWhereInput
  >;
  OR?: Maybe<
    | EducationProfileSubscriptionWhereInput[]
    | EducationProfileSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | EducationProfileSubscriptionWhereInput[]
    | EducationProfileSubscriptionWhereInput
  >;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupWhereInput>;
  AND?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  OR?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  NOT?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
}

export interface GroupMemberSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupMemberWhereInput>;
  AND?: Maybe<
    GroupMemberSubscriptionWhereInput[] | GroupMemberSubscriptionWhereInput
  >;
  OR?: Maybe<
    GroupMemberSubscriptionWhereInput[] | GroupMemberSubscriptionWhereInput
  >;
  NOT?: Maybe<
    GroupMemberSubscriptionWhereInput[] | GroupMemberSubscriptionWhereInput
  >;
}

export interface MediumSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MediumWhereInput>;
  AND?: Maybe<MediumSubscriptionWhereInput[] | MediumSubscriptionWhereInput>;
  OR?: Maybe<MediumSubscriptionWhereInput[] | MediumSubscriptionWhereInput>;
  NOT?: Maybe<MediumSubscriptionWhereInput[] | MediumSubscriptionWhereInput>;
}

export interface OptionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OptionWhereInput>;
  AND?: Maybe<OptionSubscriptionWhereInput[] | OptionSubscriptionWhereInput>;
  OR?: Maybe<OptionSubscriptionWhereInput[] | OptionSubscriptionWhereInput>;
  NOT?: Maybe<OptionSubscriptionWhereInput[] | OptionSubscriptionWhereInput>;
}

export interface OrganizationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrganizationWhereInput>;
  AND?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
  OR?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
}

export interface PersonalProfileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PersonalProfileWhereInput>;
  AND?: Maybe<
    | PersonalProfileSubscriptionWhereInput[]
    | PersonalProfileSubscriptionWhereInput
  >;
  OR?: Maybe<
    | PersonalProfileSubscriptionWhereInput[]
    | PersonalProfileSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | PersonalProfileSubscriptionWhereInput[]
    | PersonalProfileSubscriptionWhereInput
  >;
}

export interface PollSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PollWhereInput>;
  AND?: Maybe<PollSubscriptionWhereInput[] | PollSubscriptionWhereInput>;
  OR?: Maybe<PollSubscriptionWhereInput[] | PollSubscriptionWhereInput>;
  NOT?: Maybe<PollSubscriptionWhereInput[] | PollSubscriptionWhereInput>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface ProfileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProfileWhereInput>;
  AND?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
  OR?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
  NOT?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
}

export interface QuestionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuestionWhereInput>;
  AND?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
  OR?: Maybe<QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput>;
  NOT?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
}

export interface QuizSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuizWhereInput>;
  AND?: Maybe<QuizSubscriptionWhereInput[] | QuizSubscriptionWhereInput>;
  OR?: Maybe<QuizSubscriptionWhereInput[] | QuizSubscriptionWhereInput>;
  NOT?: Maybe<QuizSubscriptionWhereInput[] | QuizSubscriptionWhereInput>;
}

export interface ResultSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ResultWhereInput>;
  AND?: Maybe<ResultSubscriptionWhereInput[] | ResultSubscriptionWhereInput>;
  OR?: Maybe<ResultSubscriptionWhereInput[] | ResultSubscriptionWhereInput>;
  NOT?: Maybe<ResultSubscriptionWhereInput[] | ResultSubscriptionWhereInput>;
}

export interface RoleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoleWhereInput>;
  AND?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  OR?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  NOT?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
}

export interface RoleMemberSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoleMemberWhereInput>;
  AND?: Maybe<
    RoleMemberSubscriptionWhereInput[] | RoleMemberSubscriptionWhereInput
  >;
  OR?: Maybe<
    RoleMemberSubscriptionWhereInput[] | RoleMemberSubscriptionWhereInput
  >;
  NOT?: Maybe<
    RoleMemberSubscriptionWhereInput[] | RoleMemberSubscriptionWhereInput
  >;
}

export interface StdSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StdWhereInput>;
  AND?: Maybe<StdSubscriptionWhereInput[] | StdSubscriptionWhereInput>;
  OR?: Maybe<StdSubscriptionWhereInput[] | StdSubscriptionWhereInput>;
  NOT?: Maybe<StdSubscriptionWhereInput[] | StdSubscriptionWhereInput>;
}

export interface SubGroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SubGroupWhereInput>;
  AND?: Maybe<
    SubGroupSubscriptionWhereInput[] | SubGroupSubscriptionWhereInput
  >;
  OR?: Maybe<SubGroupSubscriptionWhereInput[] | SubGroupSubscriptionWhereInput>;
  NOT?: Maybe<
    SubGroupSubscriptionWhereInput[] | SubGroupSubscriptionWhereInput
  >;
}

export interface SubGroupMemberSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SubGroupMemberWhereInput>;
  AND?: Maybe<
    | SubGroupMemberSubscriptionWhereInput[]
    | SubGroupMemberSubscriptionWhereInput
  >;
  OR?: Maybe<
    | SubGroupMemberSubscriptionWhereInput[]
    | SubGroupMemberSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | SubGroupMemberSubscriptionWhereInput[]
    | SubGroupMemberSubscriptionWhereInput
  >;
}

export interface SubjectSubscriptionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SubjectSubscriptionWhereInput>;
  AND?: Maybe<
    | SubjectSubscriptionSubscriptionWhereInput[]
    | SubjectSubscriptionSubscriptionWhereInput
  >;
  OR?: Maybe<
    | SubjectSubscriptionSubscriptionWhereInput[]
    | SubjectSubscriptionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | SubjectSubscriptionSubscriptionWhereInput[]
    | SubjectSubscriptionSubscriptionWhereInput
  >;
}

export interface SuborgSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SuborgWhereInput>;
  AND?: Maybe<SuborgSubscriptionWhereInput[] | SuborgSubscriptionWhereInput>;
  OR?: Maybe<SuborgSubscriptionWhereInput[] | SuborgSubscriptionWhereInput>;
  NOT?: Maybe<SuborgSubscriptionWhereInput[] | SuborgSubscriptionWhereInput>;
}

export interface TopicSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TopicWhereInput>;
  AND?: Maybe<TopicSubscriptionWhereInput[] | TopicSubscriptionWhereInput>;
  OR?: Maybe<TopicSubscriptionWhereInput[] | TopicSubscriptionWhereInput>;
  NOT?: Maybe<TopicSubscriptionWhereInput[] | TopicSubscriptionWhereInput>;
}

export interface UnitSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UnitWhereInput>;
  AND?: Maybe<UnitSubscriptionWhereInput[] | UnitSubscriptionWhereInput>;
  OR?: Maybe<UnitSubscriptionWhereInput[] | UnitSubscriptionWhereInput>;
  NOT?: Maybe<UnitSubscriptionWhereInput[] | UnitSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface VoteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VoteWhereInput>;
  AND?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  OR?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  NOT?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Address {
  id: ID_Output;
  adressline: String;
  tehsil: String;
  city: String;
  district: String;
  state: String;
  pincode: String;
}

export interface AddressPromise extends Promise<Address>, Fragmentable {
  id: () => Promise<ID_Output>;
  adressline: () => Promise<String>;
  tehsil: () => Promise<String>;
  city: () => Promise<String>;
  district: () => Promise<String>;
  state: () => Promise<String>;
  pincode: () => Promise<String>;
  personalProfile: <T = PersonalProfilePromise>() => T;
}

export interface AddressSubscription
  extends Promise<AsyncIterator<Address>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  adressline: () => Promise<AsyncIterator<String>>;
  tehsil: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  district: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  pincode: () => Promise<AsyncIterator<String>>;
  personalProfile: <T = PersonalProfileSubscription>() => T;
}

export interface AddressNullablePromise
  extends Promise<Address | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  adressline: () => Promise<String>;
  tehsil: () => Promise<String>;
  city: () => Promise<String>;
  district: () => Promise<String>;
  state: () => Promise<String>;
  pincode: () => Promise<String>;
  personalProfile: <T = PersonalProfilePromise>() => T;
}

export interface PersonalProfile {
  id: ID_Output;
  name: String;
  avatar: String;
  mobile: String;
  isMobilePublished?: Boolean;
}

export interface PersonalProfilePromise
  extends Promise<PersonalProfile>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  mobile: () => Promise<String>;
  isMobilePublished: () => Promise<Boolean>;
  addresses: <T = FragmentableArray<Address>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  profileId: <T = ProfilePromise>() => T;
}

export interface PersonalProfileSubscription
  extends Promise<AsyncIterator<PersonalProfile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  mobile: () => Promise<AsyncIterator<String>>;
  isMobilePublished: () => Promise<AsyncIterator<Boolean>>;
  addresses: <T = Promise<AsyncIterator<AddressSubscription>>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  profileId: <T = ProfileSubscription>() => T;
}

export interface PersonalProfileNullablePromise
  extends Promise<PersonalProfile | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  mobile: () => Promise<String>;
  isMobilePublished: () => Promise<Boolean>;
  addresses: <T = FragmentableArray<Address>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  profileId: <T = ProfilePromise>() => T;
}

export interface Profile {
  id: ID_Output;
  name: String;
}

export interface ProfilePromise extends Promise<Profile>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  userId: <T = UserPromise>() => T;
  EducationProfiles: <T = FragmentableArray<EducationProfile>>(args?: {
    where?: EducationProfileWhereInput;
    orderBy?: EducationProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  personalProfiile: <T = FragmentableArray<PersonalProfile>>(args?: {
    where?: PersonalProfileWhereInput;
    orderBy?: PersonalProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProfileSubscription
  extends Promise<AsyncIterator<Profile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  userId: <T = UserSubscription>() => T;
  EducationProfiles: <
    T = Promise<AsyncIterator<EducationProfileSubscription>>
  >(args?: {
    where?: EducationProfileWhereInput;
    orderBy?: EducationProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  personalProfiile: <
    T = Promise<AsyncIterator<PersonalProfileSubscription>>
  >(args?: {
    where?: PersonalProfileWhereInput;
    orderBy?: PersonalProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProfileNullablePromise
  extends Promise<Profile | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  userId: <T = UserPromise>() => T;
  EducationProfiles: <T = FragmentableArray<EducationProfile>>(args?: {
    where?: EducationProfileWhereInput;
    orderBy?: EducationProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  personalProfiile: <T = FragmentableArray<PersonalProfile>>(args?: {
    where?: PersonalProfileWhereInput;
    orderBy?: PersonalProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  createdBy?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  org: <T = OrganizationPromise>() => T;
  suborg: <T = FragmentableArray<Suborg>>(args?: {
    where?: SuborgWhereInput;
    orderBy?: SuborgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groupmembers: <T = FragmentableArray<GroupMember>>(args?: {
    where?: GroupMemberWhereInput;
    orderBy?: GroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subgroupmembers: <T = FragmentableArray<SubGroupMember>>(args?: {
    where?: SubGroupMemberWhereInput;
    orderBy?: SubGroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myprofiles: <T = FragmentableArray<Profile>>(args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjectSubscription: <T = FragmentableArray<SubjectSubscription>>(args?: {
    where?: SubjectSubscriptionWhereInput;
    orderBy?: SubjectSubscriptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: () => Promise<String>;
  subjectByMe: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjectUpddateByMe: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  unitByMe: <T = FragmentableArray<Unit>>(args?: {
    where?: UnitWhereInput;
    orderBy?: UnitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  unitUpdatedByMe: <T = FragmentableArray<Unit>>(args?: {
    where?: UnitWhereInput;
    orderBy?: UnitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicByMe: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicUpdateByMe: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  contentByMe: <T = FragmentableArray<Content>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  contentUpdateByMe: <T = FragmentableArray<Content>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  questionCreatedBy: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  questionUpdateddBy: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  quizCreatedBy: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  result: <T = FragmentableArray<Result>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  org: <T = OrganizationSubscription>() => T;
  suborg: <T = Promise<AsyncIterator<SuborgSubscription>>>(args?: {
    where?: SuborgWhereInput;
    orderBy?: SuborgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groupmembers: <T = Promise<AsyncIterator<GroupMemberSubscription>>>(args?: {
    where?: GroupMemberWhereInput;
    orderBy?: GroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subgroupmembers: <
    T = Promise<AsyncIterator<SubGroupMemberSubscription>>
  >(args?: {
    where?: SubGroupMemberWhereInput;
    orderBy?: SubGroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: <T = Promise<AsyncIterator<RoleSubscription>>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myprofiles: <T = Promise<AsyncIterator<ProfileSubscription>>>(args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjectSubscription: <
    T = Promise<AsyncIterator<SubjectSubscriptionSubscription>>
  >(args?: {
    where?: SubjectSubscriptionWhereInput;
    orderBy?: SubjectSubscriptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: () => Promise<AsyncIterator<String>>;
  subjectByMe: <T = Promise<AsyncIterator<SubjectSubscription>>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjectUpddateByMe: <T = Promise<AsyncIterator<SubjectSubscription>>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  unitByMe: <T = Promise<AsyncIterator<UnitSubscription>>>(args?: {
    where?: UnitWhereInput;
    orderBy?: UnitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  unitUpdatedByMe: <T = Promise<AsyncIterator<UnitSubscription>>>(args?: {
    where?: UnitWhereInput;
    orderBy?: UnitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicByMe: <T = Promise<AsyncIterator<TopicSubscription>>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicUpdateByMe: <T = Promise<AsyncIterator<TopicSubscription>>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  contentByMe: <T = Promise<AsyncIterator<ContentSubscription>>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  contentUpdateByMe: <T = Promise<AsyncIterator<ContentSubscription>>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  questionCreatedBy: <T = Promise<AsyncIterator<QuestionSubscription>>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  questionUpdateddBy: <
    T = Promise<AsyncIterator<QuestionSubscription>>
  >(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  quizCreatedBy: <T = Promise<AsyncIterator<QuizSubscription>>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  result: <T = Promise<AsyncIterator<ResultSubscription>>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  org: <T = OrganizationPromise>() => T;
  suborg: <T = FragmentableArray<Suborg>>(args?: {
    where?: SuborgWhereInput;
    orderBy?: SuborgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groupmembers: <T = FragmentableArray<GroupMember>>(args?: {
    where?: GroupMemberWhereInput;
    orderBy?: GroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subgroupmembers: <T = FragmentableArray<SubGroupMember>>(args?: {
    where?: SubGroupMemberWhereInput;
    orderBy?: SubGroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myprofiles: <T = FragmentableArray<Profile>>(args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjectSubscription: <T = FragmentableArray<SubjectSubscription>>(args?: {
    where?: SubjectSubscriptionWhereInput;
    orderBy?: SubjectSubscriptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: () => Promise<String>;
  subjectByMe: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjectUpddateByMe: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  unitByMe: <T = FragmentableArray<Unit>>(args?: {
    where?: UnitWhereInput;
    orderBy?: UnitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  unitUpdatedByMe: <T = FragmentableArray<Unit>>(args?: {
    where?: UnitWhereInput;
    orderBy?: UnitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicByMe: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicUpdateByMe: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  contentByMe: <T = FragmentableArray<Content>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  contentUpdateByMe: <T = FragmentableArray<Content>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  questionCreatedBy: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  questionUpdateddBy: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  quizCreatedBy: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  result: <T = FragmentableArray<Result>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Organization {
  id: ID_Output;
  name: String;
  logo?: String;
  color?: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface OrganizationPromise
  extends Promise<Organization>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  logo: () => Promise<String>;
  color: () => Promise<String>;
  description: () => Promise<String>;
  author: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  suborgs: <T = FragmentableArray<Suborg>>(args?: {
    where?: SuborgWhereInput;
    orderBy?: SuborgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  orgRoles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface OrganizationSubscription
  extends Promise<AsyncIterator<Organization>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  logo: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  author: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  suborgs: <T = Promise<AsyncIterator<SuborgSubscription>>>(args?: {
    where?: SuborgWhereInput;
    orderBy?: SuborgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  orgRoles: <T = Promise<AsyncIterator<RoleSubscription>>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrganizationNullablePromise
  extends Promise<Organization | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  logo: () => Promise<String>;
  color: () => Promise<String>;
  description: () => Promise<String>;
  author: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  suborgs: <T = FragmentableArray<Suborg>>(args?: {
    where?: SuborgWhereInput;
    orderBy?: SuborgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  orgRoles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Suborg {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface SuborgPromise extends Promise<Suborg>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  author: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  org: <T = OrganizationPromise>() => T;
  userGroups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  suborgRoles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SuborgSubscription
  extends Promise<AsyncIterator<Suborg>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  author: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  org: <T = OrganizationSubscription>() => T;
  userGroups: <T = Promise<AsyncIterator<GroupSubscription>>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  suborgRoles: <T = Promise<AsyncIterator<RoleSubscription>>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SuborgNullablePromise
  extends Promise<Suborg | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  author: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  org: <T = OrganizationPromise>() => T;
  userGroups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  suborgRoles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Group {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  suborgid: <T = SuborgPromise>() => T;
  subgroups: <T = FragmentableArray<SubGroup>>(args?: {
    where?: SubGroupWhereInput;
    orderBy?: SubGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  members: <T = FragmentableArray<GroupMember>>(args?: {
    where?: GroupMemberWhereInput;
    orderBy?: GroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groupRoles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjects: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  suborgid: <T = SuborgSubscription>() => T;
  subgroups: <T = Promise<AsyncIterator<SubGroupSubscription>>>(args?: {
    where?: SubGroupWhereInput;
    orderBy?: SubGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  members: <T = Promise<AsyncIterator<GroupMemberSubscription>>>(args?: {
    where?: GroupMemberWhereInput;
    orderBy?: GroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groupRoles: <T = Promise<AsyncIterator<RoleSubscription>>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjects: <T = Promise<AsyncIterator<SubjectSubscription>>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GroupNullablePromise
  extends Promise<Group | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  suborgid: <T = SuborgPromise>() => T;
  subgroups: <T = FragmentableArray<SubGroup>>(args?: {
    where?: SubGroupWhereInput;
    orderBy?: SubGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  members: <T = FragmentableArray<GroupMember>>(args?: {
    where?: GroupMemberWhereInput;
    orderBy?: GroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groupRoles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjects: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SubGroup {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface SubGroupPromise extends Promise<SubGroup>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  groupid: <T = GroupPromise>() => T;
  members: <T = FragmentableArray<SubGroupMember>>(args?: {
    where?: SubGroupMemberWhereInput;
    orderBy?: SubGroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subgroupRoles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjects: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SubGroupSubscription
  extends Promise<AsyncIterator<SubGroup>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  groupid: <T = GroupSubscription>() => T;
  members: <T = Promise<AsyncIterator<SubGroupMemberSubscription>>>(args?: {
    where?: SubGroupMemberWhereInput;
    orderBy?: SubGroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subgroupRoles: <T = Promise<AsyncIterator<RoleSubscription>>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjects: <T = Promise<AsyncIterator<SubjectSubscription>>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SubGroupNullablePromise
  extends Promise<SubGroup | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  groupid: <T = GroupPromise>() => T;
  members: <T = FragmentableArray<SubGroupMember>>(args?: {
    where?: SubGroupMemberWhereInput;
    orderBy?: SubGroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subgroupRoles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjects: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SubGroupMember {
  id: ID_Output;
  status?: MemberStatus;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface SubGroupMemberPromise
  extends Promise<SubGroupMember>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userid: <T = UserPromise>() => T;
  member: <T = SubGroupPromise>() => T;
  status: () => Promise<MemberStatus>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SubGroupMemberSubscription
  extends Promise<AsyncIterator<SubGroupMember>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userid: <T = UserSubscription>() => T;
  member: <T = SubGroupSubscription>() => T;
  status: () => Promise<AsyncIterator<MemberStatus>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SubGroupMemberNullablePromise
  extends Promise<SubGroupMember | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userid: <T = UserPromise>() => T;
  member: <T = SubGroupPromise>() => T;
  status: () => Promise<MemberStatus>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Role {
  id: ID_Output;
  name: ROLENAME;
  description?: String;
  status?: String;
  state?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface RolePromise extends Promise<Role>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<ROLENAME>;
  org: <T = OrganizationPromise>() => T;
  suborg: <T = SuborgPromise>() => T;
  group: <T = GroupPromise>() => T;
  subgroup: <T = SubGroupPromise>() => T;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  educationprofiles: <T = FragmentableArray<EducationProfile>>(args?: {
    where?: EducationProfileWhereInput;
    orderBy?: EducationProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<String>;
  status: () => Promise<String>;
  state: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  subjectSubscriptions: <T = FragmentableArray<SubjectSubscription>>(args?: {
    where?: SubjectSubscriptionWhereInput;
    orderBy?: SubjectSubscriptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RoleSubscription
  extends Promise<AsyncIterator<Role>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<ROLENAME>>;
  org: <T = OrganizationSubscription>() => T;
  suborg: <T = SuborgSubscription>() => T;
  group: <T = GroupSubscription>() => T;
  subgroup: <T = SubGroupSubscription>() => T;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  educationprofiles: <
    T = Promise<AsyncIterator<EducationProfileSubscription>>
  >(args?: {
    where?: EducationProfileWhereInput;
    orderBy?: EducationProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  subjectSubscriptions: <
    T = Promise<AsyncIterator<SubjectSubscriptionSubscription>>
  >(args?: {
    where?: SubjectSubscriptionWhereInput;
    orderBy?: SubjectSubscriptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RoleNullablePromise
  extends Promise<Role | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<ROLENAME>;
  org: <T = OrganizationPromise>() => T;
  suborg: <T = SuborgPromise>() => T;
  group: <T = GroupPromise>() => T;
  subgroup: <T = SubGroupPromise>() => T;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  educationprofiles: <T = FragmentableArray<EducationProfile>>(args?: {
    where?: EducationProfileWhereInput;
    orderBy?: EducationProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<String>;
  status: () => Promise<String>;
  state: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  subjectSubscriptions: <T = FragmentableArray<SubjectSubscription>>(args?: {
    where?: SubjectSubscriptionWhereInput;
    orderBy?: SubjectSubscriptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EducationProfile {
  id: ID_Output;
  name: String;
  profiileType?: String;
  educationLevel?: String;
  educationType?: String;
  specialization?: String;
  startedYear?: DateTimeOutput;
  completedYear?: DateTimeOutput;
  result?: String;
  status?: String;
  remark?: String;
}

export interface EducationProfilePromise
  extends Promise<EducationProfile>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  profiileType: () => Promise<String>;
  educationLevel: () => Promise<String>;
  educationType: () => Promise<String>;
  specialization: () => Promise<String>;
  roles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjects: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  std: <T = FragmentableArray<Std>>(args?: {
    where?: StdWhereInput;
    orderBy?: StdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  startedYear: () => Promise<DateTimeOutput>;
  completedYear: () => Promise<DateTimeOutput>;
  result: () => Promise<String>;
  status: () => Promise<String>;
  remark: () => Promise<String>;
  profileId: <T = ProfilePromise>() => T;
}

export interface EducationProfileSubscription
  extends Promise<AsyncIterator<EducationProfile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  profiileType: () => Promise<AsyncIterator<String>>;
  educationLevel: () => Promise<AsyncIterator<String>>;
  educationType: () => Promise<AsyncIterator<String>>;
  specialization: () => Promise<AsyncIterator<String>>;
  roles: <T = Promise<AsyncIterator<RoleSubscription>>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjects: <T = Promise<AsyncIterator<SubjectSubscription>>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  std: <T = Promise<AsyncIterator<StdSubscription>>>(args?: {
    where?: StdWhereInput;
    orderBy?: StdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  startedYear: () => Promise<AsyncIterator<DateTimeOutput>>;
  completedYear: () => Promise<AsyncIterator<DateTimeOutput>>;
  result: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  remark: () => Promise<AsyncIterator<String>>;
  profileId: <T = ProfileSubscription>() => T;
}

export interface EducationProfileNullablePromise
  extends Promise<EducationProfile | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  profiileType: () => Promise<String>;
  educationLevel: () => Promise<String>;
  educationType: () => Promise<String>;
  specialization: () => Promise<String>;
  roles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjects: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  std: <T = FragmentableArray<Std>>(args?: {
    where?: StdWhereInput;
    orderBy?: StdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  startedYear: () => Promise<DateTimeOutput>;
  completedYear: () => Promise<DateTimeOutput>;
  result: () => Promise<String>;
  status: () => Promise<String>;
  remark: () => Promise<String>;
  profileId: <T = ProfilePromise>() => T;
}

export interface Subject {
  id: ID_Output;
  name: String;
  picture?: String;
  board?: String;
  category?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  plantDate?: DateTimeOutput;
  isPublished?: Boolean;
  state?: String;
  status?: String;
  available?: String;
  description?: String;
}

export interface SubjectPromise extends Promise<Subject>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  picture: () => Promise<String>;
  medium: <T = MediumPromise>() => T;
  std: <T = StdPromise>() => T;
  board: () => Promise<String>;
  category: () => Promise<String>;
  group: <T = GroupPromise>() => T;
  subgroup: <T = SubGroupPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  educationProfiles: <T = FragmentableArray<EducationProfile>>(args?: {
    where?: EducationProfileWhereInput;
    orderBy?: EducationProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  units: <T = FragmentableArray<Unit>>(args?: {
    where?: UnitWhereInput;
    orderBy?: UnitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topic: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  contents: <T = FragmentableArray<Content>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserPromise>() => T;
  updateBy: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  plantDate: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  state: () => Promise<String>;
  status: () => Promise<String>;
  available: () => Promise<String>;
  description: () => Promise<String>;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  quizes: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SubjectSubscription
  extends Promise<AsyncIterator<Subject>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  picture: () => Promise<AsyncIterator<String>>;
  medium: <T = MediumSubscription>() => T;
  std: <T = StdSubscription>() => T;
  board: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  group: <T = GroupSubscription>() => T;
  subgroup: <T = SubGroupSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  educationProfiles: <
    T = Promise<AsyncIterator<EducationProfileSubscription>>
  >(args?: {
    where?: EducationProfileWhereInput;
    orderBy?: EducationProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  units: <T = Promise<AsyncIterator<UnitSubscription>>>(args?: {
    where?: UnitWhereInput;
    orderBy?: UnitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topic: <T = Promise<AsyncIterator<TopicSubscription>>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  contents: <T = Promise<AsyncIterator<ContentSubscription>>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserSubscription>() => T;
  updateBy: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  plantDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  state: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  available: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  questions: <T = Promise<AsyncIterator<QuestionSubscription>>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  quizes: <T = Promise<AsyncIterator<QuizSubscription>>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SubjectNullablePromise
  extends Promise<Subject | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  picture: () => Promise<String>;
  medium: <T = MediumPromise>() => T;
  std: <T = StdPromise>() => T;
  board: () => Promise<String>;
  category: () => Promise<String>;
  group: <T = GroupPromise>() => T;
  subgroup: <T = SubGroupPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  educationProfiles: <T = FragmentableArray<EducationProfile>>(args?: {
    where?: EducationProfileWhereInput;
    orderBy?: EducationProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  units: <T = FragmentableArray<Unit>>(args?: {
    where?: UnitWhereInput;
    orderBy?: UnitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topic: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  contents: <T = FragmentableArray<Content>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserPromise>() => T;
  updateBy: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  plantDate: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  state: () => Promise<String>;
  status: () => Promise<String>;
  available: () => Promise<String>;
  description: () => Promise<String>;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  quizes: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Medium {
  id: ID_Output;
  name: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface MediumPromise extends Promise<Medium>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  subjects: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface MediumSubscription
  extends Promise<AsyncIterator<Medium>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  subjects: <T = Promise<AsyncIterator<SubjectSubscription>>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MediumNullablePromise
  extends Promise<Medium | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  subjects: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Std {
  id: ID_Output;
  gradename: GRADENAME;
  category: String;
  branch?: String;
  year?: String;
  isPublished: Boolean;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface StdPromise extends Promise<Std>, Fragmentable {
  id: () => Promise<ID_Output>;
  gradename: () => Promise<GRADENAME>;
  category: () => Promise<String>;
  branch: () => Promise<String>;
  year: () => Promise<String>;
  educationprofiles: <T = FragmentableArray<EducationProfile>>(args?: {
    where?: EducationProfileWhereInput;
    orderBy?: EducationProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isPublished: () => Promise<Boolean>;
  subjects: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface StdSubscription
  extends Promise<AsyncIterator<Std>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gradename: () => Promise<AsyncIterator<GRADENAME>>;
  category: () => Promise<AsyncIterator<String>>;
  branch: () => Promise<AsyncIterator<String>>;
  year: () => Promise<AsyncIterator<String>>;
  educationprofiles: <
    T = Promise<AsyncIterator<EducationProfileSubscription>>
  >(args?: {
    where?: EducationProfileWhereInput;
    orderBy?: EducationProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  subjects: <T = Promise<AsyncIterator<SubjectSubscription>>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StdNullablePromise extends Promise<Std | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  gradename: () => Promise<GRADENAME>;
  category: () => Promise<String>;
  branch: () => Promise<String>;
  year: () => Promise<String>;
  educationprofiles: <T = FragmentableArray<EducationProfile>>(args?: {
    where?: EducationProfileWhereInput;
    orderBy?: EducationProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isPublished: () => Promise<Boolean>;
  subjects: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Unit {
  id: ID_Output;
  name: String;
  plantDate?: DateTimeOutput;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UnitPromise extends Promise<Unit>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  subject: <T = SubjectPromise>() => T;
  topics: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  contents: <T = FragmentableArray<Content>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserPromise>() => T;
  updateBy: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  plantDate: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  state: () => Promise<String>;
  status: () => Promise<String>;
  available: () => Promise<String>;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  quizs: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UnitSubscription
  extends Promise<AsyncIterator<Unit>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  subject: <T = SubjectSubscription>() => T;
  topics: <T = Promise<AsyncIterator<TopicSubscription>>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  contents: <T = Promise<AsyncIterator<ContentSubscription>>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserSubscription>() => T;
  updateBy: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  plantDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  state: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  available: () => Promise<AsyncIterator<String>>;
  questions: <T = Promise<AsyncIterator<QuestionSubscription>>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  quizs: <T = Promise<AsyncIterator<QuizSubscription>>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UnitNullablePromise
  extends Promise<Unit | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  subject: <T = SubjectPromise>() => T;
  topics: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  contents: <T = FragmentableArray<Content>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserPromise>() => T;
  updateBy: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  plantDate: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  state: () => Promise<String>;
  status: () => Promise<String>;
  available: () => Promise<String>;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  quizs: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Topic {
  id: ID_Output;
  name: String;
  plantDate?: DateTimeOutput;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface TopicPromise extends Promise<Topic>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  subject: <T = SubjectPromise>() => T;
  unit: <T = UnitPromise>() => T;
  contents: <T = FragmentableArray<Content>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserPromise>() => T;
  updateBy: <T = UserPromise>() => T;
  plantDate: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  state: () => Promise<String>;
  status: () => Promise<String>;
  available: () => Promise<String>;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  quizs: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TopicSubscription
  extends Promise<AsyncIterator<Topic>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  subject: <T = SubjectSubscription>() => T;
  unit: <T = UnitSubscription>() => T;
  contents: <T = Promise<AsyncIterator<ContentSubscription>>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserSubscription>() => T;
  updateBy: <T = UserSubscription>() => T;
  plantDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  state: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  available: () => Promise<AsyncIterator<String>>;
  questions: <T = Promise<AsyncIterator<QuestionSubscription>>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  quizs: <T = Promise<AsyncIterator<QuizSubscription>>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TopicNullablePromise
  extends Promise<Topic | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  subject: <T = SubjectPromise>() => T;
  unit: <T = UnitPromise>() => T;
  contents: <T = FragmentableArray<Content>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserPromise>() => T;
  updateBy: <T = UserPromise>() => T;
  plantDate: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  state: () => Promise<String>;
  status: () => Promise<String>;
  available: () => Promise<String>;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  quizs: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Content {
  id: ID_Output;
  name: String;
  number?: Int;
  fileInfo?: Json;
  type: String;
  url?: String;
  plantDate?: DateTimeOutput;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ContentPromise extends Promise<Content>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  number: () => Promise<Int>;
  fileInfo: () => Promise<Json>;
  type: () => Promise<String>;
  url: () => Promise<String>;
  subject: <T = SubjectPromise>() => T;
  unit: <T = UnitPromise>() => T;
  topic: <T = TopicPromise>() => T;
  createdBy: <T = UserPromise>() => T;
  updateBy: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  plantDate: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  state: () => Promise<String>;
  status: () => Promise<String>;
  available: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ContentSubscription
  extends Promise<AsyncIterator<Content>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<Int>>;
  fileInfo: () => Promise<AsyncIterator<Json>>;
  type: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  subject: <T = SubjectSubscription>() => T;
  unit: <T = UnitSubscription>() => T;
  topic: <T = TopicSubscription>() => T;
  createdBy: <T = UserSubscription>() => T;
  updateBy: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  plantDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  state: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  available: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ContentNullablePromise
  extends Promise<Content | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  number: () => Promise<Int>;
  fileInfo: () => Promise<Json>;
  type: () => Promise<String>;
  url: () => Promise<String>;
  subject: <T = SubjectPromise>() => T;
  unit: <T = UnitPromise>() => T;
  topic: <T = TopicPromise>() => T;
  createdBy: <T = UserPromise>() => T;
  updateBy: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  plantDate: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  state: () => Promise<String>;
  status: () => Promise<String>;
  available: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Question {
  id: ID_Output;
  quetype: String;
  categories?: String;
  title?: String;
  descriptionType: String;
  descriptionurl?: String;
  options: Json;
  level: Int;
  plandate?: DateTimeOutput;
  isPublished?: Boolean;
  state?: String;
  status?: String;
  available?: String;
  isReviewed?: Boolean;
  explainationType?: String;
  explaination?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface QuestionPromise extends Promise<Question>, Fragmentable {
  id: () => Promise<ID_Output>;
  subject: <T = SubjectPromise>() => T;
  unit: <T = UnitPromise>() => T;
  topic: <T = TopicPromise>() => T;
  quetype: () => Promise<String>;
  categories: () => Promise<String>;
  title: () => Promise<String>;
  descriptionType: () => Promise<String>;
  descriptionurl: () => Promise<String>;
  options: () => Promise<Json>;
  createdBy: <T = UserPromise>() => T;
  level: () => Promise<Int>;
  updatedBy: <T = UserPromise>() => T;
  plandate: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  state: () => Promise<String>;
  status: () => Promise<String>;
  available: () => Promise<String>;
  isReviewed: () => Promise<Boolean>;
  explainationType: () => Promise<String>;
  quiz: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  explaination: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  results: <T = FragmentableArray<Result>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  atemptedResult: <T = FragmentableArray<Result>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notattempted: <T = FragmentableArray<Result>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  correct: <T = FragmentableArray<Result>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wrong: <T = FragmentableArray<Result>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface QuestionSubscription
  extends Promise<AsyncIterator<Question>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  subject: <T = SubjectSubscription>() => T;
  unit: <T = UnitSubscription>() => T;
  topic: <T = TopicSubscription>() => T;
  quetype: () => Promise<AsyncIterator<String>>;
  categories: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  descriptionType: () => Promise<AsyncIterator<String>>;
  descriptionurl: () => Promise<AsyncIterator<String>>;
  options: () => Promise<AsyncIterator<Json>>;
  createdBy: <T = UserSubscription>() => T;
  level: () => Promise<AsyncIterator<Int>>;
  updatedBy: <T = UserSubscription>() => T;
  plandate: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  state: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  available: () => Promise<AsyncIterator<String>>;
  isReviewed: () => Promise<AsyncIterator<Boolean>>;
  explainationType: () => Promise<AsyncIterator<String>>;
  quiz: <T = Promise<AsyncIterator<QuizSubscription>>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  explaination: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  results: <T = Promise<AsyncIterator<ResultSubscription>>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  atemptedResult: <T = Promise<AsyncIterator<ResultSubscription>>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notattempted: <T = Promise<AsyncIterator<ResultSubscription>>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  correct: <T = Promise<AsyncIterator<ResultSubscription>>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wrong: <T = Promise<AsyncIterator<ResultSubscription>>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface QuestionNullablePromise
  extends Promise<Question | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  subject: <T = SubjectPromise>() => T;
  unit: <T = UnitPromise>() => T;
  topic: <T = TopicPromise>() => T;
  quetype: () => Promise<String>;
  categories: () => Promise<String>;
  title: () => Promise<String>;
  descriptionType: () => Promise<String>;
  descriptionurl: () => Promise<String>;
  options: () => Promise<Json>;
  createdBy: <T = UserPromise>() => T;
  level: () => Promise<Int>;
  updatedBy: <T = UserPromise>() => T;
  plandate: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  state: () => Promise<String>;
  status: () => Promise<String>;
  available: () => Promise<String>;
  isReviewed: () => Promise<Boolean>;
  explainationType: () => Promise<String>;
  quiz: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  explaination: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  results: <T = FragmentableArray<Result>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  atemptedResult: <T = FragmentableArray<Result>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notattempted: <T = FragmentableArray<Result>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  correct: <T = FragmentableArray<Result>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wrong: <T = FragmentableArray<Result>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Quiz {
  id: ID_Output;
  quizName: String;
  quizType: String;
  markingscheme?: Json;
  quizlevel?: Int;
  threshold?: Json;
  isForLevelPromotion?: Boolean;
  showExplaination?: String;
  showanswer?: Boolean;
  description?: String;
  allowedCorrection?: Boolean;
  duration?: Int;
  commentFromTeacher?: String;
  isPublished?: Boolean;
  isApproved?: Boolean;
  weightage?: Float;
  totalmarks?: Float;
  validFrom?: DateTimeOutput;
  validTo?: DateTimeOutput;
  retryAllowed?: Boolean;
}

export interface QuizPromise extends Promise<Quiz>, Fragmentable {
  id: () => Promise<ID_Output>;
  quizName: () => Promise<String>;
  quizType: () => Promise<String>;
  subject: <T = SubjectPromise>() => T;
  unit: <T = UnitPromise>() => T;
  topic: <T = TopicPromise>() => T;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  markingscheme: () => Promise<Json>;
  quizlevel: () => Promise<Int>;
  threshold: () => Promise<Json>;
  isForLevelPromotion: () => Promise<Boolean>;
  showExplaination: () => Promise<String>;
  showanswer: () => Promise<Boolean>;
  description: () => Promise<String>;
  allowedCorrection: () => Promise<Boolean>;
  duration: () => Promise<Int>;
  commentFromTeacher: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
  isApproved: () => Promise<Boolean>;
  createdBy: <T = UserPromise>() => T;
  weightage: () => Promise<Float>;
  totalmarks: () => Promise<Float>;
  validFrom: () => Promise<DateTimeOutput>;
  validTo: () => Promise<DateTimeOutput>;
  retryAllowed: () => Promise<Boolean>;
  results: <T = FragmentableArray<Result>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courses: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface QuizSubscription
  extends Promise<AsyncIterator<Quiz>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quizName: () => Promise<AsyncIterator<String>>;
  quizType: () => Promise<AsyncIterator<String>>;
  subject: <T = SubjectSubscription>() => T;
  unit: <T = UnitSubscription>() => T;
  topic: <T = TopicSubscription>() => T;
  questions: <T = Promise<AsyncIterator<QuestionSubscription>>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  markingscheme: () => Promise<AsyncIterator<Json>>;
  quizlevel: () => Promise<AsyncIterator<Int>>;
  threshold: () => Promise<AsyncIterator<Json>>;
  isForLevelPromotion: () => Promise<AsyncIterator<Boolean>>;
  showExplaination: () => Promise<AsyncIterator<String>>;
  showanswer: () => Promise<AsyncIterator<Boolean>>;
  description: () => Promise<AsyncIterator<String>>;
  allowedCorrection: () => Promise<AsyncIterator<Boolean>>;
  duration: () => Promise<AsyncIterator<Int>>;
  commentFromTeacher: () => Promise<AsyncIterator<String>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  isApproved: () => Promise<AsyncIterator<Boolean>>;
  createdBy: <T = UserSubscription>() => T;
  weightage: () => Promise<AsyncIterator<Float>>;
  totalmarks: () => Promise<AsyncIterator<Float>>;
  validFrom: () => Promise<AsyncIterator<DateTimeOutput>>;
  validTo: () => Promise<AsyncIterator<DateTimeOutput>>;
  retryAllowed: () => Promise<AsyncIterator<Boolean>>;
  results: <T = Promise<AsyncIterator<ResultSubscription>>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courses: <T = Promise<AsyncIterator<QuizSubscription>>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface QuizNullablePromise
  extends Promise<Quiz | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quizName: () => Promise<String>;
  quizType: () => Promise<String>;
  subject: <T = SubjectPromise>() => T;
  unit: <T = UnitPromise>() => T;
  topic: <T = TopicPromise>() => T;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  markingscheme: () => Promise<Json>;
  quizlevel: () => Promise<Int>;
  threshold: () => Promise<Json>;
  isForLevelPromotion: () => Promise<Boolean>;
  showExplaination: () => Promise<String>;
  showanswer: () => Promise<Boolean>;
  description: () => Promise<String>;
  allowedCorrection: () => Promise<Boolean>;
  duration: () => Promise<Int>;
  commentFromTeacher: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
  isApproved: () => Promise<Boolean>;
  createdBy: <T = UserPromise>() => T;
  weightage: () => Promise<Float>;
  totalmarks: () => Promise<Float>;
  validFrom: () => Promise<DateTimeOutput>;
  validTo: () => Promise<DateTimeOutput>;
  retryAllowed: () => Promise<Boolean>;
  results: <T = FragmentableArray<Result>>(args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courses: <T = FragmentableArray<Quiz>>(args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Result {
  id: ID_Output;
  quizName: String;
  quizType: String;
  result: String;
  quizlevel: Int;
  score?: Float;
  achievement?: String;
  duration?: Int;
  attemptedDate: DateTimeOutput;
  commentFromTeacher?: String;
  rank?: Int;
}

export interface ResultPromise extends Promise<Result>, Fragmentable {
  id: () => Promise<ID_Output>;
  quiz: <T = QuizPromise>() => T;
  quizName: () => Promise<String>;
  quizType: () => Promise<String>;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  result: () => Promise<String>;
  quizlevel: () => Promise<Int>;
  score: () => Promise<Float>;
  attempted: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notattempted: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  correct: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wrong: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  achievement: () => Promise<String>;
  duration: () => Promise<Int>;
  attemptedDate: () => Promise<DateTimeOutput>;
  commentFromTeacher: () => Promise<String>;
  rank: () => Promise<Int>;
  userId: <T = UserPromise>() => T;
}

export interface ResultSubscription
  extends Promise<AsyncIterator<Result>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quiz: <T = QuizSubscription>() => T;
  quizName: () => Promise<AsyncIterator<String>>;
  quizType: () => Promise<AsyncIterator<String>>;
  questions: <T = Promise<AsyncIterator<QuestionSubscription>>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  result: () => Promise<AsyncIterator<String>>;
  quizlevel: () => Promise<AsyncIterator<Int>>;
  score: () => Promise<AsyncIterator<Float>>;
  attempted: <T = Promise<AsyncIterator<QuestionSubscription>>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notattempted: <T = Promise<AsyncIterator<QuestionSubscription>>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  correct: <T = Promise<AsyncIterator<QuestionSubscription>>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wrong: <T = Promise<AsyncIterator<QuestionSubscription>>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  achievement: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Int>>;
  attemptedDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  commentFromTeacher: () => Promise<AsyncIterator<String>>;
  rank: () => Promise<AsyncIterator<Int>>;
  userId: <T = UserSubscription>() => T;
}

export interface ResultNullablePromise
  extends Promise<Result | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quiz: <T = QuizPromise>() => T;
  quizName: () => Promise<String>;
  quizType: () => Promise<String>;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  result: () => Promise<String>;
  quizlevel: () => Promise<Int>;
  score: () => Promise<Float>;
  attempted: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notattempted: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  correct: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wrong: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  achievement: () => Promise<String>;
  duration: () => Promise<Int>;
  attemptedDate: () => Promise<DateTimeOutput>;
  commentFromTeacher: () => Promise<String>;
  rank: () => Promise<Int>;
  userId: <T = UserPromise>() => T;
}

export interface SubjectSubscription {
  id: ID_Output;
  subsType?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface SubjectSubscriptionPromise
  extends Promise<SubjectSubscription>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  subsType: () => Promise<String>;
  mySubjects: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  userid: <T = UserPromise>() => T;
  subscribedAs: <T = RolePromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SubjectSubscriptionSubscription
  extends Promise<AsyncIterator<SubjectSubscription>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  subsType: () => Promise<AsyncIterator<String>>;
  mySubjects: <T = Promise<AsyncIterator<SubjectSubscription>>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  userid: <T = UserSubscription>() => T;
  subscribedAs: <T = RoleSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SubjectSubscriptionNullablePromise
  extends Promise<SubjectSubscription | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  subsType: () => Promise<String>;
  mySubjects: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  userid: <T = UserPromise>() => T;
  subscribedAs: <T = RolePromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GroupMember {
  id: ID_Output;
  status?: MemberStatus;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface GroupMemberPromise extends Promise<GroupMember>, Fragmentable {
  id: () => Promise<ID_Output>;
  userid: <T = UserPromise>() => T;
  member: <T = GroupPromise>() => T;
  status: () => Promise<MemberStatus>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GroupMemberSubscription
  extends Promise<AsyncIterator<GroupMember>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userid: <T = UserSubscription>() => T;
  member: <T = GroupSubscription>() => T;
  status: () => Promise<AsyncIterator<MemberStatus>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GroupMemberNullablePromise
  extends Promise<GroupMember | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userid: <T = UserPromise>() => T;
  member: <T = GroupPromise>() => T;
  status: () => Promise<MemberStatus>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Post {
  id: ID_Output;
  title: String;
  body: String;
  published: Boolean;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  published: () => Promise<Boolean>;
  author: <T = UserPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  author: <T = UserSubscription>() => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  published: () => Promise<Boolean>;
  author: <T = UserPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Comment {
  id: ID_Output;
  text: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  author: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  author: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Vote {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface VotePromise extends Promise<Vote>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  option: <T = OptionPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface VoteSubscription
  extends Promise<AsyncIterator<Vote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  option: <T = OptionSubscription>() => T;
  user: <T = UserSubscription>() => T;
}

export interface VoteNullablePromise
  extends Promise<Vote | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  option: <T = OptionPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface Option {
  id: ID_Output;
  name: String;
  color: Color;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OptionPromise extends Promise<Option>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  color: () => Promise<Color>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  poll: <T = PollPromise>() => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OptionSubscription
  extends Promise<AsyncIterator<Option>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<Color>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  poll: <T = PollSubscription>() => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OptionNullablePromise
  extends Promise<Option | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  color: () => Promise<Color>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  poll: <T = PollPromise>() => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Poll {
  id: ID_Output;
  title: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PollPromise extends Promise<Poll>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  options: <T = FragmentableArray<Option>>(args?: {
    where?: OptionWhereInput;
    orderBy?: OptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PollSubscription
  extends Promise<AsyncIterator<Poll>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  options: <T = Promise<AsyncIterator<OptionSubscription>>>(args?: {
    where?: OptionWhereInput;
    orderBy?: OptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PollNullablePromise
  extends Promise<Poll | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  options: <T = FragmentableArray<Option>>(args?: {
    where?: OptionWhereInput;
    orderBy?: OptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AddressConnection {
  pageInfo: PageInfo;
  edges: AddressEdge[];
}

export interface AddressConnectionPromise
  extends Promise<AddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AddressEdge>>() => T;
  aggregate: <T = AggregateAddressPromise>() => T;
}

export interface AddressConnectionSubscription
  extends Promise<AsyncIterator<AddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AddressEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAddressSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AddressEdge {
  node: Address;
  cursor: String;
}

export interface AddressEdgePromise extends Promise<AddressEdge>, Fragmentable {
  node: <T = AddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AddressEdgeSubscription
  extends Promise<AsyncIterator<AddressEdge>>,
    Fragmentable {
  node: <T = AddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAddress {
  count: Int;
}

export interface AggregateAddressPromise
  extends Promise<AggregateAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAddressSubscription
  extends Promise<AsyncIterator<AggregateAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ContentConnection {
  pageInfo: PageInfo;
  edges: ContentEdge[];
}

export interface ContentConnectionPromise
  extends Promise<ContentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContentEdge>>() => T;
  aggregate: <T = AggregateContentPromise>() => T;
}

export interface ContentConnectionSubscription
  extends Promise<AsyncIterator<ContentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContentSubscription>() => T;
}

export interface ContentEdge {
  node: Content;
  cursor: String;
}

export interface ContentEdgePromise extends Promise<ContentEdge>, Fragmentable {
  node: <T = ContentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContentEdgeSubscription
  extends Promise<AsyncIterator<ContentEdge>>,
    Fragmentable {
  node: <T = ContentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateContent {
  count: Int;
}

export interface AggregateContentPromise
  extends Promise<AggregateContent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContentSubscription
  extends Promise<AsyncIterator<AggregateContent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EducationProfileConnection {
  pageInfo: PageInfo;
  edges: EducationProfileEdge[];
}

export interface EducationProfileConnectionPromise
  extends Promise<EducationProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EducationProfileEdge>>() => T;
  aggregate: <T = AggregateEducationProfilePromise>() => T;
}

export interface EducationProfileConnectionSubscription
  extends Promise<AsyncIterator<EducationProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EducationProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEducationProfileSubscription>() => T;
}

export interface EducationProfileEdge {
  node: EducationProfile;
  cursor: String;
}

export interface EducationProfileEdgePromise
  extends Promise<EducationProfileEdge>,
    Fragmentable {
  node: <T = EducationProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface EducationProfileEdgeSubscription
  extends Promise<AsyncIterator<EducationProfileEdge>>,
    Fragmentable {
  node: <T = EducationProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEducationProfile {
  count: Int;
}

export interface AggregateEducationProfilePromise
  extends Promise<AggregateEducationProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEducationProfileSubscription
  extends Promise<AsyncIterator<AggregateEducationProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupMemberConnection {
  pageInfo: PageInfo;
  edges: GroupMemberEdge[];
}

export interface GroupMemberConnectionPromise
  extends Promise<GroupMemberConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupMemberEdge>>() => T;
  aggregate: <T = AggregateGroupMemberPromise>() => T;
}

export interface GroupMemberConnectionSubscription
  extends Promise<AsyncIterator<GroupMemberConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupMemberEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupMemberSubscription>() => T;
}

export interface GroupMemberEdge {
  node: GroupMember;
  cursor: String;
}

export interface GroupMemberEdgePromise
  extends Promise<GroupMemberEdge>,
    Fragmentable {
  node: <T = GroupMemberPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupMemberEdgeSubscription
  extends Promise<AsyncIterator<GroupMemberEdge>>,
    Fragmentable {
  node: <T = GroupMemberSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGroupMember {
  count: Int;
}

export interface AggregateGroupMemberPromise
  extends Promise<AggregateGroupMember>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupMemberSubscription
  extends Promise<AsyncIterator<AggregateGroupMember>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MediumConnection {
  pageInfo: PageInfo;
  edges: MediumEdge[];
}

export interface MediumConnectionPromise
  extends Promise<MediumConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MediumEdge>>() => T;
  aggregate: <T = AggregateMediumPromise>() => T;
}

export interface MediumConnectionSubscription
  extends Promise<AsyncIterator<MediumConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MediumEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMediumSubscription>() => T;
}

export interface MediumEdge {
  node: Medium;
  cursor: String;
}

export interface MediumEdgePromise extends Promise<MediumEdge>, Fragmentable {
  node: <T = MediumPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MediumEdgeSubscription
  extends Promise<AsyncIterator<MediumEdge>>,
    Fragmentable {
  node: <T = MediumSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMedium {
  count: Int;
}

export interface AggregateMediumPromise
  extends Promise<AggregateMedium>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMediumSubscription
  extends Promise<AsyncIterator<AggregateMedium>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OptionConnection {
  pageInfo: PageInfo;
  edges: OptionEdge[];
}

export interface OptionConnectionPromise
  extends Promise<OptionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OptionEdge>>() => T;
  aggregate: <T = AggregateOptionPromise>() => T;
}

export interface OptionConnectionSubscription
  extends Promise<AsyncIterator<OptionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OptionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOptionSubscription>() => T;
}

export interface OptionEdge {
  node: Option;
  cursor: String;
}

export interface OptionEdgePromise extends Promise<OptionEdge>, Fragmentable {
  node: <T = OptionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OptionEdgeSubscription
  extends Promise<AsyncIterator<OptionEdge>>,
    Fragmentable {
  node: <T = OptionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOption {
  count: Int;
}

export interface AggregateOptionPromise
  extends Promise<AggregateOption>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOptionSubscription
  extends Promise<AsyncIterator<AggregateOption>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrganizationConnection {
  pageInfo: PageInfo;
  edges: OrganizationEdge[];
}

export interface OrganizationConnectionPromise
  extends Promise<OrganizationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrganizationEdge>>() => T;
  aggregate: <T = AggregateOrganizationPromise>() => T;
}

export interface OrganizationConnectionSubscription
  extends Promise<AsyncIterator<OrganizationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrganizationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrganizationSubscription>() => T;
}

export interface OrganizationEdge {
  node: Organization;
  cursor: String;
}

export interface OrganizationEdgePromise
  extends Promise<OrganizationEdge>,
    Fragmentable {
  node: <T = OrganizationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrganizationEdgeSubscription
  extends Promise<AsyncIterator<OrganizationEdge>>,
    Fragmentable {
  node: <T = OrganizationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrganization {
  count: Int;
}

export interface AggregateOrganizationPromise
  extends Promise<AggregateOrganization>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrganizationSubscription
  extends Promise<AsyncIterator<AggregateOrganization>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PersonalProfileConnection {
  pageInfo: PageInfo;
  edges: PersonalProfileEdge[];
}

export interface PersonalProfileConnectionPromise
  extends Promise<PersonalProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonalProfileEdge>>() => T;
  aggregate: <T = AggregatePersonalProfilePromise>() => T;
}

export interface PersonalProfileConnectionSubscription
  extends Promise<AsyncIterator<PersonalProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PersonalProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePersonalProfileSubscription>() => T;
}

export interface PersonalProfileEdge {
  node: PersonalProfile;
  cursor: String;
}

export interface PersonalProfileEdgePromise
  extends Promise<PersonalProfileEdge>,
    Fragmentable {
  node: <T = PersonalProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonalProfileEdgeSubscription
  extends Promise<AsyncIterator<PersonalProfileEdge>>,
    Fragmentable {
  node: <T = PersonalProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePersonalProfile {
  count: Int;
}

export interface AggregatePersonalProfilePromise
  extends Promise<AggregatePersonalProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonalProfileSubscription
  extends Promise<AsyncIterator<AggregatePersonalProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PollConnection {
  pageInfo: PageInfo;
  edges: PollEdge[];
}

export interface PollConnectionPromise
  extends Promise<PollConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PollEdge>>() => T;
  aggregate: <T = AggregatePollPromise>() => T;
}

export interface PollConnectionSubscription
  extends Promise<AsyncIterator<PollConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PollEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePollSubscription>() => T;
}

export interface PollEdge {
  node: Poll;
  cursor: String;
}

export interface PollEdgePromise extends Promise<PollEdge>, Fragmentable {
  node: <T = PollPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PollEdgeSubscription
  extends Promise<AsyncIterator<PollEdge>>,
    Fragmentable {
  node: <T = PollSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePoll {
  count: Int;
}

export interface AggregatePollPromise
  extends Promise<AggregatePoll>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePollSubscription
  extends Promise<AsyncIterator<AggregatePoll>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProfileConnection {
  pageInfo: PageInfo;
  edges: ProfileEdge[];
}

export interface ProfileConnectionPromise
  extends Promise<ProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProfileEdge>>() => T;
  aggregate: <T = AggregateProfilePromise>() => T;
}

export interface ProfileConnectionSubscription
  extends Promise<AsyncIterator<ProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProfileSubscription>() => T;
}

export interface ProfileEdge {
  node: Profile;
  cursor: String;
}

export interface ProfileEdgePromise extends Promise<ProfileEdge>, Fragmentable {
  node: <T = ProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProfileEdgeSubscription
  extends Promise<AsyncIterator<ProfileEdge>>,
    Fragmentable {
  node: <T = ProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProfile {
  count: Int;
}

export interface AggregateProfilePromise
  extends Promise<AggregateProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProfileSubscription
  extends Promise<AsyncIterator<AggregateProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface QuestionConnection {
  pageInfo: PageInfo;
  edges: QuestionEdge[];
}

export interface QuestionConnectionPromise
  extends Promise<QuestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuestionEdge>>() => T;
  aggregate: <T = AggregateQuestionPromise>() => T;
}

export interface QuestionConnectionSubscription
  extends Promise<AsyncIterator<QuestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuestionSubscription>() => T;
}

export interface QuestionEdge {
  node: Question;
  cursor: String;
}

export interface QuestionEdgePromise
  extends Promise<QuestionEdge>,
    Fragmentable {
  node: <T = QuestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuestionEdgeSubscription
  extends Promise<AsyncIterator<QuestionEdge>>,
    Fragmentable {
  node: <T = QuestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuestion {
  count: Int;
}

export interface AggregateQuestionPromise
  extends Promise<AggregateQuestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuestionSubscription
  extends Promise<AsyncIterator<AggregateQuestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface QuizConnection {
  pageInfo: PageInfo;
  edges: QuizEdge[];
}

export interface QuizConnectionPromise
  extends Promise<QuizConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuizEdge>>() => T;
  aggregate: <T = AggregateQuizPromise>() => T;
}

export interface QuizConnectionSubscription
  extends Promise<AsyncIterator<QuizConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuizEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuizSubscription>() => T;
}

export interface QuizEdge {
  node: Quiz;
  cursor: String;
}

export interface QuizEdgePromise extends Promise<QuizEdge>, Fragmentable {
  node: <T = QuizPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuizEdgeSubscription
  extends Promise<AsyncIterator<QuizEdge>>,
    Fragmentable {
  node: <T = QuizSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuiz {
  count: Int;
}

export interface AggregateQuizPromise
  extends Promise<AggregateQuiz>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuizSubscription
  extends Promise<AsyncIterator<AggregateQuiz>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ResultConnection {
  pageInfo: PageInfo;
  edges: ResultEdge[];
}

export interface ResultConnectionPromise
  extends Promise<ResultConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ResultEdge>>() => T;
  aggregate: <T = AggregateResultPromise>() => T;
}

export interface ResultConnectionSubscription
  extends Promise<AsyncIterator<ResultConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ResultEdgeSubscription>>>() => T;
  aggregate: <T = AggregateResultSubscription>() => T;
}

export interface ResultEdge {
  node: Result;
  cursor: String;
}

export interface ResultEdgePromise extends Promise<ResultEdge>, Fragmentable {
  node: <T = ResultPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ResultEdgeSubscription
  extends Promise<AsyncIterator<ResultEdge>>,
    Fragmentable {
  node: <T = ResultSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateResult {
  count: Int;
}

export interface AggregateResultPromise
  extends Promise<AggregateResult>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateResultSubscription
  extends Promise<AsyncIterator<AggregateResult>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoleConnection {
  pageInfo: PageInfo;
  edges: RoleEdge[];
}

export interface RoleConnectionPromise
  extends Promise<RoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoleEdge>>() => T;
  aggregate: <T = AggregateRolePromise>() => T;
}

export interface RoleConnectionSubscription
  extends Promise<AsyncIterator<RoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleSubscription>() => T;
}

export interface RoleEdge {
  node: Role;
  cursor: String;
}

export interface RoleEdgePromise extends Promise<RoleEdge>, Fragmentable {
  node: <T = RolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoleEdgeSubscription
  extends Promise<AsyncIterator<RoleEdge>>,
    Fragmentable {
  node: <T = RoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRole {
  count: Int;
}

export interface AggregateRolePromise
  extends Promise<AggregateRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleSubscription
  extends Promise<AsyncIterator<AggregateRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoleMember {
  id: ID_Output;
  status?: RoleStatus;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface RoleMemberPromise extends Promise<RoleMember>, Fragmentable {
  id: () => Promise<ID_Output>;
  userid: <T = UserPromise>() => T;
  role: <T = RolePromise>() => T;
  status: () => Promise<RoleStatus>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface RoleMemberSubscription
  extends Promise<AsyncIterator<RoleMember>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userid: <T = UserSubscription>() => T;
  role: <T = RoleSubscription>() => T;
  status: () => Promise<AsyncIterator<RoleStatus>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoleMemberNullablePromise
  extends Promise<RoleMember | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userid: <T = UserPromise>() => T;
  role: <T = RolePromise>() => T;
  status: () => Promise<RoleStatus>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface RoleMemberConnection {
  pageInfo: PageInfo;
  edges: RoleMemberEdge[];
}

export interface RoleMemberConnectionPromise
  extends Promise<RoleMemberConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoleMemberEdge>>() => T;
  aggregate: <T = AggregateRoleMemberPromise>() => T;
}

export interface RoleMemberConnectionSubscription
  extends Promise<AsyncIterator<RoleMemberConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleMemberEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleMemberSubscription>() => T;
}

export interface RoleMemberEdge {
  node: RoleMember;
  cursor: String;
}

export interface RoleMemberEdgePromise
  extends Promise<RoleMemberEdge>,
    Fragmentable {
  node: <T = RoleMemberPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoleMemberEdgeSubscription
  extends Promise<AsyncIterator<RoleMemberEdge>>,
    Fragmentable {
  node: <T = RoleMemberSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRoleMember {
  count: Int;
}

export interface AggregateRoleMemberPromise
  extends Promise<AggregateRoleMember>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleMemberSubscription
  extends Promise<AsyncIterator<AggregateRoleMember>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StdConnection {
  pageInfo: PageInfo;
  edges: StdEdge[];
}

export interface StdConnectionPromise
  extends Promise<StdConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StdEdge>>() => T;
  aggregate: <T = AggregateStdPromise>() => T;
}

export interface StdConnectionSubscription
  extends Promise<AsyncIterator<StdConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StdEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStdSubscription>() => T;
}

export interface StdEdge {
  node: Std;
  cursor: String;
}

export interface StdEdgePromise extends Promise<StdEdge>, Fragmentable {
  node: <T = StdPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StdEdgeSubscription
  extends Promise<AsyncIterator<StdEdge>>,
    Fragmentable {
  node: <T = StdSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStd {
  count: Int;
}

export interface AggregateStdPromise
  extends Promise<AggregateStd>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStdSubscription
  extends Promise<AsyncIterator<AggregateStd>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SubGroupConnection {
  pageInfo: PageInfo;
  edges: SubGroupEdge[];
}

export interface SubGroupConnectionPromise
  extends Promise<SubGroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubGroupEdge>>() => T;
  aggregate: <T = AggregateSubGroupPromise>() => T;
}

export interface SubGroupConnectionSubscription
  extends Promise<AsyncIterator<SubGroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SubGroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSubGroupSubscription>() => T;
}

export interface SubGroupEdge {
  node: SubGroup;
  cursor: String;
}

export interface SubGroupEdgePromise
  extends Promise<SubGroupEdge>,
    Fragmentable {
  node: <T = SubGroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubGroupEdgeSubscription
  extends Promise<AsyncIterator<SubGroupEdge>>,
    Fragmentable {
  node: <T = SubGroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSubGroup {
  count: Int;
}

export interface AggregateSubGroupPromise
  extends Promise<AggregateSubGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubGroupSubscription
  extends Promise<AsyncIterator<AggregateSubGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SubGroupMemberConnection {
  pageInfo: PageInfo;
  edges: SubGroupMemberEdge[];
}

export interface SubGroupMemberConnectionPromise
  extends Promise<SubGroupMemberConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubGroupMemberEdge>>() => T;
  aggregate: <T = AggregateSubGroupMemberPromise>() => T;
}

export interface SubGroupMemberConnectionSubscription
  extends Promise<AsyncIterator<SubGroupMemberConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SubGroupMemberEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSubGroupMemberSubscription>() => T;
}

export interface SubGroupMemberEdge {
  node: SubGroupMember;
  cursor: String;
}

export interface SubGroupMemberEdgePromise
  extends Promise<SubGroupMemberEdge>,
    Fragmentable {
  node: <T = SubGroupMemberPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubGroupMemberEdgeSubscription
  extends Promise<AsyncIterator<SubGroupMemberEdge>>,
    Fragmentable {
  node: <T = SubGroupMemberSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSubGroupMember {
  count: Int;
}

export interface AggregateSubGroupMemberPromise
  extends Promise<AggregateSubGroupMember>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubGroupMemberSubscription
  extends Promise<AsyncIterator<AggregateSubGroupMember>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SubjectConnection {
  pageInfo: PageInfo;
  edges: SubjectEdge[];
}

export interface SubjectConnectionPromise
  extends Promise<SubjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubjectEdge>>() => T;
  aggregate: <T = AggregateSubjectPromise>() => T;
}

export interface SubjectConnectionSubscription
  extends Promise<AsyncIterator<SubjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SubjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSubjectSubscription>() => T;
}

export interface SubjectEdge {
  node: Subject;
  cursor: String;
}

export interface SubjectEdgePromise extends Promise<SubjectEdge>, Fragmentable {
  node: <T = SubjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubjectEdgeSubscription
  extends Promise<AsyncIterator<SubjectEdge>>,
    Fragmentable {
  node: <T = SubjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSubject {
  count: Int;
}

export interface AggregateSubjectPromise
  extends Promise<AggregateSubject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubjectSubscription
  extends Promise<AsyncIterator<AggregateSubject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SubjectSubscriptionConnection {
  pageInfo: PageInfo;
  edges: SubjectSubscriptionEdge[];
}

export interface SubjectSubscriptionConnectionPromise
  extends Promise<SubjectSubscriptionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubjectSubscriptionEdge>>() => T;
  aggregate: <T = AggregateSubjectSubscriptionPromise>() => T;
}

export interface SubjectSubscriptionConnectionSubscription
  extends Promise<AsyncIterator<SubjectSubscriptionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<SubjectSubscriptionEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateSubjectSubscriptionSubscription>() => T;
}

export interface SubjectSubscriptionEdge {
  node: SubjectSubscription;
  cursor: String;
}

export interface SubjectSubscriptionEdgePromise
  extends Promise<SubjectSubscriptionEdge>,
    Fragmentable {
  node: <T = SubjectSubscriptionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubjectSubscriptionEdgeSubscription
  extends Promise<AsyncIterator<SubjectSubscriptionEdge>>,
    Fragmentable {
  node: <T = SubjectSubscriptionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSubjectSubscription {
  count: Int;
}

export interface AggregateSubjectSubscriptionPromise
  extends Promise<AggregateSubjectSubscription>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubjectSubscriptionSubscription
  extends Promise<AsyncIterator<AggregateSubjectSubscription>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SuborgConnection {
  pageInfo: PageInfo;
  edges: SuborgEdge[];
}

export interface SuborgConnectionPromise
  extends Promise<SuborgConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SuborgEdge>>() => T;
  aggregate: <T = AggregateSuborgPromise>() => T;
}

export interface SuborgConnectionSubscription
  extends Promise<AsyncIterator<SuborgConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SuborgEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSuborgSubscription>() => T;
}

export interface SuborgEdge {
  node: Suborg;
  cursor: String;
}

export interface SuborgEdgePromise extends Promise<SuborgEdge>, Fragmentable {
  node: <T = SuborgPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SuborgEdgeSubscription
  extends Promise<AsyncIterator<SuborgEdge>>,
    Fragmentable {
  node: <T = SuborgSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSuborg {
  count: Int;
}

export interface AggregateSuborgPromise
  extends Promise<AggregateSuborg>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSuborgSubscription
  extends Promise<AsyncIterator<AggregateSuborg>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TopicConnection {
  pageInfo: PageInfo;
  edges: TopicEdge[];
}

export interface TopicConnectionPromise
  extends Promise<TopicConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TopicEdge>>() => T;
  aggregate: <T = AggregateTopicPromise>() => T;
}

export interface TopicConnectionSubscription
  extends Promise<AsyncIterator<TopicConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TopicEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTopicSubscription>() => T;
}

export interface TopicEdge {
  node: Topic;
  cursor: String;
}

export interface TopicEdgePromise extends Promise<TopicEdge>, Fragmentable {
  node: <T = TopicPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TopicEdgeSubscription
  extends Promise<AsyncIterator<TopicEdge>>,
    Fragmentable {
  node: <T = TopicSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTopic {
  count: Int;
}

export interface AggregateTopicPromise
  extends Promise<AggregateTopic>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTopicSubscription
  extends Promise<AsyncIterator<AggregateTopic>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UnitConnection {
  pageInfo: PageInfo;
  edges: UnitEdge[];
}

export interface UnitConnectionPromise
  extends Promise<UnitConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UnitEdge>>() => T;
  aggregate: <T = AggregateUnitPromise>() => T;
}

export interface UnitConnectionSubscription
  extends Promise<AsyncIterator<UnitConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UnitEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUnitSubscription>() => T;
}

export interface UnitEdge {
  node: Unit;
  cursor: String;
}

export interface UnitEdgePromise extends Promise<UnitEdge>, Fragmentable {
  node: <T = UnitPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UnitEdgeSubscription
  extends Promise<AsyncIterator<UnitEdge>>,
    Fragmentable {
  node: <T = UnitSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUnit {
  count: Int;
}

export interface AggregateUnitPromise
  extends Promise<AggregateUnit>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUnitSubscription
  extends Promise<AsyncIterator<AggregateUnit>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VoteConnection {
  pageInfo: PageInfo;
  edges: VoteEdge[];
}

export interface VoteConnectionPromise
  extends Promise<VoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VoteEdge>>() => T;
  aggregate: <T = AggregateVotePromise>() => T;
}

export interface VoteConnectionSubscription
  extends Promise<AsyncIterator<VoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteSubscription>() => T;
}

export interface VoteEdge {
  node: Vote;
  cursor: String;
}

export interface VoteEdgePromise extends Promise<VoteEdge>, Fragmentable {
  node: <T = VotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VoteEdgeSubscription
  extends Promise<AsyncIterator<VoteEdge>>,
    Fragmentable {
  node: <T = VoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVote {
  count: Int;
}

export interface AggregateVotePromise
  extends Promise<AggregateVote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteSubscription
  extends Promise<AsyncIterator<AggregateVote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AddressSubscriptionPayload {
  mutation: MutationType;
  node: Address;
  updatedFields: String[];
  previousValues: AddressPreviousValues;
}

export interface AddressSubscriptionPayloadPromise
  extends Promise<AddressSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AddressPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AddressPreviousValuesPromise>() => T;
}

export interface AddressSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AddressSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AddressSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AddressPreviousValuesSubscription>() => T;
}

export interface AddressPreviousValues {
  id: ID_Output;
  adressline: String;
  tehsil: String;
  city: String;
  district: String;
  state: String;
  pincode: String;
}

export interface AddressPreviousValuesPromise
  extends Promise<AddressPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  adressline: () => Promise<String>;
  tehsil: () => Promise<String>;
  city: () => Promise<String>;
  district: () => Promise<String>;
  state: () => Promise<String>;
  pincode: () => Promise<String>;
}

export interface AddressPreviousValuesSubscription
  extends Promise<AsyncIterator<AddressPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  adressline: () => Promise<AsyncIterator<String>>;
  tehsil: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  district: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  pincode: () => Promise<AsyncIterator<String>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  text: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ContentSubscriptionPayload {
  mutation: MutationType;
  node: Content;
  updatedFields: String[];
  previousValues: ContentPreviousValues;
}

export interface ContentSubscriptionPayloadPromise
  extends Promise<ContentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContentPreviousValuesPromise>() => T;
}

export interface ContentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContentPreviousValuesSubscription>() => T;
}

export interface ContentPreviousValues {
  id: ID_Output;
  name: String;
  number?: Int;
  fileInfo?: Json;
  type: String;
  url?: String;
  plantDate?: DateTimeOutput;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ContentPreviousValuesPromise
  extends Promise<ContentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  number: () => Promise<Int>;
  fileInfo: () => Promise<Json>;
  type: () => Promise<String>;
  url: () => Promise<String>;
  plantDate: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  state: () => Promise<String>;
  status: () => Promise<String>;
  available: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ContentPreviousValuesSubscription
  extends Promise<AsyncIterator<ContentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<Int>>;
  fileInfo: () => Promise<AsyncIterator<Json>>;
  type: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  plantDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  state: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  available: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EducationProfileSubscriptionPayload {
  mutation: MutationType;
  node: EducationProfile;
  updatedFields: String[];
  previousValues: EducationProfilePreviousValues;
}

export interface EducationProfileSubscriptionPayloadPromise
  extends Promise<EducationProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EducationProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EducationProfilePreviousValuesPromise>() => T;
}

export interface EducationProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EducationProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EducationProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EducationProfilePreviousValuesSubscription>() => T;
}

export interface EducationProfilePreviousValues {
  id: ID_Output;
  name: String;
  profiileType?: String;
  educationLevel?: String;
  educationType?: String;
  specialization?: String;
  startedYear?: DateTimeOutput;
  completedYear?: DateTimeOutput;
  result?: String;
  status?: String;
  remark?: String;
}

export interface EducationProfilePreviousValuesPromise
  extends Promise<EducationProfilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  profiileType: () => Promise<String>;
  educationLevel: () => Promise<String>;
  educationType: () => Promise<String>;
  specialization: () => Promise<String>;
  startedYear: () => Promise<DateTimeOutput>;
  completedYear: () => Promise<DateTimeOutput>;
  result: () => Promise<String>;
  status: () => Promise<String>;
  remark: () => Promise<String>;
}

export interface EducationProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<EducationProfilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  profiileType: () => Promise<AsyncIterator<String>>;
  educationLevel: () => Promise<AsyncIterator<String>>;
  educationType: () => Promise<AsyncIterator<String>>;
  specialization: () => Promise<AsyncIterator<String>>;
  startedYear: () => Promise<AsyncIterator<DateTimeOutput>>;
  completedYear: () => Promise<AsyncIterator<DateTimeOutput>>;
  result: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  remark: () => Promise<AsyncIterator<String>>;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface GroupPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GroupMemberSubscriptionPayload {
  mutation: MutationType;
  node: GroupMember;
  updatedFields: String[];
  previousValues: GroupMemberPreviousValues;
}

export interface GroupMemberSubscriptionPayloadPromise
  extends Promise<GroupMemberSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupMemberPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupMemberPreviousValuesPromise>() => T;
}

export interface GroupMemberSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupMemberSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupMemberSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupMemberPreviousValuesSubscription>() => T;
}

export interface GroupMemberPreviousValues {
  id: ID_Output;
  status?: MemberStatus;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface GroupMemberPreviousValuesPromise
  extends Promise<GroupMemberPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<MemberStatus>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GroupMemberPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupMemberPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<MemberStatus>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MediumSubscriptionPayload {
  mutation: MutationType;
  node: Medium;
  updatedFields: String[];
  previousValues: MediumPreviousValues;
}

export interface MediumSubscriptionPayloadPromise
  extends Promise<MediumSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MediumPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MediumPreviousValuesPromise>() => T;
}

export interface MediumSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MediumSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MediumSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MediumPreviousValuesSubscription>() => T;
}

export interface MediumPreviousValues {
  id: ID_Output;
  name: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface MediumPreviousValuesPromise
  extends Promise<MediumPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface MediumPreviousValuesSubscription
  extends Promise<AsyncIterator<MediumPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OptionSubscriptionPayload {
  mutation: MutationType;
  node: Option;
  updatedFields: String[];
  previousValues: OptionPreviousValues;
}

export interface OptionSubscriptionPayloadPromise
  extends Promise<OptionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OptionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OptionPreviousValuesPromise>() => T;
}

export interface OptionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OptionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OptionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OptionPreviousValuesSubscription>() => T;
}

export interface OptionPreviousValues {
  id: ID_Output;
  name: String;
  color: Color;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OptionPreviousValuesPromise
  extends Promise<OptionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  color: () => Promise<Color>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OptionPreviousValuesSubscription
  extends Promise<AsyncIterator<OptionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<Color>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrganizationSubscriptionPayload {
  mutation: MutationType;
  node: Organization;
  updatedFields: String[];
  previousValues: OrganizationPreviousValues;
}

export interface OrganizationSubscriptionPayloadPromise
  extends Promise<OrganizationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrganizationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrganizationPreviousValuesPromise>() => T;
}

export interface OrganizationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrganizationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrganizationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrganizationPreviousValuesSubscription>() => T;
}

export interface OrganizationPreviousValues {
  id: ID_Output;
  name: String;
  logo?: String;
  color?: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface OrganizationPreviousValuesPromise
  extends Promise<OrganizationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  logo: () => Promise<String>;
  color: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface OrganizationPreviousValuesSubscription
  extends Promise<AsyncIterator<OrganizationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  logo: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PersonalProfileSubscriptionPayload {
  mutation: MutationType;
  node: PersonalProfile;
  updatedFields: String[];
  previousValues: PersonalProfilePreviousValues;
}

export interface PersonalProfileSubscriptionPayloadPromise
  extends Promise<PersonalProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonalProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonalProfilePreviousValuesPromise>() => T;
}

export interface PersonalProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonalProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonalProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonalProfilePreviousValuesSubscription>() => T;
}

export interface PersonalProfilePreviousValues {
  id: ID_Output;
  name: String;
  avatar: String;
  mobile: String;
  isMobilePublished?: Boolean;
}

export interface PersonalProfilePreviousValuesPromise
  extends Promise<PersonalProfilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  mobile: () => Promise<String>;
  isMobilePublished: () => Promise<Boolean>;
}

export interface PersonalProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<PersonalProfilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  mobile: () => Promise<AsyncIterator<String>>;
  isMobilePublished: () => Promise<AsyncIterator<Boolean>>;
}

export interface PollSubscriptionPayload {
  mutation: MutationType;
  node: Poll;
  updatedFields: String[];
  previousValues: PollPreviousValues;
}

export interface PollSubscriptionPayloadPromise
  extends Promise<PollSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PollPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PollPreviousValuesPromise>() => T;
}

export interface PollSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PollSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PollSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PollPreviousValuesSubscription>() => T;
}

export interface PollPreviousValues {
  id: ID_Output;
  title: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PollPreviousValuesPromise
  extends Promise<PollPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PollPreviousValuesSubscription
  extends Promise<AsyncIterator<PollPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  body: String;
  published: Boolean;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  published: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProfileSubscriptionPayload {
  mutation: MutationType;
  node: Profile;
  updatedFields: String[];
  previousValues: ProfilePreviousValues;
}

export interface ProfileSubscriptionPayloadPromise
  extends Promise<ProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProfilePreviousValuesPromise>() => T;
}

export interface ProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProfilePreviousValuesSubscription>() => T;
}

export interface ProfilePreviousValues {
  id: ID_Output;
  name: String;
}

export interface ProfilePreviousValuesPromise
  extends Promise<ProfilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<ProfilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface QuestionSubscriptionPayload {
  mutation: MutationType;
  node: Question;
  updatedFields: String[];
  previousValues: QuestionPreviousValues;
}

export interface QuestionSubscriptionPayloadPromise
  extends Promise<QuestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuestionPreviousValuesPromise>() => T;
}

export interface QuestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuestionPreviousValuesSubscription>() => T;
}

export interface QuestionPreviousValues {
  id: ID_Output;
  quetype: String;
  categories?: String;
  title?: String;
  descriptionType: String;
  descriptionurl?: String;
  options: Json;
  level: Int;
  plandate?: DateTimeOutput;
  isPublished?: Boolean;
  state?: String;
  status?: String;
  available?: String;
  isReviewed?: Boolean;
  explainationType?: String;
  explaination?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface QuestionPreviousValuesPromise
  extends Promise<QuestionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quetype: () => Promise<String>;
  categories: () => Promise<String>;
  title: () => Promise<String>;
  descriptionType: () => Promise<String>;
  descriptionurl: () => Promise<String>;
  options: () => Promise<Json>;
  level: () => Promise<Int>;
  plandate: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  state: () => Promise<String>;
  status: () => Promise<String>;
  available: () => Promise<String>;
  isReviewed: () => Promise<Boolean>;
  explainationType: () => Promise<String>;
  explaination: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface QuestionPreviousValuesSubscription
  extends Promise<AsyncIterator<QuestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quetype: () => Promise<AsyncIterator<String>>;
  categories: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  descriptionType: () => Promise<AsyncIterator<String>>;
  descriptionurl: () => Promise<AsyncIterator<String>>;
  options: () => Promise<AsyncIterator<Json>>;
  level: () => Promise<AsyncIterator<Int>>;
  plandate: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  state: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  available: () => Promise<AsyncIterator<String>>;
  isReviewed: () => Promise<AsyncIterator<Boolean>>;
  explainationType: () => Promise<AsyncIterator<String>>;
  explaination: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface QuizSubscriptionPayload {
  mutation: MutationType;
  node: Quiz;
  updatedFields: String[];
  previousValues: QuizPreviousValues;
}

export interface QuizSubscriptionPayloadPromise
  extends Promise<QuizSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuizPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuizPreviousValuesPromise>() => T;
}

export interface QuizSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuizSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuizSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuizPreviousValuesSubscription>() => T;
}

export interface QuizPreviousValues {
  id: ID_Output;
  quizName: String;
  quizType: String;
  markingscheme?: Json;
  quizlevel?: Int;
  threshold?: Json;
  isForLevelPromotion?: Boolean;
  showExplaination?: String;
  showanswer?: Boolean;
  description?: String;
  allowedCorrection?: Boolean;
  duration?: Int;
  commentFromTeacher?: String;
  isPublished?: Boolean;
  isApproved?: Boolean;
  weightage?: Float;
  totalmarks?: Float;
  validFrom?: DateTimeOutput;
  validTo?: DateTimeOutput;
  retryAllowed?: Boolean;
}

export interface QuizPreviousValuesPromise
  extends Promise<QuizPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quizName: () => Promise<String>;
  quizType: () => Promise<String>;
  markingscheme: () => Promise<Json>;
  quizlevel: () => Promise<Int>;
  threshold: () => Promise<Json>;
  isForLevelPromotion: () => Promise<Boolean>;
  showExplaination: () => Promise<String>;
  showanswer: () => Promise<Boolean>;
  description: () => Promise<String>;
  allowedCorrection: () => Promise<Boolean>;
  duration: () => Promise<Int>;
  commentFromTeacher: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
  isApproved: () => Promise<Boolean>;
  weightage: () => Promise<Float>;
  totalmarks: () => Promise<Float>;
  validFrom: () => Promise<DateTimeOutput>;
  validTo: () => Promise<DateTimeOutput>;
  retryAllowed: () => Promise<Boolean>;
}

export interface QuizPreviousValuesSubscription
  extends Promise<AsyncIterator<QuizPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quizName: () => Promise<AsyncIterator<String>>;
  quizType: () => Promise<AsyncIterator<String>>;
  markingscheme: () => Promise<AsyncIterator<Json>>;
  quizlevel: () => Promise<AsyncIterator<Int>>;
  threshold: () => Promise<AsyncIterator<Json>>;
  isForLevelPromotion: () => Promise<AsyncIterator<Boolean>>;
  showExplaination: () => Promise<AsyncIterator<String>>;
  showanswer: () => Promise<AsyncIterator<Boolean>>;
  description: () => Promise<AsyncIterator<String>>;
  allowedCorrection: () => Promise<AsyncIterator<Boolean>>;
  duration: () => Promise<AsyncIterator<Int>>;
  commentFromTeacher: () => Promise<AsyncIterator<String>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  isApproved: () => Promise<AsyncIterator<Boolean>>;
  weightage: () => Promise<AsyncIterator<Float>>;
  totalmarks: () => Promise<AsyncIterator<Float>>;
  validFrom: () => Promise<AsyncIterator<DateTimeOutput>>;
  validTo: () => Promise<AsyncIterator<DateTimeOutput>>;
  retryAllowed: () => Promise<AsyncIterator<Boolean>>;
}

export interface ResultSubscriptionPayload {
  mutation: MutationType;
  node: Result;
  updatedFields: String[];
  previousValues: ResultPreviousValues;
}

export interface ResultSubscriptionPayloadPromise
  extends Promise<ResultSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ResultPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ResultPreviousValuesPromise>() => T;
}

export interface ResultSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ResultSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ResultSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ResultPreviousValuesSubscription>() => T;
}

export interface ResultPreviousValues {
  id: ID_Output;
  quizName: String;
  quizType: String;
  result: String;
  quizlevel: Int;
  score?: Float;
  achievement?: String;
  duration?: Int;
  attemptedDate: DateTimeOutput;
  commentFromTeacher?: String;
  rank?: Int;
}

export interface ResultPreviousValuesPromise
  extends Promise<ResultPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quizName: () => Promise<String>;
  quizType: () => Promise<String>;
  result: () => Promise<String>;
  quizlevel: () => Promise<Int>;
  score: () => Promise<Float>;
  achievement: () => Promise<String>;
  duration: () => Promise<Int>;
  attemptedDate: () => Promise<DateTimeOutput>;
  commentFromTeacher: () => Promise<String>;
  rank: () => Promise<Int>;
}

export interface ResultPreviousValuesSubscription
  extends Promise<AsyncIterator<ResultPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quizName: () => Promise<AsyncIterator<String>>;
  quizType: () => Promise<AsyncIterator<String>>;
  result: () => Promise<AsyncIterator<String>>;
  quizlevel: () => Promise<AsyncIterator<Int>>;
  score: () => Promise<AsyncIterator<Float>>;
  achievement: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Int>>;
  attemptedDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  commentFromTeacher: () => Promise<AsyncIterator<String>>;
  rank: () => Promise<AsyncIterator<Int>>;
}

export interface RoleSubscriptionPayload {
  mutation: MutationType;
  node: Role;
  updatedFields: String[];
  previousValues: RolePreviousValues;
}

export interface RoleSubscriptionPayloadPromise
  extends Promise<RoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RolePreviousValuesPromise>() => T;
}

export interface RoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RolePreviousValuesSubscription>() => T;
}

export interface RolePreviousValues {
  id: ID_Output;
  name: ROLENAME;
  description?: String;
  status?: String;
  state?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface RolePreviousValuesPromise
  extends Promise<RolePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<ROLENAME>;
  description: () => Promise<String>;
  status: () => Promise<String>;
  state: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface RolePreviousValuesSubscription
  extends Promise<AsyncIterator<RolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<ROLENAME>>;
  description: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoleMemberSubscriptionPayload {
  mutation: MutationType;
  node: RoleMember;
  updatedFields: String[];
  previousValues: RoleMemberPreviousValues;
}

export interface RoleMemberSubscriptionPayloadPromise
  extends Promise<RoleMemberSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RoleMemberPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoleMemberPreviousValuesPromise>() => T;
}

export interface RoleMemberSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleMemberSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleMemberSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoleMemberPreviousValuesSubscription>() => T;
}

export interface RoleMemberPreviousValues {
  id: ID_Output;
  status?: RoleStatus;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface RoleMemberPreviousValuesPromise
  extends Promise<RoleMemberPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<RoleStatus>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface RoleMemberPreviousValuesSubscription
  extends Promise<AsyncIterator<RoleMemberPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<RoleStatus>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StdSubscriptionPayload {
  mutation: MutationType;
  node: Std;
  updatedFields: String[];
  previousValues: StdPreviousValues;
}

export interface StdSubscriptionPayloadPromise
  extends Promise<StdSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StdPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StdPreviousValuesPromise>() => T;
}

export interface StdSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StdSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StdSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StdPreviousValuesSubscription>() => T;
}

export interface StdPreviousValues {
  id: ID_Output;
  gradename: GRADENAME;
  category: String;
  branch?: String;
  year?: String;
  isPublished: Boolean;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface StdPreviousValuesPromise
  extends Promise<StdPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gradename: () => Promise<GRADENAME>;
  category: () => Promise<String>;
  branch: () => Promise<String>;
  year: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface StdPreviousValuesSubscription
  extends Promise<AsyncIterator<StdPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gradename: () => Promise<AsyncIterator<GRADENAME>>;
  category: () => Promise<AsyncIterator<String>>;
  branch: () => Promise<AsyncIterator<String>>;
  year: () => Promise<AsyncIterator<String>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SubGroupSubscriptionPayload {
  mutation: MutationType;
  node: SubGroup;
  updatedFields: String[];
  previousValues: SubGroupPreviousValues;
}

export interface SubGroupSubscriptionPayloadPromise
  extends Promise<SubGroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SubGroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SubGroupPreviousValuesPromise>() => T;
}

export interface SubGroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SubGroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SubGroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SubGroupPreviousValuesSubscription>() => T;
}

export interface SubGroupPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface SubGroupPreviousValuesPromise
  extends Promise<SubGroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SubGroupPreviousValuesSubscription
  extends Promise<AsyncIterator<SubGroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SubGroupMemberSubscriptionPayload {
  mutation: MutationType;
  node: SubGroupMember;
  updatedFields: String[];
  previousValues: SubGroupMemberPreviousValues;
}

export interface SubGroupMemberSubscriptionPayloadPromise
  extends Promise<SubGroupMemberSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SubGroupMemberPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SubGroupMemberPreviousValuesPromise>() => T;
}

export interface SubGroupMemberSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SubGroupMemberSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SubGroupMemberSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SubGroupMemberPreviousValuesSubscription>() => T;
}

export interface SubGroupMemberPreviousValues {
  id: ID_Output;
  status?: MemberStatus;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface SubGroupMemberPreviousValuesPromise
  extends Promise<SubGroupMemberPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<MemberStatus>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SubGroupMemberPreviousValuesSubscription
  extends Promise<AsyncIterator<SubGroupMemberPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<MemberStatus>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SubjectSubscriptionPayload {
  mutation: MutationType;
  node: Subject;
  updatedFields: String[];
  previousValues: SubjectPreviousValues;
}

export interface SubjectSubscriptionPayloadPromise
  extends Promise<SubjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SubjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SubjectPreviousValuesPromise>() => T;
}

export interface SubjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SubjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SubjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SubjectPreviousValuesSubscription>() => T;
}

export interface SubjectPreviousValues {
  id: ID_Output;
  name: String;
  picture?: String;
  board?: String;
  category?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  plantDate?: DateTimeOutput;
  isPublished?: Boolean;
  state?: String;
  status?: String;
  available?: String;
  description?: String;
}

export interface SubjectPreviousValuesPromise
  extends Promise<SubjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  picture: () => Promise<String>;
  board: () => Promise<String>;
  category: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  plantDate: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  state: () => Promise<String>;
  status: () => Promise<String>;
  available: () => Promise<String>;
  description: () => Promise<String>;
}

export interface SubjectPreviousValuesSubscription
  extends Promise<AsyncIterator<SubjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  picture: () => Promise<AsyncIterator<String>>;
  board: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  plantDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  state: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  available: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface SubjectSubscriptionSubscriptionPayload {
  mutation: MutationType;
  node: SubjectSubscription;
  updatedFields: String[];
  previousValues: SubjectSubscriptionPreviousValues;
}

export interface SubjectSubscriptionSubscriptionPayloadPromise
  extends Promise<SubjectSubscriptionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SubjectSubscriptionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SubjectSubscriptionPreviousValuesPromise>() => T;
}

export interface SubjectSubscriptionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SubjectSubscriptionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SubjectSubscriptionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SubjectSubscriptionPreviousValuesSubscription>() => T;
}

export interface SubjectSubscriptionPreviousValues {
  id: ID_Output;
  subsType?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface SubjectSubscriptionPreviousValuesPromise
  extends Promise<SubjectSubscriptionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  subsType: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SubjectSubscriptionPreviousValuesSubscription
  extends Promise<AsyncIterator<SubjectSubscriptionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  subsType: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SuborgSubscriptionPayload {
  mutation: MutationType;
  node: Suborg;
  updatedFields: String[];
  previousValues: SuborgPreviousValues;
}

export interface SuborgSubscriptionPayloadPromise
  extends Promise<SuborgSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SuborgPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SuborgPreviousValuesPromise>() => T;
}

export interface SuborgSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SuborgSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SuborgSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SuborgPreviousValuesSubscription>() => T;
}

export interface SuborgPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface SuborgPreviousValuesPromise
  extends Promise<SuborgPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SuborgPreviousValuesSubscription
  extends Promise<AsyncIterator<SuborgPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TopicSubscriptionPayload {
  mutation: MutationType;
  node: Topic;
  updatedFields: String[];
  previousValues: TopicPreviousValues;
}

export interface TopicSubscriptionPayloadPromise
  extends Promise<TopicSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TopicPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TopicPreviousValuesPromise>() => T;
}

export interface TopicSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TopicSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TopicSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TopicPreviousValuesSubscription>() => T;
}

export interface TopicPreviousValues {
  id: ID_Output;
  name: String;
  plantDate?: DateTimeOutput;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface TopicPreviousValuesPromise
  extends Promise<TopicPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  plantDate: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  state: () => Promise<String>;
  status: () => Promise<String>;
  available: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TopicPreviousValuesSubscription
  extends Promise<AsyncIterator<TopicPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  plantDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  state: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  available: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UnitSubscriptionPayload {
  mutation: MutationType;
  node: Unit;
  updatedFields: String[];
  previousValues: UnitPreviousValues;
}

export interface UnitSubscriptionPayloadPromise
  extends Promise<UnitSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UnitPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UnitPreviousValuesPromise>() => T;
}

export interface UnitSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UnitSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UnitSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UnitPreviousValuesSubscription>() => T;
}

export interface UnitPreviousValues {
  id: ID_Output;
  name: String;
  plantDate?: DateTimeOutput;
  isPublished: Boolean;
  state: String;
  status: String;
  available?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UnitPreviousValuesPromise
  extends Promise<UnitPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  plantDate: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  state: () => Promise<String>;
  status: () => Promise<String>;
  available: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UnitPreviousValuesSubscription
  extends Promise<AsyncIterator<UnitPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  plantDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  state: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  available: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  createdBy?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdBy: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdBy: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface VoteSubscriptionPayload {
  mutation: MutationType;
  node: Vote;
  updatedFields: String[];
  previousValues: VotePreviousValues;
}

export interface VoteSubscriptionPayloadPromise
  extends Promise<VoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VotePreviousValuesPromise>() => T;
}

export interface VoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VotePreviousValuesSubscription>() => T;
}

export interface VotePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface VotePreviousValuesPromise
  extends Promise<VotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface VotePreviousValuesSubscription
  extends Promise<AsyncIterator<VotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Json = any;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Organization",
    embedded: false
  },
  {
    name: "Suborg",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "GroupMember",
    embedded: false
  },
  {
    name: "SubGroup",
    embedded: false
  },
  {
    name: "SubGroupMember",
    embedded: false
  },
  {
    name: "RoleMember",
    embedded: false
  },
  {
    name: "RoleStatus",
    embedded: false
  },
  {
    name: "MemberStatus",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "ROLENAME",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Medium",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "SubjectSubscription",
    embedded: false
  },
  {
    name: "Profile",
    embedded: false
  },
  {
    name: "PersonalProfile",
    embedded: false
  },
  {
    name: "Address",
    embedded: false
  },
  {
    name: "EducationProfile",
    embedded: false
  },
  {
    name: "Std",
    embedded: false
  },
  {
    name: "GRADENAME",
    embedded: false
  },
  {
    name: "Content",
    embedded: false
  },
  {
    name: "Topic",
    embedded: false
  },
  {
    name: "Unit",
    embedded: false
  },
  {
    name: "Question",
    embedded: false
  },
  {
    name: "Quiz",
    embedded: false
  },
  {
    name: "Result",
    embedded: false
  },
  {
    name: "Subject",
    embedded: false
  },
  {
    name: "Poll",
    embedded: false
  },
  {
    name: "Color",
    embedded: false
  },
  {
    name: "Option",
    embedded: false
  },
  {
    name: "Vote",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;

// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  group: (where?: GroupWhereInput) => Promise<boolean>;
  organization: (where?: OrganizationWhereInput) => Promise<boolean>;
  sub_Group: (where?: Sub_GroupWhereInput) => Promise<boolean>;
  sub_Organization: (where?: Sub_OrganizationWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  group: (where: GroupWhereUniqueInput) => GroupNullablePromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  organization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationNullablePromise;
  organizations: (args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Organization>;
  organizationsConnection: (args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrganizationConnectionPromise;
  subGroup: (where: Sub_GroupWhereUniqueInput) => Sub_GroupNullablePromise;
  subGroups: (args?: {
    where?: Sub_GroupWhereInput;
    orderBy?: Sub_GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Sub_Group>;
  subGroupsConnection: (args?: {
    where?: Sub_GroupWhereInput;
    orderBy?: Sub_GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Sub_GroupConnectionPromise;
  subOrganization: (
    where: Sub_OrganizationWhereUniqueInput
  ) => Sub_OrganizationNullablePromise;
  subOrganizations: (args?: {
    where?: Sub_OrganizationWhereInput;
    orderBy?: Sub_OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Sub_Organization>;
  subOrganizationsConnection: (args?: {
    where?: Sub_OrganizationWhereInput;
    orderBy?: Sub_OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Sub_OrganizationConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  updateManyGroups: (args: {
    data: GroupUpdateManyMutationInput;
    where?: GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createOrganization: (data: OrganizationCreateInput) => OrganizationPromise;
  updateOrganization: (args: {
    data: OrganizationUpdateInput;
    where: OrganizationWhereUniqueInput;
  }) => OrganizationPromise;
  updateManyOrganizations: (args: {
    data: OrganizationUpdateManyMutationInput;
    where?: OrganizationWhereInput;
  }) => BatchPayloadPromise;
  upsertOrganization: (args: {
    where: OrganizationWhereUniqueInput;
    create: OrganizationCreateInput;
    update: OrganizationUpdateInput;
  }) => OrganizationPromise;
  deleteOrganization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationPromise;
  deleteManyOrganizations: (
    where?: OrganizationWhereInput
  ) => BatchPayloadPromise;
  createSub_Group: (data: Sub_GroupCreateInput) => Sub_GroupPromise;
  updateSub_Group: (args: {
    data: Sub_GroupUpdateInput;
    where: Sub_GroupWhereUniqueInput;
  }) => Sub_GroupPromise;
  updateManySub_Groups: (args: {
    data: Sub_GroupUpdateManyMutationInput;
    where?: Sub_GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertSub_Group: (args: {
    where: Sub_GroupWhereUniqueInput;
    create: Sub_GroupCreateInput;
    update: Sub_GroupUpdateInput;
  }) => Sub_GroupPromise;
  deleteSub_Group: (where: Sub_GroupWhereUniqueInput) => Sub_GroupPromise;
  deleteManySub_Groups: (where?: Sub_GroupWhereInput) => BatchPayloadPromise;
  createSub_Organization: (
    data: Sub_OrganizationCreateInput
  ) => Sub_OrganizationPromise;
  updateSub_Organization: (args: {
    data: Sub_OrganizationUpdateInput;
    where: Sub_OrganizationWhereUniqueInput;
  }) => Sub_OrganizationPromise;
  updateManySub_Organizations: (args: {
    data: Sub_OrganizationUpdateManyMutationInput;
    where?: Sub_OrganizationWhereInput;
  }) => BatchPayloadPromise;
  upsertSub_Organization: (args: {
    where: Sub_OrganizationWhereUniqueInput;
    create: Sub_OrganizationCreateInput;
    update: Sub_OrganizationUpdateInput;
  }) => Sub_OrganizationPromise;
  deleteSub_Organization: (
    where: Sub_OrganizationWhereUniqueInput
  ) => Sub_OrganizationPromise;
  deleteManySub_Organizations: (
    where?: Sub_OrganizationWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  organization: (
    where?: OrganizationSubscriptionWhereInput
  ) => OrganizationSubscriptionPayloadSubscription;
  subGroup: (
    where?: Sub_GroupSubscriptionWhereInput
  ) => Sub_GroupSubscriptionPayloadSubscription;
  subOrganization: (
    where?: Sub_OrganizationSubscriptionWhereInput
  ) => Sub_OrganizationSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Sub_OrganizationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "sub_organization_name_ASC"
  | "sub_organization_name_DESC"
  | "sub_organization_description_ASC"
  | "sub_organization_description_DESC"
  | "sub_organization_logo_ASC"
  | "sub_organization_logo_DESC"
  | "sub_organization_type_ASC"
  | "sub_organization_type_DESC"
  | "sub_organization_size_ASC"
  | "sub_organization_size_DESC"
  | "sub_organization_website_ASC"
  | "sub_organization_website_DESC"
  | "sub_organization_created_at_ASC"
  | "sub_organization_created_at_DESC"
  | "sub_organization_updated_at_ASC"
  | "sub_organization_updated_at_DESC";

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "group_name_ASC"
  | "group_name_DESC"
  | "group_logo_ASC"
  | "group_logo_DESC"
  | "group_size_ASC"
  | "group_size_DESC"
  | "group_description_ASC"
  | "group_description_DESC"
  | "group_type_ASC"
  | "group_type_DESC"
  | "group_website_ASC"
  | "group_website_DESC"
  | "group_created_at_ASC"
  | "group_created_at_DESC"
  | "group_updated_at_ASC"
  | "group_updated_at_DESC";

export type Sub_GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "sub_group_name_ASC"
  | "sub_group_name_DESC"
  | "sub_group_logo_ASC"
  | "sub_group_logo_DESC"
  | "sub_group_size_ASC"
  | "sub_group_size_DESC"
  | "sub_group_description_ASC"
  | "sub_group_description_DESC"
  | "sub_group_type_ASC"
  | "sub_group_type_DESC"
  | "sub_group_website_ASC"
  | "sub_group_website_DESC"
  | "sub_group_created_at_ASC"
  | "sub_group_created_at_DESC"
  | "subb_group_updated_at_ASC"
  | "subb_group_updated_at_DESC";

export type OrganizationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "organization_name_ASC"
  | "organization_name_DESC"
  | "organization_description_ASC"
  | "organization_description_DESC"
  | "organization_logo_ASC"
  | "organization_logo_DESC"
  | "organization_size_ASC"
  | "organization_size_DESC"
  | "organization_type_ASC"
  | "organization_type_DESC"
  | "organization_website_ASC"
  | "organization_website_DESC"
  | "organization_created_at_ASC"
  | "organization_created_at_DESC"
  | "organization_updated_at_ASC"
  | "organization_updated_at_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type GroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface Sub_OrganizationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sub_organization_name?: Maybe<String>;
  sub_organization_name_not?: Maybe<String>;
  sub_organization_name_in?: Maybe<String[] | String>;
  sub_organization_name_not_in?: Maybe<String[] | String>;
  sub_organization_name_lt?: Maybe<String>;
  sub_organization_name_lte?: Maybe<String>;
  sub_organization_name_gt?: Maybe<String>;
  sub_organization_name_gte?: Maybe<String>;
  sub_organization_name_contains?: Maybe<String>;
  sub_organization_name_not_contains?: Maybe<String>;
  sub_organization_name_starts_with?: Maybe<String>;
  sub_organization_name_not_starts_with?: Maybe<String>;
  sub_organization_name_ends_with?: Maybe<String>;
  sub_organization_name_not_ends_with?: Maybe<String>;
  sub_organization_description?: Maybe<String>;
  sub_organization_description_not?: Maybe<String>;
  sub_organization_description_in?: Maybe<String[] | String>;
  sub_organization_description_not_in?: Maybe<String[] | String>;
  sub_organization_description_lt?: Maybe<String>;
  sub_organization_description_lte?: Maybe<String>;
  sub_organization_description_gt?: Maybe<String>;
  sub_organization_description_gte?: Maybe<String>;
  sub_organization_description_contains?: Maybe<String>;
  sub_organization_description_not_contains?: Maybe<String>;
  sub_organization_description_starts_with?: Maybe<String>;
  sub_organization_description_not_starts_with?: Maybe<String>;
  sub_organization_description_ends_with?: Maybe<String>;
  sub_organization_description_not_ends_with?: Maybe<String>;
  sub_organization_logo?: Maybe<String>;
  sub_organization_logo_not?: Maybe<String>;
  sub_organization_logo_in?: Maybe<String[] | String>;
  sub_organization_logo_not_in?: Maybe<String[] | String>;
  sub_organization_logo_lt?: Maybe<String>;
  sub_organization_logo_lte?: Maybe<String>;
  sub_organization_logo_gt?: Maybe<String>;
  sub_organization_logo_gte?: Maybe<String>;
  sub_organization_logo_contains?: Maybe<String>;
  sub_organization_logo_not_contains?: Maybe<String>;
  sub_organization_logo_starts_with?: Maybe<String>;
  sub_organization_logo_not_starts_with?: Maybe<String>;
  sub_organization_logo_ends_with?: Maybe<String>;
  sub_organization_logo_not_ends_with?: Maybe<String>;
  sub_organization_type?: Maybe<String>;
  sub_organization_type_not?: Maybe<String>;
  sub_organization_type_in?: Maybe<String[] | String>;
  sub_organization_type_not_in?: Maybe<String[] | String>;
  sub_organization_type_lt?: Maybe<String>;
  sub_organization_type_lte?: Maybe<String>;
  sub_organization_type_gt?: Maybe<String>;
  sub_organization_type_gte?: Maybe<String>;
  sub_organization_type_contains?: Maybe<String>;
  sub_organization_type_not_contains?: Maybe<String>;
  sub_organization_type_starts_with?: Maybe<String>;
  sub_organization_type_not_starts_with?: Maybe<String>;
  sub_organization_type_ends_with?: Maybe<String>;
  sub_organization_type_not_ends_with?: Maybe<String>;
  sub_organization_size?: Maybe<Int>;
  sub_organization_size_not?: Maybe<Int>;
  sub_organization_size_in?: Maybe<Int[] | Int>;
  sub_organization_size_not_in?: Maybe<Int[] | Int>;
  sub_organization_size_lt?: Maybe<Int>;
  sub_organization_size_lte?: Maybe<Int>;
  sub_organization_size_gt?: Maybe<Int>;
  sub_organization_size_gte?: Maybe<Int>;
  sub_organization_website?: Maybe<String>;
  sub_organization_website_not?: Maybe<String>;
  sub_organization_website_in?: Maybe<String[] | String>;
  sub_organization_website_not_in?: Maybe<String[] | String>;
  sub_organization_website_lt?: Maybe<String>;
  sub_organization_website_lte?: Maybe<String>;
  sub_organization_website_gt?: Maybe<String>;
  sub_organization_website_gte?: Maybe<String>;
  sub_organization_website_contains?: Maybe<String>;
  sub_organization_website_not_contains?: Maybe<String>;
  sub_organization_website_starts_with?: Maybe<String>;
  sub_organization_website_not_starts_with?: Maybe<String>;
  sub_organization_website_ends_with?: Maybe<String>;
  sub_organization_website_not_ends_with?: Maybe<String>;
  organization?: Maybe<OrganizationWhereInput>;
  groups_every?: Maybe<GroupWhereInput>;
  groups_some?: Maybe<GroupWhereInput>;
  groups_none?: Maybe<GroupWhereInput>;
  sub_organization_created_at?: Maybe<DateTimeInput>;
  sub_organization_created_at_not?: Maybe<DateTimeInput>;
  sub_organization_created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  sub_organization_created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  sub_organization_created_at_lt?: Maybe<DateTimeInput>;
  sub_organization_created_at_lte?: Maybe<DateTimeInput>;
  sub_organization_created_at_gt?: Maybe<DateTimeInput>;
  sub_organization_created_at_gte?: Maybe<DateTimeInput>;
  sub_organization_updated_at?: Maybe<DateTimeInput>;
  sub_organization_updated_at_not?: Maybe<DateTimeInput>;
  sub_organization_updated_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  sub_organization_updated_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  sub_organization_updated_at_lt?: Maybe<DateTimeInput>;
  sub_organization_updated_at_lte?: Maybe<DateTimeInput>;
  sub_organization_updated_at_gt?: Maybe<DateTimeInput>;
  sub_organization_updated_at_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<Sub_OrganizationWhereInput[] | Sub_OrganizationWhereInput>;
  OR?: Maybe<Sub_OrganizationWhereInput[] | Sub_OrganizationWhereInput>;
  NOT?: Maybe<Sub_OrganizationWhereInput[] | Sub_OrganizationWhereInput>;
}

export interface OrganizationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  organization_name?: Maybe<String>;
  organization_name_not?: Maybe<String>;
  organization_name_in?: Maybe<String[] | String>;
  organization_name_not_in?: Maybe<String[] | String>;
  organization_name_lt?: Maybe<String>;
  organization_name_lte?: Maybe<String>;
  organization_name_gt?: Maybe<String>;
  organization_name_gte?: Maybe<String>;
  organization_name_contains?: Maybe<String>;
  organization_name_not_contains?: Maybe<String>;
  organization_name_starts_with?: Maybe<String>;
  organization_name_not_starts_with?: Maybe<String>;
  organization_name_ends_with?: Maybe<String>;
  organization_name_not_ends_with?: Maybe<String>;
  organization_description?: Maybe<String>;
  organization_description_not?: Maybe<String>;
  organization_description_in?: Maybe<String[] | String>;
  organization_description_not_in?: Maybe<String[] | String>;
  organization_description_lt?: Maybe<String>;
  organization_description_lte?: Maybe<String>;
  organization_description_gt?: Maybe<String>;
  organization_description_gte?: Maybe<String>;
  organization_description_contains?: Maybe<String>;
  organization_description_not_contains?: Maybe<String>;
  organization_description_starts_with?: Maybe<String>;
  organization_description_not_starts_with?: Maybe<String>;
  organization_description_ends_with?: Maybe<String>;
  organization_description_not_ends_with?: Maybe<String>;
  organization_logo?: Maybe<String>;
  organization_logo_not?: Maybe<String>;
  organization_logo_in?: Maybe<String[] | String>;
  organization_logo_not_in?: Maybe<String[] | String>;
  organization_logo_lt?: Maybe<String>;
  organization_logo_lte?: Maybe<String>;
  organization_logo_gt?: Maybe<String>;
  organization_logo_gte?: Maybe<String>;
  organization_logo_contains?: Maybe<String>;
  organization_logo_not_contains?: Maybe<String>;
  organization_logo_starts_with?: Maybe<String>;
  organization_logo_not_starts_with?: Maybe<String>;
  organization_logo_ends_with?: Maybe<String>;
  organization_logo_not_ends_with?: Maybe<String>;
  organization_size?: Maybe<Int>;
  organization_size_not?: Maybe<Int>;
  organization_size_in?: Maybe<Int[] | Int>;
  organization_size_not_in?: Maybe<Int[] | Int>;
  organization_size_lt?: Maybe<Int>;
  organization_size_lte?: Maybe<Int>;
  organization_size_gt?: Maybe<Int>;
  organization_size_gte?: Maybe<Int>;
  organization_type?: Maybe<String>;
  organization_type_not?: Maybe<String>;
  organization_type_in?: Maybe<String[] | String>;
  organization_type_not_in?: Maybe<String[] | String>;
  organization_type_lt?: Maybe<String>;
  organization_type_lte?: Maybe<String>;
  organization_type_gt?: Maybe<String>;
  organization_type_gte?: Maybe<String>;
  organization_type_contains?: Maybe<String>;
  organization_type_not_contains?: Maybe<String>;
  organization_type_starts_with?: Maybe<String>;
  organization_type_not_starts_with?: Maybe<String>;
  organization_type_ends_with?: Maybe<String>;
  organization_type_not_ends_with?: Maybe<String>;
  organization_website?: Maybe<String>;
  organization_website_not?: Maybe<String>;
  organization_website_in?: Maybe<String[] | String>;
  organization_website_not_in?: Maybe<String[] | String>;
  organization_website_lt?: Maybe<String>;
  organization_website_lte?: Maybe<String>;
  organization_website_gt?: Maybe<String>;
  organization_website_gte?: Maybe<String>;
  organization_website_contains?: Maybe<String>;
  organization_website_not_contains?: Maybe<String>;
  organization_website_starts_with?: Maybe<String>;
  organization_website_not_starts_with?: Maybe<String>;
  organization_website_ends_with?: Maybe<String>;
  organization_website_not_ends_with?: Maybe<String>;
  sub_organizations_every?: Maybe<Sub_OrganizationWhereInput>;
  sub_organizations_some?: Maybe<Sub_OrganizationWhereInput>;
  sub_organizations_none?: Maybe<Sub_OrganizationWhereInput>;
  organization_created_at?: Maybe<DateTimeInput>;
  organization_created_at_not?: Maybe<DateTimeInput>;
  organization_created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  organization_created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  organization_created_at_lt?: Maybe<DateTimeInput>;
  organization_created_at_lte?: Maybe<DateTimeInput>;
  organization_created_at_gt?: Maybe<DateTimeInput>;
  organization_created_at_gte?: Maybe<DateTimeInput>;
  organization_updated_at?: Maybe<DateTimeInput>;
  organization_updated_at_not?: Maybe<DateTimeInput>;
  organization_updated_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  organization_updated_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  organization_updated_at_lt?: Maybe<DateTimeInput>;
  organization_updated_at_lte?: Maybe<DateTimeInput>;
  organization_updated_at_gt?: Maybe<DateTimeInput>;
  organization_updated_at_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
  OR?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
  NOT?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
}

export interface GroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  group_name?: Maybe<String>;
  group_name_not?: Maybe<String>;
  group_name_in?: Maybe<String[] | String>;
  group_name_not_in?: Maybe<String[] | String>;
  group_name_lt?: Maybe<String>;
  group_name_lte?: Maybe<String>;
  group_name_gt?: Maybe<String>;
  group_name_gte?: Maybe<String>;
  group_name_contains?: Maybe<String>;
  group_name_not_contains?: Maybe<String>;
  group_name_starts_with?: Maybe<String>;
  group_name_not_starts_with?: Maybe<String>;
  group_name_ends_with?: Maybe<String>;
  group_name_not_ends_with?: Maybe<String>;
  group_logo?: Maybe<String>;
  group_logo_not?: Maybe<String>;
  group_logo_in?: Maybe<String[] | String>;
  group_logo_not_in?: Maybe<String[] | String>;
  group_logo_lt?: Maybe<String>;
  group_logo_lte?: Maybe<String>;
  group_logo_gt?: Maybe<String>;
  group_logo_gte?: Maybe<String>;
  group_logo_contains?: Maybe<String>;
  group_logo_not_contains?: Maybe<String>;
  group_logo_starts_with?: Maybe<String>;
  group_logo_not_starts_with?: Maybe<String>;
  group_logo_ends_with?: Maybe<String>;
  group_logo_not_ends_with?: Maybe<String>;
  group_size?: Maybe<Int>;
  group_size_not?: Maybe<Int>;
  group_size_in?: Maybe<Int[] | Int>;
  group_size_not_in?: Maybe<Int[] | Int>;
  group_size_lt?: Maybe<Int>;
  group_size_lte?: Maybe<Int>;
  group_size_gt?: Maybe<Int>;
  group_size_gte?: Maybe<Int>;
  group_description?: Maybe<String>;
  group_description_not?: Maybe<String>;
  group_description_in?: Maybe<String[] | String>;
  group_description_not_in?: Maybe<String[] | String>;
  group_description_lt?: Maybe<String>;
  group_description_lte?: Maybe<String>;
  group_description_gt?: Maybe<String>;
  group_description_gte?: Maybe<String>;
  group_description_contains?: Maybe<String>;
  group_description_not_contains?: Maybe<String>;
  group_description_starts_with?: Maybe<String>;
  group_description_not_starts_with?: Maybe<String>;
  group_description_ends_with?: Maybe<String>;
  group_description_not_ends_with?: Maybe<String>;
  group_type?: Maybe<String>;
  group_type_not?: Maybe<String>;
  group_type_in?: Maybe<String[] | String>;
  group_type_not_in?: Maybe<String[] | String>;
  group_type_lt?: Maybe<String>;
  group_type_lte?: Maybe<String>;
  group_type_gt?: Maybe<String>;
  group_type_gte?: Maybe<String>;
  group_type_contains?: Maybe<String>;
  group_type_not_contains?: Maybe<String>;
  group_type_starts_with?: Maybe<String>;
  group_type_not_starts_with?: Maybe<String>;
  group_type_ends_with?: Maybe<String>;
  group_type_not_ends_with?: Maybe<String>;
  group_website?: Maybe<String>;
  group_website_not?: Maybe<String>;
  group_website_in?: Maybe<String[] | String>;
  group_website_not_in?: Maybe<String[] | String>;
  group_website_lt?: Maybe<String>;
  group_website_lte?: Maybe<String>;
  group_website_gt?: Maybe<String>;
  group_website_gte?: Maybe<String>;
  group_website_contains?: Maybe<String>;
  group_website_not_contains?: Maybe<String>;
  group_website_starts_with?: Maybe<String>;
  group_website_not_starts_with?: Maybe<String>;
  group_website_ends_with?: Maybe<String>;
  group_website_not_ends_with?: Maybe<String>;
  sub_organization?: Maybe<Sub_OrganizationWhereInput>;
  sub_groups_every?: Maybe<Sub_GroupWhereInput>;
  sub_groups_some?: Maybe<Sub_GroupWhereInput>;
  sub_groups_none?: Maybe<Sub_GroupWhereInput>;
  group_created_at?: Maybe<DateTimeInput>;
  group_created_at_not?: Maybe<DateTimeInput>;
  group_created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  group_created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  group_created_at_lt?: Maybe<DateTimeInput>;
  group_created_at_lte?: Maybe<DateTimeInput>;
  group_created_at_gt?: Maybe<DateTimeInput>;
  group_created_at_gte?: Maybe<DateTimeInput>;
  group_updated_at?: Maybe<DateTimeInput>;
  group_updated_at_not?: Maybe<DateTimeInput>;
  group_updated_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  group_updated_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  group_updated_at_lt?: Maybe<DateTimeInput>;
  group_updated_at_lte?: Maybe<DateTimeInput>;
  group_updated_at_gt?: Maybe<DateTimeInput>;
  group_updated_at_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  OR?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  NOT?: Maybe<GroupWhereInput[] | GroupWhereInput>;
}

export interface Sub_GroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sub_group_name?: Maybe<String>;
  sub_group_name_not?: Maybe<String>;
  sub_group_name_in?: Maybe<String[] | String>;
  sub_group_name_not_in?: Maybe<String[] | String>;
  sub_group_name_lt?: Maybe<String>;
  sub_group_name_lte?: Maybe<String>;
  sub_group_name_gt?: Maybe<String>;
  sub_group_name_gte?: Maybe<String>;
  sub_group_name_contains?: Maybe<String>;
  sub_group_name_not_contains?: Maybe<String>;
  sub_group_name_starts_with?: Maybe<String>;
  sub_group_name_not_starts_with?: Maybe<String>;
  sub_group_name_ends_with?: Maybe<String>;
  sub_group_name_not_ends_with?: Maybe<String>;
  sub_group_logo?: Maybe<String>;
  sub_group_logo_not?: Maybe<String>;
  sub_group_logo_in?: Maybe<String[] | String>;
  sub_group_logo_not_in?: Maybe<String[] | String>;
  sub_group_logo_lt?: Maybe<String>;
  sub_group_logo_lte?: Maybe<String>;
  sub_group_logo_gt?: Maybe<String>;
  sub_group_logo_gte?: Maybe<String>;
  sub_group_logo_contains?: Maybe<String>;
  sub_group_logo_not_contains?: Maybe<String>;
  sub_group_logo_starts_with?: Maybe<String>;
  sub_group_logo_not_starts_with?: Maybe<String>;
  sub_group_logo_ends_with?: Maybe<String>;
  sub_group_logo_not_ends_with?: Maybe<String>;
  sub_group_size?: Maybe<Int>;
  sub_group_size_not?: Maybe<Int>;
  sub_group_size_in?: Maybe<Int[] | Int>;
  sub_group_size_not_in?: Maybe<Int[] | Int>;
  sub_group_size_lt?: Maybe<Int>;
  sub_group_size_lte?: Maybe<Int>;
  sub_group_size_gt?: Maybe<Int>;
  sub_group_size_gte?: Maybe<Int>;
  sub_group_description?: Maybe<String>;
  sub_group_description_not?: Maybe<String>;
  sub_group_description_in?: Maybe<String[] | String>;
  sub_group_description_not_in?: Maybe<String[] | String>;
  sub_group_description_lt?: Maybe<String>;
  sub_group_description_lte?: Maybe<String>;
  sub_group_description_gt?: Maybe<String>;
  sub_group_description_gte?: Maybe<String>;
  sub_group_description_contains?: Maybe<String>;
  sub_group_description_not_contains?: Maybe<String>;
  sub_group_description_starts_with?: Maybe<String>;
  sub_group_description_not_starts_with?: Maybe<String>;
  sub_group_description_ends_with?: Maybe<String>;
  sub_group_description_not_ends_with?: Maybe<String>;
  sub_group_type?: Maybe<String>;
  sub_group_type_not?: Maybe<String>;
  sub_group_type_in?: Maybe<String[] | String>;
  sub_group_type_not_in?: Maybe<String[] | String>;
  sub_group_type_lt?: Maybe<String>;
  sub_group_type_lte?: Maybe<String>;
  sub_group_type_gt?: Maybe<String>;
  sub_group_type_gte?: Maybe<String>;
  sub_group_type_contains?: Maybe<String>;
  sub_group_type_not_contains?: Maybe<String>;
  sub_group_type_starts_with?: Maybe<String>;
  sub_group_type_not_starts_with?: Maybe<String>;
  sub_group_type_ends_with?: Maybe<String>;
  sub_group_type_not_ends_with?: Maybe<String>;
  sub_group_website?: Maybe<String>;
  sub_group_website_not?: Maybe<String>;
  sub_group_website_in?: Maybe<String[] | String>;
  sub_group_website_not_in?: Maybe<String[] | String>;
  sub_group_website_lt?: Maybe<String>;
  sub_group_website_lte?: Maybe<String>;
  sub_group_website_gt?: Maybe<String>;
  sub_group_website_gte?: Maybe<String>;
  sub_group_website_contains?: Maybe<String>;
  sub_group_website_not_contains?: Maybe<String>;
  sub_group_website_starts_with?: Maybe<String>;
  sub_group_website_not_starts_with?: Maybe<String>;
  sub_group_website_ends_with?: Maybe<String>;
  sub_group_website_not_ends_with?: Maybe<String>;
  group?: Maybe<GroupWhereInput>;
  sub_group_created_at?: Maybe<DateTimeInput>;
  sub_group_created_at_not?: Maybe<DateTimeInput>;
  sub_group_created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  sub_group_created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  sub_group_created_at_lt?: Maybe<DateTimeInput>;
  sub_group_created_at_lte?: Maybe<DateTimeInput>;
  sub_group_created_at_gt?: Maybe<DateTimeInput>;
  sub_group_created_at_gte?: Maybe<DateTimeInput>;
  subb_group_updated_at?: Maybe<DateTimeInput>;
  subb_group_updated_at_not?: Maybe<DateTimeInput>;
  subb_group_updated_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  subb_group_updated_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  subb_group_updated_at_lt?: Maybe<DateTimeInput>;
  subb_group_updated_at_lte?: Maybe<DateTimeInput>;
  subb_group_updated_at_gt?: Maybe<DateTimeInput>;
  subb_group_updated_at_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<Sub_GroupWhereInput[] | Sub_GroupWhereInput>;
  OR?: Maybe<Sub_GroupWhereInput[] | Sub_GroupWhereInput>;
  NOT?: Maybe<Sub_GroupWhereInput[] | Sub_GroupWhereInput>;
}

export type OrganizationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type Sub_GroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type Sub_OrganizationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GroupCreateInput {
  id?: Maybe<ID_Input>;
  group_name: String;
  group_logo?: Maybe<String>;
  group_size?: Maybe<Int>;
  group_description?: Maybe<String>;
  group_type?: Maybe<String>;
  group_website?: Maybe<String>;
  sub_organization: Sub_OrganizationCreateOneWithoutGroupsInput;
  sub_groups?: Maybe<Sub_GroupCreateManyWithoutGroupInput>;
}

export interface Sub_OrganizationCreateOneWithoutGroupsInput {
  create?: Maybe<Sub_OrganizationCreateWithoutGroupsInput>;
  connect?: Maybe<Sub_OrganizationWhereUniqueInput>;
}

export interface Sub_OrganizationCreateWithoutGroupsInput {
  id?: Maybe<ID_Input>;
  sub_organization_name: String;
  sub_organization_description?: Maybe<String>;
  sub_organization_logo?: Maybe<String>;
  sub_organization_type?: Maybe<String>;
  sub_organization_size?: Maybe<Int>;
  sub_organization_website?: Maybe<String>;
  organization: OrganizationCreateOneWithoutSub_organizationsInput;
}

export interface OrganizationCreateOneWithoutSub_organizationsInput {
  create?: Maybe<OrganizationCreateWithoutSub_organizationsInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationCreateWithoutSub_organizationsInput {
  id?: Maybe<ID_Input>;
  organization_name: String;
  organization_description?: Maybe<String>;
  organization_logo?: Maybe<String>;
  organization_size?: Maybe<Int>;
  organization_type?: Maybe<String>;
  organization_website?: Maybe<String>;
}

export interface Sub_GroupCreateManyWithoutGroupInput {
  create?: Maybe<
    Sub_GroupCreateWithoutGroupInput[] | Sub_GroupCreateWithoutGroupInput
  >;
  connect?: Maybe<Sub_GroupWhereUniqueInput[] | Sub_GroupWhereUniqueInput>;
}

export interface Sub_GroupCreateWithoutGroupInput {
  id?: Maybe<ID_Input>;
  sub_group_name: String;
  sub_group_logo?: Maybe<String>;
  sub_group_size?: Maybe<Int>;
  sub_group_description?: Maybe<String>;
  sub_group_type?: Maybe<String>;
  sub_group_website?: Maybe<String>;
}

export interface GroupUpdateInput {
  group_name?: Maybe<String>;
  group_logo?: Maybe<String>;
  group_size?: Maybe<Int>;
  group_description?: Maybe<String>;
  group_type?: Maybe<String>;
  group_website?: Maybe<String>;
  sub_organization?: Maybe<Sub_OrganizationUpdateOneRequiredWithoutGroupsInput>;
  sub_groups?: Maybe<Sub_GroupUpdateManyWithoutGroupInput>;
}

export interface Sub_OrganizationUpdateOneRequiredWithoutGroupsInput {
  create?: Maybe<Sub_OrganizationCreateWithoutGroupsInput>;
  update?: Maybe<Sub_OrganizationUpdateWithoutGroupsDataInput>;
  upsert?: Maybe<Sub_OrganizationUpsertWithoutGroupsInput>;
  connect?: Maybe<Sub_OrganizationWhereUniqueInput>;
}

export interface Sub_OrganizationUpdateWithoutGroupsDataInput {
  sub_organization_name?: Maybe<String>;
  sub_organization_description?: Maybe<String>;
  sub_organization_logo?: Maybe<String>;
  sub_organization_type?: Maybe<String>;
  sub_organization_size?: Maybe<Int>;
  sub_organization_website?: Maybe<String>;
  organization?: Maybe<
    OrganizationUpdateOneRequiredWithoutSub_organizationsInput
  >;
}

export interface OrganizationUpdateOneRequiredWithoutSub_organizationsInput {
  create?: Maybe<OrganizationCreateWithoutSub_organizationsInput>;
  update?: Maybe<OrganizationUpdateWithoutSub_organizationsDataInput>;
  upsert?: Maybe<OrganizationUpsertWithoutSub_organizationsInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationUpdateWithoutSub_organizationsDataInput {
  organization_name?: Maybe<String>;
  organization_description?: Maybe<String>;
  organization_logo?: Maybe<String>;
  organization_size?: Maybe<Int>;
  organization_type?: Maybe<String>;
  organization_website?: Maybe<String>;
}

export interface OrganizationUpsertWithoutSub_organizationsInput {
  update: OrganizationUpdateWithoutSub_organizationsDataInput;
  create: OrganizationCreateWithoutSub_organizationsInput;
}

export interface Sub_OrganizationUpsertWithoutGroupsInput {
  update: Sub_OrganizationUpdateWithoutGroupsDataInput;
  create: Sub_OrganizationCreateWithoutGroupsInput;
}

export interface Sub_GroupUpdateManyWithoutGroupInput {
  create?: Maybe<
    Sub_GroupCreateWithoutGroupInput[] | Sub_GroupCreateWithoutGroupInput
  >;
  delete?: Maybe<Sub_GroupWhereUniqueInput[] | Sub_GroupWhereUniqueInput>;
  connect?: Maybe<Sub_GroupWhereUniqueInput[] | Sub_GroupWhereUniqueInput>;
  set?: Maybe<Sub_GroupWhereUniqueInput[] | Sub_GroupWhereUniqueInput>;
  disconnect?: Maybe<Sub_GroupWhereUniqueInput[] | Sub_GroupWhereUniqueInput>;
  update?: Maybe<
    | Sub_GroupUpdateWithWhereUniqueWithoutGroupInput[]
    | Sub_GroupUpdateWithWhereUniqueWithoutGroupInput
  >;
  upsert?: Maybe<
    | Sub_GroupUpsertWithWhereUniqueWithoutGroupInput[]
    | Sub_GroupUpsertWithWhereUniqueWithoutGroupInput
  >;
  deleteMany?: Maybe<Sub_GroupScalarWhereInput[] | Sub_GroupScalarWhereInput>;
  updateMany?: Maybe<
    | Sub_GroupUpdateManyWithWhereNestedInput[]
    | Sub_GroupUpdateManyWithWhereNestedInput
  >;
}

export interface Sub_GroupUpdateWithWhereUniqueWithoutGroupInput {
  where: Sub_GroupWhereUniqueInput;
  data: Sub_GroupUpdateWithoutGroupDataInput;
}

export interface Sub_GroupUpdateWithoutGroupDataInput {
  sub_group_name?: Maybe<String>;
  sub_group_logo?: Maybe<String>;
  sub_group_size?: Maybe<Int>;
  sub_group_description?: Maybe<String>;
  sub_group_type?: Maybe<String>;
  sub_group_website?: Maybe<String>;
}

export interface Sub_GroupUpsertWithWhereUniqueWithoutGroupInput {
  where: Sub_GroupWhereUniqueInput;
  update: Sub_GroupUpdateWithoutGroupDataInput;
  create: Sub_GroupCreateWithoutGroupInput;
}

export interface Sub_GroupScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sub_group_name?: Maybe<String>;
  sub_group_name_not?: Maybe<String>;
  sub_group_name_in?: Maybe<String[] | String>;
  sub_group_name_not_in?: Maybe<String[] | String>;
  sub_group_name_lt?: Maybe<String>;
  sub_group_name_lte?: Maybe<String>;
  sub_group_name_gt?: Maybe<String>;
  sub_group_name_gte?: Maybe<String>;
  sub_group_name_contains?: Maybe<String>;
  sub_group_name_not_contains?: Maybe<String>;
  sub_group_name_starts_with?: Maybe<String>;
  sub_group_name_not_starts_with?: Maybe<String>;
  sub_group_name_ends_with?: Maybe<String>;
  sub_group_name_not_ends_with?: Maybe<String>;
  sub_group_logo?: Maybe<String>;
  sub_group_logo_not?: Maybe<String>;
  sub_group_logo_in?: Maybe<String[] | String>;
  sub_group_logo_not_in?: Maybe<String[] | String>;
  sub_group_logo_lt?: Maybe<String>;
  sub_group_logo_lte?: Maybe<String>;
  sub_group_logo_gt?: Maybe<String>;
  sub_group_logo_gte?: Maybe<String>;
  sub_group_logo_contains?: Maybe<String>;
  sub_group_logo_not_contains?: Maybe<String>;
  sub_group_logo_starts_with?: Maybe<String>;
  sub_group_logo_not_starts_with?: Maybe<String>;
  sub_group_logo_ends_with?: Maybe<String>;
  sub_group_logo_not_ends_with?: Maybe<String>;
  sub_group_size?: Maybe<Int>;
  sub_group_size_not?: Maybe<Int>;
  sub_group_size_in?: Maybe<Int[] | Int>;
  sub_group_size_not_in?: Maybe<Int[] | Int>;
  sub_group_size_lt?: Maybe<Int>;
  sub_group_size_lte?: Maybe<Int>;
  sub_group_size_gt?: Maybe<Int>;
  sub_group_size_gte?: Maybe<Int>;
  sub_group_description?: Maybe<String>;
  sub_group_description_not?: Maybe<String>;
  sub_group_description_in?: Maybe<String[] | String>;
  sub_group_description_not_in?: Maybe<String[] | String>;
  sub_group_description_lt?: Maybe<String>;
  sub_group_description_lte?: Maybe<String>;
  sub_group_description_gt?: Maybe<String>;
  sub_group_description_gte?: Maybe<String>;
  sub_group_description_contains?: Maybe<String>;
  sub_group_description_not_contains?: Maybe<String>;
  sub_group_description_starts_with?: Maybe<String>;
  sub_group_description_not_starts_with?: Maybe<String>;
  sub_group_description_ends_with?: Maybe<String>;
  sub_group_description_not_ends_with?: Maybe<String>;
  sub_group_type?: Maybe<String>;
  sub_group_type_not?: Maybe<String>;
  sub_group_type_in?: Maybe<String[] | String>;
  sub_group_type_not_in?: Maybe<String[] | String>;
  sub_group_type_lt?: Maybe<String>;
  sub_group_type_lte?: Maybe<String>;
  sub_group_type_gt?: Maybe<String>;
  sub_group_type_gte?: Maybe<String>;
  sub_group_type_contains?: Maybe<String>;
  sub_group_type_not_contains?: Maybe<String>;
  sub_group_type_starts_with?: Maybe<String>;
  sub_group_type_not_starts_with?: Maybe<String>;
  sub_group_type_ends_with?: Maybe<String>;
  sub_group_type_not_ends_with?: Maybe<String>;
  sub_group_website?: Maybe<String>;
  sub_group_website_not?: Maybe<String>;
  sub_group_website_in?: Maybe<String[] | String>;
  sub_group_website_not_in?: Maybe<String[] | String>;
  sub_group_website_lt?: Maybe<String>;
  sub_group_website_lte?: Maybe<String>;
  sub_group_website_gt?: Maybe<String>;
  sub_group_website_gte?: Maybe<String>;
  sub_group_website_contains?: Maybe<String>;
  sub_group_website_not_contains?: Maybe<String>;
  sub_group_website_starts_with?: Maybe<String>;
  sub_group_website_not_starts_with?: Maybe<String>;
  sub_group_website_ends_with?: Maybe<String>;
  sub_group_website_not_ends_with?: Maybe<String>;
  sub_group_created_at?: Maybe<DateTimeInput>;
  sub_group_created_at_not?: Maybe<DateTimeInput>;
  sub_group_created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  sub_group_created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  sub_group_created_at_lt?: Maybe<DateTimeInput>;
  sub_group_created_at_lte?: Maybe<DateTimeInput>;
  sub_group_created_at_gt?: Maybe<DateTimeInput>;
  sub_group_created_at_gte?: Maybe<DateTimeInput>;
  subb_group_updated_at?: Maybe<DateTimeInput>;
  subb_group_updated_at_not?: Maybe<DateTimeInput>;
  subb_group_updated_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  subb_group_updated_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  subb_group_updated_at_lt?: Maybe<DateTimeInput>;
  subb_group_updated_at_lte?: Maybe<DateTimeInput>;
  subb_group_updated_at_gt?: Maybe<DateTimeInput>;
  subb_group_updated_at_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<Sub_GroupScalarWhereInput[] | Sub_GroupScalarWhereInput>;
  OR?: Maybe<Sub_GroupScalarWhereInput[] | Sub_GroupScalarWhereInput>;
  NOT?: Maybe<Sub_GroupScalarWhereInput[] | Sub_GroupScalarWhereInput>;
}

export interface Sub_GroupUpdateManyWithWhereNestedInput {
  where: Sub_GroupScalarWhereInput;
  data: Sub_GroupUpdateManyDataInput;
}

export interface Sub_GroupUpdateManyDataInput {
  sub_group_name?: Maybe<String>;
  sub_group_logo?: Maybe<String>;
  sub_group_size?: Maybe<Int>;
  sub_group_description?: Maybe<String>;
  sub_group_type?: Maybe<String>;
  sub_group_website?: Maybe<String>;
}

export interface GroupUpdateManyMutationInput {
  group_name?: Maybe<String>;
  group_logo?: Maybe<String>;
  group_size?: Maybe<Int>;
  group_description?: Maybe<String>;
  group_type?: Maybe<String>;
  group_website?: Maybe<String>;
}

export interface OrganizationCreateInput {
  id?: Maybe<ID_Input>;
  organization_name: String;
  organization_description?: Maybe<String>;
  organization_logo?: Maybe<String>;
  organization_size?: Maybe<Int>;
  organization_type?: Maybe<String>;
  organization_website?: Maybe<String>;
  sub_organizations?: Maybe<Sub_OrganizationCreateManyWithoutOrganizationInput>;
}

export interface Sub_OrganizationCreateManyWithoutOrganizationInput {
  create?: Maybe<
    | Sub_OrganizationCreateWithoutOrganizationInput[]
    | Sub_OrganizationCreateWithoutOrganizationInput
  >;
  connect?: Maybe<
    Sub_OrganizationWhereUniqueInput[] | Sub_OrganizationWhereUniqueInput
  >;
}

export interface Sub_OrganizationCreateWithoutOrganizationInput {
  id?: Maybe<ID_Input>;
  sub_organization_name: String;
  sub_organization_description?: Maybe<String>;
  sub_organization_logo?: Maybe<String>;
  sub_organization_type?: Maybe<String>;
  sub_organization_size?: Maybe<Int>;
  sub_organization_website?: Maybe<String>;
  groups?: Maybe<GroupCreateManyWithoutSub_organizationInput>;
}

export interface GroupCreateManyWithoutSub_organizationInput {
  create?: Maybe<
    | GroupCreateWithoutSub_organizationInput[]
    | GroupCreateWithoutSub_organizationInput
  >;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutSub_organizationInput {
  id?: Maybe<ID_Input>;
  group_name: String;
  group_logo?: Maybe<String>;
  group_size?: Maybe<Int>;
  group_description?: Maybe<String>;
  group_type?: Maybe<String>;
  group_website?: Maybe<String>;
  sub_groups?: Maybe<Sub_GroupCreateManyWithoutGroupInput>;
}

export interface OrganizationUpdateInput {
  organization_name?: Maybe<String>;
  organization_description?: Maybe<String>;
  organization_logo?: Maybe<String>;
  organization_size?: Maybe<Int>;
  organization_type?: Maybe<String>;
  organization_website?: Maybe<String>;
  sub_organizations?: Maybe<Sub_OrganizationUpdateManyWithoutOrganizationInput>;
}

export interface Sub_OrganizationUpdateManyWithoutOrganizationInput {
  create?: Maybe<
    | Sub_OrganizationCreateWithoutOrganizationInput[]
    | Sub_OrganizationCreateWithoutOrganizationInput
  >;
  delete?: Maybe<
    Sub_OrganizationWhereUniqueInput[] | Sub_OrganizationWhereUniqueInput
  >;
  connect?: Maybe<
    Sub_OrganizationWhereUniqueInput[] | Sub_OrganizationWhereUniqueInput
  >;
  set?: Maybe<
    Sub_OrganizationWhereUniqueInput[] | Sub_OrganizationWhereUniqueInput
  >;
  disconnect?: Maybe<
    Sub_OrganizationWhereUniqueInput[] | Sub_OrganizationWhereUniqueInput
  >;
  update?: Maybe<
    | Sub_OrganizationUpdateWithWhereUniqueWithoutOrganizationInput[]
    | Sub_OrganizationUpdateWithWhereUniqueWithoutOrganizationInput
  >;
  upsert?: Maybe<
    | Sub_OrganizationUpsertWithWhereUniqueWithoutOrganizationInput[]
    | Sub_OrganizationUpsertWithWhereUniqueWithoutOrganizationInput
  >;
  deleteMany?: Maybe<
    Sub_OrganizationScalarWhereInput[] | Sub_OrganizationScalarWhereInput
  >;
  updateMany?: Maybe<
    | Sub_OrganizationUpdateManyWithWhereNestedInput[]
    | Sub_OrganizationUpdateManyWithWhereNestedInput
  >;
}

export interface Sub_OrganizationUpdateWithWhereUniqueWithoutOrganizationInput {
  where: Sub_OrganizationWhereUniqueInput;
  data: Sub_OrganizationUpdateWithoutOrganizationDataInput;
}

export interface Sub_OrganizationUpdateWithoutOrganizationDataInput {
  sub_organization_name?: Maybe<String>;
  sub_organization_description?: Maybe<String>;
  sub_organization_logo?: Maybe<String>;
  sub_organization_type?: Maybe<String>;
  sub_organization_size?: Maybe<Int>;
  sub_organization_website?: Maybe<String>;
  groups?: Maybe<GroupUpdateManyWithoutSub_organizationInput>;
}

export interface GroupUpdateManyWithoutSub_organizationInput {
  create?: Maybe<
    | GroupCreateWithoutSub_organizationInput[]
    | GroupCreateWithoutSub_organizationInput
  >;
  delete?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  set?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  disconnect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  update?: Maybe<
    | GroupUpdateWithWhereUniqueWithoutSub_organizationInput[]
    | GroupUpdateWithWhereUniqueWithoutSub_organizationInput
  >;
  upsert?: Maybe<
    | GroupUpsertWithWhereUniqueWithoutSub_organizationInput[]
    | GroupUpsertWithWhereUniqueWithoutSub_organizationInput
  >;
  deleteMany?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  updateMany?: Maybe<
    GroupUpdateManyWithWhereNestedInput[] | GroupUpdateManyWithWhereNestedInput
  >;
}

export interface GroupUpdateWithWhereUniqueWithoutSub_organizationInput {
  where: GroupWhereUniqueInput;
  data: GroupUpdateWithoutSub_organizationDataInput;
}

export interface GroupUpdateWithoutSub_organizationDataInput {
  group_name?: Maybe<String>;
  group_logo?: Maybe<String>;
  group_size?: Maybe<Int>;
  group_description?: Maybe<String>;
  group_type?: Maybe<String>;
  group_website?: Maybe<String>;
  sub_groups?: Maybe<Sub_GroupUpdateManyWithoutGroupInput>;
}

export interface GroupUpsertWithWhereUniqueWithoutSub_organizationInput {
  where: GroupWhereUniqueInput;
  update: GroupUpdateWithoutSub_organizationDataInput;
  create: GroupCreateWithoutSub_organizationInput;
}

export interface GroupScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  group_name?: Maybe<String>;
  group_name_not?: Maybe<String>;
  group_name_in?: Maybe<String[] | String>;
  group_name_not_in?: Maybe<String[] | String>;
  group_name_lt?: Maybe<String>;
  group_name_lte?: Maybe<String>;
  group_name_gt?: Maybe<String>;
  group_name_gte?: Maybe<String>;
  group_name_contains?: Maybe<String>;
  group_name_not_contains?: Maybe<String>;
  group_name_starts_with?: Maybe<String>;
  group_name_not_starts_with?: Maybe<String>;
  group_name_ends_with?: Maybe<String>;
  group_name_not_ends_with?: Maybe<String>;
  group_logo?: Maybe<String>;
  group_logo_not?: Maybe<String>;
  group_logo_in?: Maybe<String[] | String>;
  group_logo_not_in?: Maybe<String[] | String>;
  group_logo_lt?: Maybe<String>;
  group_logo_lte?: Maybe<String>;
  group_logo_gt?: Maybe<String>;
  group_logo_gte?: Maybe<String>;
  group_logo_contains?: Maybe<String>;
  group_logo_not_contains?: Maybe<String>;
  group_logo_starts_with?: Maybe<String>;
  group_logo_not_starts_with?: Maybe<String>;
  group_logo_ends_with?: Maybe<String>;
  group_logo_not_ends_with?: Maybe<String>;
  group_size?: Maybe<Int>;
  group_size_not?: Maybe<Int>;
  group_size_in?: Maybe<Int[] | Int>;
  group_size_not_in?: Maybe<Int[] | Int>;
  group_size_lt?: Maybe<Int>;
  group_size_lte?: Maybe<Int>;
  group_size_gt?: Maybe<Int>;
  group_size_gte?: Maybe<Int>;
  group_description?: Maybe<String>;
  group_description_not?: Maybe<String>;
  group_description_in?: Maybe<String[] | String>;
  group_description_not_in?: Maybe<String[] | String>;
  group_description_lt?: Maybe<String>;
  group_description_lte?: Maybe<String>;
  group_description_gt?: Maybe<String>;
  group_description_gte?: Maybe<String>;
  group_description_contains?: Maybe<String>;
  group_description_not_contains?: Maybe<String>;
  group_description_starts_with?: Maybe<String>;
  group_description_not_starts_with?: Maybe<String>;
  group_description_ends_with?: Maybe<String>;
  group_description_not_ends_with?: Maybe<String>;
  group_type?: Maybe<String>;
  group_type_not?: Maybe<String>;
  group_type_in?: Maybe<String[] | String>;
  group_type_not_in?: Maybe<String[] | String>;
  group_type_lt?: Maybe<String>;
  group_type_lte?: Maybe<String>;
  group_type_gt?: Maybe<String>;
  group_type_gte?: Maybe<String>;
  group_type_contains?: Maybe<String>;
  group_type_not_contains?: Maybe<String>;
  group_type_starts_with?: Maybe<String>;
  group_type_not_starts_with?: Maybe<String>;
  group_type_ends_with?: Maybe<String>;
  group_type_not_ends_with?: Maybe<String>;
  group_website?: Maybe<String>;
  group_website_not?: Maybe<String>;
  group_website_in?: Maybe<String[] | String>;
  group_website_not_in?: Maybe<String[] | String>;
  group_website_lt?: Maybe<String>;
  group_website_lte?: Maybe<String>;
  group_website_gt?: Maybe<String>;
  group_website_gte?: Maybe<String>;
  group_website_contains?: Maybe<String>;
  group_website_not_contains?: Maybe<String>;
  group_website_starts_with?: Maybe<String>;
  group_website_not_starts_with?: Maybe<String>;
  group_website_ends_with?: Maybe<String>;
  group_website_not_ends_with?: Maybe<String>;
  group_created_at?: Maybe<DateTimeInput>;
  group_created_at_not?: Maybe<DateTimeInput>;
  group_created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  group_created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  group_created_at_lt?: Maybe<DateTimeInput>;
  group_created_at_lte?: Maybe<DateTimeInput>;
  group_created_at_gt?: Maybe<DateTimeInput>;
  group_created_at_gte?: Maybe<DateTimeInput>;
  group_updated_at?: Maybe<DateTimeInput>;
  group_updated_at_not?: Maybe<DateTimeInput>;
  group_updated_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  group_updated_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  group_updated_at_lt?: Maybe<DateTimeInput>;
  group_updated_at_lte?: Maybe<DateTimeInput>;
  group_updated_at_gt?: Maybe<DateTimeInput>;
  group_updated_at_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  OR?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  NOT?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
}

export interface GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput;
  data: GroupUpdateManyDataInput;
}

export interface GroupUpdateManyDataInput {
  group_name?: Maybe<String>;
  group_logo?: Maybe<String>;
  group_size?: Maybe<Int>;
  group_description?: Maybe<String>;
  group_type?: Maybe<String>;
  group_website?: Maybe<String>;
}

export interface Sub_OrganizationUpsertWithWhereUniqueWithoutOrganizationInput {
  where: Sub_OrganizationWhereUniqueInput;
  update: Sub_OrganizationUpdateWithoutOrganizationDataInput;
  create: Sub_OrganizationCreateWithoutOrganizationInput;
}

export interface Sub_OrganizationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sub_organization_name?: Maybe<String>;
  sub_organization_name_not?: Maybe<String>;
  sub_organization_name_in?: Maybe<String[] | String>;
  sub_organization_name_not_in?: Maybe<String[] | String>;
  sub_organization_name_lt?: Maybe<String>;
  sub_organization_name_lte?: Maybe<String>;
  sub_organization_name_gt?: Maybe<String>;
  sub_organization_name_gte?: Maybe<String>;
  sub_organization_name_contains?: Maybe<String>;
  sub_organization_name_not_contains?: Maybe<String>;
  sub_organization_name_starts_with?: Maybe<String>;
  sub_organization_name_not_starts_with?: Maybe<String>;
  sub_organization_name_ends_with?: Maybe<String>;
  sub_organization_name_not_ends_with?: Maybe<String>;
  sub_organization_description?: Maybe<String>;
  sub_organization_description_not?: Maybe<String>;
  sub_organization_description_in?: Maybe<String[] | String>;
  sub_organization_description_not_in?: Maybe<String[] | String>;
  sub_organization_description_lt?: Maybe<String>;
  sub_organization_description_lte?: Maybe<String>;
  sub_organization_description_gt?: Maybe<String>;
  sub_organization_description_gte?: Maybe<String>;
  sub_organization_description_contains?: Maybe<String>;
  sub_organization_description_not_contains?: Maybe<String>;
  sub_organization_description_starts_with?: Maybe<String>;
  sub_organization_description_not_starts_with?: Maybe<String>;
  sub_organization_description_ends_with?: Maybe<String>;
  sub_organization_description_not_ends_with?: Maybe<String>;
  sub_organization_logo?: Maybe<String>;
  sub_organization_logo_not?: Maybe<String>;
  sub_organization_logo_in?: Maybe<String[] | String>;
  sub_organization_logo_not_in?: Maybe<String[] | String>;
  sub_organization_logo_lt?: Maybe<String>;
  sub_organization_logo_lte?: Maybe<String>;
  sub_organization_logo_gt?: Maybe<String>;
  sub_organization_logo_gte?: Maybe<String>;
  sub_organization_logo_contains?: Maybe<String>;
  sub_organization_logo_not_contains?: Maybe<String>;
  sub_organization_logo_starts_with?: Maybe<String>;
  sub_organization_logo_not_starts_with?: Maybe<String>;
  sub_organization_logo_ends_with?: Maybe<String>;
  sub_organization_logo_not_ends_with?: Maybe<String>;
  sub_organization_type?: Maybe<String>;
  sub_organization_type_not?: Maybe<String>;
  sub_organization_type_in?: Maybe<String[] | String>;
  sub_organization_type_not_in?: Maybe<String[] | String>;
  sub_organization_type_lt?: Maybe<String>;
  sub_organization_type_lte?: Maybe<String>;
  sub_organization_type_gt?: Maybe<String>;
  sub_organization_type_gte?: Maybe<String>;
  sub_organization_type_contains?: Maybe<String>;
  sub_organization_type_not_contains?: Maybe<String>;
  sub_organization_type_starts_with?: Maybe<String>;
  sub_organization_type_not_starts_with?: Maybe<String>;
  sub_organization_type_ends_with?: Maybe<String>;
  sub_organization_type_not_ends_with?: Maybe<String>;
  sub_organization_size?: Maybe<Int>;
  sub_organization_size_not?: Maybe<Int>;
  sub_organization_size_in?: Maybe<Int[] | Int>;
  sub_organization_size_not_in?: Maybe<Int[] | Int>;
  sub_organization_size_lt?: Maybe<Int>;
  sub_organization_size_lte?: Maybe<Int>;
  sub_organization_size_gt?: Maybe<Int>;
  sub_organization_size_gte?: Maybe<Int>;
  sub_organization_website?: Maybe<String>;
  sub_organization_website_not?: Maybe<String>;
  sub_organization_website_in?: Maybe<String[] | String>;
  sub_organization_website_not_in?: Maybe<String[] | String>;
  sub_organization_website_lt?: Maybe<String>;
  sub_organization_website_lte?: Maybe<String>;
  sub_organization_website_gt?: Maybe<String>;
  sub_organization_website_gte?: Maybe<String>;
  sub_organization_website_contains?: Maybe<String>;
  sub_organization_website_not_contains?: Maybe<String>;
  sub_organization_website_starts_with?: Maybe<String>;
  sub_organization_website_not_starts_with?: Maybe<String>;
  sub_organization_website_ends_with?: Maybe<String>;
  sub_organization_website_not_ends_with?: Maybe<String>;
  sub_organization_created_at?: Maybe<DateTimeInput>;
  sub_organization_created_at_not?: Maybe<DateTimeInput>;
  sub_organization_created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  sub_organization_created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  sub_organization_created_at_lt?: Maybe<DateTimeInput>;
  sub_organization_created_at_lte?: Maybe<DateTimeInput>;
  sub_organization_created_at_gt?: Maybe<DateTimeInput>;
  sub_organization_created_at_gte?: Maybe<DateTimeInput>;
  sub_organization_updated_at?: Maybe<DateTimeInput>;
  sub_organization_updated_at_not?: Maybe<DateTimeInput>;
  sub_organization_updated_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  sub_organization_updated_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  sub_organization_updated_at_lt?: Maybe<DateTimeInput>;
  sub_organization_updated_at_lte?: Maybe<DateTimeInput>;
  sub_organization_updated_at_gt?: Maybe<DateTimeInput>;
  sub_organization_updated_at_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    Sub_OrganizationScalarWhereInput[] | Sub_OrganizationScalarWhereInput
  >;
  OR?: Maybe<
    Sub_OrganizationScalarWhereInput[] | Sub_OrganizationScalarWhereInput
  >;
  NOT?: Maybe<
    Sub_OrganizationScalarWhereInput[] | Sub_OrganizationScalarWhereInput
  >;
}

export interface Sub_OrganizationUpdateManyWithWhereNestedInput {
  where: Sub_OrganizationScalarWhereInput;
  data: Sub_OrganizationUpdateManyDataInput;
}

export interface Sub_OrganizationUpdateManyDataInput {
  sub_organization_name?: Maybe<String>;
  sub_organization_description?: Maybe<String>;
  sub_organization_logo?: Maybe<String>;
  sub_organization_type?: Maybe<String>;
  sub_organization_size?: Maybe<Int>;
  sub_organization_website?: Maybe<String>;
}

export interface OrganizationUpdateManyMutationInput {
  organization_name?: Maybe<String>;
  organization_description?: Maybe<String>;
  organization_logo?: Maybe<String>;
  organization_size?: Maybe<Int>;
  organization_type?: Maybe<String>;
  organization_website?: Maybe<String>;
}

export interface Sub_GroupCreateInput {
  id?: Maybe<ID_Input>;
  sub_group_name: String;
  sub_group_logo?: Maybe<String>;
  sub_group_size?: Maybe<Int>;
  sub_group_description?: Maybe<String>;
  sub_group_type?: Maybe<String>;
  sub_group_website?: Maybe<String>;
  group: GroupCreateOneWithoutSub_groupsInput;
}

export interface GroupCreateOneWithoutSub_groupsInput {
  create?: Maybe<GroupCreateWithoutSub_groupsInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutSub_groupsInput {
  id?: Maybe<ID_Input>;
  group_name: String;
  group_logo?: Maybe<String>;
  group_size?: Maybe<Int>;
  group_description?: Maybe<String>;
  group_type?: Maybe<String>;
  group_website?: Maybe<String>;
  sub_organization: Sub_OrganizationCreateOneWithoutGroupsInput;
}

export interface Sub_GroupUpdateInput {
  sub_group_name?: Maybe<String>;
  sub_group_logo?: Maybe<String>;
  sub_group_size?: Maybe<Int>;
  sub_group_description?: Maybe<String>;
  sub_group_type?: Maybe<String>;
  sub_group_website?: Maybe<String>;
  group?: Maybe<GroupUpdateOneRequiredWithoutSub_groupsInput>;
}

export interface GroupUpdateOneRequiredWithoutSub_groupsInput {
  create?: Maybe<GroupCreateWithoutSub_groupsInput>;
  update?: Maybe<GroupUpdateWithoutSub_groupsDataInput>;
  upsert?: Maybe<GroupUpsertWithoutSub_groupsInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupUpdateWithoutSub_groupsDataInput {
  group_name?: Maybe<String>;
  group_logo?: Maybe<String>;
  group_size?: Maybe<Int>;
  group_description?: Maybe<String>;
  group_type?: Maybe<String>;
  group_website?: Maybe<String>;
  sub_organization?: Maybe<Sub_OrganizationUpdateOneRequiredWithoutGroupsInput>;
}

export interface GroupUpsertWithoutSub_groupsInput {
  update: GroupUpdateWithoutSub_groupsDataInput;
  create: GroupCreateWithoutSub_groupsInput;
}

export interface Sub_GroupUpdateManyMutationInput {
  sub_group_name?: Maybe<String>;
  sub_group_logo?: Maybe<String>;
  sub_group_size?: Maybe<Int>;
  sub_group_description?: Maybe<String>;
  sub_group_type?: Maybe<String>;
  sub_group_website?: Maybe<String>;
}

export interface Sub_OrganizationCreateInput {
  id?: Maybe<ID_Input>;
  sub_organization_name: String;
  sub_organization_description?: Maybe<String>;
  sub_organization_logo?: Maybe<String>;
  sub_organization_type?: Maybe<String>;
  sub_organization_size?: Maybe<Int>;
  sub_organization_website?: Maybe<String>;
  organization: OrganizationCreateOneWithoutSub_organizationsInput;
  groups?: Maybe<GroupCreateManyWithoutSub_organizationInput>;
}

export interface Sub_OrganizationUpdateInput {
  sub_organization_name?: Maybe<String>;
  sub_organization_description?: Maybe<String>;
  sub_organization_logo?: Maybe<String>;
  sub_organization_type?: Maybe<String>;
  sub_organization_size?: Maybe<Int>;
  sub_organization_website?: Maybe<String>;
  organization?: Maybe<
    OrganizationUpdateOneRequiredWithoutSub_organizationsInput
  >;
  groups?: Maybe<GroupUpdateManyWithoutSub_organizationInput>;
}

export interface Sub_OrganizationUpdateManyMutationInput {
  sub_organization_name?: Maybe<String>;
  sub_organization_description?: Maybe<String>;
  sub_organization_logo?: Maybe<String>;
  sub_organization_type?: Maybe<String>;
  sub_organization_size?: Maybe<Int>;
  sub_organization_website?: Maybe<String>;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupWhereInput>;
  AND?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  OR?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  NOT?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
}

export interface OrganizationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrganizationWhereInput>;
  AND?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
  OR?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
}

export interface Sub_GroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<Sub_GroupWhereInput>;
  AND?: Maybe<
    Sub_GroupSubscriptionWhereInput[] | Sub_GroupSubscriptionWhereInput
  >;
  OR?: Maybe<
    Sub_GroupSubscriptionWhereInput[] | Sub_GroupSubscriptionWhereInput
  >;
  NOT?: Maybe<
    Sub_GroupSubscriptionWhereInput[] | Sub_GroupSubscriptionWhereInput
  >;
}

export interface Sub_OrganizationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<Sub_OrganizationWhereInput>;
  AND?: Maybe<
    | Sub_OrganizationSubscriptionWhereInput[]
    | Sub_OrganizationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | Sub_OrganizationSubscriptionWhereInput[]
    | Sub_OrganizationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | Sub_OrganizationSubscriptionWhereInput[]
    | Sub_OrganizationSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Group {
  id: ID_Output;
  group_name: String;
  group_logo?: String;
  group_size?: Int;
  group_description?: String;
  group_type?: String;
  group_website?: String;
  group_created_at: DateTimeOutput;
  group_updated_at: DateTimeOutput;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  group_name: () => Promise<String>;
  group_logo: () => Promise<String>;
  group_size: () => Promise<Int>;
  group_description: () => Promise<String>;
  group_type: () => Promise<String>;
  group_website: () => Promise<String>;
  sub_organization: <T = Sub_OrganizationPromise>() => T;
  sub_groups: <T = FragmentableArray<Sub_Group>>(args?: {
    where?: Sub_GroupWhereInput;
    orderBy?: Sub_GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  group_created_at: () => Promise<DateTimeOutput>;
  group_updated_at: () => Promise<DateTimeOutput>;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  group_name: () => Promise<AsyncIterator<String>>;
  group_logo: () => Promise<AsyncIterator<String>>;
  group_size: () => Promise<AsyncIterator<Int>>;
  group_description: () => Promise<AsyncIterator<String>>;
  group_type: () => Promise<AsyncIterator<String>>;
  group_website: () => Promise<AsyncIterator<String>>;
  sub_organization: <T = Sub_OrganizationSubscription>() => T;
  sub_groups: <T = Promise<AsyncIterator<Sub_GroupSubscription>>>(args?: {
    where?: Sub_GroupWhereInput;
    orderBy?: Sub_GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  group_created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  group_updated_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GroupNullablePromise
  extends Promise<Group | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  group_name: () => Promise<String>;
  group_logo: () => Promise<String>;
  group_size: () => Promise<Int>;
  group_description: () => Promise<String>;
  group_type: () => Promise<String>;
  group_website: () => Promise<String>;
  sub_organization: <T = Sub_OrganizationPromise>() => T;
  sub_groups: <T = FragmentableArray<Sub_Group>>(args?: {
    where?: Sub_GroupWhereInput;
    orderBy?: Sub_GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  group_created_at: () => Promise<DateTimeOutput>;
  group_updated_at: () => Promise<DateTimeOutput>;
}

export interface Sub_Organization {
  id: ID_Output;
  sub_organization_name: String;
  sub_organization_description?: String;
  sub_organization_logo?: String;
  sub_organization_type?: String;
  sub_organization_size?: Int;
  sub_organization_website?: String;
  sub_organization_created_at: DateTimeOutput;
  sub_organization_updated_at: DateTimeOutput;
}

export interface Sub_OrganizationPromise
  extends Promise<Sub_Organization>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sub_organization_name: () => Promise<String>;
  sub_organization_description: () => Promise<String>;
  sub_organization_logo: () => Promise<String>;
  sub_organization_type: () => Promise<String>;
  sub_organization_size: () => Promise<Int>;
  sub_organization_website: () => Promise<String>;
  organization: <T = OrganizationPromise>() => T;
  groups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sub_organization_created_at: () => Promise<DateTimeOutput>;
  sub_organization_updated_at: () => Promise<DateTimeOutput>;
}

export interface Sub_OrganizationSubscription
  extends Promise<AsyncIterator<Sub_Organization>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sub_organization_name: () => Promise<AsyncIterator<String>>;
  sub_organization_description: () => Promise<AsyncIterator<String>>;
  sub_organization_logo: () => Promise<AsyncIterator<String>>;
  sub_organization_type: () => Promise<AsyncIterator<String>>;
  sub_organization_size: () => Promise<AsyncIterator<Int>>;
  sub_organization_website: () => Promise<AsyncIterator<String>>;
  organization: <T = OrganizationSubscription>() => T;
  groups: <T = Promise<AsyncIterator<GroupSubscription>>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sub_organization_created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  sub_organization_updated_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Sub_OrganizationNullablePromise
  extends Promise<Sub_Organization | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sub_organization_name: () => Promise<String>;
  sub_organization_description: () => Promise<String>;
  sub_organization_logo: () => Promise<String>;
  sub_organization_type: () => Promise<String>;
  sub_organization_size: () => Promise<Int>;
  sub_organization_website: () => Promise<String>;
  organization: <T = OrganizationPromise>() => T;
  groups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sub_organization_created_at: () => Promise<DateTimeOutput>;
  sub_organization_updated_at: () => Promise<DateTimeOutput>;
}

export interface Organization {
  id: ID_Output;
  organization_name: String;
  organization_description?: String;
  organization_logo?: String;
  organization_size?: Int;
  organization_type?: String;
  organization_website?: String;
  organization_created_at: DateTimeOutput;
  organization_updated_at: DateTimeOutput;
}

export interface OrganizationPromise
  extends Promise<Organization>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  organization_name: () => Promise<String>;
  organization_description: () => Promise<String>;
  organization_logo: () => Promise<String>;
  organization_size: () => Promise<Int>;
  organization_type: () => Promise<String>;
  organization_website: () => Promise<String>;
  sub_organizations: <T = FragmentableArray<Sub_Organization>>(args?: {
    where?: Sub_OrganizationWhereInput;
    orderBy?: Sub_OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  organization_created_at: () => Promise<DateTimeOutput>;
  organization_updated_at: () => Promise<DateTimeOutput>;
}

export interface OrganizationSubscription
  extends Promise<AsyncIterator<Organization>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  organization_name: () => Promise<AsyncIterator<String>>;
  organization_description: () => Promise<AsyncIterator<String>>;
  organization_logo: () => Promise<AsyncIterator<String>>;
  organization_size: () => Promise<AsyncIterator<Int>>;
  organization_type: () => Promise<AsyncIterator<String>>;
  organization_website: () => Promise<AsyncIterator<String>>;
  sub_organizations: <
    T = Promise<AsyncIterator<Sub_OrganizationSubscription>>
  >(args?: {
    where?: Sub_OrganizationWhereInput;
    orderBy?: Sub_OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  organization_created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  organization_updated_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrganizationNullablePromise
  extends Promise<Organization | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  organization_name: () => Promise<String>;
  organization_description: () => Promise<String>;
  organization_logo: () => Promise<String>;
  organization_size: () => Promise<Int>;
  organization_type: () => Promise<String>;
  organization_website: () => Promise<String>;
  sub_organizations: <T = FragmentableArray<Sub_Organization>>(args?: {
    where?: Sub_OrganizationWhereInput;
    orderBy?: Sub_OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  organization_created_at: () => Promise<DateTimeOutput>;
  organization_updated_at: () => Promise<DateTimeOutput>;
}

export interface Sub_Group {
  id: ID_Output;
  sub_group_name: String;
  sub_group_logo?: String;
  sub_group_size?: Int;
  sub_group_description?: String;
  sub_group_type?: String;
  sub_group_website?: String;
  sub_group_created_at: DateTimeOutput;
  subb_group_updated_at: DateTimeOutput;
}

export interface Sub_GroupPromise extends Promise<Sub_Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  sub_group_name: () => Promise<String>;
  sub_group_logo: () => Promise<String>;
  sub_group_size: () => Promise<Int>;
  sub_group_description: () => Promise<String>;
  sub_group_type: () => Promise<String>;
  sub_group_website: () => Promise<String>;
  group: <T = GroupPromise>() => T;
  sub_group_created_at: () => Promise<DateTimeOutput>;
  subb_group_updated_at: () => Promise<DateTimeOutput>;
}

export interface Sub_GroupSubscription
  extends Promise<AsyncIterator<Sub_Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sub_group_name: () => Promise<AsyncIterator<String>>;
  sub_group_logo: () => Promise<AsyncIterator<String>>;
  sub_group_size: () => Promise<AsyncIterator<Int>>;
  sub_group_description: () => Promise<AsyncIterator<String>>;
  sub_group_type: () => Promise<AsyncIterator<String>>;
  sub_group_website: () => Promise<AsyncIterator<String>>;
  group: <T = GroupSubscription>() => T;
  sub_group_created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  subb_group_updated_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Sub_GroupNullablePromise
  extends Promise<Sub_Group | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sub_group_name: () => Promise<String>;
  sub_group_logo: () => Promise<String>;
  sub_group_size: () => Promise<Int>;
  sub_group_description: () => Promise<String>;
  sub_group_type: () => Promise<String>;
  sub_group_website: () => Promise<String>;
  group: <T = GroupPromise>() => T;
  sub_group_created_at: () => Promise<DateTimeOutput>;
  subb_group_updated_at: () => Promise<DateTimeOutput>;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrganizationConnection {
  pageInfo: PageInfo;
  edges: OrganizationEdge[];
}

export interface OrganizationConnectionPromise
  extends Promise<OrganizationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrganizationEdge>>() => T;
  aggregate: <T = AggregateOrganizationPromise>() => T;
}

export interface OrganizationConnectionSubscription
  extends Promise<AsyncIterator<OrganizationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrganizationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrganizationSubscription>() => T;
}

export interface OrganizationEdge {
  node: Organization;
  cursor: String;
}

export interface OrganizationEdgePromise
  extends Promise<OrganizationEdge>,
    Fragmentable {
  node: <T = OrganizationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrganizationEdgeSubscription
  extends Promise<AsyncIterator<OrganizationEdge>>,
    Fragmentable {
  node: <T = OrganizationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrganization {
  count: Int;
}

export interface AggregateOrganizationPromise
  extends Promise<AggregateOrganization>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrganizationSubscription
  extends Promise<AsyncIterator<AggregateOrganization>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Sub_GroupConnection {
  pageInfo: PageInfo;
  edges: Sub_GroupEdge[];
}

export interface Sub_GroupConnectionPromise
  extends Promise<Sub_GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Sub_GroupEdge>>() => T;
  aggregate: <T = AggregateSub_GroupPromise>() => T;
}

export interface Sub_GroupConnectionSubscription
  extends Promise<AsyncIterator<Sub_GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Sub_GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSub_GroupSubscription>() => T;
}

export interface Sub_GroupEdge {
  node: Sub_Group;
  cursor: String;
}

export interface Sub_GroupEdgePromise
  extends Promise<Sub_GroupEdge>,
    Fragmentable {
  node: <T = Sub_GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Sub_GroupEdgeSubscription
  extends Promise<AsyncIterator<Sub_GroupEdge>>,
    Fragmentable {
  node: <T = Sub_GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSub_Group {
  count: Int;
}

export interface AggregateSub_GroupPromise
  extends Promise<AggregateSub_Group>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSub_GroupSubscription
  extends Promise<AsyncIterator<AggregateSub_Group>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Sub_OrganizationConnection {
  pageInfo: PageInfo;
  edges: Sub_OrganizationEdge[];
}

export interface Sub_OrganizationConnectionPromise
  extends Promise<Sub_OrganizationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Sub_OrganizationEdge>>() => T;
  aggregate: <T = AggregateSub_OrganizationPromise>() => T;
}

export interface Sub_OrganizationConnectionSubscription
  extends Promise<AsyncIterator<Sub_OrganizationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Sub_OrganizationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSub_OrganizationSubscription>() => T;
}

export interface Sub_OrganizationEdge {
  node: Sub_Organization;
  cursor: String;
}

export interface Sub_OrganizationEdgePromise
  extends Promise<Sub_OrganizationEdge>,
    Fragmentable {
  node: <T = Sub_OrganizationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Sub_OrganizationEdgeSubscription
  extends Promise<AsyncIterator<Sub_OrganizationEdge>>,
    Fragmentable {
  node: <T = Sub_OrganizationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSub_Organization {
  count: Int;
}

export interface AggregateSub_OrganizationPromise
  extends Promise<AggregateSub_Organization>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSub_OrganizationSubscription
  extends Promise<AsyncIterator<AggregateSub_Organization>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface GroupPreviousValues {
  id: ID_Output;
  group_name: String;
  group_logo?: String;
  group_size?: Int;
  group_description?: String;
  group_type?: String;
  group_website?: String;
  group_created_at: DateTimeOutput;
  group_updated_at: DateTimeOutput;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  group_name: () => Promise<String>;
  group_logo: () => Promise<String>;
  group_size: () => Promise<Int>;
  group_description: () => Promise<String>;
  group_type: () => Promise<String>;
  group_website: () => Promise<String>;
  group_created_at: () => Promise<DateTimeOutput>;
  group_updated_at: () => Promise<DateTimeOutput>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  group_name: () => Promise<AsyncIterator<String>>;
  group_logo: () => Promise<AsyncIterator<String>>;
  group_size: () => Promise<AsyncIterator<Int>>;
  group_description: () => Promise<AsyncIterator<String>>;
  group_type: () => Promise<AsyncIterator<String>>;
  group_website: () => Promise<AsyncIterator<String>>;
  group_created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  group_updated_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrganizationSubscriptionPayload {
  mutation: MutationType;
  node: Organization;
  updatedFields: String[];
  previousValues: OrganizationPreviousValues;
}

export interface OrganizationSubscriptionPayloadPromise
  extends Promise<OrganizationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrganizationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrganizationPreviousValuesPromise>() => T;
}

export interface OrganizationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrganizationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrganizationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrganizationPreviousValuesSubscription>() => T;
}

export interface OrganizationPreviousValues {
  id: ID_Output;
  organization_name: String;
  organization_description?: String;
  organization_logo?: String;
  organization_size?: Int;
  organization_type?: String;
  organization_website?: String;
  organization_created_at: DateTimeOutput;
  organization_updated_at: DateTimeOutput;
}

export interface OrganizationPreviousValuesPromise
  extends Promise<OrganizationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  organization_name: () => Promise<String>;
  organization_description: () => Promise<String>;
  organization_logo: () => Promise<String>;
  organization_size: () => Promise<Int>;
  organization_type: () => Promise<String>;
  organization_website: () => Promise<String>;
  organization_created_at: () => Promise<DateTimeOutput>;
  organization_updated_at: () => Promise<DateTimeOutput>;
}

export interface OrganizationPreviousValuesSubscription
  extends Promise<AsyncIterator<OrganizationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  organization_name: () => Promise<AsyncIterator<String>>;
  organization_description: () => Promise<AsyncIterator<String>>;
  organization_logo: () => Promise<AsyncIterator<String>>;
  organization_size: () => Promise<AsyncIterator<Int>>;
  organization_type: () => Promise<AsyncIterator<String>>;
  organization_website: () => Promise<AsyncIterator<String>>;
  organization_created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  organization_updated_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Sub_GroupSubscriptionPayload {
  mutation: MutationType;
  node: Sub_Group;
  updatedFields: String[];
  previousValues: Sub_GroupPreviousValues;
}

export interface Sub_GroupSubscriptionPayloadPromise
  extends Promise<Sub_GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Sub_GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Sub_GroupPreviousValuesPromise>() => T;
}

export interface Sub_GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Sub_GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Sub_GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Sub_GroupPreviousValuesSubscription>() => T;
}

export interface Sub_GroupPreviousValues {
  id: ID_Output;
  sub_group_name: String;
  sub_group_logo?: String;
  sub_group_size?: Int;
  sub_group_description?: String;
  sub_group_type?: String;
  sub_group_website?: String;
  sub_group_created_at: DateTimeOutput;
  subb_group_updated_at: DateTimeOutput;
}

export interface Sub_GroupPreviousValuesPromise
  extends Promise<Sub_GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sub_group_name: () => Promise<String>;
  sub_group_logo: () => Promise<String>;
  sub_group_size: () => Promise<Int>;
  sub_group_description: () => Promise<String>;
  sub_group_type: () => Promise<String>;
  sub_group_website: () => Promise<String>;
  sub_group_created_at: () => Promise<DateTimeOutput>;
  subb_group_updated_at: () => Promise<DateTimeOutput>;
}

export interface Sub_GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<Sub_GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sub_group_name: () => Promise<AsyncIterator<String>>;
  sub_group_logo: () => Promise<AsyncIterator<String>>;
  sub_group_size: () => Promise<AsyncIterator<Int>>;
  sub_group_description: () => Promise<AsyncIterator<String>>;
  sub_group_type: () => Promise<AsyncIterator<String>>;
  sub_group_website: () => Promise<AsyncIterator<String>>;
  sub_group_created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  subb_group_updated_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Sub_OrganizationSubscriptionPayload {
  mutation: MutationType;
  node: Sub_Organization;
  updatedFields: String[];
  previousValues: Sub_OrganizationPreviousValues;
}

export interface Sub_OrganizationSubscriptionPayloadPromise
  extends Promise<Sub_OrganizationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Sub_OrganizationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Sub_OrganizationPreviousValuesPromise>() => T;
}

export interface Sub_OrganizationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Sub_OrganizationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Sub_OrganizationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Sub_OrganizationPreviousValuesSubscription>() => T;
}

export interface Sub_OrganizationPreviousValues {
  id: ID_Output;
  sub_organization_name: String;
  sub_organization_description?: String;
  sub_organization_logo?: String;
  sub_organization_type?: String;
  sub_organization_size?: Int;
  sub_organization_website?: String;
  sub_organization_created_at: DateTimeOutput;
  sub_organization_updated_at: DateTimeOutput;
}

export interface Sub_OrganizationPreviousValuesPromise
  extends Promise<Sub_OrganizationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sub_organization_name: () => Promise<String>;
  sub_organization_description: () => Promise<String>;
  sub_organization_logo: () => Promise<String>;
  sub_organization_type: () => Promise<String>;
  sub_organization_size: () => Promise<Int>;
  sub_organization_website: () => Promise<String>;
  sub_organization_created_at: () => Promise<DateTimeOutput>;
  sub_organization_updated_at: () => Promise<DateTimeOutput>;
}

export interface Sub_OrganizationPreviousValuesSubscription
  extends Promise<AsyncIterator<Sub_OrganizationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sub_organization_name: () => Promise<AsyncIterator<String>>;
  sub_organization_description: () => Promise<AsyncIterator<String>>;
  sub_organization_logo: () => Promise<AsyncIterator<String>>;
  sub_organization_type: () => Promise<AsyncIterator<String>>;
  sub_organization_size: () => Promise<AsyncIterator<Int>>;
  sub_organization_website: () => Promise<AsyncIterator<String>>;
  sub_organization_created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  sub_organization_updated_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Organization",
    embedded: false
  },
  {
    name: "Sub_Organization",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "Sub_Group",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;

module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Address {
  id: ID!
  adressline: String!
  tehsil: String!
  city: String!
  district: String!
  state: String!
  pincode: String!
  personalProfile: PersonalProfile
}

type AddressConnection {
  pageInfo: PageInfo!
  edges: [AddressEdge]!
  aggregate: AggregateAddress!
}

input AddressCreateInput {
  id: ID
  adressline: String!
  tehsil: String!
  city: String!
  district: String!
  state: String!
  pincode: String!
  personalProfile: PersonalProfileCreateOneWithoutAddressesInput
}

input AddressCreateManyWithoutPersonalProfileInput {
  create: [AddressCreateWithoutPersonalProfileInput!]
  connect: [AddressWhereUniqueInput!]
}

input AddressCreateWithoutPersonalProfileInput {
  id: ID
  adressline: String!
  tehsil: String!
  city: String!
  district: String!
  state: String!
  pincode: String!
}

type AddressEdge {
  node: Address!
  cursor: String!
}

enum AddressOrderByInput {
  id_ASC
  id_DESC
  adressline_ASC
  adressline_DESC
  tehsil_ASC
  tehsil_DESC
  city_ASC
  city_DESC
  district_ASC
  district_DESC
  state_ASC
  state_DESC
  pincode_ASC
  pincode_DESC
}

type AddressPreviousValues {
  id: ID!
  adressline: String!
  tehsil: String!
  city: String!
  district: String!
  state: String!
  pincode: String!
}

input AddressScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  adressline: String
  adressline_not: String
  adressline_in: [String!]
  adressline_not_in: [String!]
  adressline_lt: String
  adressline_lte: String
  adressline_gt: String
  adressline_gte: String
  adressline_contains: String
  adressline_not_contains: String
  adressline_starts_with: String
  adressline_not_starts_with: String
  adressline_ends_with: String
  adressline_not_ends_with: String
  tehsil: String
  tehsil_not: String
  tehsil_in: [String!]
  tehsil_not_in: [String!]
  tehsil_lt: String
  tehsil_lte: String
  tehsil_gt: String
  tehsil_gte: String
  tehsil_contains: String
  tehsil_not_contains: String
  tehsil_starts_with: String
  tehsil_not_starts_with: String
  tehsil_ends_with: String
  tehsil_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  district: String
  district_not: String
  district_in: [String!]
  district_not_in: [String!]
  district_lt: String
  district_lte: String
  district_gt: String
  district_gte: String
  district_contains: String
  district_not_contains: String
  district_starts_with: String
  district_not_starts_with: String
  district_ends_with: String
  district_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  pincode: String
  pincode_not: String
  pincode_in: [String!]
  pincode_not_in: [String!]
  pincode_lt: String
  pincode_lte: String
  pincode_gt: String
  pincode_gte: String
  pincode_contains: String
  pincode_not_contains: String
  pincode_starts_with: String
  pincode_not_starts_with: String
  pincode_ends_with: String
  pincode_not_ends_with: String
  AND: [AddressScalarWhereInput!]
  OR: [AddressScalarWhereInput!]
  NOT: [AddressScalarWhereInput!]
}

type AddressSubscriptionPayload {
  mutation: MutationType!
  node: Address
  updatedFields: [String!]
  previousValues: AddressPreviousValues
}

input AddressSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AddressWhereInput
  AND: [AddressSubscriptionWhereInput!]
  OR: [AddressSubscriptionWhereInput!]
  NOT: [AddressSubscriptionWhereInput!]
}

input AddressUpdateInput {
  adressline: String
  tehsil: String
  city: String
  district: String
  state: String
  pincode: String
  personalProfile: PersonalProfileUpdateOneWithoutAddressesInput
}

input AddressUpdateManyDataInput {
  adressline: String
  tehsil: String
  city: String
  district: String
  state: String
  pincode: String
}

input AddressUpdateManyMutationInput {
  adressline: String
  tehsil: String
  city: String
  district: String
  state: String
  pincode: String
}

input AddressUpdateManyWithoutPersonalProfileInput {
  create: [AddressCreateWithoutPersonalProfileInput!]
  delete: [AddressWhereUniqueInput!]
  connect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  disconnect: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutPersonalProfileInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutPersonalProfileInput!]
  deleteMany: [AddressScalarWhereInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
}

input AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput!
  data: AddressUpdateManyDataInput!
}

input AddressUpdateWithoutPersonalProfileDataInput {
  adressline: String
  tehsil: String
  city: String
  district: String
  state: String
  pincode: String
}

input AddressUpdateWithWhereUniqueWithoutPersonalProfileInput {
  where: AddressWhereUniqueInput!
  data: AddressUpdateWithoutPersonalProfileDataInput!
}

input AddressUpsertWithWhereUniqueWithoutPersonalProfileInput {
  where: AddressWhereUniqueInput!
  update: AddressUpdateWithoutPersonalProfileDataInput!
  create: AddressCreateWithoutPersonalProfileInput!
}

input AddressWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  adressline: String
  adressline_not: String
  adressline_in: [String!]
  adressline_not_in: [String!]
  adressline_lt: String
  adressline_lte: String
  adressline_gt: String
  adressline_gte: String
  adressline_contains: String
  adressline_not_contains: String
  adressline_starts_with: String
  adressline_not_starts_with: String
  adressline_ends_with: String
  adressline_not_ends_with: String
  tehsil: String
  tehsil_not: String
  tehsil_in: [String!]
  tehsil_not_in: [String!]
  tehsil_lt: String
  tehsil_lte: String
  tehsil_gt: String
  tehsil_gte: String
  tehsil_contains: String
  tehsil_not_contains: String
  tehsil_starts_with: String
  tehsil_not_starts_with: String
  tehsil_ends_with: String
  tehsil_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  district: String
  district_not: String
  district_in: [String!]
  district_not_in: [String!]
  district_lt: String
  district_lte: String
  district_gt: String
  district_gte: String
  district_contains: String
  district_not_contains: String
  district_starts_with: String
  district_not_starts_with: String
  district_ends_with: String
  district_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  pincode: String
  pincode_not: String
  pincode_in: [String!]
  pincode_not_in: [String!]
  pincode_lt: String
  pincode_lte: String
  pincode_gt: String
  pincode_gte: String
  pincode_contains: String
  pincode_not_contains: String
  pincode_starts_with: String
  pincode_not_starts_with: String
  pincode_ends_with: String
  pincode_not_ends_with: String
  personalProfile: PersonalProfileWhereInput
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
}

input AddressWhereUniqueInput {
  id: ID
}

type AggregateAddress {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateContent {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateGroupMember {
  count: Int!
}

type AggregateMedium {
  count: Int!
}

type AggregateOption {
  count: Int!
}

type AggregateOrganization {
  count: Int!
}

type AggregatePersonalProfile {
  count: Int!
}

type AggregatePoll {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateProfile {
  count: Int!
}

type AggregateQuestion {
  count: Int!
}

type AggregateQuiz {
  count: Int!
}

type AggregateResult {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateRoleMember {
  count: Int!
}

type AggregateStd {
  count: Int!
}

type AggregateStudentProfile {
  count: Int!
}

type AggregateSubGroup {
  count: Int!
}

type AggregateSubGroupMember {
  count: Int!
}

type AggregateSubject {
  count: Int!
}

type AggregateSubjectSubscription {
  count: Int!
}

type AggregateSuborg {
  count: Int!
}

type AggregateTopic {
  count: Int!
}

type AggregateUnit {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  count: Long!
}

enum Color {
  RED
  BLLUE
  GREEN
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  text: String!
  author: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutAuthorInput {
  id: ID
  text: String!
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutPostInput {
  id: ID
  text: String!
  author: UserCreateOneWithoutCommentsInput!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  text: String
}

input CommentUpdateManyMutationInput {
  text: String
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutAuthorDataInput {
  text: String
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutPostDataInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  author: UserWhereInput
  post: PostWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

type Content {
  id: ID!
  name: String!
  number: Int
  fileInfo: Json
  type: String!
  url: String
  subject: Subject!
  unit: Unit
  topic: Topic
  createdBy: User
  updateBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ContentConnection {
  pageInfo: PageInfo!
  edges: [ContentEdge]!
  aggregate: AggregateContent!
}

input ContentCreateInput {
  id: ID
  name: String!
  number: Int
  fileInfo: Json
  type: String!
  url: String
  subject: SubjectCreateOneWithoutContentsInput!
  unit: UnitCreateOneWithoutContentsInput
  topic: TopicCreateOneWithoutContentsInput
  createdBy: UserCreateOneWithoutContentByMeInput
  updateBy: UserCreateManyWithoutContentUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
}

input ContentCreateManyWithoutCreatedByInput {
  create: [ContentCreateWithoutCreatedByInput!]
  connect: [ContentWhereUniqueInput!]
}

input ContentCreateManyWithoutSubjectInput {
  create: [ContentCreateWithoutSubjectInput!]
  connect: [ContentWhereUniqueInput!]
}

input ContentCreateManyWithoutTopicInput {
  create: [ContentCreateWithoutTopicInput!]
  connect: [ContentWhereUniqueInput!]
}

input ContentCreateManyWithoutUnitInput {
  create: [ContentCreateWithoutUnitInput!]
  connect: [ContentWhereUniqueInput!]
}

input ContentCreateManyWithoutUpdateByInput {
  create: [ContentCreateWithoutUpdateByInput!]
  connect: [ContentWhereUniqueInput!]
}

input ContentCreateWithoutCreatedByInput {
  id: ID
  name: String!
  number: Int
  fileInfo: Json
  type: String!
  url: String
  subject: SubjectCreateOneWithoutContentsInput!
  unit: UnitCreateOneWithoutContentsInput
  topic: TopicCreateOneWithoutContentsInput
  updateBy: UserCreateManyWithoutContentUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
}

input ContentCreateWithoutSubjectInput {
  id: ID
  name: String!
  number: Int
  fileInfo: Json
  type: String!
  url: String
  unit: UnitCreateOneWithoutContentsInput
  topic: TopicCreateOneWithoutContentsInput
  createdBy: UserCreateOneWithoutContentByMeInput
  updateBy: UserCreateManyWithoutContentUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
}

input ContentCreateWithoutTopicInput {
  id: ID
  name: String!
  number: Int
  fileInfo: Json
  type: String!
  url: String
  subject: SubjectCreateOneWithoutContentsInput!
  unit: UnitCreateOneWithoutContentsInput
  createdBy: UserCreateOneWithoutContentByMeInput
  updateBy: UserCreateManyWithoutContentUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
}

input ContentCreateWithoutUnitInput {
  id: ID
  name: String!
  number: Int
  fileInfo: Json
  type: String!
  url: String
  subject: SubjectCreateOneWithoutContentsInput!
  topic: TopicCreateOneWithoutContentsInput
  createdBy: UserCreateOneWithoutContentByMeInput
  updateBy: UserCreateManyWithoutContentUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
}

input ContentCreateWithoutUpdateByInput {
  id: ID
  name: String!
  number: Int
  fileInfo: Json
  type: String!
  url: String
  subject: SubjectCreateOneWithoutContentsInput!
  unit: UnitCreateOneWithoutContentsInput
  topic: TopicCreateOneWithoutContentsInput
  createdBy: UserCreateOneWithoutContentByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
}

type ContentEdge {
  node: Content!
  cursor: String!
}

enum ContentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  number_ASC
  number_DESC
  fileInfo_ASC
  fileInfo_DESC
  type_ASC
  type_DESC
  url_ASC
  url_DESC
  plantDate_ASC
  plantDate_DESC
  isPublished_ASC
  isPublished_DESC
  state_ASC
  state_DESC
  status_ASC
  status_DESC
  available_ASC
  available_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ContentPreviousValues {
  id: ID!
  name: String!
  number: Int
  fileInfo: Json
  type: String!
  url: String
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input ContentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  plantDate: DateTime
  plantDate_not: DateTime
  plantDate_in: [DateTime!]
  plantDate_not_in: [DateTime!]
  plantDate_lt: DateTime
  plantDate_lte: DateTime
  plantDate_gt: DateTime
  plantDate_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  available: String
  available_not: String
  available_in: [String!]
  available_not_in: [String!]
  available_lt: String
  available_lte: String
  available_gt: String
  available_gte: String
  available_contains: String
  available_not_contains: String
  available_starts_with: String
  available_not_starts_with: String
  available_ends_with: String
  available_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ContentScalarWhereInput!]
  OR: [ContentScalarWhereInput!]
  NOT: [ContentScalarWhereInput!]
}

type ContentSubscriptionPayload {
  mutation: MutationType!
  node: Content
  updatedFields: [String!]
  previousValues: ContentPreviousValues
}

input ContentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContentWhereInput
  AND: [ContentSubscriptionWhereInput!]
  OR: [ContentSubscriptionWhereInput!]
  NOT: [ContentSubscriptionWhereInput!]
}

input ContentUpdateInput {
  name: String
  number: Int
  fileInfo: Json
  type: String
  url: String
  subject: SubjectUpdateOneRequiredWithoutContentsInput
  unit: UnitUpdateOneWithoutContentsInput
  topic: TopicUpdateOneWithoutContentsInput
  createdBy: UserUpdateOneWithoutContentByMeInput
  updateBy: UserUpdateManyWithoutContentUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input ContentUpdateManyDataInput {
  name: String
  number: Int
  fileInfo: Json
  type: String
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input ContentUpdateManyMutationInput {
  name: String
  number: Int
  fileInfo: Json
  type: String
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input ContentUpdateManyWithoutCreatedByInput {
  create: [ContentCreateWithoutCreatedByInput!]
  delete: [ContentWhereUniqueInput!]
  connect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
  disconnect: [ContentWhereUniqueInput!]
  update: [ContentUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [ContentUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [ContentScalarWhereInput!]
  updateMany: [ContentUpdateManyWithWhereNestedInput!]
}

input ContentUpdateManyWithoutSubjectInput {
  create: [ContentCreateWithoutSubjectInput!]
  delete: [ContentWhereUniqueInput!]
  connect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
  disconnect: [ContentWhereUniqueInput!]
  update: [ContentUpdateWithWhereUniqueWithoutSubjectInput!]
  upsert: [ContentUpsertWithWhereUniqueWithoutSubjectInput!]
  deleteMany: [ContentScalarWhereInput!]
  updateMany: [ContentUpdateManyWithWhereNestedInput!]
}

input ContentUpdateManyWithoutTopicInput {
  create: [ContentCreateWithoutTopicInput!]
  delete: [ContentWhereUniqueInput!]
  connect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
  disconnect: [ContentWhereUniqueInput!]
  update: [ContentUpdateWithWhereUniqueWithoutTopicInput!]
  upsert: [ContentUpsertWithWhereUniqueWithoutTopicInput!]
  deleteMany: [ContentScalarWhereInput!]
  updateMany: [ContentUpdateManyWithWhereNestedInput!]
}

input ContentUpdateManyWithoutUnitInput {
  create: [ContentCreateWithoutUnitInput!]
  delete: [ContentWhereUniqueInput!]
  connect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
  disconnect: [ContentWhereUniqueInput!]
  update: [ContentUpdateWithWhereUniqueWithoutUnitInput!]
  upsert: [ContentUpsertWithWhereUniqueWithoutUnitInput!]
  deleteMany: [ContentScalarWhereInput!]
  updateMany: [ContentUpdateManyWithWhereNestedInput!]
}

input ContentUpdateManyWithoutUpdateByInput {
  create: [ContentCreateWithoutUpdateByInput!]
  delete: [ContentWhereUniqueInput!]
  connect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
  disconnect: [ContentWhereUniqueInput!]
  update: [ContentUpdateWithWhereUniqueWithoutUpdateByInput!]
  upsert: [ContentUpsertWithWhereUniqueWithoutUpdateByInput!]
  deleteMany: [ContentScalarWhereInput!]
  updateMany: [ContentUpdateManyWithWhereNestedInput!]
}

input ContentUpdateManyWithWhereNestedInput {
  where: ContentScalarWhereInput!
  data: ContentUpdateManyDataInput!
}

input ContentUpdateWithoutCreatedByDataInput {
  name: String
  number: Int
  fileInfo: Json
  type: String
  url: String
  subject: SubjectUpdateOneRequiredWithoutContentsInput
  unit: UnitUpdateOneWithoutContentsInput
  topic: TopicUpdateOneWithoutContentsInput
  updateBy: UserUpdateManyWithoutContentUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input ContentUpdateWithoutSubjectDataInput {
  name: String
  number: Int
  fileInfo: Json
  type: String
  url: String
  unit: UnitUpdateOneWithoutContentsInput
  topic: TopicUpdateOneWithoutContentsInput
  createdBy: UserUpdateOneWithoutContentByMeInput
  updateBy: UserUpdateManyWithoutContentUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input ContentUpdateWithoutTopicDataInput {
  name: String
  number: Int
  fileInfo: Json
  type: String
  url: String
  subject: SubjectUpdateOneRequiredWithoutContentsInput
  unit: UnitUpdateOneWithoutContentsInput
  createdBy: UserUpdateOneWithoutContentByMeInput
  updateBy: UserUpdateManyWithoutContentUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input ContentUpdateWithoutUnitDataInput {
  name: String
  number: Int
  fileInfo: Json
  type: String
  url: String
  subject: SubjectUpdateOneRequiredWithoutContentsInput
  topic: TopicUpdateOneWithoutContentsInput
  createdBy: UserUpdateOneWithoutContentByMeInput
  updateBy: UserUpdateManyWithoutContentUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input ContentUpdateWithoutUpdateByDataInput {
  name: String
  number: Int
  fileInfo: Json
  type: String
  url: String
  subject: SubjectUpdateOneRequiredWithoutContentsInput
  unit: UnitUpdateOneWithoutContentsInput
  topic: TopicUpdateOneWithoutContentsInput
  createdBy: UserUpdateOneWithoutContentByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input ContentUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ContentWhereUniqueInput!
  data: ContentUpdateWithoutCreatedByDataInput!
}

input ContentUpdateWithWhereUniqueWithoutSubjectInput {
  where: ContentWhereUniqueInput!
  data: ContentUpdateWithoutSubjectDataInput!
}

input ContentUpdateWithWhereUniqueWithoutTopicInput {
  where: ContentWhereUniqueInput!
  data: ContentUpdateWithoutTopicDataInput!
}

input ContentUpdateWithWhereUniqueWithoutUnitInput {
  where: ContentWhereUniqueInput!
  data: ContentUpdateWithoutUnitDataInput!
}

input ContentUpdateWithWhereUniqueWithoutUpdateByInput {
  where: ContentWhereUniqueInput!
  data: ContentUpdateWithoutUpdateByDataInput!
}

input ContentUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ContentWhereUniqueInput!
  update: ContentUpdateWithoutCreatedByDataInput!
  create: ContentCreateWithoutCreatedByInput!
}

input ContentUpsertWithWhereUniqueWithoutSubjectInput {
  where: ContentWhereUniqueInput!
  update: ContentUpdateWithoutSubjectDataInput!
  create: ContentCreateWithoutSubjectInput!
}

input ContentUpsertWithWhereUniqueWithoutTopicInput {
  where: ContentWhereUniqueInput!
  update: ContentUpdateWithoutTopicDataInput!
  create: ContentCreateWithoutTopicInput!
}

input ContentUpsertWithWhereUniqueWithoutUnitInput {
  where: ContentWhereUniqueInput!
  update: ContentUpdateWithoutUnitDataInput!
  create: ContentCreateWithoutUnitInput!
}

input ContentUpsertWithWhereUniqueWithoutUpdateByInput {
  where: ContentWhereUniqueInput!
  update: ContentUpdateWithoutUpdateByDataInput!
  create: ContentCreateWithoutUpdateByInput!
}

input ContentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  subject: SubjectWhereInput
  unit: UnitWhereInput
  topic: TopicWhereInput
  createdBy: UserWhereInput
  updateBy_every: UserWhereInput
  updateBy_some: UserWhereInput
  updateBy_none: UserWhereInput
  plantDate: DateTime
  plantDate_not: DateTime
  plantDate_in: [DateTime!]
  plantDate_not_in: [DateTime!]
  plantDate_lt: DateTime
  plantDate_lte: DateTime
  plantDate_gt: DateTime
  plantDate_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  available: String
  available_not: String
  available_in: [String!]
  available_not_in: [String!]
  available_lt: String
  available_lte: String
  available_gt: String
  available_gte: String
  available_contains: String
  available_not_contains: String
  available_starts_with: String
  available_not_starts_with: String
  available_ends_with: String
  available_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ContentWhereInput!]
  OR: [ContentWhereInput!]
  NOT: [ContentWhereInput!]
}

input ContentWhereUniqueInput {
  id: ID
}

scalar DateTime

type Group {
  id: ID!
  name: String!
  description: String
  suborgid: Suborg!
  subgroups(where: SubGroupWhereInput, orderBy: SubGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubGroup!]
  members(where: GroupMemberWhereInput, orderBy: GroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupMember!]
  groupRoles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  id: ID
  name: String!
  description: String
  suborgid: SuborgCreateOneWithoutUserGroupsInput!
  subgroups: SubGroupCreateManyWithoutGroupidInput
  members: GroupMemberCreateManyWithoutMemberInput
  groupRoles: RoleCreateManyWithoutGroupInput
  subjects: SubjectCreateManyWithoutGroupInput
}

input GroupCreateManyWithoutSuborgidInput {
  create: [GroupCreateWithoutSuborgidInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateOneWithoutGroupRolesInput {
  create: GroupCreateWithoutGroupRolesInput
  connect: GroupWhereUniqueInput
}

input GroupCreateOneWithoutMembersInput {
  create: GroupCreateWithoutMembersInput
  connect: GroupWhereUniqueInput
}

input GroupCreateOneWithoutSubgroupsInput {
  create: GroupCreateWithoutSubgroupsInput
  connect: GroupWhereUniqueInput
}

input GroupCreateOneWithoutSubjectsInput {
  create: GroupCreateWithoutSubjectsInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutGroupRolesInput {
  id: ID
  name: String!
  description: String
  suborgid: SuborgCreateOneWithoutUserGroupsInput!
  subgroups: SubGroupCreateManyWithoutGroupidInput
  members: GroupMemberCreateManyWithoutMemberInput
  subjects: SubjectCreateManyWithoutGroupInput
}

input GroupCreateWithoutMembersInput {
  id: ID
  name: String!
  description: String
  suborgid: SuborgCreateOneWithoutUserGroupsInput!
  subgroups: SubGroupCreateManyWithoutGroupidInput
  groupRoles: RoleCreateManyWithoutGroupInput
  subjects: SubjectCreateManyWithoutGroupInput
}

input GroupCreateWithoutSubgroupsInput {
  id: ID
  name: String!
  description: String
  suborgid: SuborgCreateOneWithoutUserGroupsInput!
  members: GroupMemberCreateManyWithoutMemberInput
  groupRoles: RoleCreateManyWithoutGroupInput
  subjects: SubjectCreateManyWithoutGroupInput
}

input GroupCreateWithoutSubjectsInput {
  id: ID
  name: String!
  description: String
  suborgid: SuborgCreateOneWithoutUserGroupsInput!
  subgroups: SubGroupCreateManyWithoutGroupidInput
  members: GroupMemberCreateManyWithoutMemberInput
  groupRoles: RoleCreateManyWithoutGroupInput
}

input GroupCreateWithoutSuborgidInput {
  id: ID
  name: String!
  description: String
  subgroups: SubGroupCreateManyWithoutGroupidInput
  members: GroupMemberCreateManyWithoutMemberInput
  groupRoles: RoleCreateManyWithoutGroupInput
  subjects: SubjectCreateManyWithoutGroupInput
}

type GroupEdge {
  node: Group!
  cursor: String!
}

type GroupMember {
  id: ID!
  userid: User!
  member: Group!
  status: MemberStatus
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type GroupMemberConnection {
  pageInfo: PageInfo!
  edges: [GroupMemberEdge]!
  aggregate: AggregateGroupMember!
}

input GroupMemberCreateInput {
  id: ID
  userid: UserCreateOneWithoutGroupmembersInput!
  member: GroupCreateOneWithoutMembersInput!
  status: MemberStatus
  description: String
}

input GroupMemberCreateManyWithoutMemberInput {
  create: [GroupMemberCreateWithoutMemberInput!]
  connect: [GroupMemberWhereUniqueInput!]
}

input GroupMemberCreateManyWithoutUseridInput {
  create: [GroupMemberCreateWithoutUseridInput!]
  connect: [GroupMemberWhereUniqueInput!]
}

input GroupMemberCreateWithoutMemberInput {
  id: ID
  userid: UserCreateOneWithoutGroupmembersInput!
  status: MemberStatus
  description: String
}

input GroupMemberCreateWithoutUseridInput {
  id: ID
  member: GroupCreateOneWithoutMembersInput!
  status: MemberStatus
  description: String
}

type GroupMemberEdge {
  node: GroupMember!
  cursor: String!
}

enum GroupMemberOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GroupMemberPreviousValues {
  id: ID!
  status: MemberStatus
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input GroupMemberScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: MemberStatus
  status_not: MemberStatus
  status_in: [MemberStatus!]
  status_not_in: [MemberStatus!]
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [GroupMemberScalarWhereInput!]
  OR: [GroupMemberScalarWhereInput!]
  NOT: [GroupMemberScalarWhereInput!]
}

type GroupMemberSubscriptionPayload {
  mutation: MutationType!
  node: GroupMember
  updatedFields: [String!]
  previousValues: GroupMemberPreviousValues
}

input GroupMemberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupMemberWhereInput
  AND: [GroupMemberSubscriptionWhereInput!]
  OR: [GroupMemberSubscriptionWhereInput!]
  NOT: [GroupMemberSubscriptionWhereInput!]
}

input GroupMemberUpdateInput {
  userid: UserUpdateOneRequiredWithoutGroupmembersInput
  member: GroupUpdateOneRequiredWithoutMembersInput
  status: MemberStatus
  description: String
}

input GroupMemberUpdateManyDataInput {
  status: MemberStatus
  description: String
}

input GroupMemberUpdateManyMutationInput {
  status: MemberStatus
  description: String
}

input GroupMemberUpdateManyWithoutMemberInput {
  create: [GroupMemberCreateWithoutMemberInput!]
  delete: [GroupMemberWhereUniqueInput!]
  connect: [GroupMemberWhereUniqueInput!]
  set: [GroupMemberWhereUniqueInput!]
  disconnect: [GroupMemberWhereUniqueInput!]
  update: [GroupMemberUpdateWithWhereUniqueWithoutMemberInput!]
  upsert: [GroupMemberUpsertWithWhereUniqueWithoutMemberInput!]
  deleteMany: [GroupMemberScalarWhereInput!]
  updateMany: [GroupMemberUpdateManyWithWhereNestedInput!]
}

input GroupMemberUpdateManyWithoutUseridInput {
  create: [GroupMemberCreateWithoutUseridInput!]
  delete: [GroupMemberWhereUniqueInput!]
  connect: [GroupMemberWhereUniqueInput!]
  set: [GroupMemberWhereUniqueInput!]
  disconnect: [GroupMemberWhereUniqueInput!]
  update: [GroupMemberUpdateWithWhereUniqueWithoutUseridInput!]
  upsert: [GroupMemberUpsertWithWhereUniqueWithoutUseridInput!]
  deleteMany: [GroupMemberScalarWhereInput!]
  updateMany: [GroupMemberUpdateManyWithWhereNestedInput!]
}

input GroupMemberUpdateManyWithWhereNestedInput {
  where: GroupMemberScalarWhereInput!
  data: GroupMemberUpdateManyDataInput!
}

input GroupMemberUpdateWithoutMemberDataInput {
  userid: UserUpdateOneRequiredWithoutGroupmembersInput
  status: MemberStatus
  description: String
}

input GroupMemberUpdateWithoutUseridDataInput {
  member: GroupUpdateOneRequiredWithoutMembersInput
  status: MemberStatus
  description: String
}

input GroupMemberUpdateWithWhereUniqueWithoutMemberInput {
  where: GroupMemberWhereUniqueInput!
  data: GroupMemberUpdateWithoutMemberDataInput!
}

input GroupMemberUpdateWithWhereUniqueWithoutUseridInput {
  where: GroupMemberWhereUniqueInput!
  data: GroupMemberUpdateWithoutUseridDataInput!
}

input GroupMemberUpsertWithWhereUniqueWithoutMemberInput {
  where: GroupMemberWhereUniqueInput!
  update: GroupMemberUpdateWithoutMemberDataInput!
  create: GroupMemberCreateWithoutMemberInput!
}

input GroupMemberUpsertWithWhereUniqueWithoutUseridInput {
  where: GroupMemberWhereUniqueInput!
  update: GroupMemberUpdateWithoutUseridDataInput!
  create: GroupMemberCreateWithoutUseridInput!
}

input GroupMemberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userid: UserWhereInput
  member: GroupWhereInput
  status: MemberStatus
  status_not: MemberStatus
  status_in: [MemberStatus!]
  status_not_in: [MemberStatus!]
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [GroupMemberWhereInput!]
  OR: [GroupMemberWhereInput!]
  NOT: [GroupMemberWhereInput!]
}

input GroupMemberWhereUniqueInput {
  id: ID
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GroupPreviousValues {
  id: ID!
  name: String!
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input GroupScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [GroupScalarWhereInput!]
  OR: [GroupScalarWhereInput!]
  NOT: [GroupScalarWhereInput!]
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
  AND: [GroupSubscriptionWhereInput!]
  OR: [GroupSubscriptionWhereInput!]
  NOT: [GroupSubscriptionWhereInput!]
}

input GroupUpdateInput {
  name: String
  description: String
  suborgid: SuborgUpdateOneRequiredWithoutUserGroupsInput
  subgroups: SubGroupUpdateManyWithoutGroupidInput
  members: GroupMemberUpdateManyWithoutMemberInput
  groupRoles: RoleUpdateManyWithoutGroupInput
  subjects: SubjectUpdateManyWithoutGroupInput
}

input GroupUpdateManyDataInput {
  name: String
  description: String
}

input GroupUpdateManyMutationInput {
  name: String
  description: String
}

input GroupUpdateManyWithoutSuborgidInput {
  create: [GroupCreateWithoutSuborgidInput!]
  delete: [GroupWhereUniqueInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutSuborgidInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutSuborgidInput!]
  deleteMany: [GroupScalarWhereInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
}

input GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput!
  data: GroupUpdateManyDataInput!
}

input GroupUpdateOneRequiredWithoutMembersInput {
  create: GroupCreateWithoutMembersInput
  update: GroupUpdateWithoutMembersDataInput
  upsert: GroupUpsertWithoutMembersInput
  connect: GroupWhereUniqueInput
}

input GroupUpdateOneRequiredWithoutSubgroupsInput {
  create: GroupCreateWithoutSubgroupsInput
  update: GroupUpdateWithoutSubgroupsDataInput
  upsert: GroupUpsertWithoutSubgroupsInput
  connect: GroupWhereUniqueInput
}

input GroupUpdateOneWithoutGroupRolesInput {
  create: GroupCreateWithoutGroupRolesInput
  update: GroupUpdateWithoutGroupRolesDataInput
  upsert: GroupUpsertWithoutGroupRolesInput
  delete: Boolean
  disconnect: Boolean
  connect: GroupWhereUniqueInput
}

input GroupUpdateOneWithoutSubjectsInput {
  create: GroupCreateWithoutSubjectsInput
  update: GroupUpdateWithoutSubjectsDataInput
  upsert: GroupUpsertWithoutSubjectsInput
  delete: Boolean
  disconnect: Boolean
  connect: GroupWhereUniqueInput
}

input GroupUpdateWithoutGroupRolesDataInput {
  name: String
  description: String
  suborgid: SuborgUpdateOneRequiredWithoutUserGroupsInput
  subgroups: SubGroupUpdateManyWithoutGroupidInput
  members: GroupMemberUpdateManyWithoutMemberInput
  subjects: SubjectUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutMembersDataInput {
  name: String
  description: String
  suborgid: SuborgUpdateOneRequiredWithoutUserGroupsInput
  subgroups: SubGroupUpdateManyWithoutGroupidInput
  groupRoles: RoleUpdateManyWithoutGroupInput
  subjects: SubjectUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutSubgroupsDataInput {
  name: String
  description: String
  suborgid: SuborgUpdateOneRequiredWithoutUserGroupsInput
  members: GroupMemberUpdateManyWithoutMemberInput
  groupRoles: RoleUpdateManyWithoutGroupInput
  subjects: SubjectUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutSubjectsDataInput {
  name: String
  description: String
  suborgid: SuborgUpdateOneRequiredWithoutUserGroupsInput
  subgroups: SubGroupUpdateManyWithoutGroupidInput
  members: GroupMemberUpdateManyWithoutMemberInput
  groupRoles: RoleUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutSuborgidDataInput {
  name: String
  description: String
  subgroups: SubGroupUpdateManyWithoutGroupidInput
  members: GroupMemberUpdateManyWithoutMemberInput
  groupRoles: RoleUpdateManyWithoutGroupInput
  subjects: SubjectUpdateManyWithoutGroupInput
}

input GroupUpdateWithWhereUniqueWithoutSuborgidInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutSuborgidDataInput!
}

input GroupUpsertWithoutGroupRolesInput {
  update: GroupUpdateWithoutGroupRolesDataInput!
  create: GroupCreateWithoutGroupRolesInput!
}

input GroupUpsertWithoutMembersInput {
  update: GroupUpdateWithoutMembersDataInput!
  create: GroupCreateWithoutMembersInput!
}

input GroupUpsertWithoutSubgroupsInput {
  update: GroupUpdateWithoutSubgroupsDataInput!
  create: GroupCreateWithoutSubgroupsInput!
}

input GroupUpsertWithoutSubjectsInput {
  update: GroupUpdateWithoutSubjectsDataInput!
  create: GroupCreateWithoutSubjectsInput!
}

input GroupUpsertWithWhereUniqueWithoutSuborgidInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutSuborgidDataInput!
  create: GroupCreateWithoutSuborgidInput!
}

input GroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  suborgid: SuborgWhereInput
  subgroups_every: SubGroupWhereInput
  subgroups_some: SubGroupWhereInput
  subgroups_none: SubGroupWhereInput
  members_every: GroupMemberWhereInput
  members_some: GroupMemberWhereInput
  members_none: GroupMemberWhereInput
  groupRoles_every: RoleWhereInput
  groupRoles_some: RoleWhereInput
  groupRoles_none: RoleWhereInput
  subjects_every: SubjectWhereInput
  subjects_some: SubjectWhereInput
  subjects_none: SubjectWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
}

input GroupWhereUniqueInput {
  id: ID
}

scalar Json

scalar Long

type Medium {
  id: ID!
  name: String!
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type MediumConnection {
  pageInfo: PageInfo!
  edges: [MediumEdge]!
  aggregate: AggregateMedium!
}

input MediumCreateInput {
  id: ID
  name: String!
  subjects: SubjectCreateManyWithoutMediumInput
}

input MediumCreateOneWithoutSubjectsInput {
  create: MediumCreateWithoutSubjectsInput
  connect: MediumWhereUniqueInput
}

input MediumCreateWithoutSubjectsInput {
  id: ID
  name: String!
}

type MediumEdge {
  node: Medium!
  cursor: String!
}

enum MediumOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MediumPreviousValues {
  id: ID!
  name: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type MediumSubscriptionPayload {
  mutation: MutationType!
  node: Medium
  updatedFields: [String!]
  previousValues: MediumPreviousValues
}

input MediumSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MediumWhereInput
  AND: [MediumSubscriptionWhereInput!]
  OR: [MediumSubscriptionWhereInput!]
  NOT: [MediumSubscriptionWhereInput!]
}

input MediumUpdateInput {
  name: String
  subjects: SubjectUpdateManyWithoutMediumInput
}

input MediumUpdateManyMutationInput {
  name: String
}

input MediumUpdateOneWithoutSubjectsInput {
  create: MediumCreateWithoutSubjectsInput
  update: MediumUpdateWithoutSubjectsDataInput
  upsert: MediumUpsertWithoutSubjectsInput
  delete: Boolean
  disconnect: Boolean
  connect: MediumWhereUniqueInput
}

input MediumUpdateWithoutSubjectsDataInput {
  name: String
}

input MediumUpsertWithoutSubjectsInput {
  update: MediumUpdateWithoutSubjectsDataInput!
  create: MediumCreateWithoutSubjectsInput!
}

input MediumWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  subjects_every: SubjectWhereInput
  subjects_some: SubjectWhereInput
  subjects_none: SubjectWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [MediumWhereInput!]
  OR: [MediumWhereInput!]
  NOT: [MediumWhereInput!]
}

input MediumWhereUniqueInput {
  id: ID
}

enum MemberStatus {
  ACTIVE
  EXPIRED
  INACTIVE
  DORMANT
  RENEWED
  SPECIALGRANT
}

type Mutation {
  createAddress(data: AddressCreateInput!): Address!
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateManyAddresses(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  upsertAddress(where: AddressWhereUniqueInput!, create: AddressCreateInput!, update: AddressUpdateInput!): Address!
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createContent(data: ContentCreateInput!): Content!
  updateContent(data: ContentUpdateInput!, where: ContentWhereUniqueInput!): Content
  updateManyContents(data: ContentUpdateManyMutationInput!, where: ContentWhereInput): BatchPayload!
  upsertContent(where: ContentWhereUniqueInput!, create: ContentCreateInput!, update: ContentUpdateInput!): Content!
  deleteContent(where: ContentWhereUniqueInput!): Content
  deleteManyContents(where: ContentWhereInput): BatchPayload!
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  createGroupMember(data: GroupMemberCreateInput!): GroupMember!
  updateGroupMember(data: GroupMemberUpdateInput!, where: GroupMemberWhereUniqueInput!): GroupMember
  updateManyGroupMembers(data: GroupMemberUpdateManyMutationInput!, where: GroupMemberWhereInput): BatchPayload!
  upsertGroupMember(where: GroupMemberWhereUniqueInput!, create: GroupMemberCreateInput!, update: GroupMemberUpdateInput!): GroupMember!
  deleteGroupMember(where: GroupMemberWhereUniqueInput!): GroupMember
  deleteManyGroupMembers(where: GroupMemberWhereInput): BatchPayload!
  createMedium(data: MediumCreateInput!): Medium!
  updateMedium(data: MediumUpdateInput!, where: MediumWhereUniqueInput!): Medium
  updateManyMediums(data: MediumUpdateManyMutationInput!, where: MediumWhereInput): BatchPayload!
  upsertMedium(where: MediumWhereUniqueInput!, create: MediumCreateInput!, update: MediumUpdateInput!): Medium!
  deleteMedium(where: MediumWhereUniqueInput!): Medium
  deleteManyMediums(where: MediumWhereInput): BatchPayload!
  createOption(data: OptionCreateInput!): Option!
  updateOption(data: OptionUpdateInput!, where: OptionWhereUniqueInput!): Option
  updateManyOptions(data: OptionUpdateManyMutationInput!, where: OptionWhereInput): BatchPayload!
  upsertOption(where: OptionWhereUniqueInput!, create: OptionCreateInput!, update: OptionUpdateInput!): Option!
  deleteOption(where: OptionWhereUniqueInput!): Option
  deleteManyOptions(where: OptionWhereInput): BatchPayload!
  createOrganization(data: OrganizationCreateInput!): Organization!
  updateOrganization(data: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization
  updateManyOrganizations(data: OrganizationUpdateManyMutationInput!, where: OrganizationWhereInput): BatchPayload!
  upsertOrganization(where: OrganizationWhereUniqueInput!, create: OrganizationCreateInput!, update: OrganizationUpdateInput!): Organization!
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteManyOrganizations(where: OrganizationWhereInput): BatchPayload!
  createPersonalProfile(data: PersonalProfileCreateInput!): PersonalProfile!
  updatePersonalProfile(data: PersonalProfileUpdateInput!, where: PersonalProfileWhereUniqueInput!): PersonalProfile
  updateManyPersonalProfiles(data: PersonalProfileUpdateManyMutationInput!, where: PersonalProfileWhereInput): BatchPayload!
  upsertPersonalProfile(where: PersonalProfileWhereUniqueInput!, create: PersonalProfileCreateInput!, update: PersonalProfileUpdateInput!): PersonalProfile!
  deletePersonalProfile(where: PersonalProfileWhereUniqueInput!): PersonalProfile
  deleteManyPersonalProfiles(where: PersonalProfileWhereInput): BatchPayload!
  createPoll(data: PollCreateInput!): Poll!
  updatePoll(data: PollUpdateInput!, where: PollWhereUniqueInput!): Poll
  updateManyPolls(data: PollUpdateManyMutationInput!, where: PollWhereInput): BatchPayload!
  upsertPoll(where: PollWhereUniqueInput!, create: PollCreateInput!, update: PollUpdateInput!): Poll!
  deletePoll(where: PollWhereUniqueInput!): Poll
  deleteManyPolls(where: PollWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createProfile(data: ProfileCreateInput!): Profile!
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateManyProfiles(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): BatchPayload!
  upsertProfile(where: ProfileWhereUniqueInput!, create: ProfileCreateInput!, update: ProfileUpdateInput!): Profile!
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteManyProfiles(where: ProfileWhereInput): BatchPayload!
  createQuestion(data: QuestionCreateInput!): Question!
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateManyQuestions(data: QuestionUpdateManyMutationInput!, where: QuestionWhereInput): BatchPayload!
  upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
  createQuiz(data: QuizCreateInput!): Quiz!
  updateQuiz(data: QuizUpdateInput!, where: QuizWhereUniqueInput!): Quiz
  updateManyQuizzes(data: QuizUpdateManyMutationInput!, where: QuizWhereInput): BatchPayload!
  upsertQuiz(where: QuizWhereUniqueInput!, create: QuizCreateInput!, update: QuizUpdateInput!): Quiz!
  deleteQuiz(where: QuizWhereUniqueInput!): Quiz
  deleteManyQuizzes(where: QuizWhereInput): BatchPayload!
  createResult(data: ResultCreateInput!): Result!
  updateResult(data: ResultUpdateInput!, where: ResultWhereUniqueInput!): Result
  updateManyResults(data: ResultUpdateManyMutationInput!, where: ResultWhereInput): BatchPayload!
  upsertResult(where: ResultWhereUniqueInput!, create: ResultCreateInput!, update: ResultUpdateInput!): Result!
  deleteResult(where: ResultWhereUniqueInput!): Result
  deleteManyResults(where: ResultWhereInput): BatchPayload!
  createRole(data: RoleCreateInput!): Role!
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  createRoleMember(data: RoleMemberCreateInput!): RoleMember!
  updateRoleMember(data: RoleMemberUpdateInput!, where: RoleMemberWhereUniqueInput!): RoleMember
  updateManyRoleMembers(data: RoleMemberUpdateManyMutationInput!, where: RoleMemberWhereInput): BatchPayload!
  upsertRoleMember(where: RoleMemberWhereUniqueInput!, create: RoleMemberCreateInput!, update: RoleMemberUpdateInput!): RoleMember!
  deleteRoleMember(where: RoleMemberWhereUniqueInput!): RoleMember
  deleteManyRoleMembers(where: RoleMemberWhereInput): BatchPayload!
  createStd(data: StdCreateInput!): Std!
  updateStd(data: StdUpdateInput!, where: StdWhereUniqueInput!): Std
  updateManyStds(data: StdUpdateManyMutationInput!, where: StdWhereInput): BatchPayload!
  upsertStd(where: StdWhereUniqueInput!, create: StdCreateInput!, update: StdUpdateInput!): Std!
  deleteStd(where: StdWhereUniqueInput!): Std
  deleteManyStds(where: StdWhereInput): BatchPayload!
  createStudentProfile(data: StudentProfileCreateInput!): StudentProfile!
  updateStudentProfile(data: StudentProfileUpdateInput!, where: StudentProfileWhereUniqueInput!): StudentProfile
  updateManyStudentProfiles(data: StudentProfileUpdateManyMutationInput!, where: StudentProfileWhereInput): BatchPayload!
  upsertStudentProfile(where: StudentProfileWhereUniqueInput!, create: StudentProfileCreateInput!, update: StudentProfileUpdateInput!): StudentProfile!
  deleteStudentProfile(where: StudentProfileWhereUniqueInput!): StudentProfile
  deleteManyStudentProfiles(where: StudentProfileWhereInput): BatchPayload!
  createSubGroup(data: SubGroupCreateInput!): SubGroup!
  updateSubGroup(data: SubGroupUpdateInput!, where: SubGroupWhereUniqueInput!): SubGroup
  updateManySubGroups(data: SubGroupUpdateManyMutationInput!, where: SubGroupWhereInput): BatchPayload!
  upsertSubGroup(where: SubGroupWhereUniqueInput!, create: SubGroupCreateInput!, update: SubGroupUpdateInput!): SubGroup!
  deleteSubGroup(where: SubGroupWhereUniqueInput!): SubGroup
  deleteManySubGroups(where: SubGroupWhereInput): BatchPayload!
  createSubGroupMember(data: SubGroupMemberCreateInput!): SubGroupMember!
  updateSubGroupMember(data: SubGroupMemberUpdateInput!, where: SubGroupMemberWhereUniqueInput!): SubGroupMember
  updateManySubGroupMembers(data: SubGroupMemberUpdateManyMutationInput!, where: SubGroupMemberWhereInput): BatchPayload!
  upsertSubGroupMember(where: SubGroupMemberWhereUniqueInput!, create: SubGroupMemberCreateInput!, update: SubGroupMemberUpdateInput!): SubGroupMember!
  deleteSubGroupMember(where: SubGroupMemberWhereUniqueInput!): SubGroupMember
  deleteManySubGroupMembers(where: SubGroupMemberWhereInput): BatchPayload!
  createSubject(data: SubjectCreateInput!): Subject!
  updateSubject(data: SubjectUpdateInput!, where: SubjectWhereUniqueInput!): Subject
  updateManySubjects(data: SubjectUpdateManyMutationInput!, where: SubjectWhereInput): BatchPayload!
  upsertSubject(where: SubjectWhereUniqueInput!, create: SubjectCreateInput!, update: SubjectUpdateInput!): Subject!
  deleteSubject(where: SubjectWhereUniqueInput!): Subject
  deleteManySubjects(where: SubjectWhereInput): BatchPayload!
  createSubjectSubscription(data: SubjectSubscriptionCreateInput!): SubjectSubscription!
  updateSubjectSubscription(data: SubjectSubscriptionUpdateInput!, where: SubjectSubscriptionWhereUniqueInput!): SubjectSubscription
  updateManySubjectSubscriptions(data: SubjectSubscriptionUpdateManyMutationInput!, where: SubjectSubscriptionWhereInput): BatchPayload!
  upsertSubjectSubscription(where: SubjectSubscriptionWhereUniqueInput!, create: SubjectSubscriptionCreateInput!, update: SubjectSubscriptionUpdateInput!): SubjectSubscription!
  deleteSubjectSubscription(where: SubjectSubscriptionWhereUniqueInput!): SubjectSubscription
  deleteManySubjectSubscriptions(where: SubjectSubscriptionWhereInput): BatchPayload!
  createSuborg(data: SuborgCreateInput!): Suborg!
  updateSuborg(data: SuborgUpdateInput!, where: SuborgWhereUniqueInput!): Suborg
  updateManySuborgs(data: SuborgUpdateManyMutationInput!, where: SuborgWhereInput): BatchPayload!
  upsertSuborg(where: SuborgWhereUniqueInput!, create: SuborgCreateInput!, update: SuborgUpdateInput!): Suborg!
  deleteSuborg(where: SuborgWhereUniqueInput!): Suborg
  deleteManySuborgs(where: SuborgWhereInput): BatchPayload!
  createTopic(data: TopicCreateInput!): Topic!
  updateTopic(data: TopicUpdateInput!, where: TopicWhereUniqueInput!): Topic
  updateManyTopics(data: TopicUpdateManyMutationInput!, where: TopicWhereInput): BatchPayload!
  upsertTopic(where: TopicWhereUniqueInput!, create: TopicCreateInput!, update: TopicUpdateInput!): Topic!
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteManyTopics(where: TopicWhereInput): BatchPayload!
  createUnit(data: UnitCreateInput!): Unit!
  updateUnit(data: UnitUpdateInput!, where: UnitWhereUniqueInput!): Unit
  updateManyUnits(data: UnitUpdateManyMutationInput!, where: UnitWhereInput): BatchPayload!
  upsertUnit(where: UnitWhereUniqueInput!, create: UnitCreateInput!, update: UnitUpdateInput!): Unit!
  deleteUnit(where: UnitWhereUniqueInput!): Unit
  deleteManyUnits(where: UnitWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVote(data: VoteCreateInput!): Vote!
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Option {
  id: ID!
  name: String!
  color: Color!
  createdAt: DateTime!
  updatedAt: DateTime!
  poll: Poll
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

type OptionConnection {
  pageInfo: PageInfo!
  edges: [OptionEdge]!
  aggregate: AggregateOption!
}

input OptionCreateInput {
  id: ID
  name: String!
  color: Color!
  poll: PollCreateOneWithoutOptionsInput
  votes: VoteCreateManyWithoutOptionInput
}

input OptionCreateManyWithoutPollInput {
  create: [OptionCreateWithoutPollInput!]
  connect: [OptionWhereUniqueInput!]
}

input OptionCreateOneWithoutVotesInput {
  create: OptionCreateWithoutVotesInput
  connect: OptionWhereUniqueInput
}

input OptionCreateWithoutPollInput {
  id: ID
  name: String!
  color: Color!
  votes: VoteCreateManyWithoutOptionInput
}

input OptionCreateWithoutVotesInput {
  id: ID
  name: String!
  color: Color!
  poll: PollCreateOneWithoutOptionsInput
}

type OptionEdge {
  node: Option!
  cursor: String!
}

enum OptionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  color_ASC
  color_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OptionPreviousValues {
  id: ID!
  name: String!
  color: Color!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input OptionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  color: Color
  color_not: Color
  color_in: [Color!]
  color_not_in: [Color!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OptionScalarWhereInput!]
  OR: [OptionScalarWhereInput!]
  NOT: [OptionScalarWhereInput!]
}

type OptionSubscriptionPayload {
  mutation: MutationType!
  node: Option
  updatedFields: [String!]
  previousValues: OptionPreviousValues
}

input OptionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OptionWhereInput
  AND: [OptionSubscriptionWhereInput!]
  OR: [OptionSubscriptionWhereInput!]
  NOT: [OptionSubscriptionWhereInput!]
}

input OptionUpdateInput {
  name: String
  color: Color
  poll: PollUpdateOneWithoutOptionsInput
  votes: VoteUpdateManyWithoutOptionInput
}

input OptionUpdateManyDataInput {
  name: String
  color: Color
}

input OptionUpdateManyMutationInput {
  name: String
  color: Color
}

input OptionUpdateManyWithoutPollInput {
  create: [OptionCreateWithoutPollInput!]
  delete: [OptionWhereUniqueInput!]
  connect: [OptionWhereUniqueInput!]
  set: [OptionWhereUniqueInput!]
  disconnect: [OptionWhereUniqueInput!]
  update: [OptionUpdateWithWhereUniqueWithoutPollInput!]
  upsert: [OptionUpsertWithWhereUniqueWithoutPollInput!]
  deleteMany: [OptionScalarWhereInput!]
  updateMany: [OptionUpdateManyWithWhereNestedInput!]
}

input OptionUpdateManyWithWhereNestedInput {
  where: OptionScalarWhereInput!
  data: OptionUpdateManyDataInput!
}

input OptionUpdateOneWithoutVotesInput {
  create: OptionCreateWithoutVotesInput
  update: OptionUpdateWithoutVotesDataInput
  upsert: OptionUpsertWithoutVotesInput
  delete: Boolean
  disconnect: Boolean
  connect: OptionWhereUniqueInput
}

input OptionUpdateWithoutPollDataInput {
  name: String
  color: Color
  votes: VoteUpdateManyWithoutOptionInput
}

input OptionUpdateWithoutVotesDataInput {
  name: String
  color: Color
  poll: PollUpdateOneWithoutOptionsInput
}

input OptionUpdateWithWhereUniqueWithoutPollInput {
  where: OptionWhereUniqueInput!
  data: OptionUpdateWithoutPollDataInput!
}

input OptionUpsertWithoutVotesInput {
  update: OptionUpdateWithoutVotesDataInput!
  create: OptionCreateWithoutVotesInput!
}

input OptionUpsertWithWhereUniqueWithoutPollInput {
  where: OptionWhereUniqueInput!
  update: OptionUpdateWithoutPollDataInput!
  create: OptionCreateWithoutPollInput!
}

input OptionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  color: Color
  color_not: Color
  color_in: [Color!]
  color_not_in: [Color!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  poll: PollWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  AND: [OptionWhereInput!]
  OR: [OptionWhereInput!]
  NOT: [OptionWhereInput!]
}

input OptionWhereUniqueInput {
  id: ID
}

type Organization {
  id: ID!
  name: String!
  logo: String
  color: String
  description: String
  author(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  suborgs(where: SuborgWhereInput, orderBy: SuborgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Suborg!]
  orgRoles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type OrganizationConnection {
  pageInfo: PageInfo!
  edges: [OrganizationEdge]!
  aggregate: AggregateOrganization!
}

input OrganizationCreateInput {
  id: ID
  name: String!
  logo: String
  color: String
  description: String
  author: UserCreateManyWithoutOrgInput
  suborgs: SuborgCreateManyWithoutOrgInput
  orgRoles: RoleCreateManyWithoutOrgInput
}

input OrganizationCreateOneWithoutAuthorInput {
  create: OrganizationCreateWithoutAuthorInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateOneWithoutOrgRolesInput {
  create: OrganizationCreateWithoutOrgRolesInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateOneWithoutSuborgsInput {
  create: OrganizationCreateWithoutSuborgsInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateWithoutAuthorInput {
  id: ID
  name: String!
  logo: String
  color: String
  description: String
  suborgs: SuborgCreateManyWithoutOrgInput
  orgRoles: RoleCreateManyWithoutOrgInput
}

input OrganizationCreateWithoutOrgRolesInput {
  id: ID
  name: String!
  logo: String
  color: String
  description: String
  author: UserCreateManyWithoutOrgInput
  suborgs: SuborgCreateManyWithoutOrgInput
}

input OrganizationCreateWithoutSuborgsInput {
  id: ID
  name: String!
  logo: String
  color: String
  description: String
  author: UserCreateManyWithoutOrgInput
  orgRoles: RoleCreateManyWithoutOrgInput
}

type OrganizationEdge {
  node: Organization!
  cursor: String!
}

enum OrganizationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  logo_ASC
  logo_DESC
  color_ASC
  color_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrganizationPreviousValues {
  id: ID!
  name: String!
  logo: String
  color: String
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type OrganizationSubscriptionPayload {
  mutation: MutationType!
  node: Organization
  updatedFields: [String!]
  previousValues: OrganizationPreviousValues
}

input OrganizationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrganizationWhereInput
  AND: [OrganizationSubscriptionWhereInput!]
  OR: [OrganizationSubscriptionWhereInput!]
  NOT: [OrganizationSubscriptionWhereInput!]
}

input OrganizationUpdateInput {
  name: String
  logo: String
  color: String
  description: String
  author: UserUpdateManyWithoutOrgInput
  suborgs: SuborgUpdateManyWithoutOrgInput
  orgRoles: RoleUpdateManyWithoutOrgInput
}

input OrganizationUpdateManyMutationInput {
  name: String
  logo: String
  color: String
  description: String
}

input OrganizationUpdateOneRequiredWithoutSuborgsInput {
  create: OrganizationCreateWithoutSuborgsInput
  update: OrganizationUpdateWithoutSuborgsDataInput
  upsert: OrganizationUpsertWithoutSuborgsInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationUpdateOneWithoutAuthorInput {
  create: OrganizationCreateWithoutAuthorInput
  update: OrganizationUpdateWithoutAuthorDataInput
  upsert: OrganizationUpsertWithoutAuthorInput
  delete: Boolean
  disconnect: Boolean
  connect: OrganizationWhereUniqueInput
}

input OrganizationUpdateOneWithoutOrgRolesInput {
  create: OrganizationCreateWithoutOrgRolesInput
  update: OrganizationUpdateWithoutOrgRolesDataInput
  upsert: OrganizationUpsertWithoutOrgRolesInput
  delete: Boolean
  disconnect: Boolean
  connect: OrganizationWhereUniqueInput
}

input OrganizationUpdateWithoutAuthorDataInput {
  name: String
  logo: String
  color: String
  description: String
  suborgs: SuborgUpdateManyWithoutOrgInput
  orgRoles: RoleUpdateManyWithoutOrgInput
}

input OrganizationUpdateWithoutOrgRolesDataInput {
  name: String
  logo: String
  color: String
  description: String
  author: UserUpdateManyWithoutOrgInput
  suborgs: SuborgUpdateManyWithoutOrgInput
}

input OrganizationUpdateWithoutSuborgsDataInput {
  name: String
  logo: String
  color: String
  description: String
  author: UserUpdateManyWithoutOrgInput
  orgRoles: RoleUpdateManyWithoutOrgInput
}

input OrganizationUpsertWithoutAuthorInput {
  update: OrganizationUpdateWithoutAuthorDataInput!
  create: OrganizationCreateWithoutAuthorInput!
}

input OrganizationUpsertWithoutOrgRolesInput {
  update: OrganizationUpdateWithoutOrgRolesDataInput!
  create: OrganizationCreateWithoutOrgRolesInput!
}

input OrganizationUpsertWithoutSuborgsInput {
  update: OrganizationUpdateWithoutSuborgsDataInput!
  create: OrganizationCreateWithoutSuborgsInput!
}

input OrganizationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  logo: String
  logo_not: String
  logo_in: [String!]
  logo_not_in: [String!]
  logo_lt: String
  logo_lte: String
  logo_gt: String
  logo_gte: String
  logo_contains: String
  logo_not_contains: String
  logo_starts_with: String
  logo_not_starts_with: String
  logo_ends_with: String
  logo_not_ends_with: String
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  author_every: UserWhereInput
  author_some: UserWhereInput
  author_none: UserWhereInput
  suborgs_every: SuborgWhereInput
  suborgs_some: SuborgWhereInput
  suborgs_none: SuborgWhereInput
  orgRoles_every: RoleWhereInput
  orgRoles_some: RoleWhereInput
  orgRoles_none: RoleWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
}

input OrganizationWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PersonalProfile {
  id: ID!
  name: String!
  avatar: String!
  mobile: String!
  isMobilePublished: Boolean
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address!]
  profileId: Profile!
}

type PersonalProfileConnection {
  pageInfo: PageInfo!
  edges: [PersonalProfileEdge]!
  aggregate: AggregatePersonalProfile!
}

input PersonalProfileCreateInput {
  id: ID
  name: String
  avatar: String!
  mobile: String!
  isMobilePublished: Boolean
  addresses: AddressCreateManyWithoutPersonalProfileInput
  profileId: ProfileCreateOneWithoutPersonalProfiileInput!
}

input PersonalProfileCreateManyWithoutProfileIdInput {
  create: [PersonalProfileCreateWithoutProfileIdInput!]
  connect: [PersonalProfileWhereUniqueInput!]
}

input PersonalProfileCreateOneWithoutAddressesInput {
  create: PersonalProfileCreateWithoutAddressesInput
  connect: PersonalProfileWhereUniqueInput
}

input PersonalProfileCreateWithoutAddressesInput {
  id: ID
  name: String
  avatar: String!
  mobile: String!
  isMobilePublished: Boolean
  profileId: ProfileCreateOneWithoutPersonalProfiileInput!
}

input PersonalProfileCreateWithoutProfileIdInput {
  id: ID
  name: String
  avatar: String!
  mobile: String!
  isMobilePublished: Boolean
  addresses: AddressCreateManyWithoutPersonalProfileInput
}

type PersonalProfileEdge {
  node: PersonalProfile!
  cursor: String!
}

enum PersonalProfileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  avatar_ASC
  avatar_DESC
  mobile_ASC
  mobile_DESC
  isMobilePublished_ASC
  isMobilePublished_DESC
}

type PersonalProfilePreviousValues {
  id: ID!
  name: String!
  avatar: String!
  mobile: String!
  isMobilePublished: Boolean
}

input PersonalProfileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  mobile: String
  mobile_not: String
  mobile_in: [String!]
  mobile_not_in: [String!]
  mobile_lt: String
  mobile_lte: String
  mobile_gt: String
  mobile_gte: String
  mobile_contains: String
  mobile_not_contains: String
  mobile_starts_with: String
  mobile_not_starts_with: String
  mobile_ends_with: String
  mobile_not_ends_with: String
  isMobilePublished: Boolean
  isMobilePublished_not: Boolean
  AND: [PersonalProfileScalarWhereInput!]
  OR: [PersonalProfileScalarWhereInput!]
  NOT: [PersonalProfileScalarWhereInput!]
}

type PersonalProfileSubscriptionPayload {
  mutation: MutationType!
  node: PersonalProfile
  updatedFields: [String!]
  previousValues: PersonalProfilePreviousValues
}

input PersonalProfileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PersonalProfileWhereInput
  AND: [PersonalProfileSubscriptionWhereInput!]
  OR: [PersonalProfileSubscriptionWhereInput!]
  NOT: [PersonalProfileSubscriptionWhereInput!]
}

input PersonalProfileUpdateInput {
  name: String
  avatar: String
  mobile: String
  isMobilePublished: Boolean
  addresses: AddressUpdateManyWithoutPersonalProfileInput
  profileId: ProfileUpdateOneRequiredWithoutPersonalProfiileInput
}

input PersonalProfileUpdateManyDataInput {
  name: String
  avatar: String
  mobile: String
  isMobilePublished: Boolean
}

input PersonalProfileUpdateManyMutationInput {
  name: String
  avatar: String
  mobile: String
  isMobilePublished: Boolean
}

input PersonalProfileUpdateManyWithoutProfileIdInput {
  create: [PersonalProfileCreateWithoutProfileIdInput!]
  delete: [PersonalProfileWhereUniqueInput!]
  connect: [PersonalProfileWhereUniqueInput!]
  set: [PersonalProfileWhereUniqueInput!]
  disconnect: [PersonalProfileWhereUniqueInput!]
  update: [PersonalProfileUpdateWithWhereUniqueWithoutProfileIdInput!]
  upsert: [PersonalProfileUpsertWithWhereUniqueWithoutProfileIdInput!]
  deleteMany: [PersonalProfileScalarWhereInput!]
  updateMany: [PersonalProfileUpdateManyWithWhereNestedInput!]
}

input PersonalProfileUpdateManyWithWhereNestedInput {
  where: PersonalProfileScalarWhereInput!
  data: PersonalProfileUpdateManyDataInput!
}

input PersonalProfileUpdateOneWithoutAddressesInput {
  create: PersonalProfileCreateWithoutAddressesInput
  update: PersonalProfileUpdateWithoutAddressesDataInput
  upsert: PersonalProfileUpsertWithoutAddressesInput
  delete: Boolean
  disconnect: Boolean
  connect: PersonalProfileWhereUniqueInput
}

input PersonalProfileUpdateWithoutAddressesDataInput {
  name: String
  avatar: String
  mobile: String
  isMobilePublished: Boolean
  profileId: ProfileUpdateOneRequiredWithoutPersonalProfiileInput
}

input PersonalProfileUpdateWithoutProfileIdDataInput {
  name: String
  avatar: String
  mobile: String
  isMobilePublished: Boolean
  addresses: AddressUpdateManyWithoutPersonalProfileInput
}

input PersonalProfileUpdateWithWhereUniqueWithoutProfileIdInput {
  where: PersonalProfileWhereUniqueInput!
  data: PersonalProfileUpdateWithoutProfileIdDataInput!
}

input PersonalProfileUpsertWithoutAddressesInput {
  update: PersonalProfileUpdateWithoutAddressesDataInput!
  create: PersonalProfileCreateWithoutAddressesInput!
}

input PersonalProfileUpsertWithWhereUniqueWithoutProfileIdInput {
  where: PersonalProfileWhereUniqueInput!
  update: PersonalProfileUpdateWithoutProfileIdDataInput!
  create: PersonalProfileCreateWithoutProfileIdInput!
}

input PersonalProfileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  mobile: String
  mobile_not: String
  mobile_in: [String!]
  mobile_not_in: [String!]
  mobile_lt: String
  mobile_lte: String
  mobile_gt: String
  mobile_gte: String
  mobile_contains: String
  mobile_not_contains: String
  mobile_starts_with: String
  mobile_not_starts_with: String
  mobile_ends_with: String
  mobile_not_ends_with: String
  isMobilePublished: Boolean
  isMobilePublished_not: Boolean
  addresses_every: AddressWhereInput
  addresses_some: AddressWhereInput
  addresses_none: AddressWhereInput
  profileId: ProfileWhereInput
  AND: [PersonalProfileWhereInput!]
  OR: [PersonalProfileWhereInput!]
  NOT: [PersonalProfileWhereInput!]
}

input PersonalProfileWhereUniqueInput {
  id: ID
}

type Poll {
  id: ID!
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  options(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Option!]
}

type PollConnection {
  pageInfo: PageInfo!
  edges: [PollEdge]!
  aggregate: AggregatePoll!
}

input PollCreateInput {
  id: ID
  title: String!
  options: OptionCreateManyWithoutPollInput
}

input PollCreateOneWithoutOptionsInput {
  create: PollCreateWithoutOptionsInput
  connect: PollWhereUniqueInput
}

input PollCreateWithoutOptionsInput {
  id: ID
  title: String!
}

type PollEdge {
  node: Poll!
  cursor: String!
}

enum PollOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PollPreviousValues {
  id: ID!
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PollSubscriptionPayload {
  mutation: MutationType!
  node: Poll
  updatedFields: [String!]
  previousValues: PollPreviousValues
}

input PollSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PollWhereInput
  AND: [PollSubscriptionWhereInput!]
  OR: [PollSubscriptionWhereInput!]
  NOT: [PollSubscriptionWhereInput!]
}

input PollUpdateInput {
  title: String
  options: OptionUpdateManyWithoutPollInput
}

input PollUpdateManyMutationInput {
  title: String
}

input PollUpdateOneWithoutOptionsInput {
  create: PollCreateWithoutOptionsInput
  update: PollUpdateWithoutOptionsDataInput
  upsert: PollUpsertWithoutOptionsInput
  delete: Boolean
  disconnect: Boolean
  connect: PollWhereUniqueInput
}

input PollUpdateWithoutOptionsDataInput {
  title: String
}

input PollUpsertWithoutOptionsInput {
  update: PollUpdateWithoutOptionsDataInput!
  create: PollCreateWithoutOptionsInput!
}

input PollWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  options_every: OptionWhereInput
  options_some: OptionWhereInput
  options_none: OptionWhereInput
  AND: [PollWhereInput!]
  OR: [PollWhereInput!]
  NOT: [PollWhereInput!]
}

input PollWhereUniqueInput {
  id: ID
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  body: String!
  published: Boolean!
  author: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutAuthorInput {
  id: ID
  title: String!
  body: String!
  published: Boolean!
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateWithoutCommentsInput {
  id: ID
  title: String!
  body: String!
  published: Boolean!
  author: UserCreateOneWithoutPostsInput!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  published_ASC
  published_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  published: Boolean
  published_not: Boolean
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  title: String
  body: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
  title: String
  body: String
  published: Boolean
}

input PostUpdateManyMutationInput {
  title: String
  body: String
  published: Boolean
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostUpdateWithoutAuthorDataInput {
  title: String
  body: String
  published: Boolean
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithoutCommentsDataInput {
  title: String
  body: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  published: Boolean
  published_not: Boolean
  author: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Profile {
  id: ID!
  name: String!
  userId: User!
  studentProfile(where: StudentProfileWhereInput, orderBy: StudentProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StudentProfile!]
  personalProfiile(where: PersonalProfileWhereInput, orderBy: PersonalProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PersonalProfile!]
}

type ProfileConnection {
  pageInfo: PageInfo!
  edges: [ProfileEdge]!
  aggregate: AggregateProfile!
}

input ProfileCreateInput {
  id: ID
  name: String!
  userId: UserCreateOneWithoutMyprofilesInput!
  studentProfile: StudentProfileCreateManyWithoutProfileIdInput
  personalProfiile: PersonalProfileCreateManyWithoutProfileIdInput
}

input ProfileCreateManyWithoutUserIdInput {
  create: [ProfileCreateWithoutUserIdInput!]
  connect: [ProfileWhereUniqueInput!]
}

input ProfileCreateOneWithoutPersonalProfiileInput {
  create: ProfileCreateWithoutPersonalProfiileInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateOneWithoutStudentProfileInput {
  create: ProfileCreateWithoutStudentProfileInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutPersonalProfiileInput {
  id: ID
  name: String!
  userId: UserCreateOneWithoutMyprofilesInput!
  studentProfile: StudentProfileCreateManyWithoutProfileIdInput
}

input ProfileCreateWithoutStudentProfileInput {
  id: ID
  name: String!
  userId: UserCreateOneWithoutMyprofilesInput!
  personalProfiile: PersonalProfileCreateManyWithoutProfileIdInput
}

input ProfileCreateWithoutUserIdInput {
  id: ID
  name: String!
  studentProfile: StudentProfileCreateManyWithoutProfileIdInput
  personalProfiile: PersonalProfileCreateManyWithoutProfileIdInput
}

type ProfileEdge {
  node: Profile!
  cursor: String!
}

enum ProfileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type ProfilePreviousValues {
  id: ID!
  name: String!
}

input ProfileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [ProfileScalarWhereInput!]
  OR: [ProfileScalarWhereInput!]
  NOT: [ProfileScalarWhereInput!]
}

type ProfileSubscriptionPayload {
  mutation: MutationType!
  node: Profile
  updatedFields: [String!]
  previousValues: ProfilePreviousValues
}

input ProfileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProfileWhereInput
  AND: [ProfileSubscriptionWhereInput!]
  OR: [ProfileSubscriptionWhereInput!]
  NOT: [ProfileSubscriptionWhereInput!]
}

input ProfileUpdateInput {
  name: String
  userId: UserUpdateOneRequiredWithoutMyprofilesInput
  studentProfile: StudentProfileUpdateManyWithoutProfileIdInput
  personalProfiile: PersonalProfileUpdateManyWithoutProfileIdInput
}

input ProfileUpdateManyDataInput {
  name: String
}

input ProfileUpdateManyMutationInput {
  name: String
}

input ProfileUpdateManyWithoutUserIdInput {
  create: [ProfileCreateWithoutUserIdInput!]
  delete: [ProfileWhereUniqueInput!]
  connect: [ProfileWhereUniqueInput!]
  set: [ProfileWhereUniqueInput!]
  disconnect: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithWhereUniqueWithoutUserIdInput!]
  upsert: [ProfileUpsertWithWhereUniqueWithoutUserIdInput!]
  deleteMany: [ProfileScalarWhereInput!]
  updateMany: [ProfileUpdateManyWithWhereNestedInput!]
}

input ProfileUpdateManyWithWhereNestedInput {
  where: ProfileScalarWhereInput!
  data: ProfileUpdateManyDataInput!
}

input ProfileUpdateOneRequiredWithoutPersonalProfiileInput {
  create: ProfileCreateWithoutPersonalProfiileInput
  update: ProfileUpdateWithoutPersonalProfiileDataInput
  upsert: ProfileUpsertWithoutPersonalProfiileInput
  connect: ProfileWhereUniqueInput
}

input ProfileUpdateOneRequiredWithoutStudentProfileInput {
  create: ProfileCreateWithoutStudentProfileInput
  update: ProfileUpdateWithoutStudentProfileDataInput
  upsert: ProfileUpsertWithoutStudentProfileInput
  connect: ProfileWhereUniqueInput
}

input ProfileUpdateWithoutPersonalProfiileDataInput {
  name: String
  userId: UserUpdateOneRequiredWithoutMyprofilesInput
  studentProfile: StudentProfileUpdateManyWithoutProfileIdInput
}

input ProfileUpdateWithoutStudentProfileDataInput {
  name: String
  userId: UserUpdateOneRequiredWithoutMyprofilesInput
  personalProfiile: PersonalProfileUpdateManyWithoutProfileIdInput
}

input ProfileUpdateWithoutUserIdDataInput {
  name: String
  studentProfile: StudentProfileUpdateManyWithoutProfileIdInput
  personalProfiile: PersonalProfileUpdateManyWithoutProfileIdInput
}

input ProfileUpdateWithWhereUniqueWithoutUserIdInput {
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateWithoutUserIdDataInput!
}

input ProfileUpsertWithoutPersonalProfiileInput {
  update: ProfileUpdateWithoutPersonalProfiileDataInput!
  create: ProfileCreateWithoutPersonalProfiileInput!
}

input ProfileUpsertWithoutStudentProfileInput {
  update: ProfileUpdateWithoutStudentProfileDataInput!
  create: ProfileCreateWithoutStudentProfileInput!
}

input ProfileUpsertWithWhereUniqueWithoutUserIdInput {
  where: ProfileWhereUniqueInput!
  update: ProfileUpdateWithoutUserIdDataInput!
  create: ProfileCreateWithoutUserIdInput!
}

input ProfileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  userId: UserWhereInput
  studentProfile_every: StudentProfileWhereInput
  studentProfile_some: StudentProfileWhereInput
  studentProfile_none: StudentProfileWhereInput
  personalProfiile_every: PersonalProfileWhereInput
  personalProfiile_some: PersonalProfileWhereInput
  personalProfiile_none: PersonalProfileWhereInput
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
}

input ProfileWhereUniqueInput {
  id: ID
}

type Query {
  address(where: AddressWhereUniqueInput!): Address
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address]!
  addressesConnection(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AddressConnection!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  content(where: ContentWhereUniqueInput!): Content
  contents(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content]!
  contentsConnection(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContentConnection!
  group(where: GroupWhereUniqueInput!): Group
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  groupMember(where: GroupMemberWhereUniqueInput!): GroupMember
  groupMembers(where: GroupMemberWhereInput, orderBy: GroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupMember]!
  groupMembersConnection(where: GroupMemberWhereInput, orderBy: GroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupMemberConnection!
  medium(where: MediumWhereUniqueInput!): Medium
  mediums(where: MediumWhereInput, orderBy: MediumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Medium]!
  mediumsConnection(where: MediumWhereInput, orderBy: MediumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MediumConnection!
  option(where: OptionWhereUniqueInput!): Option
  options(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Option]!
  optionsConnection(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OptionConnection!
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizations(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Organization]!
  organizationsConnection(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrganizationConnection!
  personalProfile(where: PersonalProfileWhereUniqueInput!): PersonalProfile
  personalProfiles(where: PersonalProfileWhereInput, orderBy: PersonalProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PersonalProfile]!
  personalProfilesConnection(where: PersonalProfileWhereInput, orderBy: PersonalProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonalProfileConnection!
  poll(where: PollWhereUniqueInput!): Poll
  polls(where: PollWhereInput, orderBy: PollOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poll]!
  pollsConnection(where: PollWhereInput, orderBy: PollOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PollConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  profile(where: ProfileWhereUniqueInput!): Profile
  profiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile]!
  profilesConnection(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileConnection!
  question(where: QuestionWhereUniqueInput!): Question
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
  quiz(where: QuizWhereUniqueInput!): Quiz
  quizzes(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz]!
  quizzesConnection(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuizConnection!
  result(where: ResultWhereUniqueInput!): Result
  results(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result]!
  resultsConnection(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResultConnection!
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  roleMember(where: RoleMemberWhereUniqueInput!): RoleMember
  roleMembers(where: RoleMemberWhereInput, orderBy: RoleMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RoleMember]!
  roleMembersConnection(where: RoleMemberWhereInput, orderBy: RoleMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleMemberConnection!
  std(where: StdWhereUniqueInput!): Std
  stds(where: StdWhereInput, orderBy: StdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Std]!
  stdsConnection(where: StdWhereInput, orderBy: StdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StdConnection!
  studentProfile(where: StudentProfileWhereUniqueInput!): StudentProfile
  studentProfiles(where: StudentProfileWhereInput, orderBy: StudentProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StudentProfile]!
  studentProfilesConnection(where: StudentProfileWhereInput, orderBy: StudentProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StudentProfileConnection!
  subGroup(where: SubGroupWhereUniqueInput!): SubGroup
  subGroups(where: SubGroupWhereInput, orderBy: SubGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubGroup]!
  subGroupsConnection(where: SubGroupWhereInput, orderBy: SubGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubGroupConnection!
  subGroupMember(where: SubGroupMemberWhereUniqueInput!): SubGroupMember
  subGroupMembers(where: SubGroupMemberWhereInput, orderBy: SubGroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubGroupMember]!
  subGroupMembersConnection(where: SubGroupMemberWhereInput, orderBy: SubGroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubGroupMemberConnection!
  subject(where: SubjectWhereUniqueInput!): Subject
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject]!
  subjectsConnection(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubjectConnection!
  subjectSubscription(where: SubjectSubscriptionWhereUniqueInput!): SubjectSubscription
  subjectSubscriptions(where: SubjectSubscriptionWhereInput, orderBy: SubjectSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubjectSubscription]!
  subjectSubscriptionsConnection(where: SubjectSubscriptionWhereInput, orderBy: SubjectSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubjectSubscriptionConnection!
  suborg(where: SuborgWhereUniqueInput!): Suborg
  suborgs(where: SuborgWhereInput, orderBy: SuborgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Suborg]!
  suborgsConnection(where: SuborgWhereInput, orderBy: SuborgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SuborgConnection!
  topic(where: TopicWhereUniqueInput!): Topic
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic]!
  topicsConnection(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TopicConnection!
  unit(where: UnitWhereUniqueInput!): Unit
  units(where: UnitWhereInput, orderBy: UnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Unit]!
  unitsConnection(where: UnitWhereInput, orderBy: UnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UnitConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  vote(where: VoteWhereUniqueInput!): Vote
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  node(id: ID!): Node
}

type Question {
  id: ID!
  subject: Subject
  unit: Unit
  topic: Topic
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  createdBy: User
  level: Int!
  updatedBy: User
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz!]
  explaination: String
  updatedAt: DateTime!
  createdAt: DateTime!
  results(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result!]
  atemptedResult(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result!]
  notattempted(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result!]
  correct(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result!]
  wrong(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result!]
}

type QuestionConnection {
  pageInfo: PageInfo!
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  id: ID
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  level: Int!
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizCreateManyWithoutQuestionsInput
  explaination: String
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateManyWithoutAtemptedResultInput {
  create: [QuestionCreateWithoutAtemptedResultInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutCorrectInput {
  create: [QuestionCreateWithoutCorrectInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutCreatedByInput {
  create: [QuestionCreateWithoutCreatedByInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutNotattemptedInput {
  create: [QuestionCreateWithoutNotattemptedInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutQuizInput {
  create: [QuestionCreateWithoutQuizInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutResultsInput {
  create: [QuestionCreateWithoutResultsInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutSubjectInput {
  create: [QuestionCreateWithoutSubjectInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutTopicInput {
  create: [QuestionCreateWithoutTopicInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutUnitInput {
  create: [QuestionCreateWithoutUnitInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutUpdatedByInput {
  create: [QuestionCreateWithoutUpdatedByInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutWrongInput {
  create: [QuestionCreateWithoutWrongInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateWithoutAtemptedResultInput {
  id: ID
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  level: Int!
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizCreateManyWithoutQuestionsInput
  explaination: String
  results: ResultCreateManyWithoutQuestionsInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutCorrectInput {
  id: ID
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  level: Int!
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizCreateManyWithoutQuestionsInput
  explaination: String
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutCreatedByInput {
  id: ID
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  level: Int!
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizCreateManyWithoutQuestionsInput
  explaination: String
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutNotattemptedInput {
  id: ID
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  level: Int!
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizCreateManyWithoutQuestionsInput
  explaination: String
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutQuizInput {
  id: ID
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  level: Int!
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  explaination: String
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutResultsInput {
  id: ID
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  level: Int!
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizCreateManyWithoutQuestionsInput
  explaination: String
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutSubjectInput {
  id: ID
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  level: Int!
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizCreateManyWithoutQuestionsInput
  explaination: String
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutTopicInput {
  id: ID
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  level: Int!
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizCreateManyWithoutQuestionsInput
  explaination: String
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutUnitInput {
  id: ID
  subject: SubjectCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  level: Int!
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizCreateManyWithoutQuestionsInput
  explaination: String
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutUpdatedByInput {
  id: ID
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  level: Int!
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizCreateManyWithoutQuestionsInput
  explaination: String
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutWrongInput {
  id: ID
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  level: Int!
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizCreateManyWithoutQuestionsInput
  explaination: String
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
}

type QuestionEdge {
  node: Question!
  cursor: String!
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  quetype_ASC
  quetype_DESC
  categories_ASC
  categories_DESC
  title_ASC
  title_DESC
  descriptionType_ASC
  descriptionType_DESC
  descriptionurl_ASC
  descriptionurl_DESC
  options_ASC
  options_DESC
  level_ASC
  level_DESC
  plandate_ASC
  plandate_DESC
  isPublished_ASC
  isPublished_DESC
  state_ASC
  state_DESC
  status_ASC
  status_DESC
  available_ASC
  available_DESC
  isReviewed_ASC
  isReviewed_DESC
  explainationType_ASC
  explainationType_DESC
  explaination_ASC
  explaination_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionPreviousValues {
  id: ID!
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  level: Int!
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  explaination: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input QuestionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quetype: String
  quetype_not: String
  quetype_in: [String!]
  quetype_not_in: [String!]
  quetype_lt: String
  quetype_lte: String
  quetype_gt: String
  quetype_gte: String
  quetype_contains: String
  quetype_not_contains: String
  quetype_starts_with: String
  quetype_not_starts_with: String
  quetype_ends_with: String
  quetype_not_ends_with: String
  categories: String
  categories_not: String
  categories_in: [String!]
  categories_not_in: [String!]
  categories_lt: String
  categories_lte: String
  categories_gt: String
  categories_gte: String
  categories_contains: String
  categories_not_contains: String
  categories_starts_with: String
  categories_not_starts_with: String
  categories_ends_with: String
  categories_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  descriptionType: String
  descriptionType_not: String
  descriptionType_in: [String!]
  descriptionType_not_in: [String!]
  descriptionType_lt: String
  descriptionType_lte: String
  descriptionType_gt: String
  descriptionType_gte: String
  descriptionType_contains: String
  descriptionType_not_contains: String
  descriptionType_starts_with: String
  descriptionType_not_starts_with: String
  descriptionType_ends_with: String
  descriptionType_not_ends_with: String
  descriptionurl: String
  descriptionurl_not: String
  descriptionurl_in: [String!]
  descriptionurl_not_in: [String!]
  descriptionurl_lt: String
  descriptionurl_lte: String
  descriptionurl_gt: String
  descriptionurl_gte: String
  descriptionurl_contains: String
  descriptionurl_not_contains: String
  descriptionurl_starts_with: String
  descriptionurl_not_starts_with: String
  descriptionurl_ends_with: String
  descriptionurl_not_ends_with: String
  level: Int
  level_not: Int
  level_in: [Int!]
  level_not_in: [Int!]
  level_lt: Int
  level_lte: Int
  level_gt: Int
  level_gte: Int
  plandate: DateTime
  plandate_not: DateTime
  plandate_in: [DateTime!]
  plandate_not_in: [DateTime!]
  plandate_lt: DateTime
  plandate_lte: DateTime
  plandate_gt: DateTime
  plandate_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  available: String
  available_not: String
  available_in: [String!]
  available_not_in: [String!]
  available_lt: String
  available_lte: String
  available_gt: String
  available_gte: String
  available_contains: String
  available_not_contains: String
  available_starts_with: String
  available_not_starts_with: String
  available_ends_with: String
  available_not_ends_with: String
  isReviewed: Boolean
  isReviewed_not: Boolean
  explainationType: String
  explainationType_not: String
  explainationType_in: [String!]
  explainationType_not_in: [String!]
  explainationType_lt: String
  explainationType_lte: String
  explainationType_gt: String
  explainationType_gte: String
  explainationType_contains: String
  explainationType_not_contains: String
  explainationType_starts_with: String
  explainationType_not_starts_with: String
  explainationType_ends_with: String
  explainationType_not_ends_with: String
  explaination: String
  explaination_not: String
  explaination_in: [String!]
  explaination_not_in: [String!]
  explaination_lt: String
  explaination_lte: String
  explaination_gt: String
  explaination_gte: String
  explaination_contains: String
  explaination_not_contains: String
  explaination_starts_with: String
  explaination_not_starts_with: String
  explaination_ends_with: String
  explaination_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [QuestionScalarWhereInput!]
  OR: [QuestionScalarWhereInput!]
  NOT: [QuestionScalarWhereInput!]
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
  AND: [QuestionSubscriptionWhereInput!]
  OR: [QuestionSubscriptionWhereInput!]
  NOT: [QuestionSubscriptionWhereInput!]
}

input QuestionUpdateInput {
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  level: Int
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizUpdateManyWithoutQuestionsInput
  explaination: String
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateManyDataInput {
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  level: Int
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  explaination: String
}

input QuestionUpdateManyMutationInput {
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  level: Int
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  explaination: String
}

input QuestionUpdateManyWithoutAtemptedResultInput {
  create: [QuestionCreateWithoutAtemptedResultInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutAtemptedResultInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutAtemptedResultInput!]
  deleteMany: [QuestionScalarWhereInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
}

input QuestionUpdateManyWithoutCorrectInput {
  create: [QuestionCreateWithoutCorrectInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutCorrectInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutCorrectInput!]
  deleteMany: [QuestionScalarWhereInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
}

input QuestionUpdateManyWithoutCreatedByInput {
  create: [QuestionCreateWithoutCreatedByInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [QuestionScalarWhereInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
}

input QuestionUpdateManyWithoutNotattemptedInput {
  create: [QuestionCreateWithoutNotattemptedInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutNotattemptedInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutNotattemptedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
}

input QuestionUpdateManyWithoutQuizInput {
  create: [QuestionCreateWithoutQuizInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutQuizInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutQuizInput!]
  deleteMany: [QuestionScalarWhereInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
}

input QuestionUpdateManyWithoutResultsInput {
  create: [QuestionCreateWithoutResultsInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutResultsInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutResultsInput!]
  deleteMany: [QuestionScalarWhereInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
}

input QuestionUpdateManyWithoutSubjectInput {
  create: [QuestionCreateWithoutSubjectInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutSubjectInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutSubjectInput!]
  deleteMany: [QuestionScalarWhereInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
}

input QuestionUpdateManyWithoutTopicInput {
  create: [QuestionCreateWithoutTopicInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutTopicInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutTopicInput!]
  deleteMany: [QuestionScalarWhereInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
}

input QuestionUpdateManyWithoutUnitInput {
  create: [QuestionCreateWithoutUnitInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutUnitInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutUnitInput!]
  deleteMany: [QuestionScalarWhereInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
}

input QuestionUpdateManyWithoutUpdatedByInput {
  create: [QuestionCreateWithoutUpdatedByInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutUpdatedByInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutUpdatedByInput!]
  deleteMany: [QuestionScalarWhereInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
}

input QuestionUpdateManyWithoutWrongInput {
  create: [QuestionCreateWithoutWrongInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutWrongInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutWrongInput!]
  deleteMany: [QuestionScalarWhereInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
}

input QuestionUpdateManyWithWhereNestedInput {
  where: QuestionScalarWhereInput!
  data: QuestionUpdateManyDataInput!
}

input QuestionUpdateWithoutAtemptedResultDataInput {
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  level: Int
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizUpdateManyWithoutQuestionsInput
  explaination: String
  results: ResultUpdateManyWithoutQuestionsInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutCorrectDataInput {
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  level: Int
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizUpdateManyWithoutQuestionsInput
  explaination: String
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutCreatedByDataInput {
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  level: Int
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizUpdateManyWithoutQuestionsInput
  explaination: String
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutNotattemptedDataInput {
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  level: Int
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizUpdateManyWithoutQuestionsInput
  explaination: String
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutQuizDataInput {
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  level: Int
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  explaination: String
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutResultsDataInput {
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  level: Int
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizUpdateManyWithoutQuestionsInput
  explaination: String
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutSubjectDataInput {
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  level: Int
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizUpdateManyWithoutQuestionsInput
  explaination: String
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutTopicDataInput {
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  level: Int
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizUpdateManyWithoutQuestionsInput
  explaination: String
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutUnitDataInput {
  subject: SubjectUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  level: Int
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizUpdateManyWithoutQuestionsInput
  explaination: String
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutUpdatedByDataInput {
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  level: Int
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizUpdateManyWithoutQuestionsInput
  explaination: String
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutWrongDataInput {
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  level: Int
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: String
  quiz: QuizUpdateManyWithoutQuestionsInput
  explaination: String
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
}

input QuestionUpdateWithWhereUniqueWithoutAtemptedResultInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutAtemptedResultDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutCorrectInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutCorrectDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutCreatedByInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutCreatedByDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutNotattemptedInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutNotattemptedDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutQuizInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutQuizDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutResultsInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutResultsDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutSubjectInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutSubjectDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutTopicInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutTopicDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutUnitInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutUnitDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutUpdatedByDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutWrongInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutWrongDataInput!
}

input QuestionUpsertWithWhereUniqueWithoutAtemptedResultInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutAtemptedResultDataInput!
  create: QuestionCreateWithoutAtemptedResultInput!
}

input QuestionUpsertWithWhereUniqueWithoutCorrectInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutCorrectDataInput!
  create: QuestionCreateWithoutCorrectInput!
}

input QuestionUpsertWithWhereUniqueWithoutCreatedByInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutCreatedByDataInput!
  create: QuestionCreateWithoutCreatedByInput!
}

input QuestionUpsertWithWhereUniqueWithoutNotattemptedInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutNotattemptedDataInput!
  create: QuestionCreateWithoutNotattemptedInput!
}

input QuestionUpsertWithWhereUniqueWithoutQuizInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutQuizDataInput!
  create: QuestionCreateWithoutQuizInput!
}

input QuestionUpsertWithWhereUniqueWithoutResultsInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutResultsDataInput!
  create: QuestionCreateWithoutResultsInput!
}

input QuestionUpsertWithWhereUniqueWithoutSubjectInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutSubjectDataInput!
  create: QuestionCreateWithoutSubjectInput!
}

input QuestionUpsertWithWhereUniqueWithoutTopicInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutTopicDataInput!
  create: QuestionCreateWithoutTopicInput!
}

input QuestionUpsertWithWhereUniqueWithoutUnitInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutUnitDataInput!
  create: QuestionCreateWithoutUnitInput!
}

input QuestionUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutUpdatedByDataInput!
  create: QuestionCreateWithoutUpdatedByInput!
}

input QuestionUpsertWithWhereUniqueWithoutWrongInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutWrongDataInput!
  create: QuestionCreateWithoutWrongInput!
}

input QuestionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  subject: SubjectWhereInput
  unit: UnitWhereInput
  topic: TopicWhereInput
  quetype: String
  quetype_not: String
  quetype_in: [String!]
  quetype_not_in: [String!]
  quetype_lt: String
  quetype_lte: String
  quetype_gt: String
  quetype_gte: String
  quetype_contains: String
  quetype_not_contains: String
  quetype_starts_with: String
  quetype_not_starts_with: String
  quetype_ends_with: String
  quetype_not_ends_with: String
  categories: String
  categories_not: String
  categories_in: [String!]
  categories_not_in: [String!]
  categories_lt: String
  categories_lte: String
  categories_gt: String
  categories_gte: String
  categories_contains: String
  categories_not_contains: String
  categories_starts_with: String
  categories_not_starts_with: String
  categories_ends_with: String
  categories_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  descriptionType: String
  descriptionType_not: String
  descriptionType_in: [String!]
  descriptionType_not_in: [String!]
  descriptionType_lt: String
  descriptionType_lte: String
  descriptionType_gt: String
  descriptionType_gte: String
  descriptionType_contains: String
  descriptionType_not_contains: String
  descriptionType_starts_with: String
  descriptionType_not_starts_with: String
  descriptionType_ends_with: String
  descriptionType_not_ends_with: String
  descriptionurl: String
  descriptionurl_not: String
  descriptionurl_in: [String!]
  descriptionurl_not_in: [String!]
  descriptionurl_lt: String
  descriptionurl_lte: String
  descriptionurl_gt: String
  descriptionurl_gte: String
  descriptionurl_contains: String
  descriptionurl_not_contains: String
  descriptionurl_starts_with: String
  descriptionurl_not_starts_with: String
  descriptionurl_ends_with: String
  descriptionurl_not_ends_with: String
  createdBy: UserWhereInput
  level: Int
  level_not: Int
  level_in: [Int!]
  level_not_in: [Int!]
  level_lt: Int
  level_lte: Int
  level_gt: Int
  level_gte: Int
  updatedBy: UserWhereInput
  plandate: DateTime
  plandate_not: DateTime
  plandate_in: [DateTime!]
  plandate_not_in: [DateTime!]
  plandate_lt: DateTime
  plandate_lte: DateTime
  plandate_gt: DateTime
  plandate_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  available: String
  available_not: String
  available_in: [String!]
  available_not_in: [String!]
  available_lt: String
  available_lte: String
  available_gt: String
  available_gte: String
  available_contains: String
  available_not_contains: String
  available_starts_with: String
  available_not_starts_with: String
  available_ends_with: String
  available_not_ends_with: String
  isReviewed: Boolean
  isReviewed_not: Boolean
  explainationType: String
  explainationType_not: String
  explainationType_in: [String!]
  explainationType_not_in: [String!]
  explainationType_lt: String
  explainationType_lte: String
  explainationType_gt: String
  explainationType_gte: String
  explainationType_contains: String
  explainationType_not_contains: String
  explainationType_starts_with: String
  explainationType_not_starts_with: String
  explainationType_ends_with: String
  explainationType_not_ends_with: String
  quiz_every: QuizWhereInput
  quiz_some: QuizWhereInput
  quiz_none: QuizWhereInput
  explaination: String
  explaination_not: String
  explaination_in: [String!]
  explaination_not_in: [String!]
  explaination_lt: String
  explaination_lte: String
  explaination_gt: String
  explaination_gte: String
  explaination_contains: String
  explaination_not_contains: String
  explaination_starts_with: String
  explaination_not_starts_with: String
  explaination_ends_with: String
  explaination_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  results_every: ResultWhereInput
  results_some: ResultWhereInput
  results_none: ResultWhereInput
  atemptedResult_every: ResultWhereInput
  atemptedResult_some: ResultWhereInput
  atemptedResult_none: ResultWhereInput
  notattempted_every: ResultWhereInput
  notattempted_some: ResultWhereInput
  notattempted_none: ResultWhereInput
  correct_every: ResultWhereInput
  correct_some: ResultWhereInput
  correct_none: ResultWhereInput
  wrong_every: ResultWhereInput
  wrong_some: ResultWhereInput
  wrong_none: ResultWhereInput
  AND: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
}

input QuestionWhereUniqueInput {
  id: ID
}

type Quiz {
  id: ID!
  quizName: String!
  quizType: String!
  subject: Subject
  unit: Unit
  topic: Topic
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  markingscheme: Json
  quizlevel: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  createdBy: User!
  weightage: Float
  totalmarks: Float
  validFrom: DateTime
  validTo: DateTime
  retryAllowed: Boolean
  results(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result!]
}

type QuizConnection {
  pageInfo: PageInfo!
  edges: [QuizEdge]!
  aggregate: AggregateQuiz!
}

input QuizCreateInput {
  id: ID
  quizName: String!
  quizType: String!
  subject: SubjectCreateOneWithoutQuizesInput
  unit: UnitCreateOneWithoutQuizsInput
  topic: TopicCreateOneWithoutQuizsInput
  questions: QuestionCreateManyWithoutQuizInput
  markingscheme: Json
  quizlevel: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  createdBy: UserCreateOneWithoutQuizCreatedByInput!
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  results: ResultCreateManyWithoutQuizInput
}

input QuizCreateManyWithoutCreatedByInput {
  create: [QuizCreateWithoutCreatedByInput!]
  connect: [QuizWhereUniqueInput!]
}

input QuizCreateManyWithoutQuestionsInput {
  create: [QuizCreateWithoutQuestionsInput!]
  connect: [QuizWhereUniqueInput!]
}

input QuizCreateManyWithoutSubjectInput {
  create: [QuizCreateWithoutSubjectInput!]
  connect: [QuizWhereUniqueInput!]
}

input QuizCreateManyWithoutTopicInput {
  create: [QuizCreateWithoutTopicInput!]
  connect: [QuizWhereUniqueInput!]
}

input QuizCreateManyWithoutUnitInput {
  create: [QuizCreateWithoutUnitInput!]
  connect: [QuizWhereUniqueInput!]
}

input QuizCreateOneWithoutResultsInput {
  create: QuizCreateWithoutResultsInput
  connect: QuizWhereUniqueInput
}

input QuizCreateWithoutCreatedByInput {
  id: ID
  quizName: String!
  quizType: String!
  subject: SubjectCreateOneWithoutQuizesInput
  unit: UnitCreateOneWithoutQuizsInput
  topic: TopicCreateOneWithoutQuizsInput
  questions: QuestionCreateManyWithoutQuizInput
  markingscheme: Json
  quizlevel: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  results: ResultCreateManyWithoutQuizInput
}

input QuizCreateWithoutQuestionsInput {
  id: ID
  quizName: String!
  quizType: String!
  subject: SubjectCreateOneWithoutQuizesInput
  unit: UnitCreateOneWithoutQuizsInput
  topic: TopicCreateOneWithoutQuizsInput
  markingscheme: Json
  quizlevel: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  createdBy: UserCreateOneWithoutQuizCreatedByInput!
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  results: ResultCreateManyWithoutQuizInput
}

input QuizCreateWithoutResultsInput {
  id: ID
  quizName: String!
  quizType: String!
  subject: SubjectCreateOneWithoutQuizesInput
  unit: UnitCreateOneWithoutQuizsInput
  topic: TopicCreateOneWithoutQuizsInput
  questions: QuestionCreateManyWithoutQuizInput
  markingscheme: Json
  quizlevel: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  createdBy: UserCreateOneWithoutQuizCreatedByInput!
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
}

input QuizCreateWithoutSubjectInput {
  id: ID
  quizName: String!
  quizType: String!
  unit: UnitCreateOneWithoutQuizsInput
  topic: TopicCreateOneWithoutQuizsInput
  questions: QuestionCreateManyWithoutQuizInput
  markingscheme: Json
  quizlevel: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  createdBy: UserCreateOneWithoutQuizCreatedByInput!
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  results: ResultCreateManyWithoutQuizInput
}

input QuizCreateWithoutTopicInput {
  id: ID
  quizName: String!
  quizType: String!
  subject: SubjectCreateOneWithoutQuizesInput
  unit: UnitCreateOneWithoutQuizsInput
  questions: QuestionCreateManyWithoutQuizInput
  markingscheme: Json
  quizlevel: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  createdBy: UserCreateOneWithoutQuizCreatedByInput!
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  results: ResultCreateManyWithoutQuizInput
}

input QuizCreateWithoutUnitInput {
  id: ID
  quizName: String!
  quizType: String!
  subject: SubjectCreateOneWithoutQuizesInput
  topic: TopicCreateOneWithoutQuizsInput
  questions: QuestionCreateManyWithoutQuizInput
  markingscheme: Json
  quizlevel: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  createdBy: UserCreateOneWithoutQuizCreatedByInput!
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  results: ResultCreateManyWithoutQuizInput
}

type QuizEdge {
  node: Quiz!
  cursor: String!
}

enum QuizOrderByInput {
  id_ASC
  id_DESC
  quizName_ASC
  quizName_DESC
  quizType_ASC
  quizType_DESC
  markingscheme_ASC
  markingscheme_DESC
  quizlevel_ASC
  quizlevel_DESC
  threshold_ASC
  threshold_DESC
  isForLevelPromotion_ASC
  isForLevelPromotion_DESC
  showExplaination_ASC
  showExplaination_DESC
  showanswer_ASC
  showanswer_DESC
  description_ASC
  description_DESC
  allowedCorrection_ASC
  allowedCorrection_DESC
  duration_ASC
  duration_DESC
  commentFromTeacher_ASC
  commentFromTeacher_DESC
  isPublished_ASC
  isPublished_DESC
  isApproved_ASC
  isApproved_DESC
  weightage_ASC
  weightage_DESC
  totalmarks_ASC
  totalmarks_DESC
  validFrom_ASC
  validFrom_DESC
  validTo_ASC
  validTo_DESC
  retryAllowed_ASC
  retryAllowed_DESC
}

type QuizPreviousValues {
  id: ID!
  quizName: String!
  quizType: String!
  markingscheme: Json
  quizlevel: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validFrom: DateTime
  validTo: DateTime
  retryAllowed: Boolean
}

input QuizScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quizName: String
  quizName_not: String
  quizName_in: [String!]
  quizName_not_in: [String!]
  quizName_lt: String
  quizName_lte: String
  quizName_gt: String
  quizName_gte: String
  quizName_contains: String
  quizName_not_contains: String
  quizName_starts_with: String
  quizName_not_starts_with: String
  quizName_ends_with: String
  quizName_not_ends_with: String
  quizType: String
  quizType_not: String
  quizType_in: [String!]
  quizType_not_in: [String!]
  quizType_lt: String
  quizType_lte: String
  quizType_gt: String
  quizType_gte: String
  quizType_contains: String
  quizType_not_contains: String
  quizType_starts_with: String
  quizType_not_starts_with: String
  quizType_ends_with: String
  quizType_not_ends_with: String
  quizlevel: Int
  quizlevel_not: Int
  quizlevel_in: [Int!]
  quizlevel_not_in: [Int!]
  quizlevel_lt: Int
  quizlevel_lte: Int
  quizlevel_gt: Int
  quizlevel_gte: Int
  isForLevelPromotion: Boolean
  isForLevelPromotion_not: Boolean
  showExplaination: String
  showExplaination_not: String
  showExplaination_in: [String!]
  showExplaination_not_in: [String!]
  showExplaination_lt: String
  showExplaination_lte: String
  showExplaination_gt: String
  showExplaination_gte: String
  showExplaination_contains: String
  showExplaination_not_contains: String
  showExplaination_starts_with: String
  showExplaination_not_starts_with: String
  showExplaination_ends_with: String
  showExplaination_not_ends_with: String
  showanswer: Boolean
  showanswer_not: Boolean
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  allowedCorrection: Boolean
  allowedCorrection_not: Boolean
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  commentFromTeacher: String
  commentFromTeacher_not: String
  commentFromTeacher_in: [String!]
  commentFromTeacher_not_in: [String!]
  commentFromTeacher_lt: String
  commentFromTeacher_lte: String
  commentFromTeacher_gt: String
  commentFromTeacher_gte: String
  commentFromTeacher_contains: String
  commentFromTeacher_not_contains: String
  commentFromTeacher_starts_with: String
  commentFromTeacher_not_starts_with: String
  commentFromTeacher_ends_with: String
  commentFromTeacher_not_ends_with: String
  isPublished: Boolean
  isPublished_not: Boolean
  isApproved: Boolean
  isApproved_not: Boolean
  weightage: Float
  weightage_not: Float
  weightage_in: [Float!]
  weightage_not_in: [Float!]
  weightage_lt: Float
  weightage_lte: Float
  weightage_gt: Float
  weightage_gte: Float
  totalmarks: Float
  totalmarks_not: Float
  totalmarks_in: [Float!]
  totalmarks_not_in: [Float!]
  totalmarks_lt: Float
  totalmarks_lte: Float
  totalmarks_gt: Float
  totalmarks_gte: Float
  validFrom: DateTime
  validFrom_not: DateTime
  validFrom_in: [DateTime!]
  validFrom_not_in: [DateTime!]
  validFrom_lt: DateTime
  validFrom_lte: DateTime
  validFrom_gt: DateTime
  validFrom_gte: DateTime
  validTo: DateTime
  validTo_not: DateTime
  validTo_in: [DateTime!]
  validTo_not_in: [DateTime!]
  validTo_lt: DateTime
  validTo_lte: DateTime
  validTo_gt: DateTime
  validTo_gte: DateTime
  retryAllowed: Boolean
  retryAllowed_not: Boolean
  AND: [QuizScalarWhereInput!]
  OR: [QuizScalarWhereInput!]
  NOT: [QuizScalarWhereInput!]
}

type QuizSubscriptionPayload {
  mutation: MutationType!
  node: Quiz
  updatedFields: [String!]
  previousValues: QuizPreviousValues
}

input QuizSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuizWhereInput
  AND: [QuizSubscriptionWhereInput!]
  OR: [QuizSubscriptionWhereInput!]
  NOT: [QuizSubscriptionWhereInput!]
}

input QuizUpdateInput {
  quizName: String
  quizType: String
  subject: SubjectUpdateOneWithoutQuizesInput
  unit: UnitUpdateOneWithoutQuizsInput
  topic: TopicUpdateOneWithoutQuizsInput
  questions: QuestionUpdateManyWithoutQuizInput
  markingscheme: Json
  quizlevel: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  createdBy: UserUpdateOneRequiredWithoutQuizCreatedByInput
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  results: ResultUpdateManyWithoutQuizInput
}

input QuizUpdateManyDataInput {
  quizName: String
  quizType: String
  markingscheme: Json
  quizlevel: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
}

input QuizUpdateManyMutationInput {
  quizName: String
  quizType: String
  markingscheme: Json
  quizlevel: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
}

input QuizUpdateManyWithoutCreatedByInput {
  create: [QuizCreateWithoutCreatedByInput!]
  delete: [QuizWhereUniqueInput!]
  connect: [QuizWhereUniqueInput!]
  set: [QuizWhereUniqueInput!]
  disconnect: [QuizWhereUniqueInput!]
  update: [QuizUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [QuizUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [QuizScalarWhereInput!]
  updateMany: [QuizUpdateManyWithWhereNestedInput!]
}

input QuizUpdateManyWithoutQuestionsInput {
  create: [QuizCreateWithoutQuestionsInput!]
  delete: [QuizWhereUniqueInput!]
  connect: [QuizWhereUniqueInput!]
  set: [QuizWhereUniqueInput!]
  disconnect: [QuizWhereUniqueInput!]
  update: [QuizUpdateWithWhereUniqueWithoutQuestionsInput!]
  upsert: [QuizUpsertWithWhereUniqueWithoutQuestionsInput!]
  deleteMany: [QuizScalarWhereInput!]
  updateMany: [QuizUpdateManyWithWhereNestedInput!]
}

input QuizUpdateManyWithoutSubjectInput {
  create: [QuizCreateWithoutSubjectInput!]
  delete: [QuizWhereUniqueInput!]
  connect: [QuizWhereUniqueInput!]
  set: [QuizWhereUniqueInput!]
  disconnect: [QuizWhereUniqueInput!]
  update: [QuizUpdateWithWhereUniqueWithoutSubjectInput!]
  upsert: [QuizUpsertWithWhereUniqueWithoutSubjectInput!]
  deleteMany: [QuizScalarWhereInput!]
  updateMany: [QuizUpdateManyWithWhereNestedInput!]
}

input QuizUpdateManyWithoutTopicInput {
  create: [QuizCreateWithoutTopicInput!]
  delete: [QuizWhereUniqueInput!]
  connect: [QuizWhereUniqueInput!]
  set: [QuizWhereUniqueInput!]
  disconnect: [QuizWhereUniqueInput!]
  update: [QuizUpdateWithWhereUniqueWithoutTopicInput!]
  upsert: [QuizUpsertWithWhereUniqueWithoutTopicInput!]
  deleteMany: [QuizScalarWhereInput!]
  updateMany: [QuizUpdateManyWithWhereNestedInput!]
}

input QuizUpdateManyWithoutUnitInput {
  create: [QuizCreateWithoutUnitInput!]
  delete: [QuizWhereUniqueInput!]
  connect: [QuizWhereUniqueInput!]
  set: [QuizWhereUniqueInput!]
  disconnect: [QuizWhereUniqueInput!]
  update: [QuizUpdateWithWhereUniqueWithoutUnitInput!]
  upsert: [QuizUpsertWithWhereUniqueWithoutUnitInput!]
  deleteMany: [QuizScalarWhereInput!]
  updateMany: [QuizUpdateManyWithWhereNestedInput!]
}

input QuizUpdateManyWithWhereNestedInput {
  where: QuizScalarWhereInput!
  data: QuizUpdateManyDataInput!
}

input QuizUpdateOneRequiredWithoutResultsInput {
  create: QuizCreateWithoutResultsInput
  update: QuizUpdateWithoutResultsDataInput
  upsert: QuizUpsertWithoutResultsInput
  connect: QuizWhereUniqueInput
}

input QuizUpdateWithoutCreatedByDataInput {
  quizName: String
  quizType: String
  subject: SubjectUpdateOneWithoutQuizesInput
  unit: UnitUpdateOneWithoutQuizsInput
  topic: TopicUpdateOneWithoutQuizsInput
  questions: QuestionUpdateManyWithoutQuizInput
  markingscheme: Json
  quizlevel: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  results: ResultUpdateManyWithoutQuizInput
}

input QuizUpdateWithoutQuestionsDataInput {
  quizName: String
  quizType: String
  subject: SubjectUpdateOneWithoutQuizesInput
  unit: UnitUpdateOneWithoutQuizsInput
  topic: TopicUpdateOneWithoutQuizsInput
  markingscheme: Json
  quizlevel: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  createdBy: UserUpdateOneRequiredWithoutQuizCreatedByInput
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  results: ResultUpdateManyWithoutQuizInput
}

input QuizUpdateWithoutResultsDataInput {
  quizName: String
  quizType: String
  subject: SubjectUpdateOneWithoutQuizesInput
  unit: UnitUpdateOneWithoutQuizsInput
  topic: TopicUpdateOneWithoutQuizsInput
  questions: QuestionUpdateManyWithoutQuizInput
  markingscheme: Json
  quizlevel: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  createdBy: UserUpdateOneRequiredWithoutQuizCreatedByInput
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
}

input QuizUpdateWithoutSubjectDataInput {
  quizName: String
  quizType: String
  unit: UnitUpdateOneWithoutQuizsInput
  topic: TopicUpdateOneWithoutQuizsInput
  questions: QuestionUpdateManyWithoutQuizInput
  markingscheme: Json
  quizlevel: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  createdBy: UserUpdateOneRequiredWithoutQuizCreatedByInput
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  results: ResultUpdateManyWithoutQuizInput
}

input QuizUpdateWithoutTopicDataInput {
  quizName: String
  quizType: String
  subject: SubjectUpdateOneWithoutQuizesInput
  unit: UnitUpdateOneWithoutQuizsInput
  questions: QuestionUpdateManyWithoutQuizInput
  markingscheme: Json
  quizlevel: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  createdBy: UserUpdateOneRequiredWithoutQuizCreatedByInput
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  results: ResultUpdateManyWithoutQuizInput
}

input QuizUpdateWithoutUnitDataInput {
  quizName: String
  quizType: String
  subject: SubjectUpdateOneWithoutQuizesInput
  topic: TopicUpdateOneWithoutQuizsInput
  questions: QuestionUpdateManyWithoutQuizInput
  markingscheme: Json
  quizlevel: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  createdBy: UserUpdateOneRequiredWithoutQuizCreatedByInput
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  results: ResultUpdateManyWithoutQuizInput
}

input QuizUpdateWithWhereUniqueWithoutCreatedByInput {
  where: QuizWhereUniqueInput!
  data: QuizUpdateWithoutCreatedByDataInput!
}

input QuizUpdateWithWhereUniqueWithoutQuestionsInput {
  where: QuizWhereUniqueInput!
  data: QuizUpdateWithoutQuestionsDataInput!
}

input QuizUpdateWithWhereUniqueWithoutSubjectInput {
  where: QuizWhereUniqueInput!
  data: QuizUpdateWithoutSubjectDataInput!
}

input QuizUpdateWithWhereUniqueWithoutTopicInput {
  where: QuizWhereUniqueInput!
  data: QuizUpdateWithoutTopicDataInput!
}

input QuizUpdateWithWhereUniqueWithoutUnitInput {
  where: QuizWhereUniqueInput!
  data: QuizUpdateWithoutUnitDataInput!
}

input QuizUpsertWithoutResultsInput {
  update: QuizUpdateWithoutResultsDataInput!
  create: QuizCreateWithoutResultsInput!
}

input QuizUpsertWithWhereUniqueWithoutCreatedByInput {
  where: QuizWhereUniqueInput!
  update: QuizUpdateWithoutCreatedByDataInput!
  create: QuizCreateWithoutCreatedByInput!
}

input QuizUpsertWithWhereUniqueWithoutQuestionsInput {
  where: QuizWhereUniqueInput!
  update: QuizUpdateWithoutQuestionsDataInput!
  create: QuizCreateWithoutQuestionsInput!
}

input QuizUpsertWithWhereUniqueWithoutSubjectInput {
  where: QuizWhereUniqueInput!
  update: QuizUpdateWithoutSubjectDataInput!
  create: QuizCreateWithoutSubjectInput!
}

input QuizUpsertWithWhereUniqueWithoutTopicInput {
  where: QuizWhereUniqueInput!
  update: QuizUpdateWithoutTopicDataInput!
  create: QuizCreateWithoutTopicInput!
}

input QuizUpsertWithWhereUniqueWithoutUnitInput {
  where: QuizWhereUniqueInput!
  update: QuizUpdateWithoutUnitDataInput!
  create: QuizCreateWithoutUnitInput!
}

input QuizWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quizName: String
  quizName_not: String
  quizName_in: [String!]
  quizName_not_in: [String!]
  quizName_lt: String
  quizName_lte: String
  quizName_gt: String
  quizName_gte: String
  quizName_contains: String
  quizName_not_contains: String
  quizName_starts_with: String
  quizName_not_starts_with: String
  quizName_ends_with: String
  quizName_not_ends_with: String
  quizType: String
  quizType_not: String
  quizType_in: [String!]
  quizType_not_in: [String!]
  quizType_lt: String
  quizType_lte: String
  quizType_gt: String
  quizType_gte: String
  quizType_contains: String
  quizType_not_contains: String
  quizType_starts_with: String
  quizType_not_starts_with: String
  quizType_ends_with: String
  quizType_not_ends_with: String
  subject: SubjectWhereInput
  unit: UnitWhereInput
  topic: TopicWhereInput
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  quizlevel: Int
  quizlevel_not: Int
  quizlevel_in: [Int!]
  quizlevel_not_in: [Int!]
  quizlevel_lt: Int
  quizlevel_lte: Int
  quizlevel_gt: Int
  quizlevel_gte: Int
  isForLevelPromotion: Boolean
  isForLevelPromotion_not: Boolean
  showExplaination: String
  showExplaination_not: String
  showExplaination_in: [String!]
  showExplaination_not_in: [String!]
  showExplaination_lt: String
  showExplaination_lte: String
  showExplaination_gt: String
  showExplaination_gte: String
  showExplaination_contains: String
  showExplaination_not_contains: String
  showExplaination_starts_with: String
  showExplaination_not_starts_with: String
  showExplaination_ends_with: String
  showExplaination_not_ends_with: String
  showanswer: Boolean
  showanswer_not: Boolean
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  allowedCorrection: Boolean
  allowedCorrection_not: Boolean
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  commentFromTeacher: String
  commentFromTeacher_not: String
  commentFromTeacher_in: [String!]
  commentFromTeacher_not_in: [String!]
  commentFromTeacher_lt: String
  commentFromTeacher_lte: String
  commentFromTeacher_gt: String
  commentFromTeacher_gte: String
  commentFromTeacher_contains: String
  commentFromTeacher_not_contains: String
  commentFromTeacher_starts_with: String
  commentFromTeacher_not_starts_with: String
  commentFromTeacher_ends_with: String
  commentFromTeacher_not_ends_with: String
  isPublished: Boolean
  isPublished_not: Boolean
  isApproved: Boolean
  isApproved_not: Boolean
  createdBy: UserWhereInput
  weightage: Float
  weightage_not: Float
  weightage_in: [Float!]
  weightage_not_in: [Float!]
  weightage_lt: Float
  weightage_lte: Float
  weightage_gt: Float
  weightage_gte: Float
  totalmarks: Float
  totalmarks_not: Float
  totalmarks_in: [Float!]
  totalmarks_not_in: [Float!]
  totalmarks_lt: Float
  totalmarks_lte: Float
  totalmarks_gt: Float
  totalmarks_gte: Float
  validFrom: DateTime
  validFrom_not: DateTime
  validFrom_in: [DateTime!]
  validFrom_not_in: [DateTime!]
  validFrom_lt: DateTime
  validFrom_lte: DateTime
  validFrom_gt: DateTime
  validFrom_gte: DateTime
  validTo: DateTime
  validTo_not: DateTime
  validTo_in: [DateTime!]
  validTo_not_in: [DateTime!]
  validTo_lt: DateTime
  validTo_lte: DateTime
  validTo_gt: DateTime
  validTo_gte: DateTime
  retryAllowed: Boolean
  retryAllowed_not: Boolean
  results_every: ResultWhereInput
  results_some: ResultWhereInput
  results_none: ResultWhereInput
  AND: [QuizWhereInput!]
  OR: [QuizWhereInput!]
  NOT: [QuizWhereInput!]
}

input QuizWhereUniqueInput {
  id: ID
}

type Result {
  id: ID!
  quiz: Quiz!
  quizName: String!
  quizType: String!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  result: String!
  quizlevel: Int!
  score: Float
  attempted(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  notattempted(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  correct(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  wrong(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
  userId: User!
}

type ResultConnection {
  pageInfo: PageInfo!
  edges: [ResultEdge]!
  aggregate: AggregateResult!
}

input ResultCreateInput {
  id: ID
  quiz: QuizCreateOneWithoutResultsInput!
  quizName: String!
  quizType: String!
  questions: QuestionCreateManyWithoutResultsInput
  result: String!
  quizlevel: Int!
  score: Float
  attempted: QuestionCreateManyWithoutAtemptedResultInput
  notattempted: QuestionCreateManyWithoutNotattemptedInput
  correct: QuestionCreateManyWithoutCorrectInput
  wrong: QuestionCreateManyWithoutWrongInput
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
  userId: UserCreateOneWithoutResultInput!
}

input ResultCreateManyWithoutAttemptedInput {
  create: [ResultCreateWithoutAttemptedInput!]
  connect: [ResultWhereUniqueInput!]
}

input ResultCreateManyWithoutCorrectInput {
  create: [ResultCreateWithoutCorrectInput!]
  connect: [ResultWhereUniqueInput!]
}

input ResultCreateManyWithoutNotattemptedInput {
  create: [ResultCreateWithoutNotattemptedInput!]
  connect: [ResultWhereUniqueInput!]
}

input ResultCreateManyWithoutQuestionsInput {
  create: [ResultCreateWithoutQuestionsInput!]
  connect: [ResultWhereUniqueInput!]
}

input ResultCreateManyWithoutQuizInput {
  create: [ResultCreateWithoutQuizInput!]
  connect: [ResultWhereUniqueInput!]
}

input ResultCreateManyWithoutUserIdInput {
  create: [ResultCreateWithoutUserIdInput!]
  connect: [ResultWhereUniqueInput!]
}

input ResultCreateManyWithoutWrongInput {
  create: [ResultCreateWithoutWrongInput!]
  connect: [ResultWhereUniqueInput!]
}

input ResultCreateWithoutAttemptedInput {
  id: ID
  quiz: QuizCreateOneWithoutResultsInput!
  quizName: String!
  quizType: String!
  questions: QuestionCreateManyWithoutResultsInput
  result: String!
  quizlevel: Int!
  score: Float
  notattempted: QuestionCreateManyWithoutNotattemptedInput
  correct: QuestionCreateManyWithoutCorrectInput
  wrong: QuestionCreateManyWithoutWrongInput
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
  userId: UserCreateOneWithoutResultInput!
}

input ResultCreateWithoutCorrectInput {
  id: ID
  quiz: QuizCreateOneWithoutResultsInput!
  quizName: String!
  quizType: String!
  questions: QuestionCreateManyWithoutResultsInput
  result: String!
  quizlevel: Int!
  score: Float
  attempted: QuestionCreateManyWithoutAtemptedResultInput
  notattempted: QuestionCreateManyWithoutNotattemptedInput
  wrong: QuestionCreateManyWithoutWrongInput
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
  userId: UserCreateOneWithoutResultInput!
}

input ResultCreateWithoutNotattemptedInput {
  id: ID
  quiz: QuizCreateOneWithoutResultsInput!
  quizName: String!
  quizType: String!
  questions: QuestionCreateManyWithoutResultsInput
  result: String!
  quizlevel: Int!
  score: Float
  attempted: QuestionCreateManyWithoutAtemptedResultInput
  correct: QuestionCreateManyWithoutCorrectInput
  wrong: QuestionCreateManyWithoutWrongInput
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
  userId: UserCreateOneWithoutResultInput!
}

input ResultCreateWithoutQuestionsInput {
  id: ID
  quiz: QuizCreateOneWithoutResultsInput!
  quizName: String!
  quizType: String!
  result: String!
  quizlevel: Int!
  score: Float
  attempted: QuestionCreateManyWithoutAtemptedResultInput
  notattempted: QuestionCreateManyWithoutNotattemptedInput
  correct: QuestionCreateManyWithoutCorrectInput
  wrong: QuestionCreateManyWithoutWrongInput
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
  userId: UserCreateOneWithoutResultInput!
}

input ResultCreateWithoutQuizInput {
  id: ID
  quizName: String!
  quizType: String!
  questions: QuestionCreateManyWithoutResultsInput
  result: String!
  quizlevel: Int!
  score: Float
  attempted: QuestionCreateManyWithoutAtemptedResultInput
  notattempted: QuestionCreateManyWithoutNotattemptedInput
  correct: QuestionCreateManyWithoutCorrectInput
  wrong: QuestionCreateManyWithoutWrongInput
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
  userId: UserCreateOneWithoutResultInput!
}

input ResultCreateWithoutUserIdInput {
  id: ID
  quiz: QuizCreateOneWithoutResultsInput!
  quizName: String!
  quizType: String!
  questions: QuestionCreateManyWithoutResultsInput
  result: String!
  quizlevel: Int!
  score: Float
  attempted: QuestionCreateManyWithoutAtemptedResultInput
  notattempted: QuestionCreateManyWithoutNotattemptedInput
  correct: QuestionCreateManyWithoutCorrectInput
  wrong: QuestionCreateManyWithoutWrongInput
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
}

input ResultCreateWithoutWrongInput {
  id: ID
  quiz: QuizCreateOneWithoutResultsInput!
  quizName: String!
  quizType: String!
  questions: QuestionCreateManyWithoutResultsInput
  result: String!
  quizlevel: Int!
  score: Float
  attempted: QuestionCreateManyWithoutAtemptedResultInput
  notattempted: QuestionCreateManyWithoutNotattemptedInput
  correct: QuestionCreateManyWithoutCorrectInput
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
  userId: UserCreateOneWithoutResultInput!
}

type ResultEdge {
  node: Result!
  cursor: String!
}

enum ResultOrderByInput {
  id_ASC
  id_DESC
  quizName_ASC
  quizName_DESC
  quizType_ASC
  quizType_DESC
  result_ASC
  result_DESC
  quizlevel_ASC
  quizlevel_DESC
  score_ASC
  score_DESC
  achievement_ASC
  achievement_DESC
  duration_ASC
  duration_DESC
  attemptedDate_ASC
  attemptedDate_DESC
  commentFromTeacher_ASC
  commentFromTeacher_DESC
  rank_ASC
  rank_DESC
}

type ResultPreviousValues {
  id: ID!
  quizName: String!
  quizType: String!
  result: String!
  quizlevel: Int!
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
}

input ResultScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quizName: String
  quizName_not: String
  quizName_in: [String!]
  quizName_not_in: [String!]
  quizName_lt: String
  quizName_lte: String
  quizName_gt: String
  quizName_gte: String
  quizName_contains: String
  quizName_not_contains: String
  quizName_starts_with: String
  quizName_not_starts_with: String
  quizName_ends_with: String
  quizName_not_ends_with: String
  quizType: String
  quizType_not: String
  quizType_in: [String!]
  quizType_not_in: [String!]
  quizType_lt: String
  quizType_lte: String
  quizType_gt: String
  quizType_gte: String
  quizType_contains: String
  quizType_not_contains: String
  quizType_starts_with: String
  quizType_not_starts_with: String
  quizType_ends_with: String
  quizType_not_ends_with: String
  result: String
  result_not: String
  result_in: [String!]
  result_not_in: [String!]
  result_lt: String
  result_lte: String
  result_gt: String
  result_gte: String
  result_contains: String
  result_not_contains: String
  result_starts_with: String
  result_not_starts_with: String
  result_ends_with: String
  result_not_ends_with: String
  quizlevel: Int
  quizlevel_not: Int
  quizlevel_in: [Int!]
  quizlevel_not_in: [Int!]
  quizlevel_lt: Int
  quizlevel_lte: Int
  quizlevel_gt: Int
  quizlevel_gte: Int
  score: Float
  score_not: Float
  score_in: [Float!]
  score_not_in: [Float!]
  score_lt: Float
  score_lte: Float
  score_gt: Float
  score_gte: Float
  achievement: String
  achievement_not: String
  achievement_in: [String!]
  achievement_not_in: [String!]
  achievement_lt: String
  achievement_lte: String
  achievement_gt: String
  achievement_gte: String
  achievement_contains: String
  achievement_not_contains: String
  achievement_starts_with: String
  achievement_not_starts_with: String
  achievement_ends_with: String
  achievement_not_ends_with: String
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  attemptedDate: DateTime
  attemptedDate_not: DateTime
  attemptedDate_in: [DateTime!]
  attemptedDate_not_in: [DateTime!]
  attemptedDate_lt: DateTime
  attemptedDate_lte: DateTime
  attemptedDate_gt: DateTime
  attemptedDate_gte: DateTime
  commentFromTeacher: String
  commentFromTeacher_not: String
  commentFromTeacher_in: [String!]
  commentFromTeacher_not_in: [String!]
  commentFromTeacher_lt: String
  commentFromTeacher_lte: String
  commentFromTeacher_gt: String
  commentFromTeacher_gte: String
  commentFromTeacher_contains: String
  commentFromTeacher_not_contains: String
  commentFromTeacher_starts_with: String
  commentFromTeacher_not_starts_with: String
  commentFromTeacher_ends_with: String
  commentFromTeacher_not_ends_with: String
  rank: Int
  rank_not: Int
  rank_in: [Int!]
  rank_not_in: [Int!]
  rank_lt: Int
  rank_lte: Int
  rank_gt: Int
  rank_gte: Int
  AND: [ResultScalarWhereInput!]
  OR: [ResultScalarWhereInput!]
  NOT: [ResultScalarWhereInput!]
}

type ResultSubscriptionPayload {
  mutation: MutationType!
  node: Result
  updatedFields: [String!]
  previousValues: ResultPreviousValues
}

input ResultSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ResultWhereInput
  AND: [ResultSubscriptionWhereInput!]
  OR: [ResultSubscriptionWhereInput!]
  NOT: [ResultSubscriptionWhereInput!]
}

input ResultUpdateInput {
  quiz: QuizUpdateOneRequiredWithoutResultsInput
  quizName: String
  quizType: String
  questions: QuestionUpdateManyWithoutResultsInput
  result: String
  quizlevel: Int
  score: Float
  attempted: QuestionUpdateManyWithoutAtemptedResultInput
  notattempted: QuestionUpdateManyWithoutNotattemptedInput
  correct: QuestionUpdateManyWithoutCorrectInput
  wrong: QuestionUpdateManyWithoutWrongInput
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
  userId: UserUpdateOneRequiredWithoutResultInput
}

input ResultUpdateManyDataInput {
  quizName: String
  quizType: String
  result: String
  quizlevel: Int
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
}

input ResultUpdateManyMutationInput {
  quizName: String
  quizType: String
  result: String
  quizlevel: Int
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
}

input ResultUpdateManyWithoutAttemptedInput {
  create: [ResultCreateWithoutAttemptedInput!]
  delete: [ResultWhereUniqueInput!]
  connect: [ResultWhereUniqueInput!]
  set: [ResultWhereUniqueInput!]
  disconnect: [ResultWhereUniqueInput!]
  update: [ResultUpdateWithWhereUniqueWithoutAttemptedInput!]
  upsert: [ResultUpsertWithWhereUniqueWithoutAttemptedInput!]
  deleteMany: [ResultScalarWhereInput!]
  updateMany: [ResultUpdateManyWithWhereNestedInput!]
}

input ResultUpdateManyWithoutCorrectInput {
  create: [ResultCreateWithoutCorrectInput!]
  delete: [ResultWhereUniqueInput!]
  connect: [ResultWhereUniqueInput!]
  set: [ResultWhereUniqueInput!]
  disconnect: [ResultWhereUniqueInput!]
  update: [ResultUpdateWithWhereUniqueWithoutCorrectInput!]
  upsert: [ResultUpsertWithWhereUniqueWithoutCorrectInput!]
  deleteMany: [ResultScalarWhereInput!]
  updateMany: [ResultUpdateManyWithWhereNestedInput!]
}

input ResultUpdateManyWithoutNotattemptedInput {
  create: [ResultCreateWithoutNotattemptedInput!]
  delete: [ResultWhereUniqueInput!]
  connect: [ResultWhereUniqueInput!]
  set: [ResultWhereUniqueInput!]
  disconnect: [ResultWhereUniqueInput!]
  update: [ResultUpdateWithWhereUniqueWithoutNotattemptedInput!]
  upsert: [ResultUpsertWithWhereUniqueWithoutNotattemptedInput!]
  deleteMany: [ResultScalarWhereInput!]
  updateMany: [ResultUpdateManyWithWhereNestedInput!]
}

input ResultUpdateManyWithoutQuestionsInput {
  create: [ResultCreateWithoutQuestionsInput!]
  delete: [ResultWhereUniqueInput!]
  connect: [ResultWhereUniqueInput!]
  set: [ResultWhereUniqueInput!]
  disconnect: [ResultWhereUniqueInput!]
  update: [ResultUpdateWithWhereUniqueWithoutQuestionsInput!]
  upsert: [ResultUpsertWithWhereUniqueWithoutQuestionsInput!]
  deleteMany: [ResultScalarWhereInput!]
  updateMany: [ResultUpdateManyWithWhereNestedInput!]
}

input ResultUpdateManyWithoutQuizInput {
  create: [ResultCreateWithoutQuizInput!]
  delete: [ResultWhereUniqueInput!]
  connect: [ResultWhereUniqueInput!]
  set: [ResultWhereUniqueInput!]
  disconnect: [ResultWhereUniqueInput!]
  update: [ResultUpdateWithWhereUniqueWithoutQuizInput!]
  upsert: [ResultUpsertWithWhereUniqueWithoutQuizInput!]
  deleteMany: [ResultScalarWhereInput!]
  updateMany: [ResultUpdateManyWithWhereNestedInput!]
}

input ResultUpdateManyWithoutUserIdInput {
  create: [ResultCreateWithoutUserIdInput!]
  delete: [ResultWhereUniqueInput!]
  connect: [ResultWhereUniqueInput!]
  set: [ResultWhereUniqueInput!]
  disconnect: [ResultWhereUniqueInput!]
  update: [ResultUpdateWithWhereUniqueWithoutUserIdInput!]
  upsert: [ResultUpsertWithWhereUniqueWithoutUserIdInput!]
  deleteMany: [ResultScalarWhereInput!]
  updateMany: [ResultUpdateManyWithWhereNestedInput!]
}

input ResultUpdateManyWithoutWrongInput {
  create: [ResultCreateWithoutWrongInput!]
  delete: [ResultWhereUniqueInput!]
  connect: [ResultWhereUniqueInput!]
  set: [ResultWhereUniqueInput!]
  disconnect: [ResultWhereUniqueInput!]
  update: [ResultUpdateWithWhereUniqueWithoutWrongInput!]
  upsert: [ResultUpsertWithWhereUniqueWithoutWrongInput!]
  deleteMany: [ResultScalarWhereInput!]
  updateMany: [ResultUpdateManyWithWhereNestedInput!]
}

input ResultUpdateManyWithWhereNestedInput {
  where: ResultScalarWhereInput!
  data: ResultUpdateManyDataInput!
}

input ResultUpdateWithoutAttemptedDataInput {
  quiz: QuizUpdateOneRequiredWithoutResultsInput
  quizName: String
  quizType: String
  questions: QuestionUpdateManyWithoutResultsInput
  result: String
  quizlevel: Int
  score: Float
  notattempted: QuestionUpdateManyWithoutNotattemptedInput
  correct: QuestionUpdateManyWithoutCorrectInput
  wrong: QuestionUpdateManyWithoutWrongInput
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
  userId: UserUpdateOneRequiredWithoutResultInput
}

input ResultUpdateWithoutCorrectDataInput {
  quiz: QuizUpdateOneRequiredWithoutResultsInput
  quizName: String
  quizType: String
  questions: QuestionUpdateManyWithoutResultsInput
  result: String
  quizlevel: Int
  score: Float
  attempted: QuestionUpdateManyWithoutAtemptedResultInput
  notattempted: QuestionUpdateManyWithoutNotattemptedInput
  wrong: QuestionUpdateManyWithoutWrongInput
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
  userId: UserUpdateOneRequiredWithoutResultInput
}

input ResultUpdateWithoutNotattemptedDataInput {
  quiz: QuizUpdateOneRequiredWithoutResultsInput
  quizName: String
  quizType: String
  questions: QuestionUpdateManyWithoutResultsInput
  result: String
  quizlevel: Int
  score: Float
  attempted: QuestionUpdateManyWithoutAtemptedResultInput
  correct: QuestionUpdateManyWithoutCorrectInput
  wrong: QuestionUpdateManyWithoutWrongInput
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
  userId: UserUpdateOneRequiredWithoutResultInput
}

input ResultUpdateWithoutQuestionsDataInput {
  quiz: QuizUpdateOneRequiredWithoutResultsInput
  quizName: String
  quizType: String
  result: String
  quizlevel: Int
  score: Float
  attempted: QuestionUpdateManyWithoutAtemptedResultInput
  notattempted: QuestionUpdateManyWithoutNotattemptedInput
  correct: QuestionUpdateManyWithoutCorrectInput
  wrong: QuestionUpdateManyWithoutWrongInput
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
  userId: UserUpdateOneRequiredWithoutResultInput
}

input ResultUpdateWithoutQuizDataInput {
  quizName: String
  quizType: String
  questions: QuestionUpdateManyWithoutResultsInput
  result: String
  quizlevel: Int
  score: Float
  attempted: QuestionUpdateManyWithoutAtemptedResultInput
  notattempted: QuestionUpdateManyWithoutNotattemptedInput
  correct: QuestionUpdateManyWithoutCorrectInput
  wrong: QuestionUpdateManyWithoutWrongInput
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
  userId: UserUpdateOneRequiredWithoutResultInput
}

input ResultUpdateWithoutUserIdDataInput {
  quiz: QuizUpdateOneRequiredWithoutResultsInput
  quizName: String
  quizType: String
  questions: QuestionUpdateManyWithoutResultsInput
  result: String
  quizlevel: Int
  score: Float
  attempted: QuestionUpdateManyWithoutAtemptedResultInput
  notattempted: QuestionUpdateManyWithoutNotattemptedInput
  correct: QuestionUpdateManyWithoutCorrectInput
  wrong: QuestionUpdateManyWithoutWrongInput
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
}

input ResultUpdateWithoutWrongDataInput {
  quiz: QuizUpdateOneRequiredWithoutResultsInput
  quizName: String
  quizType: String
  questions: QuestionUpdateManyWithoutResultsInput
  result: String
  quizlevel: Int
  score: Float
  attempted: QuestionUpdateManyWithoutAtemptedResultInput
  notattempted: QuestionUpdateManyWithoutNotattemptedInput
  correct: QuestionUpdateManyWithoutCorrectInput
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
  userId: UserUpdateOneRequiredWithoutResultInput
}

input ResultUpdateWithWhereUniqueWithoutAttemptedInput {
  where: ResultWhereUniqueInput!
  data: ResultUpdateWithoutAttemptedDataInput!
}

input ResultUpdateWithWhereUniqueWithoutCorrectInput {
  where: ResultWhereUniqueInput!
  data: ResultUpdateWithoutCorrectDataInput!
}

input ResultUpdateWithWhereUniqueWithoutNotattemptedInput {
  where: ResultWhereUniqueInput!
  data: ResultUpdateWithoutNotattemptedDataInput!
}

input ResultUpdateWithWhereUniqueWithoutQuestionsInput {
  where: ResultWhereUniqueInput!
  data: ResultUpdateWithoutQuestionsDataInput!
}

input ResultUpdateWithWhereUniqueWithoutQuizInput {
  where: ResultWhereUniqueInput!
  data: ResultUpdateWithoutQuizDataInput!
}

input ResultUpdateWithWhereUniqueWithoutUserIdInput {
  where: ResultWhereUniqueInput!
  data: ResultUpdateWithoutUserIdDataInput!
}

input ResultUpdateWithWhereUniqueWithoutWrongInput {
  where: ResultWhereUniqueInput!
  data: ResultUpdateWithoutWrongDataInput!
}

input ResultUpsertWithWhereUniqueWithoutAttemptedInput {
  where: ResultWhereUniqueInput!
  update: ResultUpdateWithoutAttemptedDataInput!
  create: ResultCreateWithoutAttemptedInput!
}

input ResultUpsertWithWhereUniqueWithoutCorrectInput {
  where: ResultWhereUniqueInput!
  update: ResultUpdateWithoutCorrectDataInput!
  create: ResultCreateWithoutCorrectInput!
}

input ResultUpsertWithWhereUniqueWithoutNotattemptedInput {
  where: ResultWhereUniqueInput!
  update: ResultUpdateWithoutNotattemptedDataInput!
  create: ResultCreateWithoutNotattemptedInput!
}

input ResultUpsertWithWhereUniqueWithoutQuestionsInput {
  where: ResultWhereUniqueInput!
  update: ResultUpdateWithoutQuestionsDataInput!
  create: ResultCreateWithoutQuestionsInput!
}

input ResultUpsertWithWhereUniqueWithoutQuizInput {
  where: ResultWhereUniqueInput!
  update: ResultUpdateWithoutQuizDataInput!
  create: ResultCreateWithoutQuizInput!
}

input ResultUpsertWithWhereUniqueWithoutUserIdInput {
  where: ResultWhereUniqueInput!
  update: ResultUpdateWithoutUserIdDataInput!
  create: ResultCreateWithoutUserIdInput!
}

input ResultUpsertWithWhereUniqueWithoutWrongInput {
  where: ResultWhereUniqueInput!
  update: ResultUpdateWithoutWrongDataInput!
  create: ResultCreateWithoutWrongInput!
}

input ResultWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quiz: QuizWhereInput
  quizName: String
  quizName_not: String
  quizName_in: [String!]
  quizName_not_in: [String!]
  quizName_lt: String
  quizName_lte: String
  quizName_gt: String
  quizName_gte: String
  quizName_contains: String
  quizName_not_contains: String
  quizName_starts_with: String
  quizName_not_starts_with: String
  quizName_ends_with: String
  quizName_not_ends_with: String
  quizType: String
  quizType_not: String
  quizType_in: [String!]
  quizType_not_in: [String!]
  quizType_lt: String
  quizType_lte: String
  quizType_gt: String
  quizType_gte: String
  quizType_contains: String
  quizType_not_contains: String
  quizType_starts_with: String
  quizType_not_starts_with: String
  quizType_ends_with: String
  quizType_not_ends_with: String
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  result: String
  result_not: String
  result_in: [String!]
  result_not_in: [String!]
  result_lt: String
  result_lte: String
  result_gt: String
  result_gte: String
  result_contains: String
  result_not_contains: String
  result_starts_with: String
  result_not_starts_with: String
  result_ends_with: String
  result_not_ends_with: String
  quizlevel: Int
  quizlevel_not: Int
  quizlevel_in: [Int!]
  quizlevel_not_in: [Int!]
  quizlevel_lt: Int
  quizlevel_lte: Int
  quizlevel_gt: Int
  quizlevel_gte: Int
  score: Float
  score_not: Float
  score_in: [Float!]
  score_not_in: [Float!]
  score_lt: Float
  score_lte: Float
  score_gt: Float
  score_gte: Float
  attempted_every: QuestionWhereInput
  attempted_some: QuestionWhereInput
  attempted_none: QuestionWhereInput
  notattempted_every: QuestionWhereInput
  notattempted_some: QuestionWhereInput
  notattempted_none: QuestionWhereInput
  correct_every: QuestionWhereInput
  correct_some: QuestionWhereInput
  correct_none: QuestionWhereInput
  wrong_every: QuestionWhereInput
  wrong_some: QuestionWhereInput
  wrong_none: QuestionWhereInput
  achievement: String
  achievement_not: String
  achievement_in: [String!]
  achievement_not_in: [String!]
  achievement_lt: String
  achievement_lte: String
  achievement_gt: String
  achievement_gte: String
  achievement_contains: String
  achievement_not_contains: String
  achievement_starts_with: String
  achievement_not_starts_with: String
  achievement_ends_with: String
  achievement_not_ends_with: String
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  attemptedDate: DateTime
  attemptedDate_not: DateTime
  attemptedDate_in: [DateTime!]
  attemptedDate_not_in: [DateTime!]
  attemptedDate_lt: DateTime
  attemptedDate_lte: DateTime
  attemptedDate_gt: DateTime
  attemptedDate_gte: DateTime
  commentFromTeacher: String
  commentFromTeacher_not: String
  commentFromTeacher_in: [String!]
  commentFromTeacher_not_in: [String!]
  commentFromTeacher_lt: String
  commentFromTeacher_lte: String
  commentFromTeacher_gt: String
  commentFromTeacher_gte: String
  commentFromTeacher_contains: String
  commentFromTeacher_not_contains: String
  commentFromTeacher_starts_with: String
  commentFromTeacher_not_starts_with: String
  commentFromTeacher_ends_with: String
  commentFromTeacher_not_ends_with: String
  rank: Int
  rank_not: Int
  rank_in: [Int!]
  rank_not_in: [Int!]
  rank_lt: Int
  rank_lte: Int
  rank_gt: Int
  rank_gte: Int
  userId: UserWhereInput
  AND: [ResultWhereInput!]
  OR: [ResultWhereInput!]
  NOT: [ResultWhereInput!]
}

input ResultWhereUniqueInput {
  id: ID
}

type Role {
  id: ID!
  name: ROLENAME!
  org: Organization
  suborg: Suborg
  group: Group
  subgroup: SubGroup
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  description: String
  status: String
  state: String
  updatedAt: DateTime!
  createdAt: DateTime!
  subjectSubscriptions(where: SubjectSubscriptionWhereInput, orderBy: SubjectSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubjectSubscription!]
}

type RoleConnection {
  pageInfo: PageInfo!
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  id: ID
  name: ROLENAME!
  org: OrganizationCreateOneWithoutOrgRolesInput
  suborg: SuborgCreateOneWithoutSuborgRolesInput
  group: GroupCreateOneWithoutGroupRolesInput
  subgroup: SubGroupCreateOneWithoutSubgroupRolesInput
  users: UserCreateManyWithoutRolesInput
  description: String
  status: String
  state: String
  subjectSubscriptions: SubjectSubscriptionCreateManyWithoutSubscribedAsInput
}

input RoleCreateManyWithoutGroupInput {
  create: [RoleCreateWithoutGroupInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateManyWithoutOrgInput {
  create: [RoleCreateWithoutOrgInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateManyWithoutSubgroupInput {
  create: [RoleCreateWithoutSubgroupInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateManyWithoutSuborgInput {
  create: [RoleCreateWithoutSuborgInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateManyWithoutUsersInput {
  create: [RoleCreateWithoutUsersInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateOneInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input RoleCreateOneWithoutSubjectSubscriptionsInput {
  create: RoleCreateWithoutSubjectSubscriptionsInput
  connect: RoleWhereUniqueInput
}

input RoleCreateWithoutGroupInput {
  id: ID
  name: ROLENAME!
  org: OrganizationCreateOneWithoutOrgRolesInput
  suborg: SuborgCreateOneWithoutSuborgRolesInput
  subgroup: SubGroupCreateOneWithoutSubgroupRolesInput
  users: UserCreateManyWithoutRolesInput
  description: String
  status: String
  state: String
  subjectSubscriptions: SubjectSubscriptionCreateManyWithoutSubscribedAsInput
}

input RoleCreateWithoutOrgInput {
  id: ID
  name: ROLENAME!
  suborg: SuborgCreateOneWithoutSuborgRolesInput
  group: GroupCreateOneWithoutGroupRolesInput
  subgroup: SubGroupCreateOneWithoutSubgroupRolesInput
  users: UserCreateManyWithoutRolesInput
  description: String
  status: String
  state: String
  subjectSubscriptions: SubjectSubscriptionCreateManyWithoutSubscribedAsInput
}

input RoleCreateWithoutSubgroupInput {
  id: ID
  name: ROLENAME!
  org: OrganizationCreateOneWithoutOrgRolesInput
  suborg: SuborgCreateOneWithoutSuborgRolesInput
  group: GroupCreateOneWithoutGroupRolesInput
  users: UserCreateManyWithoutRolesInput
  description: String
  status: String
  state: String
  subjectSubscriptions: SubjectSubscriptionCreateManyWithoutSubscribedAsInput
}

input RoleCreateWithoutSubjectSubscriptionsInput {
  id: ID
  name: ROLENAME!
  org: OrganizationCreateOneWithoutOrgRolesInput
  suborg: SuborgCreateOneWithoutSuborgRolesInput
  group: GroupCreateOneWithoutGroupRolesInput
  subgroup: SubGroupCreateOneWithoutSubgroupRolesInput
  users: UserCreateManyWithoutRolesInput
  description: String
  status: String
  state: String
}

input RoleCreateWithoutSuborgInput {
  id: ID
  name: ROLENAME!
  org: OrganizationCreateOneWithoutOrgRolesInput
  group: GroupCreateOneWithoutGroupRolesInput
  subgroup: SubGroupCreateOneWithoutSubgroupRolesInput
  users: UserCreateManyWithoutRolesInput
  description: String
  status: String
  state: String
  subjectSubscriptions: SubjectSubscriptionCreateManyWithoutSubscribedAsInput
}

input RoleCreateWithoutUsersInput {
  id: ID
  name: ROLENAME!
  org: OrganizationCreateOneWithoutOrgRolesInput
  suborg: SuborgCreateOneWithoutSuborgRolesInput
  group: GroupCreateOneWithoutGroupRolesInput
  subgroup: SubGroupCreateOneWithoutSubgroupRolesInput
  description: String
  status: String
  state: String
  subjectSubscriptions: SubjectSubscriptionCreateManyWithoutSubscribedAsInput
}

type RoleEdge {
  node: Role!
  cursor: String!
}

type RoleMember {
  id: ID!
  userid: User!
  role: Role!
  status: RoleStatus
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type RoleMemberConnection {
  pageInfo: PageInfo!
  edges: [RoleMemberEdge]!
  aggregate: AggregateRoleMember!
}

input RoleMemberCreateInput {
  id: ID
  userid: UserCreateOneInput!
  role: RoleCreateOneInput!
  status: RoleStatus
  description: String
}

type RoleMemberEdge {
  node: RoleMember!
  cursor: String!
}

enum RoleMemberOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RoleMemberPreviousValues {
  id: ID!
  status: RoleStatus
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type RoleMemberSubscriptionPayload {
  mutation: MutationType!
  node: RoleMember
  updatedFields: [String!]
  previousValues: RoleMemberPreviousValues
}

input RoleMemberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoleMemberWhereInput
  AND: [RoleMemberSubscriptionWhereInput!]
  OR: [RoleMemberSubscriptionWhereInput!]
  NOT: [RoleMemberSubscriptionWhereInput!]
}

input RoleMemberUpdateInput {
  userid: UserUpdateOneRequiredInput
  role: RoleUpdateOneRequiredInput
  status: RoleStatus
  description: String
}

input RoleMemberUpdateManyMutationInput {
  status: RoleStatus
  description: String
}

input RoleMemberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userid: UserWhereInput
  role: RoleWhereInput
  status: RoleStatus
  status_not: RoleStatus
  status_in: [RoleStatus!]
  status_not_in: [RoleStatus!]
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [RoleMemberWhereInput!]
  OR: [RoleMemberWhereInput!]
  NOT: [RoleMemberWhereInput!]
}

input RoleMemberWhereUniqueInput {
  id: ID
}

enum ROLENAME {
  SUPERADMIN
  ORGADMIN
  SUBORGADMIN
  GROUPADMIN
  SUBGROUPADMIN
  PARENT
  TEACHER
  TUTOR
  CONTRIBUTOR
  STUDENT
  PLAYER
  CAPTAIN
  OWNER
  SERVENT
  SERVICE
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  status_ASC
  status_DESC
  state_ASC
  state_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RolePreviousValues {
  id: ID!
  name: ROLENAME!
  description: String
  status: String
  state: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input RoleScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: ROLENAME
  name_not: ROLENAME
  name_in: [ROLENAME!]
  name_not_in: [ROLENAME!]
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [RoleScalarWhereInput!]
  OR: [RoleScalarWhereInput!]
  NOT: [RoleScalarWhereInput!]
}

enum RoleStatus {
  ACTIVE
  EXPIRED
  INACTIVE
  DORMANT
  RENEWED
  SPECIALGRANT
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
  AND: [RoleSubscriptionWhereInput!]
  OR: [RoleSubscriptionWhereInput!]
  NOT: [RoleSubscriptionWhereInput!]
}

input RoleUpdateDataInput {
  name: ROLENAME
  org: OrganizationUpdateOneWithoutOrgRolesInput
  suborg: SuborgUpdateOneWithoutSuborgRolesInput
  group: GroupUpdateOneWithoutGroupRolesInput
  subgroup: SubGroupUpdateOneWithoutSubgroupRolesInput
  users: UserUpdateManyWithoutRolesInput
  description: String
  status: String
  state: String
  subjectSubscriptions: SubjectSubscriptionUpdateManyWithoutSubscribedAsInput
}

input RoleUpdateInput {
  name: ROLENAME
  org: OrganizationUpdateOneWithoutOrgRolesInput
  suborg: SuborgUpdateOneWithoutSuborgRolesInput
  group: GroupUpdateOneWithoutGroupRolesInput
  subgroup: SubGroupUpdateOneWithoutSubgroupRolesInput
  users: UserUpdateManyWithoutRolesInput
  description: String
  status: String
  state: String
  subjectSubscriptions: SubjectSubscriptionUpdateManyWithoutSubscribedAsInput
}

input RoleUpdateManyDataInput {
  name: ROLENAME
  description: String
  status: String
  state: String
}

input RoleUpdateManyMutationInput {
  name: ROLENAME
  description: String
  status: String
  state: String
}

input RoleUpdateManyWithoutGroupInput {
  create: [RoleCreateWithoutGroupInput!]
  delete: [RoleWhereUniqueInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutGroupInput!]
  deleteMany: [RoleScalarWhereInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
}

input RoleUpdateManyWithoutOrgInput {
  create: [RoleCreateWithoutOrgInput!]
  delete: [RoleWhereUniqueInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutOrgInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutOrgInput!]
  deleteMany: [RoleScalarWhereInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
}

input RoleUpdateManyWithoutSubgroupInput {
  create: [RoleCreateWithoutSubgroupInput!]
  delete: [RoleWhereUniqueInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutSubgroupInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutSubgroupInput!]
  deleteMany: [RoleScalarWhereInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
}

input RoleUpdateManyWithoutSuborgInput {
  create: [RoleCreateWithoutSuborgInput!]
  delete: [RoleWhereUniqueInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutSuborgInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutSuborgInput!]
  deleteMany: [RoleScalarWhereInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
}

input RoleUpdateManyWithoutUsersInput {
  create: [RoleCreateWithoutUsersInput!]
  delete: [RoleWhereUniqueInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutUsersInput!]
  deleteMany: [RoleScalarWhereInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
}

input RoleUpdateManyWithWhereNestedInput {
  where: RoleScalarWhereInput!
  data: RoleUpdateManyDataInput!
}

input RoleUpdateOneRequiredInput {
  create: RoleCreateInput
  update: RoleUpdateDataInput
  upsert: RoleUpsertNestedInput
  connect: RoleWhereUniqueInput
}

input RoleUpdateOneRequiredWithoutSubjectSubscriptionsInput {
  create: RoleCreateWithoutSubjectSubscriptionsInput
  update: RoleUpdateWithoutSubjectSubscriptionsDataInput
  upsert: RoleUpsertWithoutSubjectSubscriptionsInput
  connect: RoleWhereUniqueInput
}

input RoleUpdateWithoutGroupDataInput {
  name: ROLENAME
  org: OrganizationUpdateOneWithoutOrgRolesInput
  suborg: SuborgUpdateOneWithoutSuborgRolesInput
  subgroup: SubGroupUpdateOneWithoutSubgroupRolesInput
  users: UserUpdateManyWithoutRolesInput
  description: String
  status: String
  state: String
  subjectSubscriptions: SubjectSubscriptionUpdateManyWithoutSubscribedAsInput
}

input RoleUpdateWithoutOrgDataInput {
  name: ROLENAME
  suborg: SuborgUpdateOneWithoutSuborgRolesInput
  group: GroupUpdateOneWithoutGroupRolesInput
  subgroup: SubGroupUpdateOneWithoutSubgroupRolesInput
  users: UserUpdateManyWithoutRolesInput
  description: String
  status: String
  state: String
  subjectSubscriptions: SubjectSubscriptionUpdateManyWithoutSubscribedAsInput
}

input RoleUpdateWithoutSubgroupDataInput {
  name: ROLENAME
  org: OrganizationUpdateOneWithoutOrgRolesInput
  suborg: SuborgUpdateOneWithoutSuborgRolesInput
  group: GroupUpdateOneWithoutGroupRolesInput
  users: UserUpdateManyWithoutRolesInput
  description: String
  status: String
  state: String
  subjectSubscriptions: SubjectSubscriptionUpdateManyWithoutSubscribedAsInput
}

input RoleUpdateWithoutSubjectSubscriptionsDataInput {
  name: ROLENAME
  org: OrganizationUpdateOneWithoutOrgRolesInput
  suborg: SuborgUpdateOneWithoutSuborgRolesInput
  group: GroupUpdateOneWithoutGroupRolesInput
  subgroup: SubGroupUpdateOneWithoutSubgroupRolesInput
  users: UserUpdateManyWithoutRolesInput
  description: String
  status: String
  state: String
}

input RoleUpdateWithoutSuborgDataInput {
  name: ROLENAME
  org: OrganizationUpdateOneWithoutOrgRolesInput
  group: GroupUpdateOneWithoutGroupRolesInput
  subgroup: SubGroupUpdateOneWithoutSubgroupRolesInput
  users: UserUpdateManyWithoutRolesInput
  description: String
  status: String
  state: String
  subjectSubscriptions: SubjectSubscriptionUpdateManyWithoutSubscribedAsInput
}

input RoleUpdateWithoutUsersDataInput {
  name: ROLENAME
  org: OrganizationUpdateOneWithoutOrgRolesInput
  suborg: SuborgUpdateOneWithoutSuborgRolesInput
  group: GroupUpdateOneWithoutGroupRolesInput
  subgroup: SubGroupUpdateOneWithoutSubgroupRolesInput
  description: String
  status: String
  state: String
  subjectSubscriptions: SubjectSubscriptionUpdateManyWithoutSubscribedAsInput
}

input RoleUpdateWithWhereUniqueWithoutGroupInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutGroupDataInput!
}

input RoleUpdateWithWhereUniqueWithoutOrgInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutOrgDataInput!
}

input RoleUpdateWithWhereUniqueWithoutSubgroupInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutSubgroupDataInput!
}

input RoleUpdateWithWhereUniqueWithoutSuborgInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutSuborgDataInput!
}

input RoleUpdateWithWhereUniqueWithoutUsersInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutUsersDataInput!
}

input RoleUpsertNestedInput {
  update: RoleUpdateDataInput!
  create: RoleCreateInput!
}

input RoleUpsertWithoutSubjectSubscriptionsInput {
  update: RoleUpdateWithoutSubjectSubscriptionsDataInput!
  create: RoleCreateWithoutSubjectSubscriptionsInput!
}

input RoleUpsertWithWhereUniqueWithoutGroupInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutGroupDataInput!
  create: RoleCreateWithoutGroupInput!
}

input RoleUpsertWithWhereUniqueWithoutOrgInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutOrgDataInput!
  create: RoleCreateWithoutOrgInput!
}

input RoleUpsertWithWhereUniqueWithoutSubgroupInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutSubgroupDataInput!
  create: RoleCreateWithoutSubgroupInput!
}

input RoleUpsertWithWhereUniqueWithoutSuborgInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutSuborgDataInput!
  create: RoleCreateWithoutSuborgInput!
}

input RoleUpsertWithWhereUniqueWithoutUsersInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutUsersDataInput!
  create: RoleCreateWithoutUsersInput!
}

input RoleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: ROLENAME
  name_not: ROLENAME
  name_in: [ROLENAME!]
  name_not_in: [ROLENAME!]
  org: OrganizationWhereInput
  suborg: SuborgWhereInput
  group: GroupWhereInput
  subgroup: SubGroupWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  subjectSubscriptions_every: SubjectSubscriptionWhereInput
  subjectSubscriptions_some: SubjectSubscriptionWhereInput
  subjectSubscriptions_none: SubjectSubscriptionWhereInput
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
}

input RoleWhereUniqueInput {
  id: ID
}

type Std {
  id: ID!
  stdname: String!
  category: String!
  branch: String
  year: String
  subject(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type StdConnection {
  pageInfo: PageInfo!
  edges: [StdEdge]!
  aggregate: AggregateStd!
}

input StdCreateInput {
  id: ID
  stdname: String!
  category: String!
  branch: String
  year: String
  subject: SubjectCreateManyWithoutStdInput
}

input StdCreateOneWithoutSubjectInput {
  create: StdCreateWithoutSubjectInput
  connect: StdWhereUniqueInput
}

input StdCreateWithoutSubjectInput {
  id: ID
  stdname: String!
  category: String!
  branch: String
  year: String
}

type StdEdge {
  node: Std!
  cursor: String!
}

enum StdOrderByInput {
  id_ASC
  id_DESC
  stdname_ASC
  stdname_DESC
  category_ASC
  category_DESC
  branch_ASC
  branch_DESC
  year_ASC
  year_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StdPreviousValues {
  id: ID!
  stdname: String!
  category: String!
  branch: String
  year: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type StdSubscriptionPayload {
  mutation: MutationType!
  node: Std
  updatedFields: [String!]
  previousValues: StdPreviousValues
}

input StdSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StdWhereInput
  AND: [StdSubscriptionWhereInput!]
  OR: [StdSubscriptionWhereInput!]
  NOT: [StdSubscriptionWhereInput!]
}

input StdUpdateInput {
  stdname: String
  category: String
  branch: String
  year: String
  subject: SubjectUpdateManyWithoutStdInput
}

input StdUpdateManyMutationInput {
  stdname: String
  category: String
  branch: String
  year: String
}

input StdUpdateOneRequiredWithoutSubjectInput {
  create: StdCreateWithoutSubjectInput
  update: StdUpdateWithoutSubjectDataInput
  upsert: StdUpsertWithoutSubjectInput
  connect: StdWhereUniqueInput
}

input StdUpdateWithoutSubjectDataInput {
  stdname: String
  category: String
  branch: String
  year: String
}

input StdUpsertWithoutSubjectInput {
  update: StdUpdateWithoutSubjectDataInput!
  create: StdCreateWithoutSubjectInput!
}

input StdWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  stdname: String
  stdname_not: String
  stdname_in: [String!]
  stdname_not_in: [String!]
  stdname_lt: String
  stdname_lte: String
  stdname_gt: String
  stdname_gte: String
  stdname_contains: String
  stdname_not_contains: String
  stdname_starts_with: String
  stdname_not_starts_with: String
  stdname_ends_with: String
  stdname_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  branch: String
  branch_not: String
  branch_in: [String!]
  branch_not_in: [String!]
  branch_lt: String
  branch_lte: String
  branch_gt: String
  branch_gte: String
  branch_contains: String
  branch_not_contains: String
  branch_starts_with: String
  branch_not_starts_with: String
  branch_ends_with: String
  branch_not_ends_with: String
  year: String
  year_not: String
  year_in: [String!]
  year_not_in: [String!]
  year_lt: String
  year_lte: String
  year_gt: String
  year_gte: String
  year_contains: String
  year_not_contains: String
  year_starts_with: String
  year_not_starts_with: String
  year_ends_with: String
  year_not_ends_with: String
  subject_every: SubjectWhereInput
  subject_some: SubjectWhereInput
  subject_none: SubjectWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [StdWhereInput!]
  OR: [StdWhereInput!]
  NOT: [StdWhereInput!]
}

input StdWhereUniqueInput {
  id: ID
}

type StudentProfile {
  id: ID!
  name: String!
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  std: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
  profileId: Profile!
}

type StudentProfileConnection {
  pageInfo: PageInfo!
  edges: [StudentProfileEdge]!
  aggregate: AggregateStudentProfile!
}

input StudentProfileCreateInput {
  id: ID
  name: String!
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  std: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
  profileId: ProfileCreateOneWithoutStudentProfileInput!
}

input StudentProfileCreateManyWithoutProfileIdInput {
  create: [StudentProfileCreateWithoutProfileIdInput!]
  connect: [StudentProfileWhereUniqueInput!]
}

input StudentProfileCreateWithoutProfileIdInput {
  id: ID
  name: String!
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  std: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
}

type StudentProfileEdge {
  node: StudentProfile!
  cursor: String!
}

enum StudentProfileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  profiileType_ASC
  profiileType_DESC
  educationLevel_ASC
  educationLevel_DESC
  educationType_ASC
  educationType_DESC
  specialization_ASC
  specialization_DESC
  std_ASC
  std_DESC
  startedYear_ASC
  startedYear_DESC
  completedYear_ASC
  completedYear_DESC
  result_ASC
  result_DESC
  status_ASC
  status_DESC
  remark_ASC
  remark_DESC
}

type StudentProfilePreviousValues {
  id: ID!
  name: String!
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  std: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
}

input StudentProfileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  profiileType: String
  profiileType_not: String
  profiileType_in: [String!]
  profiileType_not_in: [String!]
  profiileType_lt: String
  profiileType_lte: String
  profiileType_gt: String
  profiileType_gte: String
  profiileType_contains: String
  profiileType_not_contains: String
  profiileType_starts_with: String
  profiileType_not_starts_with: String
  profiileType_ends_with: String
  profiileType_not_ends_with: String
  educationLevel: String
  educationLevel_not: String
  educationLevel_in: [String!]
  educationLevel_not_in: [String!]
  educationLevel_lt: String
  educationLevel_lte: String
  educationLevel_gt: String
  educationLevel_gte: String
  educationLevel_contains: String
  educationLevel_not_contains: String
  educationLevel_starts_with: String
  educationLevel_not_starts_with: String
  educationLevel_ends_with: String
  educationLevel_not_ends_with: String
  educationType: String
  educationType_not: String
  educationType_in: [String!]
  educationType_not_in: [String!]
  educationType_lt: String
  educationType_lte: String
  educationType_gt: String
  educationType_gte: String
  educationType_contains: String
  educationType_not_contains: String
  educationType_starts_with: String
  educationType_not_starts_with: String
  educationType_ends_with: String
  educationType_not_ends_with: String
  specialization: String
  specialization_not: String
  specialization_in: [String!]
  specialization_not_in: [String!]
  specialization_lt: String
  specialization_lte: String
  specialization_gt: String
  specialization_gte: String
  specialization_contains: String
  specialization_not_contains: String
  specialization_starts_with: String
  specialization_not_starts_with: String
  specialization_ends_with: String
  specialization_not_ends_with: String
  std: String
  std_not: String
  std_in: [String!]
  std_not_in: [String!]
  std_lt: String
  std_lte: String
  std_gt: String
  std_gte: String
  std_contains: String
  std_not_contains: String
  std_starts_with: String
  std_not_starts_with: String
  std_ends_with: String
  std_not_ends_with: String
  startedYear: DateTime
  startedYear_not: DateTime
  startedYear_in: [DateTime!]
  startedYear_not_in: [DateTime!]
  startedYear_lt: DateTime
  startedYear_lte: DateTime
  startedYear_gt: DateTime
  startedYear_gte: DateTime
  completedYear: DateTime
  completedYear_not: DateTime
  completedYear_in: [DateTime!]
  completedYear_not_in: [DateTime!]
  completedYear_lt: DateTime
  completedYear_lte: DateTime
  completedYear_gt: DateTime
  completedYear_gte: DateTime
  result: String
  result_not: String
  result_in: [String!]
  result_not_in: [String!]
  result_lt: String
  result_lte: String
  result_gt: String
  result_gte: String
  result_contains: String
  result_not_contains: String
  result_starts_with: String
  result_not_starts_with: String
  result_ends_with: String
  result_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  remark: String
  remark_not: String
  remark_in: [String!]
  remark_not_in: [String!]
  remark_lt: String
  remark_lte: String
  remark_gt: String
  remark_gte: String
  remark_contains: String
  remark_not_contains: String
  remark_starts_with: String
  remark_not_starts_with: String
  remark_ends_with: String
  remark_not_ends_with: String
  AND: [StudentProfileScalarWhereInput!]
  OR: [StudentProfileScalarWhereInput!]
  NOT: [StudentProfileScalarWhereInput!]
}

type StudentProfileSubscriptionPayload {
  mutation: MutationType!
  node: StudentProfile
  updatedFields: [String!]
  previousValues: StudentProfilePreviousValues
}

input StudentProfileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StudentProfileWhereInput
  AND: [StudentProfileSubscriptionWhereInput!]
  OR: [StudentProfileSubscriptionWhereInput!]
  NOT: [StudentProfileSubscriptionWhereInput!]
}

input StudentProfileUpdateInput {
  name: String
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  std: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
  profileId: ProfileUpdateOneRequiredWithoutStudentProfileInput
}

input StudentProfileUpdateManyDataInput {
  name: String
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  std: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
}

input StudentProfileUpdateManyMutationInput {
  name: String
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  std: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
}

input StudentProfileUpdateManyWithoutProfileIdInput {
  create: [StudentProfileCreateWithoutProfileIdInput!]
  delete: [StudentProfileWhereUniqueInput!]
  connect: [StudentProfileWhereUniqueInput!]
  set: [StudentProfileWhereUniqueInput!]
  disconnect: [StudentProfileWhereUniqueInput!]
  update: [StudentProfileUpdateWithWhereUniqueWithoutProfileIdInput!]
  upsert: [StudentProfileUpsertWithWhereUniqueWithoutProfileIdInput!]
  deleteMany: [StudentProfileScalarWhereInput!]
  updateMany: [StudentProfileUpdateManyWithWhereNestedInput!]
}

input StudentProfileUpdateManyWithWhereNestedInput {
  where: StudentProfileScalarWhereInput!
  data: StudentProfileUpdateManyDataInput!
}

input StudentProfileUpdateWithoutProfileIdDataInput {
  name: String
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  std: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
}

input StudentProfileUpdateWithWhereUniqueWithoutProfileIdInput {
  where: StudentProfileWhereUniqueInput!
  data: StudentProfileUpdateWithoutProfileIdDataInput!
}

input StudentProfileUpsertWithWhereUniqueWithoutProfileIdInput {
  where: StudentProfileWhereUniqueInput!
  update: StudentProfileUpdateWithoutProfileIdDataInput!
  create: StudentProfileCreateWithoutProfileIdInput!
}

input StudentProfileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  profiileType: String
  profiileType_not: String
  profiileType_in: [String!]
  profiileType_not_in: [String!]
  profiileType_lt: String
  profiileType_lte: String
  profiileType_gt: String
  profiileType_gte: String
  profiileType_contains: String
  profiileType_not_contains: String
  profiileType_starts_with: String
  profiileType_not_starts_with: String
  profiileType_ends_with: String
  profiileType_not_ends_with: String
  educationLevel: String
  educationLevel_not: String
  educationLevel_in: [String!]
  educationLevel_not_in: [String!]
  educationLevel_lt: String
  educationLevel_lte: String
  educationLevel_gt: String
  educationLevel_gte: String
  educationLevel_contains: String
  educationLevel_not_contains: String
  educationLevel_starts_with: String
  educationLevel_not_starts_with: String
  educationLevel_ends_with: String
  educationLevel_not_ends_with: String
  educationType: String
  educationType_not: String
  educationType_in: [String!]
  educationType_not_in: [String!]
  educationType_lt: String
  educationType_lte: String
  educationType_gt: String
  educationType_gte: String
  educationType_contains: String
  educationType_not_contains: String
  educationType_starts_with: String
  educationType_not_starts_with: String
  educationType_ends_with: String
  educationType_not_ends_with: String
  specialization: String
  specialization_not: String
  specialization_in: [String!]
  specialization_not_in: [String!]
  specialization_lt: String
  specialization_lte: String
  specialization_gt: String
  specialization_gte: String
  specialization_contains: String
  specialization_not_contains: String
  specialization_starts_with: String
  specialization_not_starts_with: String
  specialization_ends_with: String
  specialization_not_ends_with: String
  std: String
  std_not: String
  std_in: [String!]
  std_not_in: [String!]
  std_lt: String
  std_lte: String
  std_gt: String
  std_gte: String
  std_contains: String
  std_not_contains: String
  std_starts_with: String
  std_not_starts_with: String
  std_ends_with: String
  std_not_ends_with: String
  startedYear: DateTime
  startedYear_not: DateTime
  startedYear_in: [DateTime!]
  startedYear_not_in: [DateTime!]
  startedYear_lt: DateTime
  startedYear_lte: DateTime
  startedYear_gt: DateTime
  startedYear_gte: DateTime
  completedYear: DateTime
  completedYear_not: DateTime
  completedYear_in: [DateTime!]
  completedYear_not_in: [DateTime!]
  completedYear_lt: DateTime
  completedYear_lte: DateTime
  completedYear_gt: DateTime
  completedYear_gte: DateTime
  result: String
  result_not: String
  result_in: [String!]
  result_not_in: [String!]
  result_lt: String
  result_lte: String
  result_gt: String
  result_gte: String
  result_contains: String
  result_not_contains: String
  result_starts_with: String
  result_not_starts_with: String
  result_ends_with: String
  result_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  remark: String
  remark_not: String
  remark_in: [String!]
  remark_not_in: [String!]
  remark_lt: String
  remark_lte: String
  remark_gt: String
  remark_gte: String
  remark_contains: String
  remark_not_contains: String
  remark_starts_with: String
  remark_not_starts_with: String
  remark_ends_with: String
  remark_not_ends_with: String
  profileId: ProfileWhereInput
  AND: [StudentProfileWhereInput!]
  OR: [StudentProfileWhereInput!]
  NOT: [StudentProfileWhereInput!]
}

input StudentProfileWhereUniqueInput {
  id: ID
}

type SubGroup {
  id: ID!
  name: String!
  description: String
  groupid: Group!
  members(where: SubGroupMemberWhereInput, orderBy: SubGroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubGroupMember!]
  subgroupRoles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type SubGroupConnection {
  pageInfo: PageInfo!
  edges: [SubGroupEdge]!
  aggregate: AggregateSubGroup!
}

input SubGroupCreateInput {
  id: ID
  name: String!
  description: String
  groupid: GroupCreateOneWithoutSubgroupsInput!
  members: SubGroupMemberCreateManyWithoutMemberInput
  subgroupRoles: RoleCreateManyWithoutSubgroupInput
  subjects: SubjectCreateManyWithoutSubgroupInput
}

input SubGroupCreateManyWithoutGroupidInput {
  create: [SubGroupCreateWithoutGroupidInput!]
  connect: [SubGroupWhereUniqueInput!]
}

input SubGroupCreateOneWithoutMembersInput {
  create: SubGroupCreateWithoutMembersInput
  connect: SubGroupWhereUniqueInput
}

input SubGroupCreateOneWithoutSubgroupRolesInput {
  create: SubGroupCreateWithoutSubgroupRolesInput
  connect: SubGroupWhereUniqueInput
}

input SubGroupCreateOneWithoutSubjectsInput {
  create: SubGroupCreateWithoutSubjectsInput
  connect: SubGroupWhereUniqueInput
}

input SubGroupCreateWithoutGroupidInput {
  id: ID
  name: String!
  description: String
  members: SubGroupMemberCreateManyWithoutMemberInput
  subgroupRoles: RoleCreateManyWithoutSubgroupInput
  subjects: SubjectCreateManyWithoutSubgroupInput
}

input SubGroupCreateWithoutMembersInput {
  id: ID
  name: String!
  description: String
  groupid: GroupCreateOneWithoutSubgroupsInput!
  subgroupRoles: RoleCreateManyWithoutSubgroupInput
  subjects: SubjectCreateManyWithoutSubgroupInput
}

input SubGroupCreateWithoutSubgroupRolesInput {
  id: ID
  name: String!
  description: String
  groupid: GroupCreateOneWithoutSubgroupsInput!
  members: SubGroupMemberCreateManyWithoutMemberInput
  subjects: SubjectCreateManyWithoutSubgroupInput
}

input SubGroupCreateWithoutSubjectsInput {
  id: ID
  name: String!
  description: String
  groupid: GroupCreateOneWithoutSubgroupsInput!
  members: SubGroupMemberCreateManyWithoutMemberInput
  subgroupRoles: RoleCreateManyWithoutSubgroupInput
}

type SubGroupEdge {
  node: SubGroup!
  cursor: String!
}

type SubGroupMember {
  id: ID!
  userid: User!
  member: SubGroup!
  status: MemberStatus
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type SubGroupMemberConnection {
  pageInfo: PageInfo!
  edges: [SubGroupMemberEdge]!
  aggregate: AggregateSubGroupMember!
}

input SubGroupMemberCreateInput {
  id: ID
  userid: UserCreateOneWithoutSubgroupmembersInput!
  member: SubGroupCreateOneWithoutMembersInput!
  status: MemberStatus
  description: String
}

input SubGroupMemberCreateManyWithoutMemberInput {
  create: [SubGroupMemberCreateWithoutMemberInput!]
  connect: [SubGroupMemberWhereUniqueInput!]
}

input SubGroupMemberCreateManyWithoutUseridInput {
  create: [SubGroupMemberCreateWithoutUseridInput!]
  connect: [SubGroupMemberWhereUniqueInput!]
}

input SubGroupMemberCreateWithoutMemberInput {
  id: ID
  userid: UserCreateOneWithoutSubgroupmembersInput!
  status: MemberStatus
  description: String
}

input SubGroupMemberCreateWithoutUseridInput {
  id: ID
  member: SubGroupCreateOneWithoutMembersInput!
  status: MemberStatus
  description: String
}

type SubGroupMemberEdge {
  node: SubGroupMember!
  cursor: String!
}

enum SubGroupMemberOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SubGroupMemberPreviousValues {
  id: ID!
  status: MemberStatus
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input SubGroupMemberScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: MemberStatus
  status_not: MemberStatus
  status_in: [MemberStatus!]
  status_not_in: [MemberStatus!]
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [SubGroupMemberScalarWhereInput!]
  OR: [SubGroupMemberScalarWhereInput!]
  NOT: [SubGroupMemberScalarWhereInput!]
}

type SubGroupMemberSubscriptionPayload {
  mutation: MutationType!
  node: SubGroupMember
  updatedFields: [String!]
  previousValues: SubGroupMemberPreviousValues
}

input SubGroupMemberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SubGroupMemberWhereInput
  AND: [SubGroupMemberSubscriptionWhereInput!]
  OR: [SubGroupMemberSubscriptionWhereInput!]
  NOT: [SubGroupMemberSubscriptionWhereInput!]
}

input SubGroupMemberUpdateInput {
  userid: UserUpdateOneRequiredWithoutSubgroupmembersInput
  member: SubGroupUpdateOneRequiredWithoutMembersInput
  status: MemberStatus
  description: String
}

input SubGroupMemberUpdateManyDataInput {
  status: MemberStatus
  description: String
}

input SubGroupMemberUpdateManyMutationInput {
  status: MemberStatus
  description: String
}

input SubGroupMemberUpdateManyWithoutMemberInput {
  create: [SubGroupMemberCreateWithoutMemberInput!]
  delete: [SubGroupMemberWhereUniqueInput!]
  connect: [SubGroupMemberWhereUniqueInput!]
  set: [SubGroupMemberWhereUniqueInput!]
  disconnect: [SubGroupMemberWhereUniqueInput!]
  update: [SubGroupMemberUpdateWithWhereUniqueWithoutMemberInput!]
  upsert: [SubGroupMemberUpsertWithWhereUniqueWithoutMemberInput!]
  deleteMany: [SubGroupMemberScalarWhereInput!]
  updateMany: [SubGroupMemberUpdateManyWithWhereNestedInput!]
}

input SubGroupMemberUpdateManyWithoutUseridInput {
  create: [SubGroupMemberCreateWithoutUseridInput!]
  delete: [SubGroupMemberWhereUniqueInput!]
  connect: [SubGroupMemberWhereUniqueInput!]
  set: [SubGroupMemberWhereUniqueInput!]
  disconnect: [SubGroupMemberWhereUniqueInput!]
  update: [SubGroupMemberUpdateWithWhereUniqueWithoutUseridInput!]
  upsert: [SubGroupMemberUpsertWithWhereUniqueWithoutUseridInput!]
  deleteMany: [SubGroupMemberScalarWhereInput!]
  updateMany: [SubGroupMemberUpdateManyWithWhereNestedInput!]
}

input SubGroupMemberUpdateManyWithWhereNestedInput {
  where: SubGroupMemberScalarWhereInput!
  data: SubGroupMemberUpdateManyDataInput!
}

input SubGroupMemberUpdateWithoutMemberDataInput {
  userid: UserUpdateOneRequiredWithoutSubgroupmembersInput
  status: MemberStatus
  description: String
}

input SubGroupMemberUpdateWithoutUseridDataInput {
  member: SubGroupUpdateOneRequiredWithoutMembersInput
  status: MemberStatus
  description: String
}

input SubGroupMemberUpdateWithWhereUniqueWithoutMemberInput {
  where: SubGroupMemberWhereUniqueInput!
  data: SubGroupMemberUpdateWithoutMemberDataInput!
}

input SubGroupMemberUpdateWithWhereUniqueWithoutUseridInput {
  where: SubGroupMemberWhereUniqueInput!
  data: SubGroupMemberUpdateWithoutUseridDataInput!
}

input SubGroupMemberUpsertWithWhereUniqueWithoutMemberInput {
  where: SubGroupMemberWhereUniqueInput!
  update: SubGroupMemberUpdateWithoutMemberDataInput!
  create: SubGroupMemberCreateWithoutMemberInput!
}

input SubGroupMemberUpsertWithWhereUniqueWithoutUseridInput {
  where: SubGroupMemberWhereUniqueInput!
  update: SubGroupMemberUpdateWithoutUseridDataInput!
  create: SubGroupMemberCreateWithoutUseridInput!
}

input SubGroupMemberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userid: UserWhereInput
  member: SubGroupWhereInput
  status: MemberStatus
  status_not: MemberStatus
  status_in: [MemberStatus!]
  status_not_in: [MemberStatus!]
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [SubGroupMemberWhereInput!]
  OR: [SubGroupMemberWhereInput!]
  NOT: [SubGroupMemberWhereInput!]
}

input SubGroupMemberWhereUniqueInput {
  id: ID
}

enum SubGroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SubGroupPreviousValues {
  id: ID!
  name: String!
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input SubGroupScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [SubGroupScalarWhereInput!]
  OR: [SubGroupScalarWhereInput!]
  NOT: [SubGroupScalarWhereInput!]
}

type SubGroupSubscriptionPayload {
  mutation: MutationType!
  node: SubGroup
  updatedFields: [String!]
  previousValues: SubGroupPreviousValues
}

input SubGroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SubGroupWhereInput
  AND: [SubGroupSubscriptionWhereInput!]
  OR: [SubGroupSubscriptionWhereInput!]
  NOT: [SubGroupSubscriptionWhereInput!]
}

input SubGroupUpdateInput {
  name: String
  description: String
  groupid: GroupUpdateOneRequiredWithoutSubgroupsInput
  members: SubGroupMemberUpdateManyWithoutMemberInput
  subgroupRoles: RoleUpdateManyWithoutSubgroupInput
  subjects: SubjectUpdateManyWithoutSubgroupInput
}

input SubGroupUpdateManyDataInput {
  name: String
  description: String
}

input SubGroupUpdateManyMutationInput {
  name: String
  description: String
}

input SubGroupUpdateManyWithoutGroupidInput {
  create: [SubGroupCreateWithoutGroupidInput!]
  delete: [SubGroupWhereUniqueInput!]
  connect: [SubGroupWhereUniqueInput!]
  set: [SubGroupWhereUniqueInput!]
  disconnect: [SubGroupWhereUniqueInput!]
  update: [SubGroupUpdateWithWhereUniqueWithoutGroupidInput!]
  upsert: [SubGroupUpsertWithWhereUniqueWithoutGroupidInput!]
  deleteMany: [SubGroupScalarWhereInput!]
  updateMany: [SubGroupUpdateManyWithWhereNestedInput!]
}

input SubGroupUpdateManyWithWhereNestedInput {
  where: SubGroupScalarWhereInput!
  data: SubGroupUpdateManyDataInput!
}

input SubGroupUpdateOneRequiredWithoutMembersInput {
  create: SubGroupCreateWithoutMembersInput
  update: SubGroupUpdateWithoutMembersDataInput
  upsert: SubGroupUpsertWithoutMembersInput
  connect: SubGroupWhereUniqueInput
}

input SubGroupUpdateOneWithoutSubgroupRolesInput {
  create: SubGroupCreateWithoutSubgroupRolesInput
  update: SubGroupUpdateWithoutSubgroupRolesDataInput
  upsert: SubGroupUpsertWithoutSubgroupRolesInput
  delete: Boolean
  disconnect: Boolean
  connect: SubGroupWhereUniqueInput
}

input SubGroupUpdateOneWithoutSubjectsInput {
  create: SubGroupCreateWithoutSubjectsInput
  update: SubGroupUpdateWithoutSubjectsDataInput
  upsert: SubGroupUpsertWithoutSubjectsInput
  delete: Boolean
  disconnect: Boolean
  connect: SubGroupWhereUniqueInput
}

input SubGroupUpdateWithoutGroupidDataInput {
  name: String
  description: String
  members: SubGroupMemberUpdateManyWithoutMemberInput
  subgroupRoles: RoleUpdateManyWithoutSubgroupInput
  subjects: SubjectUpdateManyWithoutSubgroupInput
}

input SubGroupUpdateWithoutMembersDataInput {
  name: String
  description: String
  groupid: GroupUpdateOneRequiredWithoutSubgroupsInput
  subgroupRoles: RoleUpdateManyWithoutSubgroupInput
  subjects: SubjectUpdateManyWithoutSubgroupInput
}

input SubGroupUpdateWithoutSubgroupRolesDataInput {
  name: String
  description: String
  groupid: GroupUpdateOneRequiredWithoutSubgroupsInput
  members: SubGroupMemberUpdateManyWithoutMemberInput
  subjects: SubjectUpdateManyWithoutSubgroupInput
}

input SubGroupUpdateWithoutSubjectsDataInput {
  name: String
  description: String
  groupid: GroupUpdateOneRequiredWithoutSubgroupsInput
  members: SubGroupMemberUpdateManyWithoutMemberInput
  subgroupRoles: RoleUpdateManyWithoutSubgroupInput
}

input SubGroupUpdateWithWhereUniqueWithoutGroupidInput {
  where: SubGroupWhereUniqueInput!
  data: SubGroupUpdateWithoutGroupidDataInput!
}

input SubGroupUpsertWithoutMembersInput {
  update: SubGroupUpdateWithoutMembersDataInput!
  create: SubGroupCreateWithoutMembersInput!
}

input SubGroupUpsertWithoutSubgroupRolesInput {
  update: SubGroupUpdateWithoutSubgroupRolesDataInput!
  create: SubGroupCreateWithoutSubgroupRolesInput!
}

input SubGroupUpsertWithoutSubjectsInput {
  update: SubGroupUpdateWithoutSubjectsDataInput!
  create: SubGroupCreateWithoutSubjectsInput!
}

input SubGroupUpsertWithWhereUniqueWithoutGroupidInput {
  where: SubGroupWhereUniqueInput!
  update: SubGroupUpdateWithoutGroupidDataInput!
  create: SubGroupCreateWithoutGroupidInput!
}

input SubGroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  groupid: GroupWhereInput
  members_every: SubGroupMemberWhereInput
  members_some: SubGroupMemberWhereInput
  members_none: SubGroupMemberWhereInput
  subgroupRoles_every: RoleWhereInput
  subgroupRoles_some: RoleWhereInput
  subgroupRoles_none: RoleWhereInput
  subjects_every: SubjectWhereInput
  subjects_some: SubjectWhereInput
  subjects_none: SubjectWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [SubGroupWhereInput!]
  OR: [SubGroupWhereInput!]
  NOT: [SubGroupWhereInput!]
}

input SubGroupWhereUniqueInput {
  id: ID
}

type Subject {
  id: ID!
  name: String!
  picture: String
  medium: Medium
  std: Std!
  board: String
  category: String
  group: Group
  subgroup: SubGroup
  updatedAt: DateTime!
  createdAt: DateTime!
  units(where: UnitWhereInput, orderBy: UnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Unit!]
  topic(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  contents(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
  createdBy: User
  updateBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  quizes(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz!]
}

type SubjectConnection {
  pageInfo: PageInfo!
  edges: [SubjectEdge]!
  aggregate: AggregateSubject!
}

input SubjectCreateInput {
  id: ID
  name: String!
  picture: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectInput!
  board: String
  category: String
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  createdBy: UserCreateOneWithoutSubjectByMeInput
  updateBy: UserCreateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionCreateManyWithoutSubjectInput
  quizes: QuizCreateManyWithoutSubjectInput
}

input SubjectCreateManyInput {
  create: [SubjectCreateInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateManyWithoutCreatedByInput {
  create: [SubjectCreateWithoutCreatedByInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateManyWithoutGroupInput {
  create: [SubjectCreateWithoutGroupInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateManyWithoutMediumInput {
  create: [SubjectCreateWithoutMediumInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateManyWithoutStdInput {
  create: [SubjectCreateWithoutStdInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateManyWithoutSubgroupInput {
  create: [SubjectCreateWithoutSubgroupInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateManyWithoutUpdateByInput {
  create: [SubjectCreateWithoutUpdateByInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateOneWithoutContentsInput {
  create: SubjectCreateWithoutContentsInput
  connect: SubjectWhereUniqueInput
}

input SubjectCreateOneWithoutQuestionsInput {
  create: SubjectCreateWithoutQuestionsInput
  connect: SubjectWhereUniqueInput
}

input SubjectCreateOneWithoutQuizesInput {
  create: SubjectCreateWithoutQuizesInput
  connect: SubjectWhereUniqueInput
}

input SubjectCreateOneWithoutTopicInput {
  create: SubjectCreateWithoutTopicInput
  connect: SubjectWhereUniqueInput
}

input SubjectCreateOneWithoutUnitsInput {
  create: SubjectCreateWithoutUnitsInput
  connect: SubjectWhereUniqueInput
}

input SubjectCreateWithoutContentsInput {
  id: ID
  name: String!
  picture: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectInput!
  board: String
  category: String
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  createdBy: UserCreateOneWithoutSubjectByMeInput
  updateBy: UserCreateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionCreateManyWithoutSubjectInput
  quizes: QuizCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutCreatedByInput {
  id: ID
  name: String!
  picture: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectInput!
  board: String
  category: String
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  updateBy: UserCreateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionCreateManyWithoutSubjectInput
  quizes: QuizCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutGroupInput {
  id: ID
  name: String!
  picture: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectInput!
  board: String
  category: String
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  createdBy: UserCreateOneWithoutSubjectByMeInput
  updateBy: UserCreateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionCreateManyWithoutSubjectInput
  quizes: QuizCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutMediumInput {
  id: ID
  name: String!
  picture: String
  std: StdCreateOneWithoutSubjectInput!
  board: String
  category: String
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  createdBy: UserCreateOneWithoutSubjectByMeInput
  updateBy: UserCreateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionCreateManyWithoutSubjectInput
  quizes: QuizCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutQuestionsInput {
  id: ID
  name: String!
  picture: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectInput!
  board: String
  category: String
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  createdBy: UserCreateOneWithoutSubjectByMeInput
  updateBy: UserCreateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  quizes: QuizCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutQuizesInput {
  id: ID
  name: String!
  picture: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectInput!
  board: String
  category: String
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  createdBy: UserCreateOneWithoutSubjectByMeInput
  updateBy: UserCreateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutStdInput {
  id: ID
  name: String!
  picture: String
  medium: MediumCreateOneWithoutSubjectsInput
  board: String
  category: String
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  createdBy: UserCreateOneWithoutSubjectByMeInput
  updateBy: UserCreateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionCreateManyWithoutSubjectInput
  quizes: QuizCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutSubgroupInput {
  id: ID
  name: String!
  picture: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectInput!
  board: String
  category: String
  group: GroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  createdBy: UserCreateOneWithoutSubjectByMeInput
  updateBy: UserCreateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionCreateManyWithoutSubjectInput
  quizes: QuizCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutTopicInput {
  id: ID
  name: String!
  picture: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectInput!
  board: String
  category: String
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  createdBy: UserCreateOneWithoutSubjectByMeInput
  updateBy: UserCreateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionCreateManyWithoutSubjectInput
  quizes: QuizCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutUnitsInput {
  id: ID
  name: String!
  picture: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectInput!
  board: String
  category: String
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  createdBy: UserCreateOneWithoutSubjectByMeInput
  updateBy: UserCreateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionCreateManyWithoutSubjectInput
  quizes: QuizCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutUpdateByInput {
  id: ID
  name: String!
  picture: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectInput!
  board: String
  category: String
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  createdBy: UserCreateOneWithoutSubjectByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionCreateManyWithoutSubjectInput
  quizes: QuizCreateManyWithoutSubjectInput
}

type SubjectEdge {
  node: Subject!
  cursor: String!
}

enum SubjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  picture_ASC
  picture_DESC
  board_ASC
  board_DESC
  category_ASC
  category_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  plantDate_ASC
  plantDate_DESC
  isPublished_ASC
  isPublished_DESC
  state_ASC
  state_DESC
  status_ASC
  status_DESC
  available_ASC
  available_DESC
  description_ASC
  description_DESC
}

type SubjectPreviousValues {
  id: ID!
  name: String!
  picture: String
  board: String
  category: String
  updatedAt: DateTime!
  createdAt: DateTime!
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
}

input SubjectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  board: String
  board_not: String
  board_in: [String!]
  board_not_in: [String!]
  board_lt: String
  board_lte: String
  board_gt: String
  board_gte: String
  board_contains: String
  board_not_contains: String
  board_starts_with: String
  board_not_starts_with: String
  board_ends_with: String
  board_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  plantDate: DateTime
  plantDate_not: DateTime
  plantDate_in: [DateTime!]
  plantDate_not_in: [DateTime!]
  plantDate_lt: DateTime
  plantDate_lte: DateTime
  plantDate_gt: DateTime
  plantDate_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  available: String
  available_not: String
  available_in: [String!]
  available_not_in: [String!]
  available_lt: String
  available_lte: String
  available_gt: String
  available_gte: String
  available_contains: String
  available_not_contains: String
  available_starts_with: String
  available_not_starts_with: String
  available_ends_with: String
  available_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [SubjectScalarWhereInput!]
  OR: [SubjectScalarWhereInput!]
  NOT: [SubjectScalarWhereInput!]
}

type SubjectSubscription {
  id: ID!
  subsType: String
  mySubjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  userid: User!
  subscribedAs: Role!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type SubjectSubscriptionConnection {
  pageInfo: PageInfo!
  edges: [SubjectSubscriptionEdge]!
  aggregate: AggregateSubjectSubscription!
}

input SubjectSubscriptionCreateInput {
  id: ID
  subsType: String
  mySubjects: SubjectCreateManyInput
  userid: UserCreateOneWithoutSubjectSubscriptionInput!
  subscribedAs: RoleCreateOneWithoutSubjectSubscriptionsInput!
}

input SubjectSubscriptionCreateManyWithoutSubscribedAsInput {
  create: [SubjectSubscriptionCreateWithoutSubscribedAsInput!]
  connect: [SubjectSubscriptionWhereUniqueInput!]
}

input SubjectSubscriptionCreateManyWithoutUseridInput {
  create: [SubjectSubscriptionCreateWithoutUseridInput!]
  connect: [SubjectSubscriptionWhereUniqueInput!]
}

input SubjectSubscriptionCreateWithoutSubscribedAsInput {
  id: ID
  subsType: String
  mySubjects: SubjectCreateManyInput
  userid: UserCreateOneWithoutSubjectSubscriptionInput!
}

input SubjectSubscriptionCreateWithoutUseridInput {
  id: ID
  subsType: String
  mySubjects: SubjectCreateManyInput
  subscribedAs: RoleCreateOneWithoutSubjectSubscriptionsInput!
}

type SubjectSubscriptionEdge {
  node: SubjectSubscription!
  cursor: String!
}

enum SubjectSubscriptionOrderByInput {
  id_ASC
  id_DESC
  subsType_ASC
  subsType_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SubjectSubscriptionPayload {
  mutation: MutationType!
  node: Subject
  updatedFields: [String!]
  previousValues: SubjectPreviousValues
}

type SubjectSubscriptionPreviousValues {
  id: ID!
  subsType: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input SubjectSubscriptionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  subsType: String
  subsType_not: String
  subsType_in: [String!]
  subsType_not_in: [String!]
  subsType_lt: String
  subsType_lte: String
  subsType_gt: String
  subsType_gte: String
  subsType_contains: String
  subsType_not_contains: String
  subsType_starts_with: String
  subsType_not_starts_with: String
  subsType_ends_with: String
  subsType_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [SubjectSubscriptionScalarWhereInput!]
  OR: [SubjectSubscriptionScalarWhereInput!]
  NOT: [SubjectSubscriptionScalarWhereInput!]
}

type SubjectSubscriptionSubscriptionPayload {
  mutation: MutationType!
  node: SubjectSubscription
  updatedFields: [String!]
  previousValues: SubjectSubscriptionPreviousValues
}

input SubjectSubscriptionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SubjectSubscriptionWhereInput
  AND: [SubjectSubscriptionSubscriptionWhereInput!]
  OR: [SubjectSubscriptionSubscriptionWhereInput!]
  NOT: [SubjectSubscriptionSubscriptionWhereInput!]
}

input SubjectSubscriptionUpdateInput {
  subsType: String
  mySubjects: SubjectUpdateManyInput
  userid: UserUpdateOneRequiredWithoutSubjectSubscriptionInput
  subscribedAs: RoleUpdateOneRequiredWithoutSubjectSubscriptionsInput
}

input SubjectSubscriptionUpdateManyDataInput {
  subsType: String
}

input SubjectSubscriptionUpdateManyMutationInput {
  subsType: String
}

input SubjectSubscriptionUpdateManyWithoutSubscribedAsInput {
  create: [SubjectSubscriptionCreateWithoutSubscribedAsInput!]
  delete: [SubjectSubscriptionWhereUniqueInput!]
  connect: [SubjectSubscriptionWhereUniqueInput!]
  set: [SubjectSubscriptionWhereUniqueInput!]
  disconnect: [SubjectSubscriptionWhereUniqueInput!]
  update: [SubjectSubscriptionUpdateWithWhereUniqueWithoutSubscribedAsInput!]
  upsert: [SubjectSubscriptionUpsertWithWhereUniqueWithoutSubscribedAsInput!]
  deleteMany: [SubjectSubscriptionScalarWhereInput!]
  updateMany: [SubjectSubscriptionUpdateManyWithWhereNestedInput!]
}

input SubjectSubscriptionUpdateManyWithoutUseridInput {
  create: [SubjectSubscriptionCreateWithoutUseridInput!]
  delete: [SubjectSubscriptionWhereUniqueInput!]
  connect: [SubjectSubscriptionWhereUniqueInput!]
  set: [SubjectSubscriptionWhereUniqueInput!]
  disconnect: [SubjectSubscriptionWhereUniqueInput!]
  update: [SubjectSubscriptionUpdateWithWhereUniqueWithoutUseridInput!]
  upsert: [SubjectSubscriptionUpsertWithWhereUniqueWithoutUseridInput!]
  deleteMany: [SubjectSubscriptionScalarWhereInput!]
  updateMany: [SubjectSubscriptionUpdateManyWithWhereNestedInput!]
}

input SubjectSubscriptionUpdateManyWithWhereNestedInput {
  where: SubjectSubscriptionScalarWhereInput!
  data: SubjectSubscriptionUpdateManyDataInput!
}

input SubjectSubscriptionUpdateWithoutSubscribedAsDataInput {
  subsType: String
  mySubjects: SubjectUpdateManyInput
  userid: UserUpdateOneRequiredWithoutSubjectSubscriptionInput
}

input SubjectSubscriptionUpdateWithoutUseridDataInput {
  subsType: String
  mySubjects: SubjectUpdateManyInput
  subscribedAs: RoleUpdateOneRequiredWithoutSubjectSubscriptionsInput
}

input SubjectSubscriptionUpdateWithWhereUniqueWithoutSubscribedAsInput {
  where: SubjectSubscriptionWhereUniqueInput!
  data: SubjectSubscriptionUpdateWithoutSubscribedAsDataInput!
}

input SubjectSubscriptionUpdateWithWhereUniqueWithoutUseridInput {
  where: SubjectSubscriptionWhereUniqueInput!
  data: SubjectSubscriptionUpdateWithoutUseridDataInput!
}

input SubjectSubscriptionUpsertWithWhereUniqueWithoutSubscribedAsInput {
  where: SubjectSubscriptionWhereUniqueInput!
  update: SubjectSubscriptionUpdateWithoutSubscribedAsDataInput!
  create: SubjectSubscriptionCreateWithoutSubscribedAsInput!
}

input SubjectSubscriptionUpsertWithWhereUniqueWithoutUseridInput {
  where: SubjectSubscriptionWhereUniqueInput!
  update: SubjectSubscriptionUpdateWithoutUseridDataInput!
  create: SubjectSubscriptionCreateWithoutUseridInput!
}

input SubjectSubscriptionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  subsType: String
  subsType_not: String
  subsType_in: [String!]
  subsType_not_in: [String!]
  subsType_lt: String
  subsType_lte: String
  subsType_gt: String
  subsType_gte: String
  subsType_contains: String
  subsType_not_contains: String
  subsType_starts_with: String
  subsType_not_starts_with: String
  subsType_ends_with: String
  subsType_not_ends_with: String
  mySubjects_every: SubjectWhereInput
  mySubjects_some: SubjectWhereInput
  mySubjects_none: SubjectWhereInput
  userid: UserWhereInput
  subscribedAs: RoleWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [SubjectSubscriptionWhereInput!]
  OR: [SubjectSubscriptionWhereInput!]
  NOT: [SubjectSubscriptionWhereInput!]
}

input SubjectSubscriptionWhereUniqueInput {
  id: ID
}

input SubjectUpdateDataInput {
  name: String
  picture: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectInput
  board: String
  category: String
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  createdBy: UserUpdateOneWithoutSubjectByMeInput
  updateBy: UserUpdateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionUpdateManyWithoutSubjectInput
  quizes: QuizUpdateManyWithoutSubjectInput
}

input SubjectUpdateInput {
  name: String
  picture: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectInput
  board: String
  category: String
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  createdBy: UserUpdateOneWithoutSubjectByMeInput
  updateBy: UserUpdateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionUpdateManyWithoutSubjectInput
  quizes: QuizUpdateManyWithoutSubjectInput
}

input SubjectUpdateManyDataInput {
  name: String
  picture: String
  board: String
  category: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
}

input SubjectUpdateManyInput {
  create: [SubjectCreateInput!]
  update: [SubjectUpdateWithWhereUniqueNestedInput!]
  upsert: [SubjectUpsertWithWhereUniqueNestedInput!]
  delete: [SubjectWhereUniqueInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  deleteMany: [SubjectScalarWhereInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
}

input SubjectUpdateManyMutationInput {
  name: String
  picture: String
  board: String
  category: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
}

input SubjectUpdateManyWithoutCreatedByInput {
  create: [SubjectCreateWithoutCreatedByInput!]
  delete: [SubjectWhereUniqueInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [SubjectScalarWhereInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
}

input SubjectUpdateManyWithoutGroupInput {
  create: [SubjectCreateWithoutGroupInput!]
  delete: [SubjectWhereUniqueInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutGroupInput!]
  deleteMany: [SubjectScalarWhereInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
}

input SubjectUpdateManyWithoutMediumInput {
  create: [SubjectCreateWithoutMediumInput!]
  delete: [SubjectWhereUniqueInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutMediumInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutMediumInput!]
  deleteMany: [SubjectScalarWhereInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
}

input SubjectUpdateManyWithoutStdInput {
  create: [SubjectCreateWithoutStdInput!]
  delete: [SubjectWhereUniqueInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutStdInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutStdInput!]
  deleteMany: [SubjectScalarWhereInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
}

input SubjectUpdateManyWithoutSubgroupInput {
  create: [SubjectCreateWithoutSubgroupInput!]
  delete: [SubjectWhereUniqueInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutSubgroupInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutSubgroupInput!]
  deleteMany: [SubjectScalarWhereInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
}

input SubjectUpdateManyWithoutUpdateByInput {
  create: [SubjectCreateWithoutUpdateByInput!]
  delete: [SubjectWhereUniqueInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutUpdateByInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutUpdateByInput!]
  deleteMany: [SubjectScalarWhereInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
}

input SubjectUpdateManyWithWhereNestedInput {
  where: SubjectScalarWhereInput!
  data: SubjectUpdateManyDataInput!
}

input SubjectUpdateOneRequiredWithoutContentsInput {
  create: SubjectCreateWithoutContentsInput
  update: SubjectUpdateWithoutContentsDataInput
  upsert: SubjectUpsertWithoutContentsInput
  connect: SubjectWhereUniqueInput
}

input SubjectUpdateOneRequiredWithoutUnitsInput {
  create: SubjectCreateWithoutUnitsInput
  update: SubjectUpdateWithoutUnitsDataInput
  upsert: SubjectUpsertWithoutUnitsInput
  connect: SubjectWhereUniqueInput
}

input SubjectUpdateOneWithoutQuestionsInput {
  create: SubjectCreateWithoutQuestionsInput
  update: SubjectUpdateWithoutQuestionsDataInput
  upsert: SubjectUpsertWithoutQuestionsInput
  delete: Boolean
  disconnect: Boolean
  connect: SubjectWhereUniqueInput
}

input SubjectUpdateOneWithoutQuizesInput {
  create: SubjectCreateWithoutQuizesInput
  update: SubjectUpdateWithoutQuizesDataInput
  upsert: SubjectUpsertWithoutQuizesInput
  delete: Boolean
  disconnect: Boolean
  connect: SubjectWhereUniqueInput
}

input SubjectUpdateOneWithoutTopicInput {
  create: SubjectCreateWithoutTopicInput
  update: SubjectUpdateWithoutTopicDataInput
  upsert: SubjectUpsertWithoutTopicInput
  delete: Boolean
  disconnect: Boolean
  connect: SubjectWhereUniqueInput
}

input SubjectUpdateWithoutContentsDataInput {
  name: String
  picture: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectInput
  board: String
  category: String
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  createdBy: UserUpdateOneWithoutSubjectByMeInput
  updateBy: UserUpdateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionUpdateManyWithoutSubjectInput
  quizes: QuizUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutCreatedByDataInput {
  name: String
  picture: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectInput
  board: String
  category: String
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  updateBy: UserUpdateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionUpdateManyWithoutSubjectInput
  quizes: QuizUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutGroupDataInput {
  name: String
  picture: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectInput
  board: String
  category: String
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  createdBy: UserUpdateOneWithoutSubjectByMeInput
  updateBy: UserUpdateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionUpdateManyWithoutSubjectInput
  quizes: QuizUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutMediumDataInput {
  name: String
  picture: String
  std: StdUpdateOneRequiredWithoutSubjectInput
  board: String
  category: String
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  createdBy: UserUpdateOneWithoutSubjectByMeInput
  updateBy: UserUpdateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionUpdateManyWithoutSubjectInput
  quizes: QuizUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutQuestionsDataInput {
  name: String
  picture: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectInput
  board: String
  category: String
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  createdBy: UserUpdateOneWithoutSubjectByMeInput
  updateBy: UserUpdateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  quizes: QuizUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutQuizesDataInput {
  name: String
  picture: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectInput
  board: String
  category: String
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  createdBy: UserUpdateOneWithoutSubjectByMeInput
  updateBy: UserUpdateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutStdDataInput {
  name: String
  picture: String
  medium: MediumUpdateOneWithoutSubjectsInput
  board: String
  category: String
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  createdBy: UserUpdateOneWithoutSubjectByMeInput
  updateBy: UserUpdateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionUpdateManyWithoutSubjectInput
  quizes: QuizUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutSubgroupDataInput {
  name: String
  picture: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectInput
  board: String
  category: String
  group: GroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  createdBy: UserUpdateOneWithoutSubjectByMeInput
  updateBy: UserUpdateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionUpdateManyWithoutSubjectInput
  quizes: QuizUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutTopicDataInput {
  name: String
  picture: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectInput
  board: String
  category: String
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  createdBy: UserUpdateOneWithoutSubjectByMeInput
  updateBy: UserUpdateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionUpdateManyWithoutSubjectInput
  quizes: QuizUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutUnitsDataInput {
  name: String
  picture: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectInput
  board: String
  category: String
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  createdBy: UserUpdateOneWithoutSubjectByMeInput
  updateBy: UserUpdateManyWithoutSubjectUpddateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionUpdateManyWithoutSubjectInput
  quizes: QuizUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutUpdateByDataInput {
  name: String
  picture: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectInput
  board: String
  category: String
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  createdBy: UserUpdateOneWithoutSubjectByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions: QuestionUpdateManyWithoutSubjectInput
  quizes: QuizUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithWhereUniqueNestedInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateDataInput!
}

input SubjectUpdateWithWhereUniqueWithoutCreatedByInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutCreatedByDataInput!
}

input SubjectUpdateWithWhereUniqueWithoutGroupInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutGroupDataInput!
}

input SubjectUpdateWithWhereUniqueWithoutMediumInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutMediumDataInput!
}

input SubjectUpdateWithWhereUniqueWithoutStdInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutStdDataInput!
}

input SubjectUpdateWithWhereUniqueWithoutSubgroupInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutSubgroupDataInput!
}

input SubjectUpdateWithWhereUniqueWithoutUpdateByInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutUpdateByDataInput!
}

input SubjectUpsertWithoutContentsInput {
  update: SubjectUpdateWithoutContentsDataInput!
  create: SubjectCreateWithoutContentsInput!
}

input SubjectUpsertWithoutQuestionsInput {
  update: SubjectUpdateWithoutQuestionsDataInput!
  create: SubjectCreateWithoutQuestionsInput!
}

input SubjectUpsertWithoutQuizesInput {
  update: SubjectUpdateWithoutQuizesDataInput!
  create: SubjectCreateWithoutQuizesInput!
}

input SubjectUpsertWithoutTopicInput {
  update: SubjectUpdateWithoutTopicDataInput!
  create: SubjectCreateWithoutTopicInput!
}

input SubjectUpsertWithoutUnitsInput {
  update: SubjectUpdateWithoutUnitsDataInput!
  create: SubjectCreateWithoutUnitsInput!
}

input SubjectUpsertWithWhereUniqueNestedInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateDataInput!
  create: SubjectCreateInput!
}

input SubjectUpsertWithWhereUniqueWithoutCreatedByInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutCreatedByDataInput!
  create: SubjectCreateWithoutCreatedByInput!
}

input SubjectUpsertWithWhereUniqueWithoutGroupInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutGroupDataInput!
  create: SubjectCreateWithoutGroupInput!
}

input SubjectUpsertWithWhereUniqueWithoutMediumInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutMediumDataInput!
  create: SubjectCreateWithoutMediumInput!
}

input SubjectUpsertWithWhereUniqueWithoutStdInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutStdDataInput!
  create: SubjectCreateWithoutStdInput!
}

input SubjectUpsertWithWhereUniqueWithoutSubgroupInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutSubgroupDataInput!
  create: SubjectCreateWithoutSubgroupInput!
}

input SubjectUpsertWithWhereUniqueWithoutUpdateByInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutUpdateByDataInput!
  create: SubjectCreateWithoutUpdateByInput!
}

input SubjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  medium: MediumWhereInput
  std: StdWhereInput
  board: String
  board_not: String
  board_in: [String!]
  board_not_in: [String!]
  board_lt: String
  board_lte: String
  board_gt: String
  board_gte: String
  board_contains: String
  board_not_contains: String
  board_starts_with: String
  board_not_starts_with: String
  board_ends_with: String
  board_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  group: GroupWhereInput
  subgroup: SubGroupWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  units_every: UnitWhereInput
  units_some: UnitWhereInput
  units_none: UnitWhereInput
  topic_every: TopicWhereInput
  topic_some: TopicWhereInput
  topic_none: TopicWhereInput
  contents_every: ContentWhereInput
  contents_some: ContentWhereInput
  contents_none: ContentWhereInput
  createdBy: UserWhereInput
  updateBy_every: UserWhereInput
  updateBy_some: UserWhereInput
  updateBy_none: UserWhereInput
  plantDate: DateTime
  plantDate_not: DateTime
  plantDate_in: [DateTime!]
  plantDate_not_in: [DateTime!]
  plantDate_lt: DateTime
  plantDate_lte: DateTime
  plantDate_gt: DateTime
  plantDate_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  available: String
  available_not: String
  available_in: [String!]
  available_not_in: [String!]
  available_lt: String
  available_lte: String
  available_gt: String
  available_gte: String
  available_contains: String
  available_not_contains: String
  available_starts_with: String
  available_not_starts_with: String
  available_ends_with: String
  available_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  quizes_every: QuizWhereInput
  quizes_some: QuizWhereInput
  quizes_none: QuizWhereInput
  AND: [SubjectWhereInput!]
  OR: [SubjectWhereInput!]
  NOT: [SubjectWhereInput!]
}

input SubjectWhereUniqueInput {
  id: ID
}

type Suborg {
  id: ID!
  name: String!
  description: String
  author(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  org: Organization!
  userGroups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  suborgRoles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type SuborgConnection {
  pageInfo: PageInfo!
  edges: [SuborgEdge]!
  aggregate: AggregateSuborg!
}

input SuborgCreateInput {
  id: ID
  name: String!
  description: String
  author: UserCreateManyWithoutSuborgInput
  org: OrganizationCreateOneWithoutSuborgsInput!
  userGroups: GroupCreateManyWithoutSuborgidInput
  suborgRoles: RoleCreateManyWithoutSuborgInput
}

input SuborgCreateManyWithoutAuthorInput {
  create: [SuborgCreateWithoutAuthorInput!]
  connect: [SuborgWhereUniqueInput!]
}

input SuborgCreateManyWithoutOrgInput {
  create: [SuborgCreateWithoutOrgInput!]
  connect: [SuborgWhereUniqueInput!]
}

input SuborgCreateOneWithoutSuborgRolesInput {
  create: SuborgCreateWithoutSuborgRolesInput
  connect: SuborgWhereUniqueInput
}

input SuborgCreateOneWithoutUserGroupsInput {
  create: SuborgCreateWithoutUserGroupsInput
  connect: SuborgWhereUniqueInput
}

input SuborgCreateWithoutAuthorInput {
  id: ID
  name: String!
  description: String
  org: OrganizationCreateOneWithoutSuborgsInput!
  userGroups: GroupCreateManyWithoutSuborgidInput
  suborgRoles: RoleCreateManyWithoutSuborgInput
}

input SuborgCreateWithoutOrgInput {
  id: ID
  name: String!
  description: String
  author: UserCreateManyWithoutSuborgInput
  userGroups: GroupCreateManyWithoutSuborgidInput
  suborgRoles: RoleCreateManyWithoutSuborgInput
}

input SuborgCreateWithoutSuborgRolesInput {
  id: ID
  name: String!
  description: String
  author: UserCreateManyWithoutSuborgInput
  org: OrganizationCreateOneWithoutSuborgsInput!
  userGroups: GroupCreateManyWithoutSuborgidInput
}

input SuborgCreateWithoutUserGroupsInput {
  id: ID
  name: String!
  description: String
  author: UserCreateManyWithoutSuborgInput
  org: OrganizationCreateOneWithoutSuborgsInput!
  suborgRoles: RoleCreateManyWithoutSuborgInput
}

type SuborgEdge {
  node: Suborg!
  cursor: String!
}

enum SuborgOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SuborgPreviousValues {
  id: ID!
  name: String!
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input SuborgScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [SuborgScalarWhereInput!]
  OR: [SuborgScalarWhereInput!]
  NOT: [SuborgScalarWhereInput!]
}

type SuborgSubscriptionPayload {
  mutation: MutationType!
  node: Suborg
  updatedFields: [String!]
  previousValues: SuborgPreviousValues
}

input SuborgSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SuborgWhereInput
  AND: [SuborgSubscriptionWhereInput!]
  OR: [SuborgSubscriptionWhereInput!]
  NOT: [SuborgSubscriptionWhereInput!]
}

input SuborgUpdateInput {
  name: String
  description: String
  author: UserUpdateManyWithoutSuborgInput
  org: OrganizationUpdateOneRequiredWithoutSuborgsInput
  userGroups: GroupUpdateManyWithoutSuborgidInput
  suborgRoles: RoleUpdateManyWithoutSuborgInput
}

input SuborgUpdateManyDataInput {
  name: String
  description: String
}

input SuborgUpdateManyMutationInput {
  name: String
  description: String
}

input SuborgUpdateManyWithoutAuthorInput {
  create: [SuborgCreateWithoutAuthorInput!]
  delete: [SuborgWhereUniqueInput!]
  connect: [SuborgWhereUniqueInput!]
  set: [SuborgWhereUniqueInput!]
  disconnect: [SuborgWhereUniqueInput!]
  update: [SuborgUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [SuborgUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [SuborgScalarWhereInput!]
  updateMany: [SuborgUpdateManyWithWhereNestedInput!]
}

input SuborgUpdateManyWithoutOrgInput {
  create: [SuborgCreateWithoutOrgInput!]
  delete: [SuborgWhereUniqueInput!]
  connect: [SuborgWhereUniqueInput!]
  set: [SuborgWhereUniqueInput!]
  disconnect: [SuborgWhereUniqueInput!]
  update: [SuborgUpdateWithWhereUniqueWithoutOrgInput!]
  upsert: [SuborgUpsertWithWhereUniqueWithoutOrgInput!]
  deleteMany: [SuborgScalarWhereInput!]
  updateMany: [SuborgUpdateManyWithWhereNestedInput!]
}

input SuborgUpdateManyWithWhereNestedInput {
  where: SuborgScalarWhereInput!
  data: SuborgUpdateManyDataInput!
}

input SuborgUpdateOneRequiredWithoutUserGroupsInput {
  create: SuborgCreateWithoutUserGroupsInput
  update: SuborgUpdateWithoutUserGroupsDataInput
  upsert: SuborgUpsertWithoutUserGroupsInput
  connect: SuborgWhereUniqueInput
}

input SuborgUpdateOneWithoutSuborgRolesInput {
  create: SuborgCreateWithoutSuborgRolesInput
  update: SuborgUpdateWithoutSuborgRolesDataInput
  upsert: SuborgUpsertWithoutSuborgRolesInput
  delete: Boolean
  disconnect: Boolean
  connect: SuborgWhereUniqueInput
}

input SuborgUpdateWithoutAuthorDataInput {
  name: String
  description: String
  org: OrganizationUpdateOneRequiredWithoutSuborgsInput
  userGroups: GroupUpdateManyWithoutSuborgidInput
  suborgRoles: RoleUpdateManyWithoutSuborgInput
}

input SuborgUpdateWithoutOrgDataInput {
  name: String
  description: String
  author: UserUpdateManyWithoutSuborgInput
  userGroups: GroupUpdateManyWithoutSuborgidInput
  suborgRoles: RoleUpdateManyWithoutSuborgInput
}

input SuborgUpdateWithoutSuborgRolesDataInput {
  name: String
  description: String
  author: UserUpdateManyWithoutSuborgInput
  org: OrganizationUpdateOneRequiredWithoutSuborgsInput
  userGroups: GroupUpdateManyWithoutSuborgidInput
}

input SuborgUpdateWithoutUserGroupsDataInput {
  name: String
  description: String
  author: UserUpdateManyWithoutSuborgInput
  org: OrganizationUpdateOneRequiredWithoutSuborgsInput
  suborgRoles: RoleUpdateManyWithoutSuborgInput
}

input SuborgUpdateWithWhereUniqueWithoutAuthorInput {
  where: SuborgWhereUniqueInput!
  data: SuborgUpdateWithoutAuthorDataInput!
}

input SuborgUpdateWithWhereUniqueWithoutOrgInput {
  where: SuborgWhereUniqueInput!
  data: SuborgUpdateWithoutOrgDataInput!
}

input SuborgUpsertWithoutSuborgRolesInput {
  update: SuborgUpdateWithoutSuborgRolesDataInput!
  create: SuborgCreateWithoutSuborgRolesInput!
}

input SuborgUpsertWithoutUserGroupsInput {
  update: SuborgUpdateWithoutUserGroupsDataInput!
  create: SuborgCreateWithoutUserGroupsInput!
}

input SuborgUpsertWithWhereUniqueWithoutAuthorInput {
  where: SuborgWhereUniqueInput!
  update: SuborgUpdateWithoutAuthorDataInput!
  create: SuborgCreateWithoutAuthorInput!
}

input SuborgUpsertWithWhereUniqueWithoutOrgInput {
  where: SuborgWhereUniqueInput!
  update: SuborgUpdateWithoutOrgDataInput!
  create: SuborgCreateWithoutOrgInput!
}

input SuborgWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  author_every: UserWhereInput
  author_some: UserWhereInput
  author_none: UserWhereInput
  org: OrganizationWhereInput
  userGroups_every: GroupWhereInput
  userGroups_some: GroupWhereInput
  userGroups_none: GroupWhereInput
  suborgRoles_every: RoleWhereInput
  suborgRoles_some: RoleWhereInput
  suborgRoles_none: RoleWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [SuborgWhereInput!]
  OR: [SuborgWhereInput!]
  NOT: [SuborgWhereInput!]
}

input SuborgWhereUniqueInput {
  id: ID
}

type Subscription {
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  content(where: ContentSubscriptionWhereInput): ContentSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  groupMember(where: GroupMemberSubscriptionWhereInput): GroupMemberSubscriptionPayload
  medium(where: MediumSubscriptionWhereInput): MediumSubscriptionPayload
  option(where: OptionSubscriptionWhereInput): OptionSubscriptionPayload
  organization(where: OrganizationSubscriptionWhereInput): OrganizationSubscriptionPayload
  personalProfile(where: PersonalProfileSubscriptionWhereInput): PersonalProfileSubscriptionPayload
  poll(where: PollSubscriptionWhereInput): PollSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  profile(where: ProfileSubscriptionWhereInput): ProfileSubscriptionPayload
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
  quiz(where: QuizSubscriptionWhereInput): QuizSubscriptionPayload
  result(where: ResultSubscriptionWhereInput): ResultSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  roleMember(where: RoleMemberSubscriptionWhereInput): RoleMemberSubscriptionPayload
  std(where: StdSubscriptionWhereInput): StdSubscriptionPayload
  studentProfile(where: StudentProfileSubscriptionWhereInput): StudentProfileSubscriptionPayload
  subGroup(where: SubGroupSubscriptionWhereInput): SubGroupSubscriptionPayload
  subGroupMember(where: SubGroupMemberSubscriptionWhereInput): SubGroupMemberSubscriptionPayload
  subject(where: SubjectSubscriptionWhereInput): SubjectSubscriptionPayload
  subjectSubscription(where: SubjectSubscriptionSubscriptionWhereInput): SubjectSubscriptionSubscriptionPayload
  suborg(where: SuborgSubscriptionWhereInput): SuborgSubscriptionPayload
  topic(where: TopicSubscriptionWhereInput): TopicSubscriptionPayload
  unit(where: UnitSubscriptionWhereInput): UnitSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
}

type Topic {
  id: ID!
  name: String!
  subject: Subject
  unit: Unit
  contents(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
  createdBy: User
  updateBy: User
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  quizs(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type TopicConnection {
  pageInfo: PageInfo!
  edges: [TopicEdge]!
  aggregate: AggregateTopic!
}

input TopicCreateInput {
  id: ID
  name: String!
  subject: SubjectCreateOneWithoutTopicInput
  unit: UnitCreateOneWithoutTopicsInput
  contents: ContentCreateManyWithoutTopicInput
  createdBy: UserCreateOneWithoutTopicByMeInput
  updateBy: UserCreateOneWithoutTopicUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  questions: QuestionCreateManyWithoutTopicInput
  quizs: QuizCreateManyWithoutTopicInput
}

input TopicCreateManyWithoutCreatedByInput {
  create: [TopicCreateWithoutCreatedByInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateManyWithoutSubjectInput {
  create: [TopicCreateWithoutSubjectInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateManyWithoutUnitInput {
  create: [TopicCreateWithoutUnitInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateManyWithoutUpdateByInput {
  create: [TopicCreateWithoutUpdateByInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateOneWithoutContentsInput {
  create: TopicCreateWithoutContentsInput
  connect: TopicWhereUniqueInput
}

input TopicCreateOneWithoutQuestionsInput {
  create: TopicCreateWithoutQuestionsInput
  connect: TopicWhereUniqueInput
}

input TopicCreateOneWithoutQuizsInput {
  create: TopicCreateWithoutQuizsInput
  connect: TopicWhereUniqueInput
}

input TopicCreateWithoutContentsInput {
  id: ID
  name: String!
  subject: SubjectCreateOneWithoutTopicInput
  unit: UnitCreateOneWithoutTopicsInput
  createdBy: UserCreateOneWithoutTopicByMeInput
  updateBy: UserCreateOneWithoutTopicUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  questions: QuestionCreateManyWithoutTopicInput
  quizs: QuizCreateManyWithoutTopicInput
}

input TopicCreateWithoutCreatedByInput {
  id: ID
  name: String!
  subject: SubjectCreateOneWithoutTopicInput
  unit: UnitCreateOneWithoutTopicsInput
  contents: ContentCreateManyWithoutTopicInput
  updateBy: UserCreateOneWithoutTopicUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  questions: QuestionCreateManyWithoutTopicInput
  quizs: QuizCreateManyWithoutTopicInput
}

input TopicCreateWithoutQuestionsInput {
  id: ID
  name: String!
  subject: SubjectCreateOneWithoutTopicInput
  unit: UnitCreateOneWithoutTopicsInput
  contents: ContentCreateManyWithoutTopicInput
  createdBy: UserCreateOneWithoutTopicByMeInput
  updateBy: UserCreateOneWithoutTopicUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  quizs: QuizCreateManyWithoutTopicInput
}

input TopicCreateWithoutQuizsInput {
  id: ID
  name: String!
  subject: SubjectCreateOneWithoutTopicInput
  unit: UnitCreateOneWithoutTopicsInput
  contents: ContentCreateManyWithoutTopicInput
  createdBy: UserCreateOneWithoutTopicByMeInput
  updateBy: UserCreateOneWithoutTopicUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  questions: QuestionCreateManyWithoutTopicInput
}

input TopicCreateWithoutSubjectInput {
  id: ID
  name: String!
  unit: UnitCreateOneWithoutTopicsInput
  contents: ContentCreateManyWithoutTopicInput
  createdBy: UserCreateOneWithoutTopicByMeInput
  updateBy: UserCreateOneWithoutTopicUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  questions: QuestionCreateManyWithoutTopicInput
  quizs: QuizCreateManyWithoutTopicInput
}

input TopicCreateWithoutUnitInput {
  id: ID
  name: String!
  subject: SubjectCreateOneWithoutTopicInput
  contents: ContentCreateManyWithoutTopicInput
  createdBy: UserCreateOneWithoutTopicByMeInput
  updateBy: UserCreateOneWithoutTopicUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  questions: QuestionCreateManyWithoutTopicInput
  quizs: QuizCreateManyWithoutTopicInput
}

input TopicCreateWithoutUpdateByInput {
  id: ID
  name: String!
  subject: SubjectCreateOneWithoutTopicInput
  unit: UnitCreateOneWithoutTopicsInput
  contents: ContentCreateManyWithoutTopicInput
  createdBy: UserCreateOneWithoutTopicByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  questions: QuestionCreateManyWithoutTopicInput
  quizs: QuizCreateManyWithoutTopicInput
}

type TopicEdge {
  node: Topic!
  cursor: String!
}

enum TopicOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  plantDate_ASC
  plantDate_DESC
  isPublished_ASC
  isPublished_DESC
  state_ASC
  state_DESC
  status_ASC
  status_DESC
  available_ASC
  available_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TopicPreviousValues {
  id: ID!
  name: String!
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input TopicScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  plantDate: DateTime
  plantDate_not: DateTime
  plantDate_in: [DateTime!]
  plantDate_not_in: [DateTime!]
  plantDate_lt: DateTime
  plantDate_lte: DateTime
  plantDate_gt: DateTime
  plantDate_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  available: String
  available_not: String
  available_in: [String!]
  available_not_in: [String!]
  available_lt: String
  available_lte: String
  available_gt: String
  available_gte: String
  available_contains: String
  available_not_contains: String
  available_starts_with: String
  available_not_starts_with: String
  available_ends_with: String
  available_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [TopicScalarWhereInput!]
  OR: [TopicScalarWhereInput!]
  NOT: [TopicScalarWhereInput!]
}

type TopicSubscriptionPayload {
  mutation: MutationType!
  node: Topic
  updatedFields: [String!]
  previousValues: TopicPreviousValues
}

input TopicSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TopicWhereInput
  AND: [TopicSubscriptionWhereInput!]
  OR: [TopicSubscriptionWhereInput!]
  NOT: [TopicSubscriptionWhereInput!]
}

input TopicUpdateInput {
  name: String
  subject: SubjectUpdateOneWithoutTopicInput
  unit: UnitUpdateOneWithoutTopicsInput
  contents: ContentUpdateManyWithoutTopicInput
  createdBy: UserUpdateOneWithoutTopicByMeInput
  updateBy: UserUpdateOneWithoutTopicUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  questions: QuestionUpdateManyWithoutTopicInput
  quizs: QuizUpdateManyWithoutTopicInput
}

input TopicUpdateManyDataInput {
  name: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input TopicUpdateManyMutationInput {
  name: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input TopicUpdateManyWithoutCreatedByInput {
  create: [TopicCreateWithoutCreatedByInput!]
  delete: [TopicWhereUniqueInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [TopicScalarWhereInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
}

input TopicUpdateManyWithoutSubjectInput {
  create: [TopicCreateWithoutSubjectInput!]
  delete: [TopicWhereUniqueInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutSubjectInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutSubjectInput!]
  deleteMany: [TopicScalarWhereInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
}

input TopicUpdateManyWithoutUnitInput {
  create: [TopicCreateWithoutUnitInput!]
  delete: [TopicWhereUniqueInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutUnitInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutUnitInput!]
  deleteMany: [TopicScalarWhereInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
}

input TopicUpdateManyWithoutUpdateByInput {
  create: [TopicCreateWithoutUpdateByInput!]
  delete: [TopicWhereUniqueInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutUpdateByInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutUpdateByInput!]
  deleteMany: [TopicScalarWhereInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
}

input TopicUpdateManyWithWhereNestedInput {
  where: TopicScalarWhereInput!
  data: TopicUpdateManyDataInput!
}

input TopicUpdateOneWithoutContentsInput {
  create: TopicCreateWithoutContentsInput
  update: TopicUpdateWithoutContentsDataInput
  upsert: TopicUpsertWithoutContentsInput
  delete: Boolean
  disconnect: Boolean
  connect: TopicWhereUniqueInput
}

input TopicUpdateOneWithoutQuestionsInput {
  create: TopicCreateWithoutQuestionsInput
  update: TopicUpdateWithoutQuestionsDataInput
  upsert: TopicUpsertWithoutQuestionsInput
  delete: Boolean
  disconnect: Boolean
  connect: TopicWhereUniqueInput
}

input TopicUpdateOneWithoutQuizsInput {
  create: TopicCreateWithoutQuizsInput
  update: TopicUpdateWithoutQuizsDataInput
  upsert: TopicUpsertWithoutQuizsInput
  delete: Boolean
  disconnect: Boolean
  connect: TopicWhereUniqueInput
}

input TopicUpdateWithoutContentsDataInput {
  name: String
  subject: SubjectUpdateOneWithoutTopicInput
  unit: UnitUpdateOneWithoutTopicsInput
  createdBy: UserUpdateOneWithoutTopicByMeInput
  updateBy: UserUpdateOneWithoutTopicUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  questions: QuestionUpdateManyWithoutTopicInput
  quizs: QuizUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutCreatedByDataInput {
  name: String
  subject: SubjectUpdateOneWithoutTopicInput
  unit: UnitUpdateOneWithoutTopicsInput
  contents: ContentUpdateManyWithoutTopicInput
  updateBy: UserUpdateOneWithoutTopicUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  questions: QuestionUpdateManyWithoutTopicInput
  quizs: QuizUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutQuestionsDataInput {
  name: String
  subject: SubjectUpdateOneWithoutTopicInput
  unit: UnitUpdateOneWithoutTopicsInput
  contents: ContentUpdateManyWithoutTopicInput
  createdBy: UserUpdateOneWithoutTopicByMeInput
  updateBy: UserUpdateOneWithoutTopicUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  quizs: QuizUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutQuizsDataInput {
  name: String
  subject: SubjectUpdateOneWithoutTopicInput
  unit: UnitUpdateOneWithoutTopicsInput
  contents: ContentUpdateManyWithoutTopicInput
  createdBy: UserUpdateOneWithoutTopicByMeInput
  updateBy: UserUpdateOneWithoutTopicUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  questions: QuestionUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutSubjectDataInput {
  name: String
  unit: UnitUpdateOneWithoutTopicsInput
  contents: ContentUpdateManyWithoutTopicInput
  createdBy: UserUpdateOneWithoutTopicByMeInput
  updateBy: UserUpdateOneWithoutTopicUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  questions: QuestionUpdateManyWithoutTopicInput
  quizs: QuizUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutUnitDataInput {
  name: String
  subject: SubjectUpdateOneWithoutTopicInput
  contents: ContentUpdateManyWithoutTopicInput
  createdBy: UserUpdateOneWithoutTopicByMeInput
  updateBy: UserUpdateOneWithoutTopicUpdateByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  questions: QuestionUpdateManyWithoutTopicInput
  quizs: QuizUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutUpdateByDataInput {
  name: String
  subject: SubjectUpdateOneWithoutTopicInput
  unit: UnitUpdateOneWithoutTopicsInput
  contents: ContentUpdateManyWithoutTopicInput
  createdBy: UserUpdateOneWithoutTopicByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  questions: QuestionUpdateManyWithoutTopicInput
  quizs: QuizUpdateManyWithoutTopicInput
}

input TopicUpdateWithWhereUniqueWithoutCreatedByInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutCreatedByDataInput!
}

input TopicUpdateWithWhereUniqueWithoutSubjectInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutSubjectDataInput!
}

input TopicUpdateWithWhereUniqueWithoutUnitInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutUnitDataInput!
}

input TopicUpdateWithWhereUniqueWithoutUpdateByInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutUpdateByDataInput!
}

input TopicUpsertWithoutContentsInput {
  update: TopicUpdateWithoutContentsDataInput!
  create: TopicCreateWithoutContentsInput!
}

input TopicUpsertWithoutQuestionsInput {
  update: TopicUpdateWithoutQuestionsDataInput!
  create: TopicCreateWithoutQuestionsInput!
}

input TopicUpsertWithoutQuizsInput {
  update: TopicUpdateWithoutQuizsDataInput!
  create: TopicCreateWithoutQuizsInput!
}

input TopicUpsertWithWhereUniqueWithoutCreatedByInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutCreatedByDataInput!
  create: TopicCreateWithoutCreatedByInput!
}

input TopicUpsertWithWhereUniqueWithoutSubjectInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutSubjectDataInput!
  create: TopicCreateWithoutSubjectInput!
}

input TopicUpsertWithWhereUniqueWithoutUnitInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutUnitDataInput!
  create: TopicCreateWithoutUnitInput!
}

input TopicUpsertWithWhereUniqueWithoutUpdateByInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutUpdateByDataInput!
  create: TopicCreateWithoutUpdateByInput!
}

input TopicWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  subject: SubjectWhereInput
  unit: UnitWhereInput
  contents_every: ContentWhereInput
  contents_some: ContentWhereInput
  contents_none: ContentWhereInput
  createdBy: UserWhereInput
  updateBy: UserWhereInput
  plantDate: DateTime
  plantDate_not: DateTime
  plantDate_in: [DateTime!]
  plantDate_not_in: [DateTime!]
  plantDate_lt: DateTime
  plantDate_lte: DateTime
  plantDate_gt: DateTime
  plantDate_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  available: String
  available_not: String
  available_in: [String!]
  available_not_in: [String!]
  available_lt: String
  available_lte: String
  available_gt: String
  available_gte: String
  available_contains: String
  available_not_contains: String
  available_starts_with: String
  available_not_starts_with: String
  available_ends_with: String
  available_not_ends_with: String
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  quizs_every: QuizWhereInput
  quizs_some: QuizWhereInput
  quizs_none: QuizWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [TopicWhereInput!]
  OR: [TopicWhereInput!]
  NOT: [TopicWhereInput!]
}

input TopicWhereUniqueInput {
  id: ID
}

type Unit {
  id: ID!
  name: String!
  subject: Subject!
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  contents(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
  createdBy: User
  updateBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  updatedAt: DateTime!
  createdAt: DateTime!
  quizs(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz!]
}

type UnitConnection {
  pageInfo: PageInfo!
  edges: [UnitEdge]!
  aggregate: AggregateUnit!
}

input UnitCreateInput {
  id: ID
  name: String!
  subject: SubjectCreateOneWithoutUnitsInput!
  topics: TopicCreateManyWithoutUnitInput
  contents: ContentCreateManyWithoutUnitInput
  createdBy: UserCreateOneWithoutUnitByMeInput
  updateBy: UserCreateManyWithoutUnitUpdatedByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  questions: QuestionCreateManyWithoutUnitInput
  quizs: QuizCreateManyWithoutUnitInput
}

input UnitCreateManyWithoutCreatedByInput {
  create: [UnitCreateWithoutCreatedByInput!]
  connect: [UnitWhereUniqueInput!]
}

input UnitCreateManyWithoutSubjectInput {
  create: [UnitCreateWithoutSubjectInput!]
  connect: [UnitWhereUniqueInput!]
}

input UnitCreateManyWithoutUpdateByInput {
  create: [UnitCreateWithoutUpdateByInput!]
  connect: [UnitWhereUniqueInput!]
}

input UnitCreateOneWithoutContentsInput {
  create: UnitCreateWithoutContentsInput
  connect: UnitWhereUniqueInput
}

input UnitCreateOneWithoutQuestionsInput {
  create: UnitCreateWithoutQuestionsInput
  connect: UnitWhereUniqueInput
}

input UnitCreateOneWithoutQuizsInput {
  create: UnitCreateWithoutQuizsInput
  connect: UnitWhereUniqueInput
}

input UnitCreateOneWithoutTopicsInput {
  create: UnitCreateWithoutTopicsInput
  connect: UnitWhereUniqueInput
}

input UnitCreateWithoutContentsInput {
  id: ID
  name: String!
  subject: SubjectCreateOneWithoutUnitsInput!
  topics: TopicCreateManyWithoutUnitInput
  createdBy: UserCreateOneWithoutUnitByMeInput
  updateBy: UserCreateManyWithoutUnitUpdatedByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  questions: QuestionCreateManyWithoutUnitInput
  quizs: QuizCreateManyWithoutUnitInput
}

input UnitCreateWithoutCreatedByInput {
  id: ID
  name: String!
  subject: SubjectCreateOneWithoutUnitsInput!
  topics: TopicCreateManyWithoutUnitInput
  contents: ContentCreateManyWithoutUnitInput
  updateBy: UserCreateManyWithoutUnitUpdatedByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  questions: QuestionCreateManyWithoutUnitInput
  quizs: QuizCreateManyWithoutUnitInput
}

input UnitCreateWithoutQuestionsInput {
  id: ID
  name: String!
  subject: SubjectCreateOneWithoutUnitsInput!
  topics: TopicCreateManyWithoutUnitInput
  contents: ContentCreateManyWithoutUnitInput
  createdBy: UserCreateOneWithoutUnitByMeInput
  updateBy: UserCreateManyWithoutUnitUpdatedByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  quizs: QuizCreateManyWithoutUnitInput
}

input UnitCreateWithoutQuizsInput {
  id: ID
  name: String!
  subject: SubjectCreateOneWithoutUnitsInput!
  topics: TopicCreateManyWithoutUnitInput
  contents: ContentCreateManyWithoutUnitInput
  createdBy: UserCreateOneWithoutUnitByMeInput
  updateBy: UserCreateManyWithoutUnitUpdatedByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  questions: QuestionCreateManyWithoutUnitInput
}

input UnitCreateWithoutSubjectInput {
  id: ID
  name: String!
  topics: TopicCreateManyWithoutUnitInput
  contents: ContentCreateManyWithoutUnitInput
  createdBy: UserCreateOneWithoutUnitByMeInput
  updateBy: UserCreateManyWithoutUnitUpdatedByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  questions: QuestionCreateManyWithoutUnitInput
  quizs: QuizCreateManyWithoutUnitInput
}

input UnitCreateWithoutTopicsInput {
  id: ID
  name: String!
  subject: SubjectCreateOneWithoutUnitsInput!
  contents: ContentCreateManyWithoutUnitInput
  createdBy: UserCreateOneWithoutUnitByMeInput
  updateBy: UserCreateManyWithoutUnitUpdatedByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  questions: QuestionCreateManyWithoutUnitInput
  quizs: QuizCreateManyWithoutUnitInput
}

input UnitCreateWithoutUpdateByInput {
  id: ID
  name: String!
  subject: SubjectCreateOneWithoutUnitsInput!
  topics: TopicCreateManyWithoutUnitInput
  contents: ContentCreateManyWithoutUnitInput
  createdBy: UserCreateOneWithoutUnitByMeInput
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  questions: QuestionCreateManyWithoutUnitInput
  quizs: QuizCreateManyWithoutUnitInput
}

type UnitEdge {
  node: Unit!
  cursor: String!
}

enum UnitOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  plantDate_ASC
  plantDate_DESC
  isPublished_ASC
  isPublished_DESC
  state_ASC
  state_DESC
  status_ASC
  status_DESC
  available_ASC
  available_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UnitPreviousValues {
  id: ID!
  name: String!
  plantDate: DateTime
  isPublished: Boolean!
  state: String!
  status: String!
  available: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input UnitScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  plantDate: DateTime
  plantDate_not: DateTime
  plantDate_in: [DateTime!]
  plantDate_not_in: [DateTime!]
  plantDate_lt: DateTime
  plantDate_lte: DateTime
  plantDate_gt: DateTime
  plantDate_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  available: String
  available_not: String
  available_in: [String!]
  available_not_in: [String!]
  available_lt: String
  available_lte: String
  available_gt: String
  available_gte: String
  available_contains: String
  available_not_contains: String
  available_starts_with: String
  available_not_starts_with: String
  available_ends_with: String
  available_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UnitScalarWhereInput!]
  OR: [UnitScalarWhereInput!]
  NOT: [UnitScalarWhereInput!]
}

type UnitSubscriptionPayload {
  mutation: MutationType!
  node: Unit
  updatedFields: [String!]
  previousValues: UnitPreviousValues
}

input UnitSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UnitWhereInput
  AND: [UnitSubscriptionWhereInput!]
  OR: [UnitSubscriptionWhereInput!]
  NOT: [UnitSubscriptionWhereInput!]
}

input UnitUpdateInput {
  name: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  topics: TopicUpdateManyWithoutUnitInput
  contents: ContentUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  questions: QuestionUpdateManyWithoutUnitInput
  quizs: QuizUpdateManyWithoutUnitInput
}

input UnitUpdateManyDataInput {
  name: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input UnitUpdateManyMutationInput {
  name: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input UnitUpdateManyWithoutCreatedByInput {
  create: [UnitCreateWithoutCreatedByInput!]
  delete: [UnitWhereUniqueInput!]
  connect: [UnitWhereUniqueInput!]
  set: [UnitWhereUniqueInput!]
  disconnect: [UnitWhereUniqueInput!]
  update: [UnitUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [UnitUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [UnitScalarWhereInput!]
  updateMany: [UnitUpdateManyWithWhereNestedInput!]
}

input UnitUpdateManyWithoutSubjectInput {
  create: [UnitCreateWithoutSubjectInput!]
  delete: [UnitWhereUniqueInput!]
  connect: [UnitWhereUniqueInput!]
  set: [UnitWhereUniqueInput!]
  disconnect: [UnitWhereUniqueInput!]
  update: [UnitUpdateWithWhereUniqueWithoutSubjectInput!]
  upsert: [UnitUpsertWithWhereUniqueWithoutSubjectInput!]
  deleteMany: [UnitScalarWhereInput!]
  updateMany: [UnitUpdateManyWithWhereNestedInput!]
}

input UnitUpdateManyWithoutUpdateByInput {
  create: [UnitCreateWithoutUpdateByInput!]
  delete: [UnitWhereUniqueInput!]
  connect: [UnitWhereUniqueInput!]
  set: [UnitWhereUniqueInput!]
  disconnect: [UnitWhereUniqueInput!]
  update: [UnitUpdateWithWhereUniqueWithoutUpdateByInput!]
  upsert: [UnitUpsertWithWhereUniqueWithoutUpdateByInput!]
  deleteMany: [UnitScalarWhereInput!]
  updateMany: [UnitUpdateManyWithWhereNestedInput!]
}

input UnitUpdateManyWithWhereNestedInput {
  where: UnitScalarWhereInput!
  data: UnitUpdateManyDataInput!
}

input UnitUpdateOneWithoutContentsInput {
  create: UnitCreateWithoutContentsInput
  update: UnitUpdateWithoutContentsDataInput
  upsert: UnitUpsertWithoutContentsInput
  delete: Boolean
  disconnect: Boolean
  connect: UnitWhereUniqueInput
}

input UnitUpdateOneWithoutQuestionsInput {
  create: UnitCreateWithoutQuestionsInput
  update: UnitUpdateWithoutQuestionsDataInput
  upsert: UnitUpsertWithoutQuestionsInput
  delete: Boolean
  disconnect: Boolean
  connect: UnitWhereUniqueInput
}

input UnitUpdateOneWithoutQuizsInput {
  create: UnitCreateWithoutQuizsInput
  update: UnitUpdateWithoutQuizsDataInput
  upsert: UnitUpsertWithoutQuizsInput
  delete: Boolean
  disconnect: Boolean
  connect: UnitWhereUniqueInput
}

input UnitUpdateOneWithoutTopicsInput {
  create: UnitCreateWithoutTopicsInput
  update: UnitUpdateWithoutTopicsDataInput
  upsert: UnitUpsertWithoutTopicsInput
  delete: Boolean
  disconnect: Boolean
  connect: UnitWhereUniqueInput
}

input UnitUpdateWithoutContentsDataInput {
  name: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  topics: TopicUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  questions: QuestionUpdateManyWithoutUnitInput
  quizs: QuizUpdateManyWithoutUnitInput
}

input UnitUpdateWithoutCreatedByDataInput {
  name: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  topics: TopicUpdateManyWithoutUnitInput
  contents: ContentUpdateManyWithoutUnitInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  questions: QuestionUpdateManyWithoutUnitInput
  quizs: QuizUpdateManyWithoutUnitInput
}

input UnitUpdateWithoutQuestionsDataInput {
  name: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  topics: TopicUpdateManyWithoutUnitInput
  contents: ContentUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  quizs: QuizUpdateManyWithoutUnitInput
}

input UnitUpdateWithoutQuizsDataInput {
  name: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  topics: TopicUpdateManyWithoutUnitInput
  contents: ContentUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  questions: QuestionUpdateManyWithoutUnitInput
}

input UnitUpdateWithoutSubjectDataInput {
  name: String
  topics: TopicUpdateManyWithoutUnitInput
  contents: ContentUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  questions: QuestionUpdateManyWithoutUnitInput
  quizs: QuizUpdateManyWithoutUnitInput
}

input UnitUpdateWithoutTopicsDataInput {
  name: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  contents: ContentUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  questions: QuestionUpdateManyWithoutUnitInput
  quizs: QuizUpdateManyWithoutUnitInput
}

input UnitUpdateWithoutUpdateByDataInput {
  name: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  topics: TopicUpdateManyWithoutUnitInput
  contents: ContentUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  questions: QuestionUpdateManyWithoutUnitInput
  quizs: QuizUpdateManyWithoutUnitInput
}

input UnitUpdateWithWhereUniqueWithoutCreatedByInput {
  where: UnitWhereUniqueInput!
  data: UnitUpdateWithoutCreatedByDataInput!
}

input UnitUpdateWithWhereUniqueWithoutSubjectInput {
  where: UnitWhereUniqueInput!
  data: UnitUpdateWithoutSubjectDataInput!
}

input UnitUpdateWithWhereUniqueWithoutUpdateByInput {
  where: UnitWhereUniqueInput!
  data: UnitUpdateWithoutUpdateByDataInput!
}

input UnitUpsertWithoutContentsInput {
  update: UnitUpdateWithoutContentsDataInput!
  create: UnitCreateWithoutContentsInput!
}

input UnitUpsertWithoutQuestionsInput {
  update: UnitUpdateWithoutQuestionsDataInput!
  create: UnitCreateWithoutQuestionsInput!
}

input UnitUpsertWithoutQuizsInput {
  update: UnitUpdateWithoutQuizsDataInput!
  create: UnitCreateWithoutQuizsInput!
}

input UnitUpsertWithoutTopicsInput {
  update: UnitUpdateWithoutTopicsDataInput!
  create: UnitCreateWithoutTopicsInput!
}

input UnitUpsertWithWhereUniqueWithoutCreatedByInput {
  where: UnitWhereUniqueInput!
  update: UnitUpdateWithoutCreatedByDataInput!
  create: UnitCreateWithoutCreatedByInput!
}

input UnitUpsertWithWhereUniqueWithoutSubjectInput {
  where: UnitWhereUniqueInput!
  update: UnitUpdateWithoutSubjectDataInput!
  create: UnitCreateWithoutSubjectInput!
}

input UnitUpsertWithWhereUniqueWithoutUpdateByInput {
  where: UnitWhereUniqueInput!
  update: UnitUpdateWithoutUpdateByDataInput!
  create: UnitCreateWithoutUpdateByInput!
}

input UnitWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  subject: SubjectWhereInput
  topics_every: TopicWhereInput
  topics_some: TopicWhereInput
  topics_none: TopicWhereInput
  contents_every: ContentWhereInput
  contents_some: ContentWhereInput
  contents_none: ContentWhereInput
  createdBy: UserWhereInput
  updateBy_every: UserWhereInput
  updateBy_some: UserWhereInput
  updateBy_none: UserWhereInput
  plantDate: DateTime
  plantDate_not: DateTime
  plantDate_in: [DateTime!]
  plantDate_not_in: [DateTime!]
  plantDate_lt: DateTime
  plantDate_lte: DateTime
  plantDate_gt: DateTime
  plantDate_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  available: String
  available_not: String
  available_in: [String!]
  available_not_in: [String!]
  available_lt: String
  available_lte: String
  available_gt: String
  available_gte: String
  available_contains: String
  available_not_contains: String
  available_starts_with: String
  available_not_starts_with: String
  available_ends_with: String
  available_not_ends_with: String
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  quizs_every: QuizWhereInput
  quizs_some: QuizWhereInput
  quizs_none: QuizWhereInput
  AND: [UnitWhereInput!]
  OR: [UnitWhereInput!]
  NOT: [UnitWhereInput!]
}

input UnitWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: Organization
  suborg(where: SuborgWhereInput, orderBy: SuborgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Suborg!]
  groupmembers(where: GroupMemberWhereInput, orderBy: GroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupMember!]
  subgroupmembers(where: SubGroupMemberWhereInput, orderBy: SubGroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubGroupMember!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  myprofiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile!]
  subjectSubscription(where: SubjectSubscriptionWhereInput, orderBy: SubjectSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubjectSubscription!]
  createdBy: String
  subjectByMe(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  subjectUpddateByMe(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  unitByMe(where: UnitWhereInput, orderBy: UnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Unit!]
  unitUpdatedByMe(where: UnitWhereInput, orderBy: UnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Unit!]
  topicByMe(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  topicUpdateByMe(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  contentByMe(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
  contentUpdateByMe(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
  questionCreatedBy(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  questionUpdateddBy(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  quizCreatedBy(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  updatedAt: DateTime!
  createdAt: DateTime!
  result(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateManyWithoutContentUpdateByMeInput {
  create: [UserCreateWithoutContentUpdateByMeInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutOrgInput {
  create: [UserCreateWithoutOrgInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutRolesInput {
  create: [UserCreateWithoutRolesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutSubjectUpddateByMeInput {
  create: [UserCreateWithoutSubjectUpddateByMeInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutSuborgInput {
  create: [UserCreateWithoutSuborgInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutUnitUpdatedByMeInput {
  create: [UserCreateWithoutUnitUpdatedByMeInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutContentByMeInput {
  create: UserCreateWithoutContentByMeInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutGroupmembersInput {
  create: UserCreateWithoutGroupmembersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMyprofilesInput {
  create: UserCreateWithoutMyprofilesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuestionCreatedByInput {
  create: UserCreateWithoutQuestionCreatedByInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuestionUpdateddByInput {
  create: UserCreateWithoutQuestionUpdateddByInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuizCreatedByInput {
  create: UserCreateWithoutQuizCreatedByInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutResultInput {
  create: UserCreateWithoutResultInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSubgroupmembersInput {
  create: UserCreateWithoutSubgroupmembersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSubjectByMeInput {
  create: UserCreateWithoutSubjectByMeInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSubjectSubscriptionInput {
  create: UserCreateWithoutSubjectSubscriptionInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTopicByMeInput {
  create: UserCreateWithoutTopicByMeInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTopicUpdateByMeInput {
  create: UserCreateWithoutTopicUpdateByMeInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUnitByMeInput {
  create: UserCreateWithoutUnitByMeInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutContentByMeInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutContentUpdateByMeInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutGroupmembersInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutMyprofilesInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutOrgInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutPostsInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutQuestionCreatedByInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutQuestionUpdateddByInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutQuizCreatedByInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutResultInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
}

input UserCreateWithoutRolesInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutSubgroupmembersInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutSubjectByMeInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutSubjectSubscriptionInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutSubjectUpddateByMeInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutSuborgInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutTopicByMeInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutTopicUpdateByMeInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutUnitByMeInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutUnitUpdatedByMeInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
}

input UserCreateWithoutVotesInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectCreateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectCreateManyWithoutUpdateByInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  quizCreatedBy: QuizCreateManyWithoutCreatedByInput
  result: ResultCreateManyWithoutUserIdInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdBy_ASC
  createdBy_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  createdBy: String
  createdBy_not: String
  createdBy_in: [String!]
  createdBy_not_in: [String!]
  createdBy_lt: String
  createdBy_lte: String
  createdBy_gt: String
  createdBy_gte: String
  createdBy_contains: String
  createdBy_not_contains: String
  createdBy_starts_with: String
  createdBy_not_starts_with: String
  createdBy_ends_with: String
  createdBy_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateManyDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
}

input UserUpdateManyMutationInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
}

input UserUpdateManyWithoutContentUpdateByMeInput {
  create: [UserCreateWithoutContentUpdateByMeInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutContentUpdateByMeInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutContentUpdateByMeInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutOrgInput {
  create: [UserCreateWithoutOrgInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutOrgInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutOrgInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutRolesInput {
  create: [UserCreateWithoutRolesInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRolesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRolesInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutSubjectUpddateByMeInput {
  create: [UserCreateWithoutSubjectUpddateByMeInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSubjectUpddateByMeInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSubjectUpddateByMeInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutSuborgInput {
  create: [UserCreateWithoutSuborgInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSuborgInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSuborgInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutUnitUpdatedByMeInput {
  create: [UserCreateWithoutUnitUpdatedByMeInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutUnitUpdatedByMeInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutUnitUpdatedByMeInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutGroupmembersInput {
  create: UserCreateWithoutGroupmembersInput
  update: UserUpdateWithoutGroupmembersDataInput
  upsert: UserUpsertWithoutGroupmembersInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutMyprofilesInput {
  create: UserCreateWithoutMyprofilesInput
  update: UserUpdateWithoutMyprofilesDataInput
  upsert: UserUpsertWithoutMyprofilesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutQuizCreatedByInput {
  create: UserCreateWithoutQuizCreatedByInput
  update: UserUpdateWithoutQuizCreatedByDataInput
  upsert: UserUpsertWithoutQuizCreatedByInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutResultInput {
  create: UserCreateWithoutResultInput
  update: UserUpdateWithoutResultDataInput
  upsert: UserUpsertWithoutResultInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutSubgroupmembersInput {
  create: UserCreateWithoutSubgroupmembersInput
  update: UserUpdateWithoutSubgroupmembersDataInput
  upsert: UserUpsertWithoutSubgroupmembersInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutSubjectSubscriptionInput {
  create: UserCreateWithoutSubjectSubscriptionInput
  update: UserUpdateWithoutSubjectSubscriptionDataInput
  upsert: UserUpsertWithoutSubjectSubscriptionInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutContentByMeInput {
  create: UserCreateWithoutContentByMeInput
  update: UserUpdateWithoutContentByMeDataInput
  upsert: UserUpsertWithoutContentByMeInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutQuestionCreatedByInput {
  create: UserCreateWithoutQuestionCreatedByInput
  update: UserUpdateWithoutQuestionCreatedByDataInput
  upsert: UserUpsertWithoutQuestionCreatedByInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutQuestionUpdateddByInput {
  create: UserCreateWithoutQuestionUpdateddByInput
  update: UserUpdateWithoutQuestionUpdateddByDataInput
  upsert: UserUpsertWithoutQuestionUpdateddByInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutSubjectByMeInput {
  create: UserCreateWithoutSubjectByMeInput
  update: UserUpdateWithoutSubjectByMeDataInput
  upsert: UserUpsertWithoutSubjectByMeInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutTopicByMeInput {
  create: UserCreateWithoutTopicByMeInput
  update: UserUpdateWithoutTopicByMeDataInput
  upsert: UserUpsertWithoutTopicByMeInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutTopicUpdateByMeInput {
  create: UserCreateWithoutTopicUpdateByMeInput
  update: UserUpdateWithoutTopicUpdateByMeDataInput
  upsert: UserUpsertWithoutTopicUpdateByMeInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutUnitByMeInput {
  create: UserCreateWithoutUnitByMeInput
  update: UserUpdateWithoutUnitByMeDataInput
  upsert: UserUpsertWithoutUnitByMeInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  update: UserUpdateWithoutVotesDataInput
  upsert: UserUpsertWithoutVotesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCommentsDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutContentByMeDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutContentUpdateByMeDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutGroupmembersDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutMyprofilesDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutOrgDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutPostsDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutQuestionCreatedByDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutQuestionUpdateddByDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutQuizCreatedByDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutResultDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutRolesDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutSubgroupmembersDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutSubjectByMeDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutSubjectSubscriptionDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutSubjectUpddateByMeDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutSuborgDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutTopicByMeDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutTopicUpdateByMeDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutUnitByMeDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutUnitUpdatedByMeDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutVotesDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  createdBy: String
  subjectByMe: SubjectUpdateManyWithoutCreatedByInput
  subjectUpddateByMe: SubjectUpdateManyWithoutUpdateByInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  quizCreatedBy: QuizUpdateManyWithoutCreatedByInput
  result: ResultUpdateManyWithoutUserIdInput
}

input UserUpdateWithWhereUniqueWithoutContentUpdateByMeInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutContentUpdateByMeDataInput!
}

input UserUpdateWithWhereUniqueWithoutOrgInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutOrgDataInput!
}

input UserUpdateWithWhereUniqueWithoutRolesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutRolesDataInput!
}

input UserUpdateWithWhereUniqueWithoutSubjectUpddateByMeInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSubjectUpddateByMeDataInput!
}

input UserUpdateWithWhereUniqueWithoutSuborgInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSuborgDataInput!
}

input UserUpdateWithWhereUniqueWithoutUnitUpdatedByMeInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutUnitUpdatedByMeDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutContentByMeInput {
  update: UserUpdateWithoutContentByMeDataInput!
  create: UserCreateWithoutContentByMeInput!
}

input UserUpsertWithoutGroupmembersInput {
  update: UserUpdateWithoutGroupmembersDataInput!
  create: UserCreateWithoutGroupmembersInput!
}

input UserUpsertWithoutMyprofilesInput {
  update: UserUpdateWithoutMyprofilesDataInput!
  create: UserCreateWithoutMyprofilesInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithoutQuestionCreatedByInput {
  update: UserUpdateWithoutQuestionCreatedByDataInput!
  create: UserCreateWithoutQuestionCreatedByInput!
}

input UserUpsertWithoutQuestionUpdateddByInput {
  update: UserUpdateWithoutQuestionUpdateddByDataInput!
  create: UserCreateWithoutQuestionUpdateddByInput!
}

input UserUpsertWithoutQuizCreatedByInput {
  update: UserUpdateWithoutQuizCreatedByDataInput!
  create: UserCreateWithoutQuizCreatedByInput!
}

input UserUpsertWithoutResultInput {
  update: UserUpdateWithoutResultDataInput!
  create: UserCreateWithoutResultInput!
}

input UserUpsertWithoutSubgroupmembersInput {
  update: UserUpdateWithoutSubgroupmembersDataInput!
  create: UserCreateWithoutSubgroupmembersInput!
}

input UserUpsertWithoutSubjectByMeInput {
  update: UserUpdateWithoutSubjectByMeDataInput!
  create: UserCreateWithoutSubjectByMeInput!
}

input UserUpsertWithoutSubjectSubscriptionInput {
  update: UserUpdateWithoutSubjectSubscriptionDataInput!
  create: UserCreateWithoutSubjectSubscriptionInput!
}

input UserUpsertWithoutTopicByMeInput {
  update: UserUpdateWithoutTopicByMeDataInput!
  create: UserCreateWithoutTopicByMeInput!
}

input UserUpsertWithoutTopicUpdateByMeInput {
  update: UserUpdateWithoutTopicUpdateByMeDataInput!
  create: UserCreateWithoutTopicUpdateByMeInput!
}

input UserUpsertWithoutUnitByMeInput {
  update: UserUpdateWithoutUnitByMeDataInput!
  create: UserCreateWithoutUnitByMeInput!
}

input UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput!
  create: UserCreateWithoutVotesInput!
}

input UserUpsertWithWhereUniqueWithoutContentUpdateByMeInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutContentUpdateByMeDataInput!
  create: UserCreateWithoutContentUpdateByMeInput!
}

input UserUpsertWithWhereUniqueWithoutOrgInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutOrgDataInput!
  create: UserCreateWithoutOrgInput!
}

input UserUpsertWithWhereUniqueWithoutRolesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutRolesDataInput!
  create: UserCreateWithoutRolesInput!
}

input UserUpsertWithWhereUniqueWithoutSubjectUpddateByMeInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSubjectUpddateByMeDataInput!
  create: UserCreateWithoutSubjectUpddateByMeInput!
}

input UserUpsertWithWhereUniqueWithoutSuborgInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSuborgDataInput!
  create: UserCreateWithoutSuborgInput!
}

input UserUpsertWithWhereUniqueWithoutUnitUpdatedByMeInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutUnitUpdatedByMeDataInput!
  create: UserCreateWithoutUnitUpdatedByMeInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  org: OrganizationWhereInput
  suborg_every: SuborgWhereInput
  suborg_some: SuborgWhereInput
  suborg_none: SuborgWhereInput
  groupmembers_every: GroupMemberWhereInput
  groupmembers_some: GroupMemberWhereInput
  groupmembers_none: GroupMemberWhereInput
  subgroupmembers_every: SubGroupMemberWhereInput
  subgroupmembers_some: SubGroupMemberWhereInput
  subgroupmembers_none: SubGroupMemberWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  roles_every: RoleWhereInput
  roles_some: RoleWhereInput
  roles_none: RoleWhereInput
  myprofiles_every: ProfileWhereInput
  myprofiles_some: ProfileWhereInput
  myprofiles_none: ProfileWhereInput
  subjectSubscription_every: SubjectSubscriptionWhereInput
  subjectSubscription_some: SubjectSubscriptionWhereInput
  subjectSubscription_none: SubjectSubscriptionWhereInput
  createdBy: String
  createdBy_not: String
  createdBy_in: [String!]
  createdBy_not_in: [String!]
  createdBy_lt: String
  createdBy_lte: String
  createdBy_gt: String
  createdBy_gte: String
  createdBy_contains: String
  createdBy_not_contains: String
  createdBy_starts_with: String
  createdBy_not_starts_with: String
  createdBy_ends_with: String
  createdBy_not_ends_with: String
  subjectByMe_every: SubjectWhereInput
  subjectByMe_some: SubjectWhereInput
  subjectByMe_none: SubjectWhereInput
  subjectUpddateByMe_every: SubjectWhereInput
  subjectUpddateByMe_some: SubjectWhereInput
  subjectUpddateByMe_none: SubjectWhereInput
  unitByMe_every: UnitWhereInput
  unitByMe_some: UnitWhereInput
  unitByMe_none: UnitWhereInput
  unitUpdatedByMe_every: UnitWhereInput
  unitUpdatedByMe_some: UnitWhereInput
  unitUpdatedByMe_none: UnitWhereInput
  topicByMe_every: TopicWhereInput
  topicByMe_some: TopicWhereInput
  topicByMe_none: TopicWhereInput
  topicUpdateByMe_every: TopicWhereInput
  topicUpdateByMe_some: TopicWhereInput
  topicUpdateByMe_none: TopicWhereInput
  contentByMe_every: ContentWhereInput
  contentByMe_some: ContentWhereInput
  contentByMe_none: ContentWhereInput
  contentUpdateByMe_every: ContentWhereInput
  contentUpdateByMe_some: ContentWhereInput
  contentUpdateByMe_none: ContentWhereInput
  questionCreatedBy_every: QuestionWhereInput
  questionCreatedBy_some: QuestionWhereInput
  questionCreatedBy_none: QuestionWhereInput
  questionUpdateddBy_every: QuestionWhereInput
  questionUpdateddBy_some: QuestionWhereInput
  questionUpdateddBy_none: QuestionWhereInput
  quizCreatedBy_every: QuizWhereInput
  quizCreatedBy_some: QuizWhereInput
  quizCreatedBy_none: QuizWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  result_every: ResultWhereInput
  result_some: ResultWhereInput
  result_none: ResultWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Vote {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  option: Option
  user: User
}

type VoteConnection {
  pageInfo: PageInfo!
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  id: ID
  option: OptionCreateOneWithoutVotesInput
  user: UserCreateOneWithoutVotesInput
}

input VoteCreateManyWithoutOptionInput {
  create: [VoteCreateWithoutOptionInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutOptionInput {
  id: ID
  user: UserCreateOneWithoutVotesInput
}

input VoteCreateWithoutUserInput {
  id: ID
  option: OptionCreateOneWithoutVotesInput
}

type VoteEdge {
  node: Vote!
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VotePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input VoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [VoteScalarWhereInput!]
  OR: [VoteScalarWhereInput!]
  NOT: [VoteScalarWhereInput!]
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
  AND: [VoteSubscriptionWhereInput!]
  OR: [VoteSubscriptionWhereInput!]
  NOT: [VoteSubscriptionWhereInput!]
}

input VoteUpdateInput {
  option: OptionUpdateOneWithoutVotesInput
  user: UserUpdateOneWithoutVotesInput
}

input VoteUpdateManyWithoutOptionInput {
  create: [VoteCreateWithoutOptionInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutOptionInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutOptionInput!]
  deleteMany: [VoteScalarWhereInput!]
}

input VoteUpdateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [VoteScalarWhereInput!]
}

input VoteUpdateWithoutOptionDataInput {
  user: UserUpdateOneWithoutVotesInput
}

input VoteUpdateWithoutUserDataInput {
  option: OptionUpdateOneWithoutVotesInput
}

input VoteUpdateWithWhereUniqueWithoutOptionInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutOptionDataInput!
}

input VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutUserDataInput!
}

input VoteUpsertWithWhereUniqueWithoutOptionInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutOptionDataInput!
  create: VoteCreateWithoutOptionInput!
}

input VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutUserDataInput!
  create: VoteCreateWithoutUserInput!
}

input VoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  option: OptionWhereInput
  user: UserWhereInput
  AND: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
}

input VoteWhereUniqueInput {
  id: ID
}
`
      }
    
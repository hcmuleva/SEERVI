"""
Question:

Subject : Question belong which Subject may belongs to subject ART/Commorce ELX Mech etc.... its optional because some subject may not have it
quetype: quetype can be single/multi choice , true/false, matching etc...
title: this is an option field because if html type is there then this field is not requirie
       this is applicable when we have text or image type of description
descriptionType:   html/fiile/vdo
descriptionurl
options: this is an json array
       [{optiontype:html/fiile/vdo , optionurl:"",isCorrect:true/falsex, descriptiontype:"html/fiile/vdo", description:"",  }]

createdBy: To track who has created this
level:1/2/3/4/5
updatedBy: to track who has update this
plandate: we can plan in advance, when Topic need to release
isPublished: we can mark content publish/unpublish so that user can view only publised Topic.
state: ACTIVE,DORMANT, DEACTIVE
status: APPROVED/SUBMITTED/REJECTED
available: Free/Paid/Subscription based etc....
isReviewed:
explaination: This will have exmplantion for soultion
"""
type Question {
  id: ID! @id
  subject: Subject @relation(name: "QuestionToSubject", onDelete: SET_NULL)
  unit: Unit @relation(name: "QuestionToUnit", onDelete: SET_NULL)
  topic: Topic @relation(name: "QuestionToTopic", onDelete: SET_NULL)
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  createdBy: User @relation(name: "CreateQuestionToUser", onDelete: SET_NULL)
  level: Int!
  updatedBy: User @relation(name: "UpdateQuestionToUser", onDelete: SET_NULL)
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  exam: [Exam!]! @relation(name: "QuestionToExam", onDelete: CASCADE)
  explaination: Json
  descriptionfileInfo: Json
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
  results: [Result!]! @relation(name: "QuestionToResult", onDelete: CASCADE)
  atemptedResult: [Result!]!
    @relation(name: "AttemptedQuestionToResult", onDelete: CASCADE)
  notattempted: [Result!]!
    @relation(name: "NotAttemptedQuestionToResult", onDelete: CASCADE)
  correct: [Result!]!
    @relation(name: "CorrectQuestionToResult", onDelete: CASCADE)
  wrong: [Result!]! @relation(name: "WrongQuestionToResult", onDelete: CASCADE)
}

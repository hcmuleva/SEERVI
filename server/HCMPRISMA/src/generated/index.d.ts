// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  address: (where?: AddressWhereInput) => Promise<boolean>;
  baseAddress: (where?: BaseAddressWhereInput) => Promise<boolean>;
  board: (where?: BoardWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  competition: (where?: CompetitionWhereInput) => Promise<boolean>;
  file: (where?: FileWhereInput) => Promise<boolean>;
  organization: (where?: OrganizationWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  role: (where?: RoleWhereInput) => Promise<boolean>;
  specialization: (where?: SpecializationWhereInput) => Promise<boolean>;
  studyCatelog: (where?: StudyCatelogWhereInput) => Promise<boolean>;
  subject: (where?: SubjectWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  address: (where: AddressWhereUniqueInput) => AddressNullablePromise;
  addresses: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Address>;
  addressesConnection: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AddressConnectionPromise;
  baseAddress: (
    where: BaseAddressWhereUniqueInput
  ) => BaseAddressNullablePromise;
  baseAddresses: (args?: {
    where?: BaseAddressWhereInput;
    orderBy?: BaseAddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<BaseAddress>;
  baseAddressesConnection: (args?: {
    where?: BaseAddressWhereInput;
    orderBy?: BaseAddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BaseAddressConnectionPromise;
  board: (where: BoardWhereUniqueInput) => BoardNullablePromise;
  boards: (args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Board>;
  boardsConnection: (args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BoardConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  competition: (
    where: CompetitionWhereUniqueInput
  ) => CompetitionNullablePromise;
  competitions: (args?: {
    where?: CompetitionWhereInput;
    orderBy?: CompetitionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Competition>;
  competitionsConnection: (args?: {
    where?: CompetitionWhereInput;
    orderBy?: CompetitionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CompetitionConnectionPromise;
  file: (where: FileWhereUniqueInput) => FileNullablePromise;
  files: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<File>;
  filesConnection: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FileConnectionPromise;
  organization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationNullablePromise;
  organizations: (args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Organization>;
  organizationsConnection: (args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrganizationConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  role: (where: RoleWhereUniqueInput) => RoleNullablePromise;
  roles: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Role>;
  rolesConnection: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoleConnectionPromise;
  specialization: (
    where: SpecializationWhereUniqueInput
  ) => SpecializationNullablePromise;
  specializations: (args?: {
    where?: SpecializationWhereInput;
    orderBy?: SpecializationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Specialization>;
  specializationsConnection: (args?: {
    where?: SpecializationWhereInput;
    orderBy?: SpecializationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SpecializationConnectionPromise;
  studyCatelog: (
    where: StudyCatelogWhereUniqueInput
  ) => StudyCatelogNullablePromise;
  studyCatelogs: (args?: {
    where?: StudyCatelogWhereInput;
    orderBy?: StudyCatelogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<StudyCatelog>;
  studyCatelogsConnection: (args?: {
    where?: StudyCatelogWhereInput;
    orderBy?: StudyCatelogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StudyCatelogConnectionPromise;
  subject: (where: SubjectWhereUniqueInput) => SubjectNullablePromise;
  subjects: (args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Subject>;
  subjectsConnection: (args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SubjectConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAddress: (data: AddressCreateInput) => AddressPromise;
  updateAddress: (args: {
    data: AddressUpdateInput;
    where: AddressWhereUniqueInput;
  }) => AddressPromise;
  updateManyAddresses: (args: {
    data: AddressUpdateManyMutationInput;
    where?: AddressWhereInput;
  }) => BatchPayloadPromise;
  upsertAddress: (args: {
    where: AddressWhereUniqueInput;
    create: AddressCreateInput;
    update: AddressUpdateInput;
  }) => AddressPromise;
  deleteAddress: (where: AddressWhereUniqueInput) => AddressPromise;
  deleteManyAddresses: (where?: AddressWhereInput) => BatchPayloadPromise;
  createBaseAddress: (data: BaseAddressCreateInput) => BaseAddressPromise;
  updateBaseAddress: (args: {
    data: BaseAddressUpdateInput;
    where: BaseAddressWhereUniqueInput;
  }) => BaseAddressPromise;
  updateManyBaseAddresses: (args: {
    data: BaseAddressUpdateManyMutationInput;
    where?: BaseAddressWhereInput;
  }) => BatchPayloadPromise;
  upsertBaseAddress: (args: {
    where: BaseAddressWhereUniqueInput;
    create: BaseAddressCreateInput;
    update: BaseAddressUpdateInput;
  }) => BaseAddressPromise;
  deleteBaseAddress: (where: BaseAddressWhereUniqueInput) => BaseAddressPromise;
  deleteManyBaseAddresses: (
    where?: BaseAddressWhereInput
  ) => BatchPayloadPromise;
  createBoard: (data: BoardCreateInput) => BoardPromise;
  updateBoard: (args: {
    data: BoardUpdateInput;
    where: BoardWhereUniqueInput;
  }) => BoardPromise;
  updateManyBoards: (args: {
    data: BoardUpdateManyMutationInput;
    where?: BoardWhereInput;
  }) => BatchPayloadPromise;
  upsertBoard: (args: {
    where: BoardWhereUniqueInput;
    create: BoardCreateInput;
    update: BoardUpdateInput;
  }) => BoardPromise;
  deleteBoard: (where: BoardWhereUniqueInput) => BoardPromise;
  deleteManyBoards: (where?: BoardWhereInput) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createCompetition: (data: CompetitionCreateInput) => CompetitionPromise;
  updateCompetition: (args: {
    data: CompetitionUpdateInput;
    where: CompetitionWhereUniqueInput;
  }) => CompetitionPromise;
  updateManyCompetitions: (args: {
    data: CompetitionUpdateManyMutationInput;
    where?: CompetitionWhereInput;
  }) => BatchPayloadPromise;
  upsertCompetition: (args: {
    where: CompetitionWhereUniqueInput;
    create: CompetitionCreateInput;
    update: CompetitionUpdateInput;
  }) => CompetitionPromise;
  deleteCompetition: (where: CompetitionWhereUniqueInput) => CompetitionPromise;
  deleteManyCompetitions: (
    where?: CompetitionWhereInput
  ) => BatchPayloadPromise;
  createFile: (data: FileCreateInput) => FilePromise;
  updateFile: (args: {
    data: FileUpdateInput;
    where: FileWhereUniqueInput;
  }) => FilePromise;
  updateManyFiles: (args: {
    data: FileUpdateManyMutationInput;
    where?: FileWhereInput;
  }) => BatchPayloadPromise;
  upsertFile: (args: {
    where: FileWhereUniqueInput;
    create: FileCreateInput;
    update: FileUpdateInput;
  }) => FilePromise;
  deleteFile: (where: FileWhereUniqueInput) => FilePromise;
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise;
  createOrganization: (data: OrganizationCreateInput) => OrganizationPromise;
  updateOrganization: (args: {
    data: OrganizationUpdateInput;
    where: OrganizationWhereUniqueInput;
  }) => OrganizationPromise;
  updateManyOrganizations: (args: {
    data: OrganizationUpdateManyMutationInput;
    where?: OrganizationWhereInput;
  }) => BatchPayloadPromise;
  upsertOrganization: (args: {
    where: OrganizationWhereUniqueInput;
    create: OrganizationCreateInput;
    update: OrganizationUpdateInput;
  }) => OrganizationPromise;
  deleteOrganization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationPromise;
  deleteManyOrganizations: (
    where?: OrganizationWhereInput
  ) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createRole: (data: RoleCreateInput) => RolePromise;
  updateRole: (args: {
    data: RoleUpdateInput;
    where: RoleWhereUniqueInput;
  }) => RolePromise;
  updateManyRoles: (args: {
    data: RoleUpdateManyMutationInput;
    where?: RoleWhereInput;
  }) => BatchPayloadPromise;
  upsertRole: (args: {
    where: RoleWhereUniqueInput;
    create: RoleCreateInput;
    update: RoleUpdateInput;
  }) => RolePromise;
  deleteRole: (where: RoleWhereUniqueInput) => RolePromise;
  deleteManyRoles: (where?: RoleWhereInput) => BatchPayloadPromise;
  createSpecialization: (
    data: SpecializationCreateInput
  ) => SpecializationPromise;
  updateSpecialization: (args: {
    data: SpecializationUpdateInput;
    where: SpecializationWhereUniqueInput;
  }) => SpecializationPromise;
  updateManySpecializations: (args: {
    data: SpecializationUpdateManyMutationInput;
    where?: SpecializationWhereInput;
  }) => BatchPayloadPromise;
  upsertSpecialization: (args: {
    where: SpecializationWhereUniqueInput;
    create: SpecializationCreateInput;
    update: SpecializationUpdateInput;
  }) => SpecializationPromise;
  deleteSpecialization: (
    where: SpecializationWhereUniqueInput
  ) => SpecializationPromise;
  deleteManySpecializations: (
    where?: SpecializationWhereInput
  ) => BatchPayloadPromise;
  createStudyCatelog: (data: StudyCatelogCreateInput) => StudyCatelogPromise;
  updateStudyCatelog: (args: {
    data: StudyCatelogUpdateInput;
    where: StudyCatelogWhereUniqueInput;
  }) => StudyCatelogPromise;
  updateManyStudyCatelogs: (args: {
    data: StudyCatelogUpdateManyMutationInput;
    where?: StudyCatelogWhereInput;
  }) => BatchPayloadPromise;
  upsertStudyCatelog: (args: {
    where: StudyCatelogWhereUniqueInput;
    create: StudyCatelogCreateInput;
    update: StudyCatelogUpdateInput;
  }) => StudyCatelogPromise;
  deleteStudyCatelog: (
    where: StudyCatelogWhereUniqueInput
  ) => StudyCatelogPromise;
  deleteManyStudyCatelogs: (
    where?: StudyCatelogWhereInput
  ) => BatchPayloadPromise;
  createSubject: (data: SubjectCreateInput) => SubjectPromise;
  updateSubject: (args: {
    data: SubjectUpdateInput;
    where: SubjectWhereUniqueInput;
  }) => SubjectPromise;
  updateManySubjects: (args: {
    data: SubjectUpdateManyMutationInput;
    where?: SubjectWhereInput;
  }) => BatchPayloadPromise;
  upsertSubject: (args: {
    where: SubjectWhereUniqueInput;
    create: SubjectCreateInput;
    update: SubjectUpdateInput;
  }) => SubjectPromise;
  deleteSubject: (where: SubjectWhereUniqueInput) => SubjectPromise;
  deleteManySubjects: (where?: SubjectWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  address: (
    where?: AddressSubscriptionWhereInput
  ) => AddressSubscriptionPayloadSubscription;
  baseAddress: (
    where?: BaseAddressSubscriptionWhereInput
  ) => BaseAddressSubscriptionPayloadSubscription;
  board: (
    where?: BoardSubscriptionWhereInput
  ) => BoardSubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  competition: (
    where?: CompetitionSubscriptionWhereInput
  ) => CompetitionSubscriptionPayloadSubscription;
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription;
  organization: (
    where?: OrganizationSubscriptionWhereInput
  ) => OrganizationSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  role: (
    where?: RoleSubscriptionWhereInput
  ) => RoleSubscriptionPayloadSubscription;
  specialization: (
    where?: SpecializationSubscriptionWhereInput
  ) => SpecializationSubscriptionPayloadSubscription;
  studyCatelog: (
    where?: StudyCatelogSubscriptionWhereInput
  ) => StudyCatelogSubscriptionPayloadSubscription;
  subject: (
    where?: SubjectSubscriptionWhereInput
  ) => SubjectSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "body_ASC"
  | "body_DESC"
  | "published_ASC"
  | "published_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type AddressOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "house_ASC"
  | "house_DESC"
  | "landmark_ASC"
  | "landmark_DESC"
  | "published_ASC"
  | "published_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "createdBy_ASC"
  | "createdBy_DESC";

export type RoleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "roleName_ASC"
  | "roleName_DESC"
  | "createdBy_ASC"
  | "createdBy_DESC";

export type BaseAddressOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "officename_ASC"
  | "officename_DESC"
  | "pincode_ASC"
  | "pincode_DESC"
  | "officeType_ASC"
  | "officeType_DESC"
  | "Deliverystatus_ASC"
  | "Deliverystatus_DESC"
  | "divisionname_ASC"
  | "divisionname_DESC"
  | "regionname_ASC"
  | "regionname_DESC"
  | "circlename_ASC"
  | "circlename_DESC"
  | "taluk_ASC"
  | "taluk_DESC"
  | "districtname_ASC"
  | "districtname_DESC"
  | "statename_ASC"
  | "statename_DESC"
  | "telephone_ASC"
  | "telephone_DESC"
  | "relatedSuboffice_ASC"
  | "relatedSuboffice_DESC"
  | "relatedHeadoffice_ASC"
  | "relatedHeadoffice_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "latitude_ASC"
  | "latitude_DESC";

export type SubjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type BoardOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type SpecializationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type CompetitionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type FileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "path_ASC"
  | "path_DESC"
  | "filename_ASC"
  | "filename_DESC"
  | "mimetype_ASC"
  | "mimetype_DESC"
  | "encoding_ASC"
  | "encoding_DESC";

export type OrganizationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type StudyCatelogOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "std_ASC"
  | "std_DESC"
  | "substd_ASC"
  | "substd_DESC"
  | "academic_ASC"
  | "academic_DESC"
  | "subacademic_ASC"
  | "subacademic_DESC"
  | "published_ASC"
  | "published_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AddressWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  author?: Maybe<UserWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  addresses_every?: Maybe<AddressWhereInput>;
  addresses_some?: Maybe<AddressWhereInput>;
  addresses_none?: Maybe<AddressWhereInput>;
  org?: Maybe<OrganizationWhereInput>;
  roles_every?: Maybe<RoleWhereInput>;
  roles_some?: Maybe<RoleWhereInput>;
  roles_none?: Maybe<RoleWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  createdBy?: Maybe<String>;
  createdBy_not?: Maybe<String>;
  createdBy_in?: Maybe<String[] | String>;
  createdBy_not_in?: Maybe<String[] | String>;
  createdBy_lt?: Maybe<String>;
  createdBy_lte?: Maybe<String>;
  createdBy_gt?: Maybe<String>;
  createdBy_gte?: Maybe<String>;
  createdBy_contains?: Maybe<String>;
  createdBy_not_contains?: Maybe<String>;
  createdBy_starts_with?: Maybe<String>;
  createdBy_not_starts_with?: Maybe<String>;
  createdBy_ends_with?: Maybe<String>;
  createdBy_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  post?: Maybe<PostWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface AddressWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  house?: Maybe<String>;
  house_not?: Maybe<String>;
  house_in?: Maybe<String[] | String>;
  house_not_in?: Maybe<String[] | String>;
  house_lt?: Maybe<String>;
  house_lte?: Maybe<String>;
  house_gt?: Maybe<String>;
  house_gte?: Maybe<String>;
  house_contains?: Maybe<String>;
  house_not_contains?: Maybe<String>;
  house_starts_with?: Maybe<String>;
  house_not_starts_with?: Maybe<String>;
  house_ends_with?: Maybe<String>;
  house_not_ends_with?: Maybe<String>;
  landmark?: Maybe<String>;
  landmark_not?: Maybe<String>;
  landmark_in?: Maybe<String[] | String>;
  landmark_not_in?: Maybe<String[] | String>;
  landmark_lt?: Maybe<String>;
  landmark_lte?: Maybe<String>;
  landmark_gt?: Maybe<String>;
  landmark_gte?: Maybe<String>;
  landmark_contains?: Maybe<String>;
  landmark_not_contains?: Maybe<String>;
  landmark_starts_with?: Maybe<String>;
  landmark_not_starts_with?: Maybe<String>;
  landmark_ends_with?: Maybe<String>;
  landmark_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  author?: Maybe<UserWhereInput>;
  baseAddress?: Maybe<BaseAddressWhereInput>;
  AND?: Maybe<AddressWhereInput[] | AddressWhereInput>;
  OR?: Maybe<AddressWhereInput[] | AddressWhereInput>;
  NOT?: Maybe<AddressWhereInput[] | AddressWhereInput>;
}

export interface BaseAddressWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  officename?: Maybe<String>;
  officename_not?: Maybe<String>;
  officename_in?: Maybe<String[] | String>;
  officename_not_in?: Maybe<String[] | String>;
  officename_lt?: Maybe<String>;
  officename_lte?: Maybe<String>;
  officename_gt?: Maybe<String>;
  officename_gte?: Maybe<String>;
  officename_contains?: Maybe<String>;
  officename_not_contains?: Maybe<String>;
  officename_starts_with?: Maybe<String>;
  officename_not_starts_with?: Maybe<String>;
  officename_ends_with?: Maybe<String>;
  officename_not_ends_with?: Maybe<String>;
  pincode?: Maybe<String>;
  pincode_not?: Maybe<String>;
  pincode_in?: Maybe<String[] | String>;
  pincode_not_in?: Maybe<String[] | String>;
  pincode_lt?: Maybe<String>;
  pincode_lte?: Maybe<String>;
  pincode_gt?: Maybe<String>;
  pincode_gte?: Maybe<String>;
  pincode_contains?: Maybe<String>;
  pincode_not_contains?: Maybe<String>;
  pincode_starts_with?: Maybe<String>;
  pincode_not_starts_with?: Maybe<String>;
  pincode_ends_with?: Maybe<String>;
  pincode_not_ends_with?: Maybe<String>;
  officeType?: Maybe<String>;
  officeType_not?: Maybe<String>;
  officeType_in?: Maybe<String[] | String>;
  officeType_not_in?: Maybe<String[] | String>;
  officeType_lt?: Maybe<String>;
  officeType_lte?: Maybe<String>;
  officeType_gt?: Maybe<String>;
  officeType_gte?: Maybe<String>;
  officeType_contains?: Maybe<String>;
  officeType_not_contains?: Maybe<String>;
  officeType_starts_with?: Maybe<String>;
  officeType_not_starts_with?: Maybe<String>;
  officeType_ends_with?: Maybe<String>;
  officeType_not_ends_with?: Maybe<String>;
  Deliverystatus?: Maybe<String>;
  Deliverystatus_not?: Maybe<String>;
  Deliverystatus_in?: Maybe<String[] | String>;
  Deliverystatus_not_in?: Maybe<String[] | String>;
  Deliverystatus_lt?: Maybe<String>;
  Deliverystatus_lte?: Maybe<String>;
  Deliverystatus_gt?: Maybe<String>;
  Deliverystatus_gte?: Maybe<String>;
  Deliverystatus_contains?: Maybe<String>;
  Deliverystatus_not_contains?: Maybe<String>;
  Deliverystatus_starts_with?: Maybe<String>;
  Deliverystatus_not_starts_with?: Maybe<String>;
  Deliverystatus_ends_with?: Maybe<String>;
  Deliverystatus_not_ends_with?: Maybe<String>;
  divisionname?: Maybe<String>;
  divisionname_not?: Maybe<String>;
  divisionname_in?: Maybe<String[] | String>;
  divisionname_not_in?: Maybe<String[] | String>;
  divisionname_lt?: Maybe<String>;
  divisionname_lte?: Maybe<String>;
  divisionname_gt?: Maybe<String>;
  divisionname_gte?: Maybe<String>;
  divisionname_contains?: Maybe<String>;
  divisionname_not_contains?: Maybe<String>;
  divisionname_starts_with?: Maybe<String>;
  divisionname_not_starts_with?: Maybe<String>;
  divisionname_ends_with?: Maybe<String>;
  divisionname_not_ends_with?: Maybe<String>;
  regionname?: Maybe<String>;
  regionname_not?: Maybe<String>;
  regionname_in?: Maybe<String[] | String>;
  regionname_not_in?: Maybe<String[] | String>;
  regionname_lt?: Maybe<String>;
  regionname_lte?: Maybe<String>;
  regionname_gt?: Maybe<String>;
  regionname_gte?: Maybe<String>;
  regionname_contains?: Maybe<String>;
  regionname_not_contains?: Maybe<String>;
  regionname_starts_with?: Maybe<String>;
  regionname_not_starts_with?: Maybe<String>;
  regionname_ends_with?: Maybe<String>;
  regionname_not_ends_with?: Maybe<String>;
  circlename?: Maybe<String>;
  circlename_not?: Maybe<String>;
  circlename_in?: Maybe<String[] | String>;
  circlename_not_in?: Maybe<String[] | String>;
  circlename_lt?: Maybe<String>;
  circlename_lte?: Maybe<String>;
  circlename_gt?: Maybe<String>;
  circlename_gte?: Maybe<String>;
  circlename_contains?: Maybe<String>;
  circlename_not_contains?: Maybe<String>;
  circlename_starts_with?: Maybe<String>;
  circlename_not_starts_with?: Maybe<String>;
  circlename_ends_with?: Maybe<String>;
  circlename_not_ends_with?: Maybe<String>;
  taluk?: Maybe<String>;
  taluk_not?: Maybe<String>;
  taluk_in?: Maybe<String[] | String>;
  taluk_not_in?: Maybe<String[] | String>;
  taluk_lt?: Maybe<String>;
  taluk_lte?: Maybe<String>;
  taluk_gt?: Maybe<String>;
  taluk_gte?: Maybe<String>;
  taluk_contains?: Maybe<String>;
  taluk_not_contains?: Maybe<String>;
  taluk_starts_with?: Maybe<String>;
  taluk_not_starts_with?: Maybe<String>;
  taluk_ends_with?: Maybe<String>;
  taluk_not_ends_with?: Maybe<String>;
  districtname?: Maybe<String>;
  districtname_not?: Maybe<String>;
  districtname_in?: Maybe<String[] | String>;
  districtname_not_in?: Maybe<String[] | String>;
  districtname_lt?: Maybe<String>;
  districtname_lte?: Maybe<String>;
  districtname_gt?: Maybe<String>;
  districtname_gte?: Maybe<String>;
  districtname_contains?: Maybe<String>;
  districtname_not_contains?: Maybe<String>;
  districtname_starts_with?: Maybe<String>;
  districtname_not_starts_with?: Maybe<String>;
  districtname_ends_with?: Maybe<String>;
  districtname_not_ends_with?: Maybe<String>;
  statename?: Maybe<String>;
  statename_not?: Maybe<String>;
  statename_in?: Maybe<String[] | String>;
  statename_not_in?: Maybe<String[] | String>;
  statename_lt?: Maybe<String>;
  statename_lte?: Maybe<String>;
  statename_gt?: Maybe<String>;
  statename_gte?: Maybe<String>;
  statename_contains?: Maybe<String>;
  statename_not_contains?: Maybe<String>;
  statename_starts_with?: Maybe<String>;
  statename_not_starts_with?: Maybe<String>;
  statename_ends_with?: Maybe<String>;
  statename_not_ends_with?: Maybe<String>;
  telephone?: Maybe<String>;
  telephone_not?: Maybe<String>;
  telephone_in?: Maybe<String[] | String>;
  telephone_not_in?: Maybe<String[] | String>;
  telephone_lt?: Maybe<String>;
  telephone_lte?: Maybe<String>;
  telephone_gt?: Maybe<String>;
  telephone_gte?: Maybe<String>;
  telephone_contains?: Maybe<String>;
  telephone_not_contains?: Maybe<String>;
  telephone_starts_with?: Maybe<String>;
  telephone_not_starts_with?: Maybe<String>;
  telephone_ends_with?: Maybe<String>;
  telephone_not_ends_with?: Maybe<String>;
  relatedSuboffice?: Maybe<String>;
  relatedSuboffice_not?: Maybe<String>;
  relatedSuboffice_in?: Maybe<String[] | String>;
  relatedSuboffice_not_in?: Maybe<String[] | String>;
  relatedSuboffice_lt?: Maybe<String>;
  relatedSuboffice_lte?: Maybe<String>;
  relatedSuboffice_gt?: Maybe<String>;
  relatedSuboffice_gte?: Maybe<String>;
  relatedSuboffice_contains?: Maybe<String>;
  relatedSuboffice_not_contains?: Maybe<String>;
  relatedSuboffice_starts_with?: Maybe<String>;
  relatedSuboffice_not_starts_with?: Maybe<String>;
  relatedSuboffice_ends_with?: Maybe<String>;
  relatedSuboffice_not_ends_with?: Maybe<String>;
  relatedHeadoffice?: Maybe<String>;
  relatedHeadoffice_not?: Maybe<String>;
  relatedHeadoffice_in?: Maybe<String[] | String>;
  relatedHeadoffice_not_in?: Maybe<String[] | String>;
  relatedHeadoffice_lt?: Maybe<String>;
  relatedHeadoffice_lte?: Maybe<String>;
  relatedHeadoffice_gt?: Maybe<String>;
  relatedHeadoffice_gte?: Maybe<String>;
  relatedHeadoffice_contains?: Maybe<String>;
  relatedHeadoffice_not_contains?: Maybe<String>;
  relatedHeadoffice_starts_with?: Maybe<String>;
  relatedHeadoffice_not_starts_with?: Maybe<String>;
  relatedHeadoffice_ends_with?: Maybe<String>;
  relatedHeadoffice_not_ends_with?: Maybe<String>;
  longitude?: Maybe<String>;
  longitude_not?: Maybe<String>;
  longitude_in?: Maybe<String[] | String>;
  longitude_not_in?: Maybe<String[] | String>;
  longitude_lt?: Maybe<String>;
  longitude_lte?: Maybe<String>;
  longitude_gt?: Maybe<String>;
  longitude_gte?: Maybe<String>;
  longitude_contains?: Maybe<String>;
  longitude_not_contains?: Maybe<String>;
  longitude_starts_with?: Maybe<String>;
  longitude_not_starts_with?: Maybe<String>;
  longitude_ends_with?: Maybe<String>;
  longitude_not_ends_with?: Maybe<String>;
  latitude?: Maybe<String>;
  latitude_not?: Maybe<String>;
  latitude_in?: Maybe<String[] | String>;
  latitude_not_in?: Maybe<String[] | String>;
  latitude_lt?: Maybe<String>;
  latitude_lte?: Maybe<String>;
  latitude_gt?: Maybe<String>;
  latitude_gte?: Maybe<String>;
  latitude_contains?: Maybe<String>;
  latitude_not_contains?: Maybe<String>;
  latitude_starts_with?: Maybe<String>;
  latitude_not_starts_with?: Maybe<String>;
  latitude_ends_with?: Maybe<String>;
  latitude_not_ends_with?: Maybe<String>;
  AND?: Maybe<BaseAddressWhereInput[] | BaseAddressWhereInput>;
  OR?: Maybe<BaseAddressWhereInput[] | BaseAddressWhereInput>;
  NOT?: Maybe<BaseAddressWhereInput[] | BaseAddressWhereInput>;
}

export interface OrganizationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  author_every?: Maybe<UserWhereInput>;
  author_some?: Maybe<UserWhereInput>;
  author_none?: Maybe<UserWhereInput>;
  roles_every?: Maybe<RoleWhereInput>;
  roles_some?: Maybe<RoleWhereInput>;
  roles_none?: Maybe<RoleWhereInput>;
  AND?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
  OR?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
  NOT?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
}

export interface RoleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  roleName?: Maybe<String>;
  roleName_not?: Maybe<String>;
  roleName_in?: Maybe<String[] | String>;
  roleName_not_in?: Maybe<String[] | String>;
  roleName_lt?: Maybe<String>;
  roleName_lte?: Maybe<String>;
  roleName_gt?: Maybe<String>;
  roleName_gte?: Maybe<String>;
  roleName_contains?: Maybe<String>;
  roleName_not_contains?: Maybe<String>;
  roleName_starts_with?: Maybe<String>;
  roleName_not_starts_with?: Maybe<String>;
  roleName_ends_with?: Maybe<String>;
  roleName_not_ends_with?: Maybe<String>;
  createdBy?: Maybe<String>;
  createdBy_not?: Maybe<String>;
  createdBy_in?: Maybe<String[] | String>;
  createdBy_not_in?: Maybe<String[] | String>;
  createdBy_lt?: Maybe<String>;
  createdBy_lte?: Maybe<String>;
  createdBy_gt?: Maybe<String>;
  createdBy_gte?: Maybe<String>;
  createdBy_contains?: Maybe<String>;
  createdBy_not_contains?: Maybe<String>;
  createdBy_starts_with?: Maybe<String>;
  createdBy_not_starts_with?: Maybe<String>;
  createdBy_ends_with?: Maybe<String>;
  createdBy_not_ends_with?: Maybe<String>;
  users?: Maybe<UserWhereInput>;
  orgs?: Maybe<OrganizationWhereInput>;
  AND?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  OR?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  NOT?: Maybe<RoleWhereInput[] | RoleWhereInput>;
}

export type BaseAddressWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type BoardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SubjectWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  catelog?: Maybe<StudyCatelogWhereInput>;
  AND?: Maybe<SubjectWhereInput[] | SubjectWhereInput>;
  OR?: Maybe<SubjectWhereInput[] | SubjectWhereInput>;
  NOT?: Maybe<SubjectWhereInput[] | SubjectWhereInput>;
}

export interface StudyCatelogWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  std?: Maybe<String>;
  std_not?: Maybe<String>;
  std_in?: Maybe<String[] | String>;
  std_not_in?: Maybe<String[] | String>;
  std_lt?: Maybe<String>;
  std_lte?: Maybe<String>;
  std_gt?: Maybe<String>;
  std_gte?: Maybe<String>;
  std_contains?: Maybe<String>;
  std_not_contains?: Maybe<String>;
  std_starts_with?: Maybe<String>;
  std_not_starts_with?: Maybe<String>;
  std_ends_with?: Maybe<String>;
  std_not_ends_with?: Maybe<String>;
  substd?: Maybe<String>;
  substd_not?: Maybe<String>;
  substd_in?: Maybe<String[] | String>;
  substd_not_in?: Maybe<String[] | String>;
  substd_lt?: Maybe<String>;
  substd_lte?: Maybe<String>;
  substd_gt?: Maybe<String>;
  substd_gte?: Maybe<String>;
  substd_contains?: Maybe<String>;
  substd_not_contains?: Maybe<String>;
  substd_starts_with?: Maybe<String>;
  substd_not_starts_with?: Maybe<String>;
  substd_ends_with?: Maybe<String>;
  substd_not_ends_with?: Maybe<String>;
  academic?: Maybe<String>;
  academic_not?: Maybe<String>;
  academic_in?: Maybe<String[] | String>;
  academic_not_in?: Maybe<String[] | String>;
  academic_lt?: Maybe<String>;
  academic_lte?: Maybe<String>;
  academic_gt?: Maybe<String>;
  academic_gte?: Maybe<String>;
  academic_contains?: Maybe<String>;
  academic_not_contains?: Maybe<String>;
  academic_starts_with?: Maybe<String>;
  academic_not_starts_with?: Maybe<String>;
  academic_ends_with?: Maybe<String>;
  academic_not_ends_with?: Maybe<String>;
  subacademic?: Maybe<String>;
  subacademic_not?: Maybe<String>;
  subacademic_in?: Maybe<String[] | String>;
  subacademic_not_in?: Maybe<String[] | String>;
  subacademic_lt?: Maybe<String>;
  subacademic_lte?: Maybe<String>;
  subacademic_gt?: Maybe<String>;
  subacademic_gte?: Maybe<String>;
  subacademic_contains?: Maybe<String>;
  subacademic_not_contains?: Maybe<String>;
  subacademic_starts_with?: Maybe<String>;
  subacademic_not_starts_with?: Maybe<String>;
  subacademic_ends_with?: Maybe<String>;
  subacademic_not_ends_with?: Maybe<String>;
  subjects_every?: Maybe<SubjectWhereInput>;
  subjects_some?: Maybe<SubjectWhereInput>;
  subjects_none?: Maybe<SubjectWhereInput>;
  boards_every?: Maybe<BoardWhereInput>;
  boards_some?: Maybe<BoardWhereInput>;
  boards_none?: Maybe<BoardWhereInput>;
  specialization_every?: Maybe<SpecializationWhereInput>;
  specialization_some?: Maybe<SpecializationWhereInput>;
  specialization_none?: Maybe<SpecializationWhereInput>;
  competition_every?: Maybe<CompetitionWhereInput>;
  competition_some?: Maybe<CompetitionWhereInput>;
  competition_none?: Maybe<CompetitionWhereInput>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  AND?: Maybe<StudyCatelogWhereInput[] | StudyCatelogWhereInput>;
  OR?: Maybe<StudyCatelogWhereInput[] | StudyCatelogWhereInput>;
  NOT?: Maybe<StudyCatelogWhereInput[] | StudyCatelogWhereInput>;
}

export interface BoardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  catelog?: Maybe<StudyCatelogWhereInput>;
  AND?: Maybe<BoardWhereInput[] | BoardWhereInput>;
  OR?: Maybe<BoardWhereInput[] | BoardWhereInput>;
  NOT?: Maybe<BoardWhereInput[] | BoardWhereInput>;
}

export interface SpecializationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  catelog?: Maybe<StudyCatelogWhereInput>;
  AND?: Maybe<SpecializationWhereInput[] | SpecializationWhereInput>;
  OR?: Maybe<SpecializationWhereInput[] | SpecializationWhereInput>;
  NOT?: Maybe<SpecializationWhereInput[] | SpecializationWhereInput>;
}

export interface CompetitionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  catelog?: Maybe<StudyCatelogWhereInput>;
  AND?: Maybe<CompetitionWhereInput[] | CompetitionWhereInput>;
  OR?: Maybe<CompetitionWhereInput[] | CompetitionWhereInput>;
  NOT?: Maybe<CompetitionWhereInput[] | CompetitionWhereInput>;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type CompetitionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type FileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  path?: Maybe<String>;
  path_not?: Maybe<String>;
  path_in?: Maybe<String[] | String>;
  path_not_in?: Maybe<String[] | String>;
  path_lt?: Maybe<String>;
  path_lte?: Maybe<String>;
  path_gt?: Maybe<String>;
  path_gte?: Maybe<String>;
  path_contains?: Maybe<String>;
  path_not_contains?: Maybe<String>;
  path_starts_with?: Maybe<String>;
  path_not_starts_with?: Maybe<String>;
  path_ends_with?: Maybe<String>;
  path_not_ends_with?: Maybe<String>;
  filename?: Maybe<String>;
  filename_not?: Maybe<String>;
  filename_in?: Maybe<String[] | String>;
  filename_not_in?: Maybe<String[] | String>;
  filename_lt?: Maybe<String>;
  filename_lte?: Maybe<String>;
  filename_gt?: Maybe<String>;
  filename_gte?: Maybe<String>;
  filename_contains?: Maybe<String>;
  filename_not_contains?: Maybe<String>;
  filename_starts_with?: Maybe<String>;
  filename_not_starts_with?: Maybe<String>;
  filename_ends_with?: Maybe<String>;
  filename_not_ends_with?: Maybe<String>;
  mimetype?: Maybe<String>;
  mimetype_not?: Maybe<String>;
  mimetype_in?: Maybe<String[] | String>;
  mimetype_not_in?: Maybe<String[] | String>;
  mimetype_lt?: Maybe<String>;
  mimetype_lte?: Maybe<String>;
  mimetype_gt?: Maybe<String>;
  mimetype_gte?: Maybe<String>;
  mimetype_contains?: Maybe<String>;
  mimetype_not_contains?: Maybe<String>;
  mimetype_starts_with?: Maybe<String>;
  mimetype_not_starts_with?: Maybe<String>;
  mimetype_ends_with?: Maybe<String>;
  mimetype_not_ends_with?: Maybe<String>;
  encoding?: Maybe<String>;
  encoding_not?: Maybe<String>;
  encoding_in?: Maybe<String[] | String>;
  encoding_not_in?: Maybe<String[] | String>;
  encoding_lt?: Maybe<String>;
  encoding_lte?: Maybe<String>;
  encoding_gt?: Maybe<String>;
  encoding_gte?: Maybe<String>;
  encoding_contains?: Maybe<String>;
  encoding_not_contains?: Maybe<String>;
  encoding_starts_with?: Maybe<String>;
  encoding_not_starts_with?: Maybe<String>;
  encoding_ends_with?: Maybe<String>;
  encoding_not_ends_with?: Maybe<String>;
  AND?: Maybe<FileWhereInput[] | FileWhereInput>;
  OR?: Maybe<FileWhereInput[] | FileWhereInput>;
  NOT?: Maybe<FileWhereInput[] | FileWhereInput>;
}

export type OrganizationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RoleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SpecializationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type StudyCatelogWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SubjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface AddressCreateInput {
  id?: Maybe<ID_Input>;
  house?: Maybe<String>;
  landmark?: Maybe<String>;
  published: Boolean;
  author: UserCreateOneWithoutAddressesInput;
  baseAddress?: Maybe<BaseAddressCreateOneInput>;
}

export interface UserCreateOneWithoutAddressesInput {
  create?: Maybe<UserCreateWithoutAddressesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutAddressesInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  org: OrganizationCreateOneWithoutAuthorInput;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  createdBy?: Maybe<String>;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  title: String;
  body: String;
  published: Boolean;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
}

export interface CommentCreateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  text: String;
  author: UserCreateOneWithoutCommentsInput;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  addresses?: Maybe<AddressCreateManyWithoutAuthorInput>;
  org: OrganizationCreateOneWithoutAuthorInput;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  createdBy?: Maybe<String>;
}

export interface AddressCreateManyWithoutAuthorInput {
  create?: Maybe<
    AddressCreateWithoutAuthorInput[] | AddressCreateWithoutAuthorInput
  >;
  connect?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
}

export interface AddressCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  house?: Maybe<String>;
  landmark?: Maybe<String>;
  published: Boolean;
  baseAddress?: Maybe<BaseAddressCreateOneInput>;
}

export interface BaseAddressCreateOneInput {
  create?: Maybe<BaseAddressCreateInput>;
  connect?: Maybe<BaseAddressWhereUniqueInput>;
}

export interface BaseAddressCreateInput {
  id?: Maybe<ID_Input>;
  officename?: Maybe<String>;
  pincode?: Maybe<String>;
  officeType?: Maybe<String>;
  Deliverystatus?: Maybe<String>;
  divisionname?: Maybe<String>;
  regionname?: Maybe<String>;
  circlename?: Maybe<String>;
  taluk?: Maybe<String>;
  districtname?: Maybe<String>;
  statename?: Maybe<String>;
  telephone?: Maybe<String>;
  relatedSuboffice?: Maybe<String>;
  relatedHeadoffice?: Maybe<String>;
  longitude?: Maybe<String>;
  latitude?: Maybe<String>;
}

export interface OrganizationCreateOneWithoutAuthorInput {
  create?: Maybe<OrganizationCreateWithoutAuthorInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  roles?: Maybe<RoleCreateManyWithoutOrgsInput>;
}

export interface RoleCreateManyWithoutOrgsInput {
  create?: Maybe<RoleCreateWithoutOrgsInput[] | RoleCreateWithoutOrgsInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
}

export interface RoleCreateWithoutOrgsInput {
  id?: Maybe<ID_Input>;
  roleName: String;
  createdBy: String;
  users: UserCreateOneWithoutRolesInput;
}

export interface UserCreateOneWithoutRolesInput {
  create?: Maybe<UserCreateWithoutRolesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutRolesInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  addresses?: Maybe<AddressCreateManyWithoutAuthorInput>;
  org: OrganizationCreateOneWithoutAuthorInput;
  createdBy?: Maybe<String>;
}

export interface CommentCreateManyWithoutAuthorInput {
  create?: Maybe<
    CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  text: String;
  post: PostCreateOneWithoutCommentsInput;
}

export interface PostCreateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  title: String;
  body: String;
  published: Boolean;
  author: UserCreateOneWithoutPostsInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  addresses?: Maybe<AddressCreateManyWithoutAuthorInput>;
  org: OrganizationCreateOneWithoutAuthorInput;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  createdBy?: Maybe<String>;
}

export interface RoleCreateManyWithoutUsersInput {
  create?: Maybe<RoleCreateWithoutUsersInput[] | RoleCreateWithoutUsersInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
}

export interface RoleCreateWithoutUsersInput {
  id?: Maybe<ID_Input>;
  roleName: String;
  createdBy: String;
  orgs: OrganizationCreateOneWithoutRolesInput;
}

export interface OrganizationCreateOneWithoutRolesInput {
  create?: Maybe<OrganizationCreateWithoutRolesInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationCreateWithoutRolesInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  author?: Maybe<UserCreateManyWithoutOrgInput>;
}

export interface UserCreateManyWithoutOrgInput {
  create?: Maybe<UserCreateWithoutOrgInput[] | UserCreateWithoutOrgInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutOrgInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  addresses?: Maybe<AddressCreateManyWithoutAuthorInput>;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  createdBy?: Maybe<String>;
}

export interface AddressUpdateInput {
  house?: Maybe<String>;
  landmark?: Maybe<String>;
  published?: Maybe<Boolean>;
  author?: Maybe<UserUpdateOneRequiredWithoutAddressesInput>;
  baseAddress?: Maybe<BaseAddressUpdateOneInput>;
}

export interface UserUpdateOneRequiredWithoutAddressesInput {
  create?: Maybe<UserCreateWithoutAddressesInput>;
  update?: Maybe<UserUpdateWithoutAddressesDataInput>;
  upsert?: Maybe<UserUpsertWithoutAddressesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutAddressesDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  org?: Maybe<OrganizationUpdateOneRequiredWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  createdBy?: Maybe<String>;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  published?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
}

export interface CommentUpdateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutPostInput[]
    | CommentUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutPostInput[]
    | CommentUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPostDataInput;
}

export interface CommentUpdateWithoutPostDataInput {
  text?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
}

export interface UserUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  addresses?: Maybe<AddressUpdateManyWithoutAuthorInput>;
  org?: Maybe<OrganizationUpdateOneRequiredWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  createdBy?: Maybe<String>;
}

export interface AddressUpdateManyWithoutAuthorInput {
  create?: Maybe<
    AddressCreateWithoutAuthorInput[] | AddressCreateWithoutAuthorInput
  >;
  delete?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  connect?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  set?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  disconnect?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  update?: Maybe<
    | AddressUpdateWithWhereUniqueWithoutAuthorInput[]
    | AddressUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | AddressUpsertWithWhereUniqueWithoutAuthorInput[]
    | AddressUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
  updateMany?: Maybe<
    | AddressUpdateManyWithWhereNestedInput[]
    | AddressUpdateManyWithWhereNestedInput
  >;
}

export interface AddressUpdateWithWhereUniqueWithoutAuthorInput {
  where: AddressWhereUniqueInput;
  data: AddressUpdateWithoutAuthorDataInput;
}

export interface AddressUpdateWithoutAuthorDataInput {
  house?: Maybe<String>;
  landmark?: Maybe<String>;
  published?: Maybe<Boolean>;
  baseAddress?: Maybe<BaseAddressUpdateOneInput>;
}

export interface BaseAddressUpdateOneInput {
  create?: Maybe<BaseAddressCreateInput>;
  update?: Maybe<BaseAddressUpdateDataInput>;
  upsert?: Maybe<BaseAddressUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<BaseAddressWhereUniqueInput>;
}

export interface BaseAddressUpdateDataInput {
  officename?: Maybe<String>;
  pincode?: Maybe<String>;
  officeType?: Maybe<String>;
  Deliverystatus?: Maybe<String>;
  divisionname?: Maybe<String>;
  regionname?: Maybe<String>;
  circlename?: Maybe<String>;
  taluk?: Maybe<String>;
  districtname?: Maybe<String>;
  statename?: Maybe<String>;
  telephone?: Maybe<String>;
  relatedSuboffice?: Maybe<String>;
  relatedHeadoffice?: Maybe<String>;
  longitude?: Maybe<String>;
  latitude?: Maybe<String>;
}

export interface BaseAddressUpsertNestedInput {
  update: BaseAddressUpdateDataInput;
  create: BaseAddressCreateInput;
}

export interface AddressUpsertWithWhereUniqueWithoutAuthorInput {
  where: AddressWhereUniqueInput;
  update: AddressUpdateWithoutAuthorDataInput;
  create: AddressCreateWithoutAuthorInput;
}

export interface AddressScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  house?: Maybe<String>;
  house_not?: Maybe<String>;
  house_in?: Maybe<String[] | String>;
  house_not_in?: Maybe<String[] | String>;
  house_lt?: Maybe<String>;
  house_lte?: Maybe<String>;
  house_gt?: Maybe<String>;
  house_gte?: Maybe<String>;
  house_contains?: Maybe<String>;
  house_not_contains?: Maybe<String>;
  house_starts_with?: Maybe<String>;
  house_not_starts_with?: Maybe<String>;
  house_ends_with?: Maybe<String>;
  house_not_ends_with?: Maybe<String>;
  landmark?: Maybe<String>;
  landmark_not?: Maybe<String>;
  landmark_in?: Maybe<String[] | String>;
  landmark_not_in?: Maybe<String[] | String>;
  landmark_lt?: Maybe<String>;
  landmark_lte?: Maybe<String>;
  landmark_gt?: Maybe<String>;
  landmark_gte?: Maybe<String>;
  landmark_contains?: Maybe<String>;
  landmark_not_contains?: Maybe<String>;
  landmark_starts_with?: Maybe<String>;
  landmark_not_starts_with?: Maybe<String>;
  landmark_ends_with?: Maybe<String>;
  landmark_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
  OR?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
  NOT?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
}

export interface AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput;
  data: AddressUpdateManyDataInput;
}

export interface AddressUpdateManyDataInput {
  house?: Maybe<String>;
  landmark?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface OrganizationUpdateOneRequiredWithoutAuthorInput {
  create?: Maybe<OrganizationCreateWithoutAuthorInput>;
  update?: Maybe<OrganizationUpdateWithoutAuthorDataInput>;
  upsert?: Maybe<OrganizationUpsertWithoutAuthorInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationUpdateWithoutAuthorDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  roles?: Maybe<RoleUpdateManyWithoutOrgsInput>;
}

export interface RoleUpdateManyWithoutOrgsInput {
  create?: Maybe<RoleCreateWithoutOrgsInput[] | RoleCreateWithoutOrgsInput>;
  delete?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  set?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  disconnect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  update?: Maybe<
    | RoleUpdateWithWhereUniqueWithoutOrgsInput[]
    | RoleUpdateWithWhereUniqueWithoutOrgsInput
  >;
  upsert?: Maybe<
    | RoleUpsertWithWhereUniqueWithoutOrgsInput[]
    | RoleUpsertWithWhereUniqueWithoutOrgsInput
  >;
  deleteMany?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  updateMany?: Maybe<
    RoleUpdateManyWithWhereNestedInput[] | RoleUpdateManyWithWhereNestedInput
  >;
}

export interface RoleUpdateWithWhereUniqueWithoutOrgsInput {
  where: RoleWhereUniqueInput;
  data: RoleUpdateWithoutOrgsDataInput;
}

export interface RoleUpdateWithoutOrgsDataInput {
  roleName?: Maybe<String>;
  createdBy?: Maybe<String>;
  users?: Maybe<UserUpdateOneRequiredWithoutRolesInput>;
}

export interface UserUpdateOneRequiredWithoutRolesInput {
  create?: Maybe<UserCreateWithoutRolesInput>;
  update?: Maybe<UserUpdateWithoutRolesDataInput>;
  upsert?: Maybe<UserUpsertWithoutRolesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutRolesDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  addresses?: Maybe<AddressUpdateManyWithoutAuthorInput>;
  org?: Maybe<OrganizationUpdateOneRequiredWithoutAuthorInput>;
  createdBy?: Maybe<String>;
}

export interface CommentUpdateManyWithoutAuthorInput {
  create?: Maybe<
    CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    | CommentUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    | CommentUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutAuthorDataInput;
}

export interface CommentUpdateWithoutAuthorDataInput {
  text?: Maybe<String>;
  post?: Maybe<PostUpdateOneRequiredWithoutCommentsInput>;
}

export interface PostUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  update?: Maybe<PostUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<PostUpsertWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutCommentsDataInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  published?: Maybe<Boolean>;
  author?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  addresses?: Maybe<AddressUpdateManyWithoutAuthorInput>;
  org?: Maybe<OrganizationUpdateOneRequiredWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  createdBy?: Maybe<String>;
}

export interface RoleUpdateManyWithoutUsersInput {
  create?: Maybe<RoleCreateWithoutUsersInput[] | RoleCreateWithoutUsersInput>;
  delete?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  set?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  disconnect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  update?: Maybe<
    | RoleUpdateWithWhereUniqueWithoutUsersInput[]
    | RoleUpdateWithWhereUniqueWithoutUsersInput
  >;
  upsert?: Maybe<
    | RoleUpsertWithWhereUniqueWithoutUsersInput[]
    | RoleUpsertWithWhereUniqueWithoutUsersInput
  >;
  deleteMany?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  updateMany?: Maybe<
    RoleUpdateManyWithWhereNestedInput[] | RoleUpdateManyWithWhereNestedInput
  >;
}

export interface RoleUpdateWithWhereUniqueWithoutUsersInput {
  where: RoleWhereUniqueInput;
  data: RoleUpdateWithoutUsersDataInput;
}

export interface RoleUpdateWithoutUsersDataInput {
  roleName?: Maybe<String>;
  createdBy?: Maybe<String>;
  orgs?: Maybe<OrganizationUpdateOneRequiredWithoutRolesInput>;
}

export interface OrganizationUpdateOneRequiredWithoutRolesInput {
  create?: Maybe<OrganizationCreateWithoutRolesInput>;
  update?: Maybe<OrganizationUpdateWithoutRolesDataInput>;
  upsert?: Maybe<OrganizationUpsertWithoutRolesInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationUpdateWithoutRolesDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateManyWithoutOrgInput>;
}

export interface UserUpdateManyWithoutOrgInput {
  create?: Maybe<UserCreateWithoutOrgInput[] | UserCreateWithoutOrgInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutOrgInput[]
    | UserUpdateWithWhereUniqueWithoutOrgInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutOrgInput[]
    | UserUpsertWithWhereUniqueWithoutOrgInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutOrgInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutOrgDataInput;
}

export interface UserUpdateWithoutOrgDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  addresses?: Maybe<AddressUpdateManyWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  createdBy?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutOrgInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutOrgDataInput;
  create: UserCreateWithoutOrgInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  createdBy?: Maybe<String>;
  createdBy_not?: Maybe<String>;
  createdBy_in?: Maybe<String[] | String>;
  createdBy_not_in?: Maybe<String[] | String>;
  createdBy_lt?: Maybe<String>;
  createdBy_lte?: Maybe<String>;
  createdBy_gt?: Maybe<String>;
  createdBy_gte?: Maybe<String>;
  createdBy_contains?: Maybe<String>;
  createdBy_not_contains?: Maybe<String>;
  createdBy_starts_with?: Maybe<String>;
  createdBy_not_starts_with?: Maybe<String>;
  createdBy_ends_with?: Maybe<String>;
  createdBy_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  createdBy?: Maybe<String>;
}

export interface OrganizationUpsertWithoutRolesInput {
  update: OrganizationUpdateWithoutRolesDataInput;
  create: OrganizationCreateWithoutRolesInput;
}

export interface RoleUpsertWithWhereUniqueWithoutUsersInput {
  where: RoleWhereUniqueInput;
  update: RoleUpdateWithoutUsersDataInput;
  create: RoleCreateWithoutUsersInput;
}

export interface RoleScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  roleName?: Maybe<String>;
  roleName_not?: Maybe<String>;
  roleName_in?: Maybe<String[] | String>;
  roleName_not_in?: Maybe<String[] | String>;
  roleName_lt?: Maybe<String>;
  roleName_lte?: Maybe<String>;
  roleName_gt?: Maybe<String>;
  roleName_gte?: Maybe<String>;
  roleName_contains?: Maybe<String>;
  roleName_not_contains?: Maybe<String>;
  roleName_starts_with?: Maybe<String>;
  roleName_not_starts_with?: Maybe<String>;
  roleName_ends_with?: Maybe<String>;
  roleName_not_ends_with?: Maybe<String>;
  createdBy?: Maybe<String>;
  createdBy_not?: Maybe<String>;
  createdBy_in?: Maybe<String[] | String>;
  createdBy_not_in?: Maybe<String[] | String>;
  createdBy_lt?: Maybe<String>;
  createdBy_lte?: Maybe<String>;
  createdBy_gt?: Maybe<String>;
  createdBy_gte?: Maybe<String>;
  createdBy_contains?: Maybe<String>;
  createdBy_not_contains?: Maybe<String>;
  createdBy_starts_with?: Maybe<String>;
  createdBy_not_starts_with?: Maybe<String>;
  createdBy_ends_with?: Maybe<String>;
  createdBy_not_ends_with?: Maybe<String>;
  AND?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  OR?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  NOT?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
}

export interface RoleUpdateManyWithWhereNestedInput {
  where: RoleScalarWhereInput;
  data: RoleUpdateManyDataInput;
}

export interface RoleUpdateManyDataInput {
  roleName?: Maybe<String>;
  createdBy?: Maybe<String>;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput;
  create: PostCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutAuthorDataInput;
  create: CommentCreateWithoutAuthorInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface UserUpsertWithoutRolesInput {
  update: UserUpdateWithoutRolesDataInput;
  create: UserCreateWithoutRolesInput;
}

export interface RoleUpsertWithWhereUniqueWithoutOrgsInput {
  where: RoleWhereUniqueInput;
  update: RoleUpdateWithoutOrgsDataInput;
  create: RoleCreateWithoutOrgsInput;
}

export interface OrganizationUpsertWithoutAuthorInput {
  update: OrganizationUpdateWithoutAuthorDataInput;
  create: OrganizationCreateWithoutAuthorInput;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPostDataInput;
  create: CommentCreateWithoutPostInput;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface UserUpsertWithoutAddressesInput {
  update: UserUpdateWithoutAddressesDataInput;
  create: UserCreateWithoutAddressesInput;
}

export interface AddressUpdateManyMutationInput {
  house?: Maybe<String>;
  landmark?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface BaseAddressUpdateInput {
  officename?: Maybe<String>;
  pincode?: Maybe<String>;
  officeType?: Maybe<String>;
  Deliverystatus?: Maybe<String>;
  divisionname?: Maybe<String>;
  regionname?: Maybe<String>;
  circlename?: Maybe<String>;
  taluk?: Maybe<String>;
  districtname?: Maybe<String>;
  statename?: Maybe<String>;
  telephone?: Maybe<String>;
  relatedSuboffice?: Maybe<String>;
  relatedHeadoffice?: Maybe<String>;
  longitude?: Maybe<String>;
  latitude?: Maybe<String>;
}

export interface BaseAddressUpdateManyMutationInput {
  officename?: Maybe<String>;
  pincode?: Maybe<String>;
  officeType?: Maybe<String>;
  Deliverystatus?: Maybe<String>;
  divisionname?: Maybe<String>;
  regionname?: Maybe<String>;
  circlename?: Maybe<String>;
  taluk?: Maybe<String>;
  districtname?: Maybe<String>;
  statename?: Maybe<String>;
  telephone?: Maybe<String>;
  relatedSuboffice?: Maybe<String>;
  relatedHeadoffice?: Maybe<String>;
  longitude?: Maybe<String>;
  latitude?: Maybe<String>;
}

export interface BoardCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  catelog: StudyCatelogCreateOneWithoutBoardsInput;
}

export interface StudyCatelogCreateOneWithoutBoardsInput {
  create?: Maybe<StudyCatelogCreateWithoutBoardsInput>;
  connect?: Maybe<StudyCatelogWhereUniqueInput>;
}

export interface StudyCatelogCreateWithoutBoardsInput {
  id?: Maybe<ID_Input>;
  std: String;
  substd?: Maybe<String>;
  academic?: Maybe<String>;
  subacademic?: Maybe<String>;
  subjects?: Maybe<SubjectCreateManyWithoutCatelogInput>;
  specialization?: Maybe<SpecializationCreateManyWithoutCatelogInput>;
  competition?: Maybe<CompetitionCreateManyWithoutCatelogInput>;
  published?: Maybe<Boolean>;
}

export interface SubjectCreateManyWithoutCatelogInput {
  create?: Maybe<
    SubjectCreateWithoutCatelogInput[] | SubjectCreateWithoutCatelogInput
  >;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
}

export interface SubjectCreateWithoutCatelogInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
}

export interface SpecializationCreateManyWithoutCatelogInput {
  create?: Maybe<
    | SpecializationCreateWithoutCatelogInput[]
    | SpecializationCreateWithoutCatelogInput
  >;
  connect?: Maybe<
    SpecializationWhereUniqueInput[] | SpecializationWhereUniqueInput
  >;
}

export interface SpecializationCreateWithoutCatelogInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
}

export interface CompetitionCreateManyWithoutCatelogInput {
  create?: Maybe<
    | CompetitionCreateWithoutCatelogInput[]
    | CompetitionCreateWithoutCatelogInput
  >;
  connect?: Maybe<CompetitionWhereUniqueInput[] | CompetitionWhereUniqueInput>;
}

export interface CompetitionCreateWithoutCatelogInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
}

export interface BoardUpdateInput {
  name?: Maybe<String>;
  catelog?: Maybe<StudyCatelogUpdateOneRequiredWithoutBoardsInput>;
}

export interface StudyCatelogUpdateOneRequiredWithoutBoardsInput {
  create?: Maybe<StudyCatelogCreateWithoutBoardsInput>;
  update?: Maybe<StudyCatelogUpdateWithoutBoardsDataInput>;
  upsert?: Maybe<StudyCatelogUpsertWithoutBoardsInput>;
  connect?: Maybe<StudyCatelogWhereUniqueInput>;
}

export interface StudyCatelogUpdateWithoutBoardsDataInput {
  std?: Maybe<String>;
  substd?: Maybe<String>;
  academic?: Maybe<String>;
  subacademic?: Maybe<String>;
  subjects?: Maybe<SubjectUpdateManyWithoutCatelogInput>;
  specialization?: Maybe<SpecializationUpdateManyWithoutCatelogInput>;
  competition?: Maybe<CompetitionUpdateManyWithoutCatelogInput>;
  published?: Maybe<Boolean>;
}

export interface SubjectUpdateManyWithoutCatelogInput {
  create?: Maybe<
    SubjectCreateWithoutCatelogInput[] | SubjectCreateWithoutCatelogInput
  >;
  delete?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  set?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  disconnect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  update?: Maybe<
    | SubjectUpdateWithWhereUniqueWithoutCatelogInput[]
    | SubjectUpdateWithWhereUniqueWithoutCatelogInput
  >;
  upsert?: Maybe<
    | SubjectUpsertWithWhereUniqueWithoutCatelogInput[]
    | SubjectUpsertWithWhereUniqueWithoutCatelogInput
  >;
  deleteMany?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
  updateMany?: Maybe<
    | SubjectUpdateManyWithWhereNestedInput[]
    | SubjectUpdateManyWithWhereNestedInput
  >;
}

export interface SubjectUpdateWithWhereUniqueWithoutCatelogInput {
  where: SubjectWhereUniqueInput;
  data: SubjectUpdateWithoutCatelogDataInput;
}

export interface SubjectUpdateWithoutCatelogDataInput {
  name?: Maybe<String>;
}

export interface SubjectUpsertWithWhereUniqueWithoutCatelogInput {
  where: SubjectWhereUniqueInput;
  update: SubjectUpdateWithoutCatelogDataInput;
  create: SubjectCreateWithoutCatelogInput;
}

export interface SubjectScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
  OR?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
  NOT?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
}

export interface SubjectUpdateManyWithWhereNestedInput {
  where: SubjectScalarWhereInput;
  data: SubjectUpdateManyDataInput;
}

export interface SubjectUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface SpecializationUpdateManyWithoutCatelogInput {
  create?: Maybe<
    | SpecializationCreateWithoutCatelogInput[]
    | SpecializationCreateWithoutCatelogInput
  >;
  delete?: Maybe<
    SpecializationWhereUniqueInput[] | SpecializationWhereUniqueInput
  >;
  connect?: Maybe<
    SpecializationWhereUniqueInput[] | SpecializationWhereUniqueInput
  >;
  set?: Maybe<
    SpecializationWhereUniqueInput[] | SpecializationWhereUniqueInput
  >;
  disconnect?: Maybe<
    SpecializationWhereUniqueInput[] | SpecializationWhereUniqueInput
  >;
  update?: Maybe<
    | SpecializationUpdateWithWhereUniqueWithoutCatelogInput[]
    | SpecializationUpdateWithWhereUniqueWithoutCatelogInput
  >;
  upsert?: Maybe<
    | SpecializationUpsertWithWhereUniqueWithoutCatelogInput[]
    | SpecializationUpsertWithWhereUniqueWithoutCatelogInput
  >;
  deleteMany?: Maybe<
    SpecializationScalarWhereInput[] | SpecializationScalarWhereInput
  >;
  updateMany?: Maybe<
    | SpecializationUpdateManyWithWhereNestedInput[]
    | SpecializationUpdateManyWithWhereNestedInput
  >;
}

export interface SpecializationUpdateWithWhereUniqueWithoutCatelogInput {
  where: SpecializationWhereUniqueInput;
  data: SpecializationUpdateWithoutCatelogDataInput;
}

export interface SpecializationUpdateWithoutCatelogDataInput {
  name?: Maybe<String>;
}

export interface SpecializationUpsertWithWhereUniqueWithoutCatelogInput {
  where: SpecializationWhereUniqueInput;
  update: SpecializationUpdateWithoutCatelogDataInput;
  create: SpecializationCreateWithoutCatelogInput;
}

export interface SpecializationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    SpecializationScalarWhereInput[] | SpecializationScalarWhereInput
  >;
  OR?: Maybe<SpecializationScalarWhereInput[] | SpecializationScalarWhereInput>;
  NOT?: Maybe<
    SpecializationScalarWhereInput[] | SpecializationScalarWhereInput
  >;
}

export interface SpecializationUpdateManyWithWhereNestedInput {
  where: SpecializationScalarWhereInput;
  data: SpecializationUpdateManyDataInput;
}

export interface SpecializationUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface CompetitionUpdateManyWithoutCatelogInput {
  create?: Maybe<
    | CompetitionCreateWithoutCatelogInput[]
    | CompetitionCreateWithoutCatelogInput
  >;
  delete?: Maybe<CompetitionWhereUniqueInput[] | CompetitionWhereUniqueInput>;
  connect?: Maybe<CompetitionWhereUniqueInput[] | CompetitionWhereUniqueInput>;
  set?: Maybe<CompetitionWhereUniqueInput[] | CompetitionWhereUniqueInput>;
  disconnect?: Maybe<
    CompetitionWhereUniqueInput[] | CompetitionWhereUniqueInput
  >;
  update?: Maybe<
    | CompetitionUpdateWithWhereUniqueWithoutCatelogInput[]
    | CompetitionUpdateWithWhereUniqueWithoutCatelogInput
  >;
  upsert?: Maybe<
    | CompetitionUpsertWithWhereUniqueWithoutCatelogInput[]
    | CompetitionUpsertWithWhereUniqueWithoutCatelogInput
  >;
  deleteMany?: Maybe<
    CompetitionScalarWhereInput[] | CompetitionScalarWhereInput
  >;
  updateMany?: Maybe<
    | CompetitionUpdateManyWithWhereNestedInput[]
    | CompetitionUpdateManyWithWhereNestedInput
  >;
}

export interface CompetitionUpdateWithWhereUniqueWithoutCatelogInput {
  where: CompetitionWhereUniqueInput;
  data: CompetitionUpdateWithoutCatelogDataInput;
}

export interface CompetitionUpdateWithoutCatelogDataInput {
  name?: Maybe<String>;
}

export interface CompetitionUpsertWithWhereUniqueWithoutCatelogInput {
  where: CompetitionWhereUniqueInput;
  update: CompetitionUpdateWithoutCatelogDataInput;
  create: CompetitionCreateWithoutCatelogInput;
}

export interface CompetitionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<CompetitionScalarWhereInput[] | CompetitionScalarWhereInput>;
  OR?: Maybe<CompetitionScalarWhereInput[] | CompetitionScalarWhereInput>;
  NOT?: Maybe<CompetitionScalarWhereInput[] | CompetitionScalarWhereInput>;
}

export interface CompetitionUpdateManyWithWhereNestedInput {
  where: CompetitionScalarWhereInput;
  data: CompetitionUpdateManyDataInput;
}

export interface CompetitionUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface StudyCatelogUpsertWithoutBoardsInput {
  update: StudyCatelogUpdateWithoutBoardsDataInput;
  create: StudyCatelogCreateWithoutBoardsInput;
}

export interface BoardUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  author: UserCreateOneWithoutCommentsInput;
  post: PostCreateOneWithoutCommentsInput;
}

export interface CommentUpdateInput {
  text?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  post?: Maybe<PostUpdateOneRequiredWithoutCommentsInput>;
}

export interface CommentUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface CompetitionCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  catelog: StudyCatelogCreateOneWithoutCompetitionInput;
}

export interface StudyCatelogCreateOneWithoutCompetitionInput {
  create?: Maybe<StudyCatelogCreateWithoutCompetitionInput>;
  connect?: Maybe<StudyCatelogWhereUniqueInput>;
}

export interface StudyCatelogCreateWithoutCompetitionInput {
  id?: Maybe<ID_Input>;
  std: String;
  substd?: Maybe<String>;
  academic?: Maybe<String>;
  subacademic?: Maybe<String>;
  subjects?: Maybe<SubjectCreateManyWithoutCatelogInput>;
  boards?: Maybe<BoardCreateManyWithoutCatelogInput>;
  specialization?: Maybe<SpecializationCreateManyWithoutCatelogInput>;
  published?: Maybe<Boolean>;
}

export interface BoardCreateManyWithoutCatelogInput {
  create?: Maybe<
    BoardCreateWithoutCatelogInput[] | BoardCreateWithoutCatelogInput
  >;
  connect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
}

export interface BoardCreateWithoutCatelogInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
}

export interface CompetitionUpdateInput {
  name?: Maybe<String>;
  catelog?: Maybe<StudyCatelogUpdateOneRequiredWithoutCompetitionInput>;
}

export interface StudyCatelogUpdateOneRequiredWithoutCompetitionInput {
  create?: Maybe<StudyCatelogCreateWithoutCompetitionInput>;
  update?: Maybe<StudyCatelogUpdateWithoutCompetitionDataInput>;
  upsert?: Maybe<StudyCatelogUpsertWithoutCompetitionInput>;
  connect?: Maybe<StudyCatelogWhereUniqueInput>;
}

export interface StudyCatelogUpdateWithoutCompetitionDataInput {
  std?: Maybe<String>;
  substd?: Maybe<String>;
  academic?: Maybe<String>;
  subacademic?: Maybe<String>;
  subjects?: Maybe<SubjectUpdateManyWithoutCatelogInput>;
  boards?: Maybe<BoardUpdateManyWithoutCatelogInput>;
  specialization?: Maybe<SpecializationUpdateManyWithoutCatelogInput>;
  published?: Maybe<Boolean>;
}

export interface BoardUpdateManyWithoutCatelogInput {
  create?: Maybe<
    BoardCreateWithoutCatelogInput[] | BoardCreateWithoutCatelogInput
  >;
  delete?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  connect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  set?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  disconnect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  update?: Maybe<
    | BoardUpdateWithWhereUniqueWithoutCatelogInput[]
    | BoardUpdateWithWhereUniqueWithoutCatelogInput
  >;
  upsert?: Maybe<
    | BoardUpsertWithWhereUniqueWithoutCatelogInput[]
    | BoardUpsertWithWhereUniqueWithoutCatelogInput
  >;
  deleteMany?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
  updateMany?: Maybe<
    BoardUpdateManyWithWhereNestedInput[] | BoardUpdateManyWithWhereNestedInput
  >;
}

export interface BoardUpdateWithWhereUniqueWithoutCatelogInput {
  where: BoardWhereUniqueInput;
  data: BoardUpdateWithoutCatelogDataInput;
}

export interface BoardUpdateWithoutCatelogDataInput {
  name?: Maybe<String>;
}

export interface BoardUpsertWithWhereUniqueWithoutCatelogInput {
  where: BoardWhereUniqueInput;
  update: BoardUpdateWithoutCatelogDataInput;
  create: BoardCreateWithoutCatelogInput;
}

export interface BoardScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
  OR?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
  NOT?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
}

export interface BoardUpdateManyWithWhereNestedInput {
  where: BoardScalarWhereInput;
  data: BoardUpdateManyDataInput;
}

export interface BoardUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface StudyCatelogUpsertWithoutCompetitionInput {
  update: StudyCatelogUpdateWithoutCompetitionDataInput;
  create: StudyCatelogCreateWithoutCompetitionInput;
}

export interface CompetitionUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface FileCreateInput {
  id?: Maybe<ID_Input>;
  path?: Maybe<String>;
  filename: String;
  mimetype: String;
  encoding: String;
}

export interface FileUpdateInput {
  path?: Maybe<String>;
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
}

export interface FileUpdateManyMutationInput {
  path?: Maybe<String>;
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
}

export interface OrganizationCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  author?: Maybe<UserCreateManyWithoutOrgInput>;
  roles?: Maybe<RoleCreateManyWithoutOrgsInput>;
}

export interface OrganizationUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateManyWithoutOrgInput>;
  roles?: Maybe<RoleUpdateManyWithoutOrgsInput>;
}

export interface OrganizationUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  body: String;
  published: Boolean;
  author: UserCreateOneWithoutPostsInput;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
}

export interface PostUpdateInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  published?: Maybe<Boolean>;
  author?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
}

export interface PostUpdateManyMutationInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface RoleCreateInput {
  id?: Maybe<ID_Input>;
  roleName: String;
  createdBy: String;
  users: UserCreateOneWithoutRolesInput;
  orgs: OrganizationCreateOneWithoutRolesInput;
}

export interface RoleUpdateInput {
  roleName?: Maybe<String>;
  createdBy?: Maybe<String>;
  users?: Maybe<UserUpdateOneRequiredWithoutRolesInput>;
  orgs?: Maybe<OrganizationUpdateOneRequiredWithoutRolesInput>;
}

export interface RoleUpdateManyMutationInput {
  roleName?: Maybe<String>;
  createdBy?: Maybe<String>;
}

export interface SpecializationCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  catelog: StudyCatelogCreateOneWithoutSpecializationInput;
}

export interface StudyCatelogCreateOneWithoutSpecializationInput {
  create?: Maybe<StudyCatelogCreateWithoutSpecializationInput>;
  connect?: Maybe<StudyCatelogWhereUniqueInput>;
}

export interface StudyCatelogCreateWithoutSpecializationInput {
  id?: Maybe<ID_Input>;
  std: String;
  substd?: Maybe<String>;
  academic?: Maybe<String>;
  subacademic?: Maybe<String>;
  subjects?: Maybe<SubjectCreateManyWithoutCatelogInput>;
  boards?: Maybe<BoardCreateManyWithoutCatelogInput>;
  competition?: Maybe<CompetitionCreateManyWithoutCatelogInput>;
  published?: Maybe<Boolean>;
}

export interface SpecializationUpdateInput {
  name?: Maybe<String>;
  catelog?: Maybe<StudyCatelogUpdateOneRequiredWithoutSpecializationInput>;
}

export interface StudyCatelogUpdateOneRequiredWithoutSpecializationInput {
  create?: Maybe<StudyCatelogCreateWithoutSpecializationInput>;
  update?: Maybe<StudyCatelogUpdateWithoutSpecializationDataInput>;
  upsert?: Maybe<StudyCatelogUpsertWithoutSpecializationInput>;
  connect?: Maybe<StudyCatelogWhereUniqueInput>;
}

export interface StudyCatelogUpdateWithoutSpecializationDataInput {
  std?: Maybe<String>;
  substd?: Maybe<String>;
  academic?: Maybe<String>;
  subacademic?: Maybe<String>;
  subjects?: Maybe<SubjectUpdateManyWithoutCatelogInput>;
  boards?: Maybe<BoardUpdateManyWithoutCatelogInput>;
  competition?: Maybe<CompetitionUpdateManyWithoutCatelogInput>;
  published?: Maybe<Boolean>;
}

export interface StudyCatelogUpsertWithoutSpecializationInput {
  update: StudyCatelogUpdateWithoutSpecializationDataInput;
  create: StudyCatelogCreateWithoutSpecializationInput;
}

export interface SpecializationUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface StudyCatelogCreateInput {
  id?: Maybe<ID_Input>;
  std: String;
  substd?: Maybe<String>;
  academic?: Maybe<String>;
  subacademic?: Maybe<String>;
  subjects?: Maybe<SubjectCreateManyWithoutCatelogInput>;
  boards?: Maybe<BoardCreateManyWithoutCatelogInput>;
  specialization?: Maybe<SpecializationCreateManyWithoutCatelogInput>;
  competition?: Maybe<CompetitionCreateManyWithoutCatelogInput>;
  published?: Maybe<Boolean>;
}

export interface StudyCatelogUpdateInput {
  std?: Maybe<String>;
  substd?: Maybe<String>;
  academic?: Maybe<String>;
  subacademic?: Maybe<String>;
  subjects?: Maybe<SubjectUpdateManyWithoutCatelogInput>;
  boards?: Maybe<BoardUpdateManyWithoutCatelogInput>;
  specialization?: Maybe<SpecializationUpdateManyWithoutCatelogInput>;
  competition?: Maybe<CompetitionUpdateManyWithoutCatelogInput>;
  published?: Maybe<Boolean>;
}

export interface StudyCatelogUpdateManyMutationInput {
  std?: Maybe<String>;
  substd?: Maybe<String>;
  academic?: Maybe<String>;
  subacademic?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface SubjectCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  catelog: StudyCatelogCreateOneWithoutSubjectsInput;
}

export interface StudyCatelogCreateOneWithoutSubjectsInput {
  create?: Maybe<StudyCatelogCreateWithoutSubjectsInput>;
  connect?: Maybe<StudyCatelogWhereUniqueInput>;
}

export interface StudyCatelogCreateWithoutSubjectsInput {
  id?: Maybe<ID_Input>;
  std: String;
  substd?: Maybe<String>;
  academic?: Maybe<String>;
  subacademic?: Maybe<String>;
  boards?: Maybe<BoardCreateManyWithoutCatelogInput>;
  specialization?: Maybe<SpecializationCreateManyWithoutCatelogInput>;
  competition?: Maybe<CompetitionCreateManyWithoutCatelogInput>;
  published?: Maybe<Boolean>;
}

export interface SubjectUpdateInput {
  name?: Maybe<String>;
  catelog?: Maybe<StudyCatelogUpdateOneRequiredWithoutSubjectsInput>;
}

export interface StudyCatelogUpdateOneRequiredWithoutSubjectsInput {
  create?: Maybe<StudyCatelogCreateWithoutSubjectsInput>;
  update?: Maybe<StudyCatelogUpdateWithoutSubjectsDataInput>;
  upsert?: Maybe<StudyCatelogUpsertWithoutSubjectsInput>;
  connect?: Maybe<StudyCatelogWhereUniqueInput>;
}

export interface StudyCatelogUpdateWithoutSubjectsDataInput {
  std?: Maybe<String>;
  substd?: Maybe<String>;
  academic?: Maybe<String>;
  subacademic?: Maybe<String>;
  boards?: Maybe<BoardUpdateManyWithoutCatelogInput>;
  specialization?: Maybe<SpecializationUpdateManyWithoutCatelogInput>;
  competition?: Maybe<CompetitionUpdateManyWithoutCatelogInput>;
  published?: Maybe<Boolean>;
}

export interface StudyCatelogUpsertWithoutSubjectsInput {
  update: StudyCatelogUpdateWithoutSubjectsDataInput;
  create: StudyCatelogCreateWithoutSubjectsInput;
}

export interface SubjectUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  addresses?: Maybe<AddressCreateManyWithoutAuthorInput>;
  org: OrganizationCreateOneWithoutAuthorInput;
  roles?: Maybe<RoleCreateManyWithoutUsersInput>;
  createdBy?: Maybe<String>;
}

export interface UserUpdateInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  addresses?: Maybe<AddressUpdateManyWithoutAuthorInput>;
  org?: Maybe<OrganizationUpdateOneRequiredWithoutAuthorInput>;
  roles?: Maybe<RoleUpdateManyWithoutUsersInput>;
  createdBy?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  createdBy?: Maybe<String>;
}

export interface AddressSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AddressWhereInput>;
  AND?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
  OR?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
  NOT?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
}

export interface BaseAddressSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BaseAddressWhereInput>;
  AND?: Maybe<
    BaseAddressSubscriptionWhereInput[] | BaseAddressSubscriptionWhereInput
  >;
  OR?: Maybe<
    BaseAddressSubscriptionWhereInput[] | BaseAddressSubscriptionWhereInput
  >;
  NOT?: Maybe<
    BaseAddressSubscriptionWhereInput[] | BaseAddressSubscriptionWhereInput
  >;
}

export interface BoardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BoardWhereInput>;
  AND?: Maybe<BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput>;
  OR?: Maybe<BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput>;
  NOT?: Maybe<BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput>;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface CompetitionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CompetitionWhereInput>;
  AND?: Maybe<
    CompetitionSubscriptionWhereInput[] | CompetitionSubscriptionWhereInput
  >;
  OR?: Maybe<
    CompetitionSubscriptionWhereInput[] | CompetitionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    CompetitionSubscriptionWhereInput[] | CompetitionSubscriptionWhereInput
  >;
}

export interface FileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FileWhereInput>;
  AND?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  OR?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  NOT?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
}

export interface OrganizationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrganizationWhereInput>;
  AND?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
  OR?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface RoleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoleWhereInput>;
  AND?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  OR?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  NOT?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
}

export interface SpecializationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SpecializationWhereInput>;
  AND?: Maybe<
    | SpecializationSubscriptionWhereInput[]
    | SpecializationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | SpecializationSubscriptionWhereInput[]
    | SpecializationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | SpecializationSubscriptionWhereInput[]
    | SpecializationSubscriptionWhereInput
  >;
}

export interface StudyCatelogSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StudyCatelogWhereInput>;
  AND?: Maybe<
    StudyCatelogSubscriptionWhereInput[] | StudyCatelogSubscriptionWhereInput
  >;
  OR?: Maybe<
    StudyCatelogSubscriptionWhereInput[] | StudyCatelogSubscriptionWhereInput
  >;
  NOT?: Maybe<
    StudyCatelogSubscriptionWhereInput[] | StudyCatelogSubscriptionWhereInput
  >;
}

export interface SubjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SubjectWhereInput>;
  AND?: Maybe<SubjectSubscriptionWhereInput[] | SubjectSubscriptionWhereInput>;
  OR?: Maybe<SubjectSubscriptionWhereInput[] | SubjectSubscriptionWhereInput>;
  NOT?: Maybe<SubjectSubscriptionWhereInput[] | SubjectSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Address {
  id: ID_Output;
  house?: String;
  landmark?: String;
  published: Boolean;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface AddressPromise extends Promise<Address>, Fragmentable {
  id: () => Promise<ID_Output>;
  house: () => Promise<String>;
  landmark: () => Promise<String>;
  published: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  author: <T = UserPromise>() => T;
  baseAddress: <T = BaseAddressPromise>() => T;
}

export interface AddressSubscription
  extends Promise<AsyncIterator<Address>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  house: () => Promise<AsyncIterator<String>>;
  landmark: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  author: <T = UserSubscription>() => T;
  baseAddress: <T = BaseAddressSubscription>() => T;
}

export interface AddressNullablePromise
  extends Promise<Address | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  house: () => Promise<String>;
  landmark: () => Promise<String>;
  published: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  author: <T = UserPromise>() => T;
  baseAddress: <T = BaseAddressPromise>() => T;
}

export interface User {
  id: ID_Output;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  createdBy?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  addresses: <T = FragmentableArray<Address>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  org: <T = OrganizationPromise>() => T;
  roles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  addresses: <T = Promise<AsyncIterator<AddressSubscription>>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  org: <T = OrganizationSubscription>() => T;
  roles: <T = Promise<AsyncIterator<RoleSubscription>>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  addresses: <T = FragmentableArray<Address>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  org: <T = OrganizationPromise>() => T;
  roles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: () => Promise<String>;
}

export interface Post {
  id: ID_Output;
  title: String;
  body: String;
  published: Boolean;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  published: () => Promise<Boolean>;
  author: <T = UserPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  author: <T = UserSubscription>() => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  published: () => Promise<Boolean>;
  author: <T = UserPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Comment {
  id: ID_Output;
  text: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  author: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  author: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Organization {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface OrganizationPromise
  extends Promise<Organization>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  author: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OrganizationSubscription
  extends Promise<AsyncIterator<Organization>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  author: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: <T = Promise<AsyncIterator<RoleSubscription>>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OrganizationNullablePromise
  extends Promise<Organization | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  author: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Role {
  id: ID_Output;
  roleName: String;
  createdBy: String;
}

export interface RolePromise extends Promise<Role>, Fragmentable {
  id: () => Promise<ID_Output>;
  roleName: () => Promise<String>;
  createdBy: () => Promise<String>;
  users: <T = UserPromise>() => T;
  orgs: <T = OrganizationPromise>() => T;
}

export interface RoleSubscription
  extends Promise<AsyncIterator<Role>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  roleName: () => Promise<AsyncIterator<String>>;
  createdBy: () => Promise<AsyncIterator<String>>;
  users: <T = UserSubscription>() => T;
  orgs: <T = OrganizationSubscription>() => T;
}

export interface RoleNullablePromise
  extends Promise<Role | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  roleName: () => Promise<String>;
  createdBy: () => Promise<String>;
  users: <T = UserPromise>() => T;
  orgs: <T = OrganizationPromise>() => T;
}

export interface BaseAddress {
  id: ID_Output;
  officename?: String;
  pincode?: String;
  officeType?: String;
  Deliverystatus?: String;
  divisionname?: String;
  regionname?: String;
  circlename?: String;
  taluk?: String;
  districtname?: String;
  statename?: String;
  telephone?: String;
  relatedSuboffice?: String;
  relatedHeadoffice?: String;
  longitude?: String;
  latitude?: String;
}

export interface BaseAddressPromise extends Promise<BaseAddress>, Fragmentable {
  id: () => Promise<ID_Output>;
  officename: () => Promise<String>;
  pincode: () => Promise<String>;
  officeType: () => Promise<String>;
  Deliverystatus: () => Promise<String>;
  divisionname: () => Promise<String>;
  regionname: () => Promise<String>;
  circlename: () => Promise<String>;
  taluk: () => Promise<String>;
  districtname: () => Promise<String>;
  statename: () => Promise<String>;
  telephone: () => Promise<String>;
  relatedSuboffice: () => Promise<String>;
  relatedHeadoffice: () => Promise<String>;
  longitude: () => Promise<String>;
  latitude: () => Promise<String>;
}

export interface BaseAddressSubscription
  extends Promise<AsyncIterator<BaseAddress>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  officename: () => Promise<AsyncIterator<String>>;
  pincode: () => Promise<AsyncIterator<String>>;
  officeType: () => Promise<AsyncIterator<String>>;
  Deliverystatus: () => Promise<AsyncIterator<String>>;
  divisionname: () => Promise<AsyncIterator<String>>;
  regionname: () => Promise<AsyncIterator<String>>;
  circlename: () => Promise<AsyncIterator<String>>;
  taluk: () => Promise<AsyncIterator<String>>;
  districtname: () => Promise<AsyncIterator<String>>;
  statename: () => Promise<AsyncIterator<String>>;
  telephone: () => Promise<AsyncIterator<String>>;
  relatedSuboffice: () => Promise<AsyncIterator<String>>;
  relatedHeadoffice: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<String>>;
}

export interface BaseAddressNullablePromise
  extends Promise<BaseAddress | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  officename: () => Promise<String>;
  pincode: () => Promise<String>;
  officeType: () => Promise<String>;
  Deliverystatus: () => Promise<String>;
  divisionname: () => Promise<String>;
  regionname: () => Promise<String>;
  circlename: () => Promise<String>;
  taluk: () => Promise<String>;
  districtname: () => Promise<String>;
  statename: () => Promise<String>;
  telephone: () => Promise<String>;
  relatedSuboffice: () => Promise<String>;
  relatedHeadoffice: () => Promise<String>;
  longitude: () => Promise<String>;
  latitude: () => Promise<String>;
}

export interface AddressConnection {
  pageInfo: PageInfo;
  edges: AddressEdge[];
}

export interface AddressConnectionPromise
  extends Promise<AddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AddressEdge>>() => T;
  aggregate: <T = AggregateAddressPromise>() => T;
}

export interface AddressConnectionSubscription
  extends Promise<AsyncIterator<AddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AddressEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAddressSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AddressEdge {
  node: Address;
  cursor: String;
}

export interface AddressEdgePromise extends Promise<AddressEdge>, Fragmentable {
  node: <T = AddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AddressEdgeSubscription
  extends Promise<AsyncIterator<AddressEdge>>,
    Fragmentable {
  node: <T = AddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAddress {
  count: Int;
}

export interface AggregateAddressPromise
  extends Promise<AggregateAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAddressSubscription
  extends Promise<AsyncIterator<AggregateAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BaseAddressConnection {
  pageInfo: PageInfo;
  edges: BaseAddressEdge[];
}

export interface BaseAddressConnectionPromise
  extends Promise<BaseAddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BaseAddressEdge>>() => T;
  aggregate: <T = AggregateBaseAddressPromise>() => T;
}

export interface BaseAddressConnectionSubscription
  extends Promise<AsyncIterator<BaseAddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BaseAddressEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBaseAddressSubscription>() => T;
}

export interface BaseAddressEdge {
  node: BaseAddress;
  cursor: String;
}

export interface BaseAddressEdgePromise
  extends Promise<BaseAddressEdge>,
    Fragmentable {
  node: <T = BaseAddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BaseAddressEdgeSubscription
  extends Promise<AsyncIterator<BaseAddressEdge>>,
    Fragmentable {
  node: <T = BaseAddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBaseAddress {
  count: Int;
}

export interface AggregateBaseAddressPromise
  extends Promise<AggregateBaseAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBaseAddressSubscription
  extends Promise<AsyncIterator<AggregateBaseAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Board {
  id: ID_Output;
  name?: String;
}

export interface BoardPromise extends Promise<Board>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  catelog: <T = StudyCatelogPromise>() => T;
}

export interface BoardSubscription
  extends Promise<AsyncIterator<Board>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  catelog: <T = StudyCatelogSubscription>() => T;
}

export interface BoardNullablePromise
  extends Promise<Board | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  catelog: <T = StudyCatelogPromise>() => T;
}

export interface StudyCatelog {
  id: ID_Output;
  std: String;
  substd?: String;
  academic?: String;
  subacademic?: String;
  published?: Boolean;
}

export interface StudyCatelogPromise
  extends Promise<StudyCatelog>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  std: () => Promise<String>;
  substd: () => Promise<String>;
  academic: () => Promise<String>;
  subacademic: () => Promise<String>;
  subjects: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  boards: <T = FragmentableArray<Board>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  specialization: <T = FragmentableArray<Specialization>>(args?: {
    where?: SpecializationWhereInput;
    orderBy?: SpecializationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  competition: <T = FragmentableArray<Competition>>(args?: {
    where?: CompetitionWhereInput;
    orderBy?: CompetitionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  published: () => Promise<Boolean>;
}

export interface StudyCatelogSubscription
  extends Promise<AsyncIterator<StudyCatelog>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  std: () => Promise<AsyncIterator<String>>;
  substd: () => Promise<AsyncIterator<String>>;
  academic: () => Promise<AsyncIterator<String>>;
  subacademic: () => Promise<AsyncIterator<String>>;
  subjects: <T = Promise<AsyncIterator<SubjectSubscription>>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  boards: <T = Promise<AsyncIterator<BoardSubscription>>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  specialization: <
    T = Promise<AsyncIterator<SpecializationSubscription>>
  >(args?: {
    where?: SpecializationWhereInput;
    orderBy?: SpecializationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  competition: <T = Promise<AsyncIterator<CompetitionSubscription>>>(args?: {
    where?: CompetitionWhereInput;
    orderBy?: CompetitionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  published: () => Promise<AsyncIterator<Boolean>>;
}

export interface StudyCatelogNullablePromise
  extends Promise<StudyCatelog | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  std: () => Promise<String>;
  substd: () => Promise<String>;
  academic: () => Promise<String>;
  subacademic: () => Promise<String>;
  subjects: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  boards: <T = FragmentableArray<Board>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  specialization: <T = FragmentableArray<Specialization>>(args?: {
    where?: SpecializationWhereInput;
    orderBy?: SpecializationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  competition: <T = FragmentableArray<Competition>>(args?: {
    where?: CompetitionWhereInput;
    orderBy?: CompetitionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  published: () => Promise<Boolean>;
}

export interface Subject {
  id: ID_Output;
  name?: String;
}

export interface SubjectPromise extends Promise<Subject>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  catelog: <T = StudyCatelogPromise>() => T;
}

export interface SubjectSubscription
  extends Promise<AsyncIterator<Subject>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  catelog: <T = StudyCatelogSubscription>() => T;
}

export interface SubjectNullablePromise
  extends Promise<Subject | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  catelog: <T = StudyCatelogPromise>() => T;
}

export interface Specialization {
  id: ID_Output;
  name?: String;
}

export interface SpecializationPromise
  extends Promise<Specialization>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  catelog: <T = StudyCatelogPromise>() => T;
}

export interface SpecializationSubscription
  extends Promise<AsyncIterator<Specialization>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  catelog: <T = StudyCatelogSubscription>() => T;
}

export interface SpecializationNullablePromise
  extends Promise<Specialization | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  catelog: <T = StudyCatelogPromise>() => T;
}

export interface Competition {
  id: ID_Output;
  name?: String;
}

export interface CompetitionPromise extends Promise<Competition>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  catelog: <T = StudyCatelogPromise>() => T;
}

export interface CompetitionSubscription
  extends Promise<AsyncIterator<Competition>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  catelog: <T = StudyCatelogSubscription>() => T;
}

export interface CompetitionNullablePromise
  extends Promise<Competition | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  catelog: <T = StudyCatelogPromise>() => T;
}

export interface BoardConnection {
  pageInfo: PageInfo;
  edges: BoardEdge[];
}

export interface BoardConnectionPromise
  extends Promise<BoardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BoardEdge>>() => T;
  aggregate: <T = AggregateBoardPromise>() => T;
}

export interface BoardConnectionSubscription
  extends Promise<AsyncIterator<BoardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BoardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBoardSubscription>() => T;
}

export interface BoardEdge {
  node: Board;
  cursor: String;
}

export interface BoardEdgePromise extends Promise<BoardEdge>, Fragmentable {
  node: <T = BoardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BoardEdgeSubscription
  extends Promise<AsyncIterator<BoardEdge>>,
    Fragmentable {
  node: <T = BoardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBoard {
  count: Int;
}

export interface AggregateBoardPromise
  extends Promise<AggregateBoard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBoardSubscription
  extends Promise<AsyncIterator<AggregateBoard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompetitionConnection {
  pageInfo: PageInfo;
  edges: CompetitionEdge[];
}

export interface CompetitionConnectionPromise
  extends Promise<CompetitionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompetitionEdge>>() => T;
  aggregate: <T = AggregateCompetitionPromise>() => T;
}

export interface CompetitionConnectionSubscription
  extends Promise<AsyncIterator<CompetitionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompetitionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompetitionSubscription>() => T;
}

export interface CompetitionEdge {
  node: Competition;
  cursor: String;
}

export interface CompetitionEdgePromise
  extends Promise<CompetitionEdge>,
    Fragmentable {
  node: <T = CompetitionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompetitionEdgeSubscription
  extends Promise<AsyncIterator<CompetitionEdge>>,
    Fragmentable {
  node: <T = CompetitionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCompetition {
  count: Int;
}

export interface AggregateCompetitionPromise
  extends Promise<AggregateCompetition>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompetitionSubscription
  extends Promise<AsyncIterator<AggregateCompetition>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface File {
  id: ID_Output;
  path?: String;
  filename: String;
  mimetype: String;
  encoding: String;
}

export interface FilePromise extends Promise<File>, Fragmentable {
  id: () => Promise<ID_Output>;
  path: () => Promise<String>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  path: () => Promise<AsyncIterator<String>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
}

export interface FileNullablePromise
  extends Promise<File | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  path: () => Promise<String>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
}

export interface FileConnection {
  pageInfo: PageInfo;
  edges: FileEdge[];
}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FileEdge>>() => T;
  aggregate: <T = AggregateFilePromise>() => T;
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFileSubscription>() => T;
}

export interface FileEdge {
  node: File;
  cursor: String;
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = FilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFile {
  count: Int;
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrganizationConnection {
  pageInfo: PageInfo;
  edges: OrganizationEdge[];
}

export interface OrganizationConnectionPromise
  extends Promise<OrganizationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrganizationEdge>>() => T;
  aggregate: <T = AggregateOrganizationPromise>() => T;
}

export interface OrganizationConnectionSubscription
  extends Promise<AsyncIterator<OrganizationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrganizationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrganizationSubscription>() => T;
}

export interface OrganizationEdge {
  node: Organization;
  cursor: String;
}

export interface OrganizationEdgePromise
  extends Promise<OrganizationEdge>,
    Fragmentable {
  node: <T = OrganizationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrganizationEdgeSubscription
  extends Promise<AsyncIterator<OrganizationEdge>>,
    Fragmentable {
  node: <T = OrganizationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrganization {
  count: Int;
}

export interface AggregateOrganizationPromise
  extends Promise<AggregateOrganization>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrganizationSubscription
  extends Promise<AsyncIterator<AggregateOrganization>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoleConnection {
  pageInfo: PageInfo;
  edges: RoleEdge[];
}

export interface RoleConnectionPromise
  extends Promise<RoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoleEdge>>() => T;
  aggregate: <T = AggregateRolePromise>() => T;
}

export interface RoleConnectionSubscription
  extends Promise<AsyncIterator<RoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleSubscription>() => T;
}

export interface RoleEdge {
  node: Role;
  cursor: String;
}

export interface RoleEdgePromise extends Promise<RoleEdge>, Fragmentable {
  node: <T = RolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoleEdgeSubscription
  extends Promise<AsyncIterator<RoleEdge>>,
    Fragmentable {
  node: <T = RoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRole {
  count: Int;
}

export interface AggregateRolePromise
  extends Promise<AggregateRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleSubscription
  extends Promise<AsyncIterator<AggregateRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SpecializationConnection {
  pageInfo: PageInfo;
  edges: SpecializationEdge[];
}

export interface SpecializationConnectionPromise
  extends Promise<SpecializationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SpecializationEdge>>() => T;
  aggregate: <T = AggregateSpecializationPromise>() => T;
}

export interface SpecializationConnectionSubscription
  extends Promise<AsyncIterator<SpecializationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SpecializationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSpecializationSubscription>() => T;
}

export interface SpecializationEdge {
  node: Specialization;
  cursor: String;
}

export interface SpecializationEdgePromise
  extends Promise<SpecializationEdge>,
    Fragmentable {
  node: <T = SpecializationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SpecializationEdgeSubscription
  extends Promise<AsyncIterator<SpecializationEdge>>,
    Fragmentable {
  node: <T = SpecializationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSpecialization {
  count: Int;
}

export interface AggregateSpecializationPromise
  extends Promise<AggregateSpecialization>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSpecializationSubscription
  extends Promise<AsyncIterator<AggregateSpecialization>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StudyCatelogConnection {
  pageInfo: PageInfo;
  edges: StudyCatelogEdge[];
}

export interface StudyCatelogConnectionPromise
  extends Promise<StudyCatelogConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StudyCatelogEdge>>() => T;
  aggregate: <T = AggregateStudyCatelogPromise>() => T;
}

export interface StudyCatelogConnectionSubscription
  extends Promise<AsyncIterator<StudyCatelogConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StudyCatelogEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStudyCatelogSubscription>() => T;
}

export interface StudyCatelogEdge {
  node: StudyCatelog;
  cursor: String;
}

export interface StudyCatelogEdgePromise
  extends Promise<StudyCatelogEdge>,
    Fragmentable {
  node: <T = StudyCatelogPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StudyCatelogEdgeSubscription
  extends Promise<AsyncIterator<StudyCatelogEdge>>,
    Fragmentable {
  node: <T = StudyCatelogSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStudyCatelog {
  count: Int;
}

export interface AggregateStudyCatelogPromise
  extends Promise<AggregateStudyCatelog>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStudyCatelogSubscription
  extends Promise<AsyncIterator<AggregateStudyCatelog>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SubjectConnection {
  pageInfo: PageInfo;
  edges: SubjectEdge[];
}

export interface SubjectConnectionPromise
  extends Promise<SubjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubjectEdge>>() => T;
  aggregate: <T = AggregateSubjectPromise>() => T;
}

export interface SubjectConnectionSubscription
  extends Promise<AsyncIterator<SubjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SubjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSubjectSubscription>() => T;
}

export interface SubjectEdge {
  node: Subject;
  cursor: String;
}

export interface SubjectEdgePromise extends Promise<SubjectEdge>, Fragmentable {
  node: <T = SubjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubjectEdgeSubscription
  extends Promise<AsyncIterator<SubjectEdge>>,
    Fragmentable {
  node: <T = SubjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSubject {
  count: Int;
}

export interface AggregateSubjectPromise
  extends Promise<AggregateSubject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubjectSubscription
  extends Promise<AsyncIterator<AggregateSubject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AddressSubscriptionPayload {
  mutation: MutationType;
  node: Address;
  updatedFields: String[];
  previousValues: AddressPreviousValues;
}

export interface AddressSubscriptionPayloadPromise
  extends Promise<AddressSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AddressPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AddressPreviousValuesPromise>() => T;
}

export interface AddressSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AddressSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AddressSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AddressPreviousValuesSubscription>() => T;
}

export interface AddressPreviousValues {
  id: ID_Output;
  house?: String;
  landmark?: String;
  published: Boolean;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface AddressPreviousValuesPromise
  extends Promise<AddressPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  house: () => Promise<String>;
  landmark: () => Promise<String>;
  published: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AddressPreviousValuesSubscription
  extends Promise<AsyncIterator<AddressPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  house: () => Promise<AsyncIterator<String>>;
  landmark: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BaseAddressSubscriptionPayload {
  mutation: MutationType;
  node: BaseAddress;
  updatedFields: String[];
  previousValues: BaseAddressPreviousValues;
}

export interface BaseAddressSubscriptionPayloadPromise
  extends Promise<BaseAddressSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BaseAddressPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BaseAddressPreviousValuesPromise>() => T;
}

export interface BaseAddressSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BaseAddressSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BaseAddressSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BaseAddressPreviousValuesSubscription>() => T;
}

export interface BaseAddressPreviousValues {
  id: ID_Output;
  officename?: String;
  pincode?: String;
  officeType?: String;
  Deliverystatus?: String;
  divisionname?: String;
  regionname?: String;
  circlename?: String;
  taluk?: String;
  districtname?: String;
  statename?: String;
  telephone?: String;
  relatedSuboffice?: String;
  relatedHeadoffice?: String;
  longitude?: String;
  latitude?: String;
}

export interface BaseAddressPreviousValuesPromise
  extends Promise<BaseAddressPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  officename: () => Promise<String>;
  pincode: () => Promise<String>;
  officeType: () => Promise<String>;
  Deliverystatus: () => Promise<String>;
  divisionname: () => Promise<String>;
  regionname: () => Promise<String>;
  circlename: () => Promise<String>;
  taluk: () => Promise<String>;
  districtname: () => Promise<String>;
  statename: () => Promise<String>;
  telephone: () => Promise<String>;
  relatedSuboffice: () => Promise<String>;
  relatedHeadoffice: () => Promise<String>;
  longitude: () => Promise<String>;
  latitude: () => Promise<String>;
}

export interface BaseAddressPreviousValuesSubscription
  extends Promise<AsyncIterator<BaseAddressPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  officename: () => Promise<AsyncIterator<String>>;
  pincode: () => Promise<AsyncIterator<String>>;
  officeType: () => Promise<AsyncIterator<String>>;
  Deliverystatus: () => Promise<AsyncIterator<String>>;
  divisionname: () => Promise<AsyncIterator<String>>;
  regionname: () => Promise<AsyncIterator<String>>;
  circlename: () => Promise<AsyncIterator<String>>;
  taluk: () => Promise<AsyncIterator<String>>;
  districtname: () => Promise<AsyncIterator<String>>;
  statename: () => Promise<AsyncIterator<String>>;
  telephone: () => Promise<AsyncIterator<String>>;
  relatedSuboffice: () => Promise<AsyncIterator<String>>;
  relatedHeadoffice: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<String>>;
}

export interface BoardSubscriptionPayload {
  mutation: MutationType;
  node: Board;
  updatedFields: String[];
  previousValues: BoardPreviousValues;
}

export interface BoardSubscriptionPayloadPromise
  extends Promise<BoardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BoardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BoardPreviousValuesPromise>() => T;
}

export interface BoardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BoardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BoardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BoardPreviousValuesSubscription>() => T;
}

export interface BoardPreviousValues {
  id: ID_Output;
  name?: String;
}

export interface BoardPreviousValuesPromise
  extends Promise<BoardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface BoardPreviousValuesSubscription
  extends Promise<AsyncIterator<BoardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  text: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CompetitionSubscriptionPayload {
  mutation: MutationType;
  node: Competition;
  updatedFields: String[];
  previousValues: CompetitionPreviousValues;
}

export interface CompetitionSubscriptionPayloadPromise
  extends Promise<CompetitionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompetitionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompetitionPreviousValuesPromise>() => T;
}

export interface CompetitionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompetitionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompetitionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompetitionPreviousValuesSubscription>() => T;
}

export interface CompetitionPreviousValues {
  id: ID_Output;
  name?: String;
}

export interface CompetitionPreviousValuesPromise
  extends Promise<CompetitionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CompetitionPreviousValuesSubscription
  extends Promise<AsyncIterator<CompetitionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface FileSubscriptionPayload {
  mutation: MutationType;
  node: File;
  updatedFields: String[];
  previousValues: FilePreviousValues;
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilePreviousValuesPromise>() => T;
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilePreviousValuesSubscription>() => T;
}

export interface FilePreviousValues {
  id: ID_Output;
  path?: String;
  filename: String;
  mimetype: String;
  encoding: String;
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  path: () => Promise<String>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  path: () => Promise<AsyncIterator<String>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
}

export interface OrganizationSubscriptionPayload {
  mutation: MutationType;
  node: Organization;
  updatedFields: String[];
  previousValues: OrganizationPreviousValues;
}

export interface OrganizationSubscriptionPayloadPromise
  extends Promise<OrganizationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrganizationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrganizationPreviousValuesPromise>() => T;
}

export interface OrganizationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrganizationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrganizationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrganizationPreviousValuesSubscription>() => T;
}

export interface OrganizationPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface OrganizationPreviousValuesPromise
  extends Promise<OrganizationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface OrganizationPreviousValuesSubscription
  extends Promise<AsyncIterator<OrganizationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  body: String;
  published: Boolean;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  published: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoleSubscriptionPayload {
  mutation: MutationType;
  node: Role;
  updatedFields: String[];
  previousValues: RolePreviousValues;
}

export interface RoleSubscriptionPayloadPromise
  extends Promise<RoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RolePreviousValuesPromise>() => T;
}

export interface RoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RolePreviousValuesSubscription>() => T;
}

export interface RolePreviousValues {
  id: ID_Output;
  roleName: String;
  createdBy: String;
}

export interface RolePreviousValuesPromise
  extends Promise<RolePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  roleName: () => Promise<String>;
  createdBy: () => Promise<String>;
}

export interface RolePreviousValuesSubscription
  extends Promise<AsyncIterator<RolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  roleName: () => Promise<AsyncIterator<String>>;
  createdBy: () => Promise<AsyncIterator<String>>;
}

export interface SpecializationSubscriptionPayload {
  mutation: MutationType;
  node: Specialization;
  updatedFields: String[];
  previousValues: SpecializationPreviousValues;
}

export interface SpecializationSubscriptionPayloadPromise
  extends Promise<SpecializationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SpecializationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SpecializationPreviousValuesPromise>() => T;
}

export interface SpecializationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SpecializationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SpecializationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SpecializationPreviousValuesSubscription>() => T;
}

export interface SpecializationPreviousValues {
  id: ID_Output;
  name?: String;
}

export interface SpecializationPreviousValuesPromise
  extends Promise<SpecializationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface SpecializationPreviousValuesSubscription
  extends Promise<AsyncIterator<SpecializationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface StudyCatelogSubscriptionPayload {
  mutation: MutationType;
  node: StudyCatelog;
  updatedFields: String[];
  previousValues: StudyCatelogPreviousValues;
}

export interface StudyCatelogSubscriptionPayloadPromise
  extends Promise<StudyCatelogSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StudyCatelogPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StudyCatelogPreviousValuesPromise>() => T;
}

export interface StudyCatelogSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StudyCatelogSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StudyCatelogSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StudyCatelogPreviousValuesSubscription>() => T;
}

export interface StudyCatelogPreviousValues {
  id: ID_Output;
  std: String;
  substd?: String;
  academic?: String;
  subacademic?: String;
  published?: Boolean;
}

export interface StudyCatelogPreviousValuesPromise
  extends Promise<StudyCatelogPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  std: () => Promise<String>;
  substd: () => Promise<String>;
  academic: () => Promise<String>;
  subacademic: () => Promise<String>;
  published: () => Promise<Boolean>;
}

export interface StudyCatelogPreviousValuesSubscription
  extends Promise<AsyncIterator<StudyCatelogPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  std: () => Promise<AsyncIterator<String>>;
  substd: () => Promise<AsyncIterator<String>>;
  academic: () => Promise<AsyncIterator<String>>;
  subacademic: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
}

export interface SubjectSubscriptionPayload {
  mutation: MutationType;
  node: Subject;
  updatedFields: String[];
  previousValues: SubjectPreviousValues;
}

export interface SubjectSubscriptionPayloadPromise
  extends Promise<SubjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SubjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SubjectPreviousValuesPromise>() => T;
}

export interface SubjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SubjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SubjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SubjectPreviousValuesSubscription>() => T;
}

export interface SubjectPreviousValues {
  id: ID_Output;
  name?: String;
}

export interface SubjectPreviousValuesPromise
  extends Promise<SubjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface SubjectPreviousValuesSubscription
  extends Promise<AsyncIterator<SubjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  createdBy?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "File",
    embedded: false
  },
  {
    name: "Organization",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Address",
    embedded: false
  },
  {
    name: "BaseAddress",
    embedded: false
  },
  {
    name: "Subject",
    embedded: false
  },
  {
    name: "Board",
    embedded: false
  },
  {
    name: "Specialization",
    embedded: false
  },
  {
    name: "Competition",
    embedded: false
  },
  {
    name: "StudyCatelog",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;

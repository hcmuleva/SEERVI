// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  group: (where?: GroupWhereInput) => Promise<boolean>;
  groupMember: (where?: GroupMemberWhereInput) => Promise<boolean>;
  organization: (where?: OrganizationWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  role: (where?: RoleWhereInput) => Promise<boolean>;
  roleMember: (where?: RoleMemberWhereInput) => Promise<boolean>;
  subGroup: (where?: SubGroupWhereInput) => Promise<boolean>;
  subGroupMember: (where?: SubGroupMemberWhereInput) => Promise<boolean>;
  suborg: (where?: SuborgWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  group: (where: GroupWhereUniqueInput) => GroupNullablePromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  groupMember: (
    where: GroupMemberWhereUniqueInput
  ) => GroupMemberNullablePromise;
  groupMembers: (args?: {
    where?: GroupMemberWhereInput;
    orderBy?: GroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GroupMember>;
  groupMembersConnection: (args?: {
    where?: GroupMemberWhereInput;
    orderBy?: GroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupMemberConnectionPromise;
  organization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationNullablePromise;
  organizations: (args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Organization>;
  organizationsConnection: (args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrganizationConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  role: (where: RoleWhereUniqueInput) => RoleNullablePromise;
  roles: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Role>;
  rolesConnection: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoleConnectionPromise;
  roleMember: (where: RoleMemberWhereUniqueInput) => RoleMemberNullablePromise;
  roleMembers: (args?: {
    where?: RoleMemberWhereInput;
    orderBy?: RoleMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<RoleMember>;
  roleMembersConnection: (args?: {
    where?: RoleMemberWhereInput;
    orderBy?: RoleMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoleMemberConnectionPromise;
  subGroup: (where: SubGroupWhereUniqueInput) => SubGroupNullablePromise;
  subGroups: (args?: {
    where?: SubGroupWhereInput;
    orderBy?: SubGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SubGroup>;
  subGroupsConnection: (args?: {
    where?: SubGroupWhereInput;
    orderBy?: SubGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SubGroupConnectionPromise;
  subGroupMember: (
    where: SubGroupMemberWhereUniqueInput
  ) => SubGroupMemberNullablePromise;
  subGroupMembers: (args?: {
    where?: SubGroupMemberWhereInput;
    orderBy?: SubGroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SubGroupMember>;
  subGroupMembersConnection: (args?: {
    where?: SubGroupMemberWhereInput;
    orderBy?: SubGroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SubGroupMemberConnectionPromise;
  suborg: (where: SuborgWhereUniqueInput) => SuborgNullablePromise;
  suborgs: (args?: {
    where?: SuborgWhereInput;
    orderBy?: SuborgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Suborg>;
  suborgsConnection: (args?: {
    where?: SuborgWhereInput;
    orderBy?: SuborgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SuborgConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  updateManyGroups: (args: {
    data: GroupUpdateManyMutationInput;
    where?: GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createGroupMember: (data: GroupMemberCreateInput) => GroupMemberPromise;
  updateGroupMember: (args: {
    data: GroupMemberUpdateInput;
    where: GroupMemberWhereUniqueInput;
  }) => GroupMemberPromise;
  updateManyGroupMembers: (args: {
    data: GroupMemberUpdateManyMutationInput;
    where?: GroupMemberWhereInput;
  }) => BatchPayloadPromise;
  upsertGroupMember: (args: {
    where: GroupMemberWhereUniqueInput;
    create: GroupMemberCreateInput;
    update: GroupMemberUpdateInput;
  }) => GroupMemberPromise;
  deleteGroupMember: (where: GroupMemberWhereUniqueInput) => GroupMemberPromise;
  deleteManyGroupMembers: (
    where?: GroupMemberWhereInput
  ) => BatchPayloadPromise;
  createOrganization: (data: OrganizationCreateInput) => OrganizationPromise;
  updateOrganization: (args: {
    data: OrganizationUpdateInput;
    where: OrganizationWhereUniqueInput;
  }) => OrganizationPromise;
  updateManyOrganizations: (args: {
    data: OrganizationUpdateManyMutationInput;
    where?: OrganizationWhereInput;
  }) => BatchPayloadPromise;
  upsertOrganization: (args: {
    where: OrganizationWhereUniqueInput;
    create: OrganizationCreateInput;
    update: OrganizationUpdateInput;
  }) => OrganizationPromise;
  deleteOrganization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationPromise;
  deleteManyOrganizations: (
    where?: OrganizationWhereInput
  ) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createRole: (data: RoleCreateInput) => RolePromise;
  updateRole: (args: {
    data: RoleUpdateInput;
    where: RoleWhereUniqueInput;
  }) => RolePromise;
  updateManyRoles: (args: {
    data: RoleUpdateManyMutationInput;
    where?: RoleWhereInput;
  }) => BatchPayloadPromise;
  upsertRole: (args: {
    where: RoleWhereUniqueInput;
    create: RoleCreateInput;
    update: RoleUpdateInput;
  }) => RolePromise;
  deleteRole: (where: RoleWhereUniqueInput) => RolePromise;
  deleteManyRoles: (where?: RoleWhereInput) => BatchPayloadPromise;
  createRoleMember: (data: RoleMemberCreateInput) => RoleMemberPromise;
  updateRoleMember: (args: {
    data: RoleMemberUpdateInput;
    where: RoleMemberWhereUniqueInput;
  }) => RoleMemberPromise;
  updateManyRoleMembers: (args: {
    data: RoleMemberUpdateManyMutationInput;
    where?: RoleMemberWhereInput;
  }) => BatchPayloadPromise;
  upsertRoleMember: (args: {
    where: RoleMemberWhereUniqueInput;
    create: RoleMemberCreateInput;
    update: RoleMemberUpdateInput;
  }) => RoleMemberPromise;
  deleteRoleMember: (where: RoleMemberWhereUniqueInput) => RoleMemberPromise;
  deleteManyRoleMembers: (where?: RoleMemberWhereInput) => BatchPayloadPromise;
  createSubGroup: (data: SubGroupCreateInput) => SubGroupPromise;
  updateSubGroup: (args: {
    data: SubGroupUpdateInput;
    where: SubGroupWhereUniqueInput;
  }) => SubGroupPromise;
  updateManySubGroups: (args: {
    data: SubGroupUpdateManyMutationInput;
    where?: SubGroupWhereInput;
  }) => BatchPayloadPromise;
  upsertSubGroup: (args: {
    where: SubGroupWhereUniqueInput;
    create: SubGroupCreateInput;
    update: SubGroupUpdateInput;
  }) => SubGroupPromise;
  deleteSubGroup: (where: SubGroupWhereUniqueInput) => SubGroupPromise;
  deleteManySubGroups: (where?: SubGroupWhereInput) => BatchPayloadPromise;
  createSubGroupMember: (
    data: SubGroupMemberCreateInput
  ) => SubGroupMemberPromise;
  updateSubGroupMember: (args: {
    data: SubGroupMemberUpdateInput;
    where: SubGroupMemberWhereUniqueInput;
  }) => SubGroupMemberPromise;
  updateManySubGroupMembers: (args: {
    data: SubGroupMemberUpdateManyMutationInput;
    where?: SubGroupMemberWhereInput;
  }) => BatchPayloadPromise;
  upsertSubGroupMember: (args: {
    where: SubGroupMemberWhereUniqueInput;
    create: SubGroupMemberCreateInput;
    update: SubGroupMemberUpdateInput;
  }) => SubGroupMemberPromise;
  deleteSubGroupMember: (
    where: SubGroupMemberWhereUniqueInput
  ) => SubGroupMemberPromise;
  deleteManySubGroupMembers: (
    where?: SubGroupMemberWhereInput
  ) => BatchPayloadPromise;
  createSuborg: (data: SuborgCreateInput) => SuborgPromise;
  updateSuborg: (args: {
    data: SuborgUpdateInput;
    where: SuborgWhereUniqueInput;
  }) => SuborgPromise;
  updateManySuborgs: (args: {
    data: SuborgUpdateManyMutationInput;
    where?: SuborgWhereInput;
  }) => BatchPayloadPromise;
  upsertSuborg: (args: {
    where: SuborgWhereUniqueInput;
    create: SuborgCreateInput;
    update: SuborgUpdateInput;
  }) => SuborgPromise;
  deleteSuborg: (where: SuborgWhereUniqueInput) => SuborgPromise;
  deleteManySuborgs: (where?: SuborgWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  groupMember: (
    where?: GroupMemberSubscriptionWhereInput
  ) => GroupMemberSubscriptionPayloadSubscription;
  organization: (
    where?: OrganizationSubscriptionWhereInput
  ) => OrganizationSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  role: (
    where?: RoleSubscriptionWhereInput
  ) => RoleSubscriptionPayloadSubscription;
  roleMember: (
    where?: RoleMemberSubscriptionWhereInput
  ) => RoleMemberSubscriptionPayloadSubscription;
  subGroup: (
    where?: SubGroupSubscriptionWhereInput
  ) => SubGroupSubscriptionPayloadSubscription;
  subGroupMember: (
    where?: SubGroupMemberSubscriptionWhereInput
  ) => SubGroupMemberSubscriptionPayloadSubscription;
  suborg: (
    where?: SuborgSubscriptionWhereInput
  ) => SuborgSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MemberStatus =
  | "ACTIVE"
  | "EXPIRED"
  | "INACTIVE"
  | "DORMANT"
  | "RENEWED"
  | "SPECIALGRANT";

export type RoleStatus =
  | "ACTIVE"
  | "EXPIRED"
  | "INACTIVE"
  | "DORMANT"
  | "RENEWED"
  | "SPECIALGRANT";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdBy_ASC"
  | "createdBy_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type SuborgOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type SubGroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type SubGroupMemberOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type RoleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type RoleMemberOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type GroupMemberOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "body_ASC"
  | "body_DESC"
  | "published_ASC"
  | "published_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type OrganizationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  org?: Maybe<OrganizationWhereInput>;
  suborg_every?: Maybe<SuborgWhereInput>;
  suborg_some?: Maybe<SuborgWhereInput>;
  suborg_none?: Maybe<SuborgWhereInput>;
  groupmembers_every?: Maybe<GroupMemberWhereInput>;
  groupmembers_some?: Maybe<GroupMemberWhereInput>;
  groupmembers_none?: Maybe<GroupMemberWhereInput>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  myRoles_every?: Maybe<RoleMemberWhereInput>;
  myRoles_some?: Maybe<RoleMemberWhereInput>;
  myRoles_none?: Maybe<RoleMemberWhereInput>;
  createdBy?: Maybe<String>;
  createdBy_not?: Maybe<String>;
  createdBy_in?: Maybe<String[] | String>;
  createdBy_not_in?: Maybe<String[] | String>;
  createdBy_lt?: Maybe<String>;
  createdBy_lte?: Maybe<String>;
  createdBy_gt?: Maybe<String>;
  createdBy_gte?: Maybe<String>;
  createdBy_contains?: Maybe<String>;
  createdBy_not_contains?: Maybe<String>;
  createdBy_starts_with?: Maybe<String>;
  createdBy_not_starts_with?: Maybe<String>;
  createdBy_ends_with?: Maybe<String>;
  createdBy_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface OrganizationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  author_every?: Maybe<UserWhereInput>;
  author_some?: Maybe<UserWhereInput>;
  author_none?: Maybe<UserWhereInput>;
  suborgs_every?: Maybe<SuborgWhereInput>;
  suborgs_some?: Maybe<SuborgWhereInput>;
  suborgs_none?: Maybe<SuborgWhereInput>;
  orgRoles_every?: Maybe<RoleWhereInput>;
  orgRoles_some?: Maybe<RoleWhereInput>;
  orgRoles_none?: Maybe<RoleWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
  OR?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
  NOT?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
}

export interface SuborgWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  author_every?: Maybe<UserWhereInput>;
  author_some?: Maybe<UserWhereInput>;
  author_none?: Maybe<UserWhereInput>;
  org?: Maybe<OrganizationWhereInput>;
  userGroups_every?: Maybe<GroupWhereInput>;
  userGroups_some?: Maybe<GroupWhereInput>;
  userGroups_none?: Maybe<GroupWhereInput>;
  suborgRoles_every?: Maybe<RoleWhereInput>;
  suborgRoles_some?: Maybe<RoleWhereInput>;
  suborgRoles_none?: Maybe<RoleWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SuborgWhereInput[] | SuborgWhereInput>;
  OR?: Maybe<SuborgWhereInput[] | SuborgWhereInput>;
  NOT?: Maybe<SuborgWhereInput[] | SuborgWhereInput>;
}

export interface GroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  suborgid?: Maybe<SuborgWhereInput>;
  subgroups_every?: Maybe<SubGroupWhereInput>;
  subgroups_some?: Maybe<SubGroupWhereInput>;
  subgroups_none?: Maybe<SubGroupWhereInput>;
  members_every?: Maybe<GroupMemberWhereInput>;
  members_some?: Maybe<GroupMemberWhereInput>;
  members_none?: Maybe<GroupMemberWhereInput>;
  groupRoles_every?: Maybe<RoleWhereInput>;
  groupRoles_some?: Maybe<RoleWhereInput>;
  groupRoles_none?: Maybe<RoleWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  OR?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  NOT?: Maybe<GroupWhereInput[] | GroupWhereInput>;
}

export interface SubGroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  groupid?: Maybe<GroupWhereInput>;
  members_every?: Maybe<SubGroupMemberWhereInput>;
  members_some?: Maybe<SubGroupMemberWhereInput>;
  members_none?: Maybe<SubGroupMemberWhereInput>;
  subgroupRoles_every?: Maybe<RoleWhereInput>;
  subgroupRoles_some?: Maybe<RoleWhereInput>;
  subgroupRoles_none?: Maybe<RoleWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SubGroupWhereInput[] | SubGroupWhereInput>;
  OR?: Maybe<SubGroupWhereInput[] | SubGroupWhereInput>;
  NOT?: Maybe<SubGroupWhereInput[] | SubGroupWhereInput>;
}

export interface SubGroupMemberWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userid?: Maybe<UserWhereInput>;
  member?: Maybe<SubGroupWhereInput>;
  status?: Maybe<MemberStatus>;
  status_not?: Maybe<MemberStatus>;
  status_in?: Maybe<MemberStatus[] | MemberStatus>;
  status_not_in?: Maybe<MemberStatus[] | MemberStatus>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SubGroupMemberWhereInput[] | SubGroupMemberWhereInput>;
  OR?: Maybe<SubGroupMemberWhereInput[] | SubGroupMemberWhereInput>;
  NOT?: Maybe<SubGroupMemberWhereInput[] | SubGroupMemberWhereInput>;
}

export interface RoleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  org?: Maybe<OrganizationWhereInput>;
  suborg?: Maybe<SuborgWhereInput>;
  group?: Maybe<GroupWhereInput>;
  subgroup?: Maybe<SubGroupWhereInput>;
  members_every?: Maybe<RoleMemberWhereInput>;
  members_some?: Maybe<RoleMemberWhereInput>;
  members_none?: Maybe<RoleMemberWhereInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  OR?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  NOT?: Maybe<RoleWhereInput[] | RoleWhereInput>;
}

export interface RoleMemberWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userid?: Maybe<UserWhereInput>;
  role?: Maybe<RoleWhereInput>;
  status?: Maybe<RoleStatus>;
  status_not?: Maybe<RoleStatus>;
  status_in?: Maybe<RoleStatus[] | RoleStatus>;
  status_not_in?: Maybe<RoleStatus[] | RoleStatus>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RoleMemberWhereInput[] | RoleMemberWhereInput>;
  OR?: Maybe<RoleMemberWhereInput[] | RoleMemberWhereInput>;
  NOT?: Maybe<RoleMemberWhereInput[] | RoleMemberWhereInput>;
}

export interface GroupMemberWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userid?: Maybe<UserWhereInput>;
  member?: Maybe<GroupWhereInput>;
  status?: Maybe<MemberStatus>;
  status_not?: Maybe<MemberStatus>;
  status_in?: Maybe<MemberStatus[] | MemberStatus>;
  status_not_in?: Maybe<MemberStatus[] | MemberStatus>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GroupMemberWhereInput[] | GroupMemberWhereInput>;
  OR?: Maybe<GroupMemberWhereInput[] | GroupMemberWhereInput>;
  NOT?: Maybe<GroupMemberWhereInput[] | GroupMemberWhereInput>;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  author?: Maybe<UserWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  post?: Maybe<PostWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export type GroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type GroupMemberWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OrganizationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RoleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RoleMemberWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SubGroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SubGroupMemberWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SuborgWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  author: UserCreateOneWithoutCommentsInput;
  post: PostCreateOneWithoutCommentsInput;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  myRoles?: Maybe<RoleMemberCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
}

export interface OrganizationCreateOneWithoutAuthorInput {
  create?: Maybe<OrganizationCreateWithoutAuthorInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  suborgs?: Maybe<SuborgCreateManyWithoutOrgInput>;
  orgRoles?: Maybe<RoleCreateManyWithoutOrgInput>;
}

export interface SuborgCreateManyWithoutOrgInput {
  create?: Maybe<SuborgCreateWithoutOrgInput[] | SuborgCreateWithoutOrgInput>;
  connect?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
}

export interface SuborgCreateWithoutOrgInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  author?: Maybe<UserCreateManyWithoutSuborgInput>;
  userGroups?: Maybe<GroupCreateManyWithoutSuborgidInput>;
  suborgRoles?: Maybe<RoleCreateManyWithoutSuborgInput>;
}

export interface UserCreateManyWithoutSuborgInput {
  create?: Maybe<UserCreateWithoutSuborgInput[] | UserCreateWithoutSuborgInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutSuborgInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  myRoles?: Maybe<RoleMemberCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
}

export interface GroupMemberCreateManyWithoutUseridInput {
  create?: Maybe<
    GroupMemberCreateWithoutUseridInput[] | GroupMemberCreateWithoutUseridInput
  >;
  connect?: Maybe<GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput>;
}

export interface GroupMemberCreateWithoutUseridInput {
  id?: Maybe<ID_Input>;
  member: GroupCreateOneWithoutMembersInput;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface GroupCreateOneWithoutMembersInput {
  create?: Maybe<GroupCreateWithoutMembersInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  suborgid: SuborgCreateOneWithoutUserGroupsInput;
  subgroups?: Maybe<SubGroupCreateManyWithoutGroupidInput>;
  groupRoles?: Maybe<RoleCreateManyWithoutGroupInput>;
}

export interface SuborgCreateOneWithoutUserGroupsInput {
  create?: Maybe<SuborgCreateWithoutUserGroupsInput>;
  connect?: Maybe<SuborgWhereUniqueInput>;
}

export interface SuborgCreateWithoutUserGroupsInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  author?: Maybe<UserCreateManyWithoutSuborgInput>;
  org: OrganizationCreateOneWithoutSuborgsInput;
  suborgRoles?: Maybe<RoleCreateManyWithoutSuborgInput>;
}

export interface OrganizationCreateOneWithoutSuborgsInput {
  create?: Maybe<OrganizationCreateWithoutSuborgsInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationCreateWithoutSuborgsInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  author?: Maybe<UserCreateManyWithoutOrgInput>;
  orgRoles?: Maybe<RoleCreateManyWithoutOrgInput>;
}

export interface UserCreateManyWithoutOrgInput {
  create?: Maybe<UserCreateWithoutOrgInput[] | UserCreateWithoutOrgInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutOrgInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  myRoles?: Maybe<RoleMemberCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
}

export interface SuborgCreateManyWithoutAuthorInput {
  create?: Maybe<
    SuborgCreateWithoutAuthorInput[] | SuborgCreateWithoutAuthorInput
  >;
  connect?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
}

export interface SuborgCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  org: OrganizationCreateOneWithoutSuborgsInput;
  userGroups?: Maybe<GroupCreateManyWithoutSuborgidInput>;
  suborgRoles?: Maybe<RoleCreateManyWithoutSuborgInput>;
}

export interface GroupCreateManyWithoutSuborgidInput {
  create?: Maybe<
    GroupCreateWithoutSuborgidInput[] | GroupCreateWithoutSuborgidInput
  >;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutSuborgidInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  subgroups?: Maybe<SubGroupCreateManyWithoutGroupidInput>;
  members?: Maybe<GroupMemberCreateManyWithoutMemberInput>;
  groupRoles?: Maybe<RoleCreateManyWithoutGroupInput>;
}

export interface SubGroupCreateManyWithoutGroupidInput {
  create?: Maybe<
    SubGroupCreateWithoutGroupidInput[] | SubGroupCreateWithoutGroupidInput
  >;
  connect?: Maybe<SubGroupWhereUniqueInput[] | SubGroupWhereUniqueInput>;
}

export interface SubGroupCreateWithoutGroupidInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  members?: Maybe<SubGroupMemberCreateManyWithoutMemberInput>;
  subgroupRoles?: Maybe<RoleCreateManyWithoutSubgroupInput>;
}

export interface SubGroupMemberCreateManyWithoutMemberInput {
  create?: Maybe<
    | SubGroupMemberCreateWithoutMemberInput[]
    | SubGroupMemberCreateWithoutMemberInput
  >;
  connect?: Maybe<
    SubGroupMemberWhereUniqueInput[] | SubGroupMemberWhereUniqueInput
  >;
}

export interface SubGroupMemberCreateWithoutMemberInput {
  id?: Maybe<ID_Input>;
  userid: UserCreateOneInput;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  myRoles?: Maybe<RoleMemberCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  title: String;
  body: String;
  published: Boolean;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
}

export interface CommentCreateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  text: String;
  author: UserCreateOneWithoutCommentsInput;
}

export interface CommentCreateManyWithoutAuthorInput {
  create?: Maybe<
    CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  text: String;
  post: PostCreateOneWithoutCommentsInput;
}

export interface PostCreateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  title: String;
  body: String;
  published: Boolean;
  author: UserCreateOneWithoutPostsInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  myRoles?: Maybe<RoleMemberCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
}

export interface RoleMemberCreateManyWithoutUseridInput {
  create?: Maybe<
    RoleMemberCreateWithoutUseridInput[] | RoleMemberCreateWithoutUseridInput
  >;
  connect?: Maybe<RoleMemberWhereUniqueInput[] | RoleMemberWhereUniqueInput>;
}

export interface RoleMemberCreateWithoutUseridInput {
  id?: Maybe<ID_Input>;
  role: RoleCreateOneWithoutMembersInput;
  status?: Maybe<RoleStatus>;
  description?: Maybe<String>;
}

export interface RoleCreateOneWithoutMembersInput {
  create?: Maybe<RoleCreateWithoutMembersInput>;
  connect?: Maybe<RoleWhereUniqueInput>;
}

export interface RoleCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  name: String;
  org?: Maybe<OrganizationCreateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgCreateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupCreateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubgroupRolesInput>;
  description?: Maybe<String>;
}

export interface OrganizationCreateOneWithoutOrgRolesInput {
  create?: Maybe<OrganizationCreateWithoutOrgRolesInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationCreateWithoutOrgRolesInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  author?: Maybe<UserCreateManyWithoutOrgInput>;
  suborgs?: Maybe<SuborgCreateManyWithoutOrgInput>;
}

export interface SuborgCreateOneWithoutSuborgRolesInput {
  create?: Maybe<SuborgCreateWithoutSuborgRolesInput>;
  connect?: Maybe<SuborgWhereUniqueInput>;
}

export interface SuborgCreateWithoutSuborgRolesInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  author?: Maybe<UserCreateManyWithoutSuborgInput>;
  org: OrganizationCreateOneWithoutSuborgsInput;
  userGroups?: Maybe<GroupCreateManyWithoutSuborgidInput>;
}

export interface GroupCreateOneWithoutGroupRolesInput {
  create?: Maybe<GroupCreateWithoutGroupRolesInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutGroupRolesInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  suborgid: SuborgCreateOneWithoutUserGroupsInput;
  subgroups?: Maybe<SubGroupCreateManyWithoutGroupidInput>;
  members?: Maybe<GroupMemberCreateManyWithoutMemberInput>;
}

export interface GroupMemberCreateManyWithoutMemberInput {
  create?: Maybe<
    GroupMemberCreateWithoutMemberInput[] | GroupMemberCreateWithoutMemberInput
  >;
  connect?: Maybe<GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput>;
}

export interface GroupMemberCreateWithoutMemberInput {
  id?: Maybe<ID_Input>;
  userid: UserCreateOneWithoutGroupmembersInput;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface UserCreateOneWithoutGroupmembersInput {
  create?: Maybe<UserCreateWithoutGroupmembersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutGroupmembersInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  myRoles?: Maybe<RoleMemberCreateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
}

export interface SubGroupCreateOneWithoutSubgroupRolesInput {
  create?: Maybe<SubGroupCreateWithoutSubgroupRolesInput>;
  connect?: Maybe<SubGroupWhereUniqueInput>;
}

export interface SubGroupCreateWithoutSubgroupRolesInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  groupid: GroupCreateOneWithoutSubgroupsInput;
  members?: Maybe<SubGroupMemberCreateManyWithoutMemberInput>;
}

export interface GroupCreateOneWithoutSubgroupsInput {
  create?: Maybe<GroupCreateWithoutSubgroupsInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutSubgroupsInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  suborgid: SuborgCreateOneWithoutUserGroupsInput;
  members?: Maybe<GroupMemberCreateManyWithoutMemberInput>;
  groupRoles?: Maybe<RoleCreateManyWithoutGroupInput>;
}

export interface RoleCreateManyWithoutGroupInput {
  create?: Maybe<RoleCreateWithoutGroupInput[] | RoleCreateWithoutGroupInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
}

export interface RoleCreateWithoutGroupInput {
  id?: Maybe<ID_Input>;
  name: String;
  org?: Maybe<OrganizationCreateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgCreateOneWithoutSuborgRolesInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubgroupRolesInput>;
  members?: Maybe<RoleMemberCreateManyWithoutRoleInput>;
  description?: Maybe<String>;
}

export interface RoleMemberCreateManyWithoutRoleInput {
  create?: Maybe<
    RoleMemberCreateWithoutRoleInput[] | RoleMemberCreateWithoutRoleInput
  >;
  connect?: Maybe<RoleMemberWhereUniqueInput[] | RoleMemberWhereUniqueInput>;
}

export interface RoleMemberCreateWithoutRoleInput {
  id?: Maybe<ID_Input>;
  userid: UserCreateOneWithoutMyRolesInput;
  status?: Maybe<RoleStatus>;
  description?: Maybe<String>;
}

export interface UserCreateOneWithoutMyRolesInput {
  create?: Maybe<UserCreateWithoutMyRolesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMyRolesInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  org?: Maybe<OrganizationCreateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgCreateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberCreateManyWithoutUseridInput>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  createdBy?: Maybe<String>;
}

export interface RoleCreateManyWithoutSubgroupInput {
  create?: Maybe<
    RoleCreateWithoutSubgroupInput[] | RoleCreateWithoutSubgroupInput
  >;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
}

export interface RoleCreateWithoutSubgroupInput {
  id?: Maybe<ID_Input>;
  name: String;
  org?: Maybe<OrganizationCreateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgCreateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupCreateOneWithoutGroupRolesInput>;
  members?: Maybe<RoleMemberCreateManyWithoutRoleInput>;
  description?: Maybe<String>;
}

export interface RoleCreateManyWithoutSuborgInput {
  create?: Maybe<RoleCreateWithoutSuborgInput[] | RoleCreateWithoutSuborgInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
}

export interface RoleCreateWithoutSuborgInput {
  id?: Maybe<ID_Input>;
  name: String;
  org?: Maybe<OrganizationCreateOneWithoutOrgRolesInput>;
  group?: Maybe<GroupCreateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubgroupRolesInput>;
  members?: Maybe<RoleMemberCreateManyWithoutRoleInput>;
  description?: Maybe<String>;
}

export interface RoleCreateManyWithoutOrgInput {
  create?: Maybe<RoleCreateWithoutOrgInput[] | RoleCreateWithoutOrgInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
}

export interface RoleCreateWithoutOrgInput {
  id?: Maybe<ID_Input>;
  name: String;
  suborg?: Maybe<SuborgCreateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupCreateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubgroupRolesInput>;
  members?: Maybe<RoleMemberCreateManyWithoutRoleInput>;
  description?: Maybe<String>;
}

export interface CommentUpdateInput {
  text?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  post?: Maybe<PostUpdateOneRequiredWithoutCommentsInput>;
}

export interface UserUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  myRoles?: Maybe<RoleMemberUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
}

export interface OrganizationUpdateOneWithoutAuthorInput {
  create?: Maybe<OrganizationCreateWithoutAuthorInput>;
  update?: Maybe<OrganizationUpdateWithoutAuthorDataInput>;
  upsert?: Maybe<OrganizationUpsertWithoutAuthorInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationUpdateWithoutAuthorDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  suborgs?: Maybe<SuborgUpdateManyWithoutOrgInput>;
  orgRoles?: Maybe<RoleUpdateManyWithoutOrgInput>;
}

export interface SuborgUpdateManyWithoutOrgInput {
  create?: Maybe<SuborgCreateWithoutOrgInput[] | SuborgCreateWithoutOrgInput>;
  delete?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
  connect?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
  set?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
  disconnect?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
  update?: Maybe<
    | SuborgUpdateWithWhereUniqueWithoutOrgInput[]
    | SuborgUpdateWithWhereUniqueWithoutOrgInput
  >;
  upsert?: Maybe<
    | SuborgUpsertWithWhereUniqueWithoutOrgInput[]
    | SuborgUpsertWithWhereUniqueWithoutOrgInput
  >;
  deleteMany?: Maybe<SuborgScalarWhereInput[] | SuborgScalarWhereInput>;
  updateMany?: Maybe<
    | SuborgUpdateManyWithWhereNestedInput[]
    | SuborgUpdateManyWithWhereNestedInput
  >;
}

export interface SuborgUpdateWithWhereUniqueWithoutOrgInput {
  where: SuborgWhereUniqueInput;
  data: SuborgUpdateWithoutOrgDataInput;
}

export interface SuborgUpdateWithoutOrgDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateManyWithoutSuborgInput>;
  userGroups?: Maybe<GroupUpdateManyWithoutSuborgidInput>;
  suborgRoles?: Maybe<RoleUpdateManyWithoutSuborgInput>;
}

export interface UserUpdateManyWithoutSuborgInput {
  create?: Maybe<UserCreateWithoutSuborgInput[] | UserCreateWithoutSuborgInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutSuborgInput[]
    | UserUpdateWithWhereUniqueWithoutSuborgInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutSuborgInput[]
    | UserUpsertWithWhereUniqueWithoutSuborgInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutSuborgInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutSuborgDataInput;
}

export interface UserUpdateWithoutSuborgDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  myRoles?: Maybe<RoleMemberUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
}

export interface GroupMemberUpdateManyWithoutUseridInput {
  create?: Maybe<
    GroupMemberCreateWithoutUseridInput[] | GroupMemberCreateWithoutUseridInput
  >;
  delete?: Maybe<GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput>;
  connect?: Maybe<GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput>;
  set?: Maybe<GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput>;
  disconnect?: Maybe<
    GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput
  >;
  update?: Maybe<
    | GroupMemberUpdateWithWhereUniqueWithoutUseridInput[]
    | GroupMemberUpdateWithWhereUniqueWithoutUseridInput
  >;
  upsert?: Maybe<
    | GroupMemberUpsertWithWhereUniqueWithoutUseridInput[]
    | GroupMemberUpsertWithWhereUniqueWithoutUseridInput
  >;
  deleteMany?: Maybe<
    GroupMemberScalarWhereInput[] | GroupMemberScalarWhereInput
  >;
  updateMany?: Maybe<
    | GroupMemberUpdateManyWithWhereNestedInput[]
    | GroupMemberUpdateManyWithWhereNestedInput
  >;
}

export interface GroupMemberUpdateWithWhereUniqueWithoutUseridInput {
  where: GroupMemberWhereUniqueInput;
  data: GroupMemberUpdateWithoutUseridDataInput;
}

export interface GroupMemberUpdateWithoutUseridDataInput {
  member?: Maybe<GroupUpdateOneRequiredWithoutMembersInput>;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface GroupUpdateOneRequiredWithoutMembersInput {
  create?: Maybe<GroupCreateWithoutMembersInput>;
  update?: Maybe<GroupUpdateWithoutMembersDataInput>;
  upsert?: Maybe<GroupUpsertWithoutMembersInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupUpdateWithoutMembersDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  suborgid?: Maybe<SuborgUpdateOneRequiredWithoutUserGroupsInput>;
  subgroups?: Maybe<SubGroupUpdateManyWithoutGroupidInput>;
  groupRoles?: Maybe<RoleUpdateManyWithoutGroupInput>;
}

export interface SuborgUpdateOneRequiredWithoutUserGroupsInput {
  create?: Maybe<SuborgCreateWithoutUserGroupsInput>;
  update?: Maybe<SuborgUpdateWithoutUserGroupsDataInput>;
  upsert?: Maybe<SuborgUpsertWithoutUserGroupsInput>;
  connect?: Maybe<SuborgWhereUniqueInput>;
}

export interface SuborgUpdateWithoutUserGroupsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateManyWithoutSuborgInput>;
  org?: Maybe<OrganizationUpdateOneRequiredWithoutSuborgsInput>;
  suborgRoles?: Maybe<RoleUpdateManyWithoutSuborgInput>;
}

export interface OrganizationUpdateOneRequiredWithoutSuborgsInput {
  create?: Maybe<OrganizationCreateWithoutSuborgsInput>;
  update?: Maybe<OrganizationUpdateWithoutSuborgsDataInput>;
  upsert?: Maybe<OrganizationUpsertWithoutSuborgsInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationUpdateWithoutSuborgsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateManyWithoutOrgInput>;
  orgRoles?: Maybe<RoleUpdateManyWithoutOrgInput>;
}

export interface UserUpdateManyWithoutOrgInput {
  create?: Maybe<UserCreateWithoutOrgInput[] | UserCreateWithoutOrgInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutOrgInput[]
    | UserUpdateWithWhereUniqueWithoutOrgInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutOrgInput[]
    | UserUpsertWithWhereUniqueWithoutOrgInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutOrgInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutOrgDataInput;
}

export interface UserUpdateWithoutOrgDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  myRoles?: Maybe<RoleMemberUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
}

export interface SuborgUpdateManyWithoutAuthorInput {
  create?: Maybe<
    SuborgCreateWithoutAuthorInput[] | SuborgCreateWithoutAuthorInput
  >;
  delete?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
  connect?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
  set?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
  disconnect?: Maybe<SuborgWhereUniqueInput[] | SuborgWhereUniqueInput>;
  update?: Maybe<
    | SuborgUpdateWithWhereUniqueWithoutAuthorInput[]
    | SuborgUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | SuborgUpsertWithWhereUniqueWithoutAuthorInput[]
    | SuborgUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<SuborgScalarWhereInput[] | SuborgScalarWhereInput>;
  updateMany?: Maybe<
    | SuborgUpdateManyWithWhereNestedInput[]
    | SuborgUpdateManyWithWhereNestedInput
  >;
}

export interface SuborgUpdateWithWhereUniqueWithoutAuthorInput {
  where: SuborgWhereUniqueInput;
  data: SuborgUpdateWithoutAuthorDataInput;
}

export interface SuborgUpdateWithoutAuthorDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneRequiredWithoutSuborgsInput>;
  userGroups?: Maybe<GroupUpdateManyWithoutSuborgidInput>;
  suborgRoles?: Maybe<RoleUpdateManyWithoutSuborgInput>;
}

export interface GroupUpdateManyWithoutSuborgidInput {
  create?: Maybe<
    GroupCreateWithoutSuborgidInput[] | GroupCreateWithoutSuborgidInput
  >;
  delete?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  set?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  disconnect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  update?: Maybe<
    | GroupUpdateWithWhereUniqueWithoutSuborgidInput[]
    | GroupUpdateWithWhereUniqueWithoutSuborgidInput
  >;
  upsert?: Maybe<
    | GroupUpsertWithWhereUniqueWithoutSuborgidInput[]
    | GroupUpsertWithWhereUniqueWithoutSuborgidInput
  >;
  deleteMany?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  updateMany?: Maybe<
    GroupUpdateManyWithWhereNestedInput[] | GroupUpdateManyWithWhereNestedInput
  >;
}

export interface GroupUpdateWithWhereUniqueWithoutSuborgidInput {
  where: GroupWhereUniqueInput;
  data: GroupUpdateWithoutSuborgidDataInput;
}

export interface GroupUpdateWithoutSuborgidDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  subgroups?: Maybe<SubGroupUpdateManyWithoutGroupidInput>;
  members?: Maybe<GroupMemberUpdateManyWithoutMemberInput>;
  groupRoles?: Maybe<RoleUpdateManyWithoutGroupInput>;
}

export interface SubGroupUpdateManyWithoutGroupidInput {
  create?: Maybe<
    SubGroupCreateWithoutGroupidInput[] | SubGroupCreateWithoutGroupidInput
  >;
  delete?: Maybe<SubGroupWhereUniqueInput[] | SubGroupWhereUniqueInput>;
  connect?: Maybe<SubGroupWhereUniqueInput[] | SubGroupWhereUniqueInput>;
  set?: Maybe<SubGroupWhereUniqueInput[] | SubGroupWhereUniqueInput>;
  disconnect?: Maybe<SubGroupWhereUniqueInput[] | SubGroupWhereUniqueInput>;
  update?: Maybe<
    | SubGroupUpdateWithWhereUniqueWithoutGroupidInput[]
    | SubGroupUpdateWithWhereUniqueWithoutGroupidInput
  >;
  upsert?: Maybe<
    | SubGroupUpsertWithWhereUniqueWithoutGroupidInput[]
    | SubGroupUpsertWithWhereUniqueWithoutGroupidInput
  >;
  deleteMany?: Maybe<SubGroupScalarWhereInput[] | SubGroupScalarWhereInput>;
  updateMany?: Maybe<
    | SubGroupUpdateManyWithWhereNestedInput[]
    | SubGroupUpdateManyWithWhereNestedInput
  >;
}

export interface SubGroupUpdateWithWhereUniqueWithoutGroupidInput {
  where: SubGroupWhereUniqueInput;
  data: SubGroupUpdateWithoutGroupidDataInput;
}

export interface SubGroupUpdateWithoutGroupidDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  members?: Maybe<SubGroupMemberUpdateManyWithoutMemberInput>;
  subgroupRoles?: Maybe<RoleUpdateManyWithoutSubgroupInput>;
}

export interface SubGroupMemberUpdateManyWithoutMemberInput {
  create?: Maybe<
    | SubGroupMemberCreateWithoutMemberInput[]
    | SubGroupMemberCreateWithoutMemberInput
  >;
  delete?: Maybe<
    SubGroupMemberWhereUniqueInput[] | SubGroupMemberWhereUniqueInput
  >;
  connect?: Maybe<
    SubGroupMemberWhereUniqueInput[] | SubGroupMemberWhereUniqueInput
  >;
  set?: Maybe<
    SubGroupMemberWhereUniqueInput[] | SubGroupMemberWhereUniqueInput
  >;
  disconnect?: Maybe<
    SubGroupMemberWhereUniqueInput[] | SubGroupMemberWhereUniqueInput
  >;
  update?: Maybe<
    | SubGroupMemberUpdateWithWhereUniqueWithoutMemberInput[]
    | SubGroupMemberUpdateWithWhereUniqueWithoutMemberInput
  >;
  upsert?: Maybe<
    | SubGroupMemberUpsertWithWhereUniqueWithoutMemberInput[]
    | SubGroupMemberUpsertWithWhereUniqueWithoutMemberInput
  >;
  deleteMany?: Maybe<
    SubGroupMemberScalarWhereInput[] | SubGroupMemberScalarWhereInput
  >;
  updateMany?: Maybe<
    | SubGroupMemberUpdateManyWithWhereNestedInput[]
    | SubGroupMemberUpdateManyWithWhereNestedInput
  >;
}

export interface SubGroupMemberUpdateWithWhereUniqueWithoutMemberInput {
  where: SubGroupMemberWhereUniqueInput;
  data: SubGroupMemberUpdateWithoutMemberDataInput;
}

export interface SubGroupMemberUpdateWithoutMemberDataInput {
  userid?: Maybe<UserUpdateOneRequiredInput>;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  myRoles?: Maybe<RoleMemberUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  published?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
}

export interface CommentUpdateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutPostInput[]
    | CommentUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutPostInput[]
    | CommentUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPostDataInput;
}

export interface CommentUpdateWithoutPostDataInput {
  text?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
}

export interface CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPostDataInput;
  create: CommentCreateWithoutPostInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface CommentUpdateManyWithoutAuthorInput {
  create?: Maybe<
    CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    | CommentUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    | CommentUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutAuthorDataInput;
}

export interface CommentUpdateWithoutAuthorDataInput {
  text?: Maybe<String>;
  post?: Maybe<PostUpdateOneRequiredWithoutCommentsInput>;
}

export interface PostUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  update?: Maybe<PostUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<PostUpsertWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutCommentsDataInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  published?: Maybe<Boolean>;
  author?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  myRoles?: Maybe<RoleMemberUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
}

export interface RoleMemberUpdateManyWithoutUseridInput {
  create?: Maybe<
    RoleMemberCreateWithoutUseridInput[] | RoleMemberCreateWithoutUseridInput
  >;
  delete?: Maybe<RoleMemberWhereUniqueInput[] | RoleMemberWhereUniqueInput>;
  connect?: Maybe<RoleMemberWhereUniqueInput[] | RoleMemberWhereUniqueInput>;
  set?: Maybe<RoleMemberWhereUniqueInput[] | RoleMemberWhereUniqueInput>;
  disconnect?: Maybe<RoleMemberWhereUniqueInput[] | RoleMemberWhereUniqueInput>;
  update?: Maybe<
    | RoleMemberUpdateWithWhereUniqueWithoutUseridInput[]
    | RoleMemberUpdateWithWhereUniqueWithoutUseridInput
  >;
  upsert?: Maybe<
    | RoleMemberUpsertWithWhereUniqueWithoutUseridInput[]
    | RoleMemberUpsertWithWhereUniqueWithoutUseridInput
  >;
  deleteMany?: Maybe<RoleMemberScalarWhereInput[] | RoleMemberScalarWhereInput>;
  updateMany?: Maybe<
    | RoleMemberUpdateManyWithWhereNestedInput[]
    | RoleMemberUpdateManyWithWhereNestedInput
  >;
}

export interface RoleMemberUpdateWithWhereUniqueWithoutUseridInput {
  where: RoleMemberWhereUniqueInput;
  data: RoleMemberUpdateWithoutUseridDataInput;
}

export interface RoleMemberUpdateWithoutUseridDataInput {
  role?: Maybe<RoleUpdateOneRequiredWithoutMembersInput>;
  status?: Maybe<RoleStatus>;
  description?: Maybe<String>;
}

export interface RoleUpdateOneRequiredWithoutMembersInput {
  create?: Maybe<RoleCreateWithoutMembersInput>;
  update?: Maybe<RoleUpdateWithoutMembersDataInput>;
  upsert?: Maybe<RoleUpsertWithoutMembersInput>;
  connect?: Maybe<RoleWhereUniqueInput>;
}

export interface RoleUpdateWithoutMembersDataInput {
  name?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgUpdateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupUpdateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubgroupRolesInput>;
  description?: Maybe<String>;
}

export interface OrganizationUpdateOneWithoutOrgRolesInput {
  create?: Maybe<OrganizationCreateWithoutOrgRolesInput>;
  update?: Maybe<OrganizationUpdateWithoutOrgRolesDataInput>;
  upsert?: Maybe<OrganizationUpsertWithoutOrgRolesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationUpdateWithoutOrgRolesDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateManyWithoutOrgInput>;
  suborgs?: Maybe<SuborgUpdateManyWithoutOrgInput>;
}

export interface OrganizationUpsertWithoutOrgRolesInput {
  update: OrganizationUpdateWithoutOrgRolesDataInput;
  create: OrganizationCreateWithoutOrgRolesInput;
}

export interface SuborgUpdateOneWithoutSuborgRolesInput {
  create?: Maybe<SuborgCreateWithoutSuborgRolesInput>;
  update?: Maybe<SuborgUpdateWithoutSuborgRolesDataInput>;
  upsert?: Maybe<SuborgUpsertWithoutSuborgRolesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SuborgWhereUniqueInput>;
}

export interface SuborgUpdateWithoutSuborgRolesDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateManyWithoutSuborgInput>;
  org?: Maybe<OrganizationUpdateOneRequiredWithoutSuborgsInput>;
  userGroups?: Maybe<GroupUpdateManyWithoutSuborgidInput>;
}

export interface SuborgUpsertWithoutSuborgRolesInput {
  update: SuborgUpdateWithoutSuborgRolesDataInput;
  create: SuborgCreateWithoutSuborgRolesInput;
}

export interface GroupUpdateOneWithoutGroupRolesInput {
  create?: Maybe<GroupCreateWithoutGroupRolesInput>;
  update?: Maybe<GroupUpdateWithoutGroupRolesDataInput>;
  upsert?: Maybe<GroupUpsertWithoutGroupRolesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupUpdateWithoutGroupRolesDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  suborgid?: Maybe<SuborgUpdateOneRequiredWithoutUserGroupsInput>;
  subgroups?: Maybe<SubGroupUpdateManyWithoutGroupidInput>;
  members?: Maybe<GroupMemberUpdateManyWithoutMemberInput>;
}

export interface GroupMemberUpdateManyWithoutMemberInput {
  create?: Maybe<
    GroupMemberCreateWithoutMemberInput[] | GroupMemberCreateWithoutMemberInput
  >;
  delete?: Maybe<GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput>;
  connect?: Maybe<GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput>;
  set?: Maybe<GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput>;
  disconnect?: Maybe<
    GroupMemberWhereUniqueInput[] | GroupMemberWhereUniqueInput
  >;
  update?: Maybe<
    | GroupMemberUpdateWithWhereUniqueWithoutMemberInput[]
    | GroupMemberUpdateWithWhereUniqueWithoutMemberInput
  >;
  upsert?: Maybe<
    | GroupMemberUpsertWithWhereUniqueWithoutMemberInput[]
    | GroupMemberUpsertWithWhereUniqueWithoutMemberInput
  >;
  deleteMany?: Maybe<
    GroupMemberScalarWhereInput[] | GroupMemberScalarWhereInput
  >;
  updateMany?: Maybe<
    | GroupMemberUpdateManyWithWhereNestedInput[]
    | GroupMemberUpdateManyWithWhereNestedInput
  >;
}

export interface GroupMemberUpdateWithWhereUniqueWithoutMemberInput {
  where: GroupMemberWhereUniqueInput;
  data: GroupMemberUpdateWithoutMemberDataInput;
}

export interface GroupMemberUpdateWithoutMemberDataInput {
  userid?: Maybe<UserUpdateOneRequiredWithoutGroupmembersInput>;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutGroupmembersInput {
  create?: Maybe<UserCreateWithoutGroupmembersInput>;
  update?: Maybe<UserUpdateWithoutGroupmembersDataInput>;
  upsert?: Maybe<UserUpsertWithoutGroupmembersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutGroupmembersDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  myRoles?: Maybe<RoleMemberUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
}

export interface UserUpsertWithoutGroupmembersInput {
  update: UserUpdateWithoutGroupmembersDataInput;
  create: UserCreateWithoutGroupmembersInput;
}

export interface GroupMemberUpsertWithWhereUniqueWithoutMemberInput {
  where: GroupMemberWhereUniqueInput;
  update: GroupMemberUpdateWithoutMemberDataInput;
  create: GroupMemberCreateWithoutMemberInput;
}

export interface GroupMemberScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<MemberStatus>;
  status_not?: Maybe<MemberStatus>;
  status_in?: Maybe<MemberStatus[] | MemberStatus>;
  status_not_in?: Maybe<MemberStatus[] | MemberStatus>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GroupMemberScalarWhereInput[] | GroupMemberScalarWhereInput>;
  OR?: Maybe<GroupMemberScalarWhereInput[] | GroupMemberScalarWhereInput>;
  NOT?: Maybe<GroupMemberScalarWhereInput[] | GroupMemberScalarWhereInput>;
}

export interface GroupMemberUpdateManyWithWhereNestedInput {
  where: GroupMemberScalarWhereInput;
  data: GroupMemberUpdateManyDataInput;
}

export interface GroupMemberUpdateManyDataInput {
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface GroupUpsertWithoutGroupRolesInput {
  update: GroupUpdateWithoutGroupRolesDataInput;
  create: GroupCreateWithoutGroupRolesInput;
}

export interface SubGroupUpdateOneWithoutSubgroupRolesInput {
  create?: Maybe<SubGroupCreateWithoutSubgroupRolesInput>;
  update?: Maybe<SubGroupUpdateWithoutSubgroupRolesDataInput>;
  upsert?: Maybe<SubGroupUpsertWithoutSubgroupRolesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SubGroupWhereUniqueInput>;
}

export interface SubGroupUpdateWithoutSubgroupRolesDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  groupid?: Maybe<GroupUpdateOneRequiredWithoutSubgroupsInput>;
  members?: Maybe<SubGroupMemberUpdateManyWithoutMemberInput>;
}

export interface GroupUpdateOneRequiredWithoutSubgroupsInput {
  create?: Maybe<GroupCreateWithoutSubgroupsInput>;
  update?: Maybe<GroupUpdateWithoutSubgroupsDataInput>;
  upsert?: Maybe<GroupUpsertWithoutSubgroupsInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupUpdateWithoutSubgroupsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  suborgid?: Maybe<SuborgUpdateOneRequiredWithoutUserGroupsInput>;
  members?: Maybe<GroupMemberUpdateManyWithoutMemberInput>;
  groupRoles?: Maybe<RoleUpdateManyWithoutGroupInput>;
}

export interface RoleUpdateManyWithoutGroupInput {
  create?: Maybe<RoleCreateWithoutGroupInput[] | RoleCreateWithoutGroupInput>;
  delete?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  set?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  disconnect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  update?: Maybe<
    | RoleUpdateWithWhereUniqueWithoutGroupInput[]
    | RoleUpdateWithWhereUniqueWithoutGroupInput
  >;
  upsert?: Maybe<
    | RoleUpsertWithWhereUniqueWithoutGroupInput[]
    | RoleUpsertWithWhereUniqueWithoutGroupInput
  >;
  deleteMany?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  updateMany?: Maybe<
    RoleUpdateManyWithWhereNestedInput[] | RoleUpdateManyWithWhereNestedInput
  >;
}

export interface RoleUpdateWithWhereUniqueWithoutGroupInput {
  where: RoleWhereUniqueInput;
  data: RoleUpdateWithoutGroupDataInput;
}

export interface RoleUpdateWithoutGroupDataInput {
  name?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgUpdateOneWithoutSuborgRolesInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubgroupRolesInput>;
  members?: Maybe<RoleMemberUpdateManyWithoutRoleInput>;
  description?: Maybe<String>;
}

export interface RoleMemberUpdateManyWithoutRoleInput {
  create?: Maybe<
    RoleMemberCreateWithoutRoleInput[] | RoleMemberCreateWithoutRoleInput
  >;
  delete?: Maybe<RoleMemberWhereUniqueInput[] | RoleMemberWhereUniqueInput>;
  connect?: Maybe<RoleMemberWhereUniqueInput[] | RoleMemberWhereUniqueInput>;
  set?: Maybe<RoleMemberWhereUniqueInput[] | RoleMemberWhereUniqueInput>;
  disconnect?: Maybe<RoleMemberWhereUniqueInput[] | RoleMemberWhereUniqueInput>;
  update?: Maybe<
    | RoleMemberUpdateWithWhereUniqueWithoutRoleInput[]
    | RoleMemberUpdateWithWhereUniqueWithoutRoleInput
  >;
  upsert?: Maybe<
    | RoleMemberUpsertWithWhereUniqueWithoutRoleInput[]
    | RoleMemberUpsertWithWhereUniqueWithoutRoleInput
  >;
  deleteMany?: Maybe<RoleMemberScalarWhereInput[] | RoleMemberScalarWhereInput>;
  updateMany?: Maybe<
    | RoleMemberUpdateManyWithWhereNestedInput[]
    | RoleMemberUpdateManyWithWhereNestedInput
  >;
}

export interface RoleMemberUpdateWithWhereUniqueWithoutRoleInput {
  where: RoleMemberWhereUniqueInput;
  data: RoleMemberUpdateWithoutRoleDataInput;
}

export interface RoleMemberUpdateWithoutRoleDataInput {
  userid?: Maybe<UserUpdateOneRequiredWithoutMyRolesInput>;
  status?: Maybe<RoleStatus>;
  description?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutMyRolesInput {
  create?: Maybe<UserCreateWithoutMyRolesInput>;
  update?: Maybe<UserUpdateWithoutMyRolesDataInput>;
  upsert?: Maybe<UserUpsertWithoutMyRolesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMyRolesDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  createdBy?: Maybe<String>;
}

export interface UserUpsertWithoutMyRolesInput {
  update: UserUpdateWithoutMyRolesDataInput;
  create: UserCreateWithoutMyRolesInput;
}

export interface RoleMemberUpsertWithWhereUniqueWithoutRoleInput {
  where: RoleMemberWhereUniqueInput;
  update: RoleMemberUpdateWithoutRoleDataInput;
  create: RoleMemberCreateWithoutRoleInput;
}

export interface RoleMemberScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<RoleStatus>;
  status_not?: Maybe<RoleStatus>;
  status_in?: Maybe<RoleStatus[] | RoleStatus>;
  status_not_in?: Maybe<RoleStatus[] | RoleStatus>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RoleMemberScalarWhereInput[] | RoleMemberScalarWhereInput>;
  OR?: Maybe<RoleMemberScalarWhereInput[] | RoleMemberScalarWhereInput>;
  NOT?: Maybe<RoleMemberScalarWhereInput[] | RoleMemberScalarWhereInput>;
}

export interface RoleMemberUpdateManyWithWhereNestedInput {
  where: RoleMemberScalarWhereInput;
  data: RoleMemberUpdateManyDataInput;
}

export interface RoleMemberUpdateManyDataInput {
  status?: Maybe<RoleStatus>;
  description?: Maybe<String>;
}

export interface RoleUpsertWithWhereUniqueWithoutGroupInput {
  where: RoleWhereUniqueInput;
  update: RoleUpdateWithoutGroupDataInput;
  create: RoleCreateWithoutGroupInput;
}

export interface RoleScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  OR?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  NOT?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
}

export interface RoleUpdateManyWithWhereNestedInput {
  where: RoleScalarWhereInput;
  data: RoleUpdateManyDataInput;
}

export interface RoleUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface GroupUpsertWithoutSubgroupsInput {
  update: GroupUpdateWithoutSubgroupsDataInput;
  create: GroupCreateWithoutSubgroupsInput;
}

export interface SubGroupUpsertWithoutSubgroupRolesInput {
  update: SubGroupUpdateWithoutSubgroupRolesDataInput;
  create: SubGroupCreateWithoutSubgroupRolesInput;
}

export interface RoleUpsertWithoutMembersInput {
  update: RoleUpdateWithoutMembersDataInput;
  create: RoleCreateWithoutMembersInput;
}

export interface RoleMemberUpsertWithWhereUniqueWithoutUseridInput {
  where: RoleMemberWhereUniqueInput;
  update: RoleMemberUpdateWithoutUseridDataInput;
  create: RoleMemberCreateWithoutUseridInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput;
  create: PostCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutAuthorDataInput;
  create: CommentCreateWithoutAuthorInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface SubGroupMemberUpsertWithWhereUniqueWithoutMemberInput {
  where: SubGroupMemberWhereUniqueInput;
  update: SubGroupMemberUpdateWithoutMemberDataInput;
  create: SubGroupMemberCreateWithoutMemberInput;
}

export interface SubGroupMemberScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<MemberStatus>;
  status_not?: Maybe<MemberStatus>;
  status_in?: Maybe<MemberStatus[] | MemberStatus>;
  status_not_in?: Maybe<MemberStatus[] | MemberStatus>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    SubGroupMemberScalarWhereInput[] | SubGroupMemberScalarWhereInput
  >;
  OR?: Maybe<SubGroupMemberScalarWhereInput[] | SubGroupMemberScalarWhereInput>;
  NOT?: Maybe<
    SubGroupMemberScalarWhereInput[] | SubGroupMemberScalarWhereInput
  >;
}

export interface SubGroupMemberUpdateManyWithWhereNestedInput {
  where: SubGroupMemberScalarWhereInput;
  data: SubGroupMemberUpdateManyDataInput;
}

export interface SubGroupMemberUpdateManyDataInput {
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface RoleUpdateManyWithoutSubgroupInput {
  create?: Maybe<
    RoleCreateWithoutSubgroupInput[] | RoleCreateWithoutSubgroupInput
  >;
  delete?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  set?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  disconnect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  update?: Maybe<
    | RoleUpdateWithWhereUniqueWithoutSubgroupInput[]
    | RoleUpdateWithWhereUniqueWithoutSubgroupInput
  >;
  upsert?: Maybe<
    | RoleUpsertWithWhereUniqueWithoutSubgroupInput[]
    | RoleUpsertWithWhereUniqueWithoutSubgroupInput
  >;
  deleteMany?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  updateMany?: Maybe<
    RoleUpdateManyWithWhereNestedInput[] | RoleUpdateManyWithWhereNestedInput
  >;
}

export interface RoleUpdateWithWhereUniqueWithoutSubgroupInput {
  where: RoleWhereUniqueInput;
  data: RoleUpdateWithoutSubgroupDataInput;
}

export interface RoleUpdateWithoutSubgroupDataInput {
  name?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgUpdateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupUpdateOneWithoutGroupRolesInput>;
  members?: Maybe<RoleMemberUpdateManyWithoutRoleInput>;
  description?: Maybe<String>;
}

export interface RoleUpsertWithWhereUniqueWithoutSubgroupInput {
  where: RoleWhereUniqueInput;
  update: RoleUpdateWithoutSubgroupDataInput;
  create: RoleCreateWithoutSubgroupInput;
}

export interface SubGroupUpsertWithWhereUniqueWithoutGroupidInput {
  where: SubGroupWhereUniqueInput;
  update: SubGroupUpdateWithoutGroupidDataInput;
  create: SubGroupCreateWithoutGroupidInput;
}

export interface SubGroupScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SubGroupScalarWhereInput[] | SubGroupScalarWhereInput>;
  OR?: Maybe<SubGroupScalarWhereInput[] | SubGroupScalarWhereInput>;
  NOT?: Maybe<SubGroupScalarWhereInput[] | SubGroupScalarWhereInput>;
}

export interface SubGroupUpdateManyWithWhereNestedInput {
  where: SubGroupScalarWhereInput;
  data: SubGroupUpdateManyDataInput;
}

export interface SubGroupUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface GroupUpsertWithWhereUniqueWithoutSuborgidInput {
  where: GroupWhereUniqueInput;
  update: GroupUpdateWithoutSuborgidDataInput;
  create: GroupCreateWithoutSuborgidInput;
}

export interface GroupScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  OR?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  NOT?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
}

export interface GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput;
  data: GroupUpdateManyDataInput;
}

export interface GroupUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface RoleUpdateManyWithoutSuborgInput {
  create?: Maybe<RoleCreateWithoutSuborgInput[] | RoleCreateWithoutSuborgInput>;
  delete?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  set?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  disconnect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  update?: Maybe<
    | RoleUpdateWithWhereUniqueWithoutSuborgInput[]
    | RoleUpdateWithWhereUniqueWithoutSuborgInput
  >;
  upsert?: Maybe<
    | RoleUpsertWithWhereUniqueWithoutSuborgInput[]
    | RoleUpsertWithWhereUniqueWithoutSuborgInput
  >;
  deleteMany?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  updateMany?: Maybe<
    RoleUpdateManyWithWhereNestedInput[] | RoleUpdateManyWithWhereNestedInput
  >;
}

export interface RoleUpdateWithWhereUniqueWithoutSuborgInput {
  where: RoleWhereUniqueInput;
  data: RoleUpdateWithoutSuborgDataInput;
}

export interface RoleUpdateWithoutSuborgDataInput {
  name?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutOrgRolesInput>;
  group?: Maybe<GroupUpdateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubgroupRolesInput>;
  members?: Maybe<RoleMemberUpdateManyWithoutRoleInput>;
  description?: Maybe<String>;
}

export interface RoleUpsertWithWhereUniqueWithoutSuborgInput {
  where: RoleWhereUniqueInput;
  update: RoleUpdateWithoutSuborgDataInput;
  create: RoleCreateWithoutSuborgInput;
}

export interface SuborgUpsertWithWhereUniqueWithoutAuthorInput {
  where: SuborgWhereUniqueInput;
  update: SuborgUpdateWithoutAuthorDataInput;
  create: SuborgCreateWithoutAuthorInput;
}

export interface SuborgScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SuborgScalarWhereInput[] | SuborgScalarWhereInput>;
  OR?: Maybe<SuborgScalarWhereInput[] | SuborgScalarWhereInput>;
  NOT?: Maybe<SuborgScalarWhereInput[] | SuborgScalarWhereInput>;
}

export interface SuborgUpdateManyWithWhereNestedInput {
  where: SuborgScalarWhereInput;
  data: SuborgUpdateManyDataInput;
}

export interface SuborgUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutOrgInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutOrgDataInput;
  create: UserCreateWithoutOrgInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  createdBy?: Maybe<String>;
  createdBy_not?: Maybe<String>;
  createdBy_in?: Maybe<String[] | String>;
  createdBy_not_in?: Maybe<String[] | String>;
  createdBy_lt?: Maybe<String>;
  createdBy_lte?: Maybe<String>;
  createdBy_gt?: Maybe<String>;
  createdBy_gte?: Maybe<String>;
  createdBy_contains?: Maybe<String>;
  createdBy_not_contains?: Maybe<String>;
  createdBy_starts_with?: Maybe<String>;
  createdBy_not_starts_with?: Maybe<String>;
  createdBy_ends_with?: Maybe<String>;
  createdBy_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  createdBy?: Maybe<String>;
}

export interface RoleUpdateManyWithoutOrgInput {
  create?: Maybe<RoleCreateWithoutOrgInput[] | RoleCreateWithoutOrgInput>;
  delete?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  set?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  disconnect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  update?: Maybe<
    | RoleUpdateWithWhereUniqueWithoutOrgInput[]
    | RoleUpdateWithWhereUniqueWithoutOrgInput
  >;
  upsert?: Maybe<
    | RoleUpsertWithWhereUniqueWithoutOrgInput[]
    | RoleUpsertWithWhereUniqueWithoutOrgInput
  >;
  deleteMany?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  updateMany?: Maybe<
    RoleUpdateManyWithWhereNestedInput[] | RoleUpdateManyWithWhereNestedInput
  >;
}

export interface RoleUpdateWithWhereUniqueWithoutOrgInput {
  where: RoleWhereUniqueInput;
  data: RoleUpdateWithoutOrgDataInput;
}

export interface RoleUpdateWithoutOrgDataInput {
  name?: Maybe<String>;
  suborg?: Maybe<SuborgUpdateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupUpdateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubgroupRolesInput>;
  members?: Maybe<RoleMemberUpdateManyWithoutRoleInput>;
  description?: Maybe<String>;
}

export interface RoleUpsertWithWhereUniqueWithoutOrgInput {
  where: RoleWhereUniqueInput;
  update: RoleUpdateWithoutOrgDataInput;
  create: RoleCreateWithoutOrgInput;
}

export interface OrganizationUpsertWithoutSuborgsInput {
  update: OrganizationUpdateWithoutSuborgsDataInput;
  create: OrganizationCreateWithoutSuborgsInput;
}

export interface SuborgUpsertWithoutUserGroupsInput {
  update: SuborgUpdateWithoutUserGroupsDataInput;
  create: SuborgCreateWithoutUserGroupsInput;
}

export interface GroupUpsertWithoutMembersInput {
  update: GroupUpdateWithoutMembersDataInput;
  create: GroupCreateWithoutMembersInput;
}

export interface GroupMemberUpsertWithWhereUniqueWithoutUseridInput {
  where: GroupMemberWhereUniqueInput;
  update: GroupMemberUpdateWithoutUseridDataInput;
  create: GroupMemberCreateWithoutUseridInput;
}

export interface UserUpsertWithWhereUniqueWithoutSuborgInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutSuborgDataInput;
  create: UserCreateWithoutSuborgInput;
}

export interface SuborgUpsertWithWhereUniqueWithoutOrgInput {
  where: SuborgWhereUniqueInput;
  update: SuborgUpdateWithoutOrgDataInput;
  create: SuborgCreateWithoutOrgInput;
}

export interface OrganizationUpsertWithoutAuthorInput {
  update: OrganizationUpdateWithoutAuthorDataInput;
  create: OrganizationCreateWithoutAuthorInput;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface CommentUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface GroupCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  suborgid: SuborgCreateOneWithoutUserGroupsInput;
  subgroups?: Maybe<SubGroupCreateManyWithoutGroupidInput>;
  members?: Maybe<GroupMemberCreateManyWithoutMemberInput>;
  groupRoles?: Maybe<RoleCreateManyWithoutGroupInput>;
}

export interface GroupUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  suborgid?: Maybe<SuborgUpdateOneRequiredWithoutUserGroupsInput>;
  subgroups?: Maybe<SubGroupUpdateManyWithoutGroupidInput>;
  members?: Maybe<GroupMemberUpdateManyWithoutMemberInput>;
  groupRoles?: Maybe<RoleUpdateManyWithoutGroupInput>;
}

export interface GroupUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface GroupMemberCreateInput {
  id?: Maybe<ID_Input>;
  userid: UserCreateOneWithoutGroupmembersInput;
  member: GroupCreateOneWithoutMembersInput;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface GroupMemberUpdateInput {
  userid?: Maybe<UserUpdateOneRequiredWithoutGroupmembersInput>;
  member?: Maybe<GroupUpdateOneRequiredWithoutMembersInput>;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface GroupMemberUpdateManyMutationInput {
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface OrganizationCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  author?: Maybe<UserCreateManyWithoutOrgInput>;
  suborgs?: Maybe<SuborgCreateManyWithoutOrgInput>;
  orgRoles?: Maybe<RoleCreateManyWithoutOrgInput>;
}

export interface OrganizationUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateManyWithoutOrgInput>;
  suborgs?: Maybe<SuborgUpdateManyWithoutOrgInput>;
  orgRoles?: Maybe<RoleUpdateManyWithoutOrgInput>;
}

export interface OrganizationUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  body: String;
  published: Boolean;
  author: UserCreateOneWithoutPostsInput;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
}

export interface PostUpdateInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  published?: Maybe<Boolean>;
  author?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
}

export interface PostUpdateManyMutationInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface RoleCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  org?: Maybe<OrganizationCreateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgCreateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupCreateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupCreateOneWithoutSubgroupRolesInput>;
  members?: Maybe<RoleMemberCreateManyWithoutRoleInput>;
  description?: Maybe<String>;
}

export interface RoleUpdateInput {
  name?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutOrgRolesInput>;
  suborg?: Maybe<SuborgUpdateOneWithoutSuborgRolesInput>;
  group?: Maybe<GroupUpdateOneWithoutGroupRolesInput>;
  subgroup?: Maybe<SubGroupUpdateOneWithoutSubgroupRolesInput>;
  members?: Maybe<RoleMemberUpdateManyWithoutRoleInput>;
  description?: Maybe<String>;
}

export interface RoleUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface RoleMemberCreateInput {
  id?: Maybe<ID_Input>;
  userid: UserCreateOneWithoutMyRolesInput;
  role: RoleCreateOneWithoutMembersInput;
  status?: Maybe<RoleStatus>;
  description?: Maybe<String>;
}

export interface RoleMemberUpdateInput {
  userid?: Maybe<UserUpdateOneRequiredWithoutMyRolesInput>;
  role?: Maybe<RoleUpdateOneRequiredWithoutMembersInput>;
  status?: Maybe<RoleStatus>;
  description?: Maybe<String>;
}

export interface RoleMemberUpdateManyMutationInput {
  status?: Maybe<RoleStatus>;
  description?: Maybe<String>;
}

export interface SubGroupCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  groupid: GroupCreateOneWithoutSubgroupsInput;
  members?: Maybe<SubGroupMemberCreateManyWithoutMemberInput>;
  subgroupRoles?: Maybe<RoleCreateManyWithoutSubgroupInput>;
}

export interface SubGroupUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  groupid?: Maybe<GroupUpdateOneRequiredWithoutSubgroupsInput>;
  members?: Maybe<SubGroupMemberUpdateManyWithoutMemberInput>;
  subgroupRoles?: Maybe<RoleUpdateManyWithoutSubgroupInput>;
}

export interface SubGroupUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface SubGroupMemberCreateInput {
  id?: Maybe<ID_Input>;
  userid: UserCreateOneInput;
  member: SubGroupCreateOneWithoutMembersInput;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface SubGroupCreateOneWithoutMembersInput {
  create?: Maybe<SubGroupCreateWithoutMembersInput>;
  connect?: Maybe<SubGroupWhereUniqueInput>;
}

export interface SubGroupCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  groupid: GroupCreateOneWithoutSubgroupsInput;
  subgroupRoles?: Maybe<RoleCreateManyWithoutSubgroupInput>;
}

export interface SubGroupMemberUpdateInput {
  userid?: Maybe<UserUpdateOneRequiredInput>;
  member?: Maybe<SubGroupUpdateOneRequiredWithoutMembersInput>;
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface SubGroupUpdateOneRequiredWithoutMembersInput {
  create?: Maybe<SubGroupCreateWithoutMembersInput>;
  update?: Maybe<SubGroupUpdateWithoutMembersDataInput>;
  upsert?: Maybe<SubGroupUpsertWithoutMembersInput>;
  connect?: Maybe<SubGroupWhereUniqueInput>;
}

export interface SubGroupUpdateWithoutMembersDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  groupid?: Maybe<GroupUpdateOneRequiredWithoutSubgroupsInput>;
  subgroupRoles?: Maybe<RoleUpdateManyWithoutSubgroupInput>;
}

export interface SubGroupUpsertWithoutMembersInput {
  update: SubGroupUpdateWithoutMembersDataInput;
  create: SubGroupCreateWithoutMembersInput;
}

export interface SubGroupMemberUpdateManyMutationInput {
  status?: Maybe<MemberStatus>;
  description?: Maybe<String>;
}

export interface SuborgCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  author?: Maybe<UserCreateManyWithoutSuborgInput>;
  org: OrganizationCreateOneWithoutSuborgsInput;
  userGroups?: Maybe<GroupCreateManyWithoutSuborgidInput>;
  suborgRoles?: Maybe<RoleCreateManyWithoutSuborgInput>;
}

export interface SuborgUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateManyWithoutSuborgInput>;
  org?: Maybe<OrganizationUpdateOneRequiredWithoutSuborgsInput>;
  userGroups?: Maybe<GroupUpdateManyWithoutSuborgidInput>;
  suborgRoles?: Maybe<RoleUpdateManyWithoutSuborgInput>;
}

export interface SuborgUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserUpdateInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  org?: Maybe<OrganizationUpdateOneWithoutAuthorInput>;
  suborg?: Maybe<SuborgUpdateManyWithoutAuthorInput>;
  groupmembers?: Maybe<GroupMemberUpdateManyWithoutUseridInput>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  myRoles?: Maybe<RoleMemberUpdateManyWithoutUseridInput>;
  createdBy?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  createdBy?: Maybe<String>;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupWhereInput>;
  AND?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  OR?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  NOT?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
}

export interface GroupMemberSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupMemberWhereInput>;
  AND?: Maybe<
    GroupMemberSubscriptionWhereInput[] | GroupMemberSubscriptionWhereInput
  >;
  OR?: Maybe<
    GroupMemberSubscriptionWhereInput[] | GroupMemberSubscriptionWhereInput
  >;
  NOT?: Maybe<
    GroupMemberSubscriptionWhereInput[] | GroupMemberSubscriptionWhereInput
  >;
}

export interface OrganizationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrganizationWhereInput>;
  AND?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
  OR?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface RoleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoleWhereInput>;
  AND?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  OR?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  NOT?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
}

export interface RoleMemberSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoleMemberWhereInput>;
  AND?: Maybe<
    RoleMemberSubscriptionWhereInput[] | RoleMemberSubscriptionWhereInput
  >;
  OR?: Maybe<
    RoleMemberSubscriptionWhereInput[] | RoleMemberSubscriptionWhereInput
  >;
  NOT?: Maybe<
    RoleMemberSubscriptionWhereInput[] | RoleMemberSubscriptionWhereInput
  >;
}

export interface SubGroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SubGroupWhereInput>;
  AND?: Maybe<
    SubGroupSubscriptionWhereInput[] | SubGroupSubscriptionWhereInput
  >;
  OR?: Maybe<SubGroupSubscriptionWhereInput[] | SubGroupSubscriptionWhereInput>;
  NOT?: Maybe<
    SubGroupSubscriptionWhereInput[] | SubGroupSubscriptionWhereInput
  >;
}

export interface SubGroupMemberSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SubGroupMemberWhereInput>;
  AND?: Maybe<
    | SubGroupMemberSubscriptionWhereInput[]
    | SubGroupMemberSubscriptionWhereInput
  >;
  OR?: Maybe<
    | SubGroupMemberSubscriptionWhereInput[]
    | SubGroupMemberSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | SubGroupMemberSubscriptionWhereInput[]
    | SubGroupMemberSubscriptionWhereInput
  >;
}

export interface SuborgSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SuborgWhereInput>;
  AND?: Maybe<SuborgSubscriptionWhereInput[] | SuborgSubscriptionWhereInput>;
  OR?: Maybe<SuborgSubscriptionWhereInput[] | SuborgSubscriptionWhereInput>;
  NOT?: Maybe<SuborgSubscriptionWhereInput[] | SuborgSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Comment {
  id: ID_Output;
  text: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  author: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  author: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  createdBy?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  org: <T = OrganizationPromise>() => T;
  suborg: <T = FragmentableArray<Suborg>>(args?: {
    where?: SuborgWhereInput;
    orderBy?: SuborgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groupmembers: <T = FragmentableArray<GroupMember>>(args?: {
    where?: GroupMemberWhereInput;
    orderBy?: GroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myRoles: <T = FragmentableArray<RoleMember>>(args?: {
    where?: RoleMemberWhereInput;
    orderBy?: RoleMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  org: <T = OrganizationSubscription>() => T;
  suborg: <T = Promise<AsyncIterator<SuborgSubscription>>>(args?: {
    where?: SuborgWhereInput;
    orderBy?: SuborgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groupmembers: <T = Promise<AsyncIterator<GroupMemberSubscription>>>(args?: {
    where?: GroupMemberWhereInput;
    orderBy?: GroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myRoles: <T = Promise<AsyncIterator<RoleMemberSubscription>>>(args?: {
    where?: RoleMemberWhereInput;
    orderBy?: RoleMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  org: <T = OrganizationPromise>() => T;
  suborg: <T = FragmentableArray<Suborg>>(args?: {
    where?: SuborgWhereInput;
    orderBy?: SuborgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groupmembers: <T = FragmentableArray<GroupMember>>(args?: {
    where?: GroupMemberWhereInput;
    orderBy?: GroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myRoles: <T = FragmentableArray<RoleMember>>(args?: {
    where?: RoleMemberWhereInput;
    orderBy?: RoleMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Organization {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface OrganizationPromise
  extends Promise<Organization>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  author: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  suborgs: <T = FragmentableArray<Suborg>>(args?: {
    where?: SuborgWhereInput;
    orderBy?: SuborgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  orgRoles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface OrganizationSubscription
  extends Promise<AsyncIterator<Organization>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  author: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  suborgs: <T = Promise<AsyncIterator<SuborgSubscription>>>(args?: {
    where?: SuborgWhereInput;
    orderBy?: SuborgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  orgRoles: <T = Promise<AsyncIterator<RoleSubscription>>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrganizationNullablePromise
  extends Promise<Organization | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  author: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  suborgs: <T = FragmentableArray<Suborg>>(args?: {
    where?: SuborgWhereInput;
    orderBy?: SuborgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  orgRoles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Suborg {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface SuborgPromise extends Promise<Suborg>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  author: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  org: <T = OrganizationPromise>() => T;
  userGroups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  suborgRoles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SuborgSubscription
  extends Promise<AsyncIterator<Suborg>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  author: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  org: <T = OrganizationSubscription>() => T;
  userGroups: <T = Promise<AsyncIterator<GroupSubscription>>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  suborgRoles: <T = Promise<AsyncIterator<RoleSubscription>>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SuborgNullablePromise
  extends Promise<Suborg | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  author: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  org: <T = OrganizationPromise>() => T;
  userGroups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  suborgRoles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Group {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  suborgid: <T = SuborgPromise>() => T;
  subgroups: <T = FragmentableArray<SubGroup>>(args?: {
    where?: SubGroupWhereInput;
    orderBy?: SubGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  members: <T = FragmentableArray<GroupMember>>(args?: {
    where?: GroupMemberWhereInput;
    orderBy?: GroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groupRoles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  suborgid: <T = SuborgSubscription>() => T;
  subgroups: <T = Promise<AsyncIterator<SubGroupSubscription>>>(args?: {
    where?: SubGroupWhereInput;
    orderBy?: SubGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  members: <T = Promise<AsyncIterator<GroupMemberSubscription>>>(args?: {
    where?: GroupMemberWhereInput;
    orderBy?: GroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groupRoles: <T = Promise<AsyncIterator<RoleSubscription>>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GroupNullablePromise
  extends Promise<Group | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  suborgid: <T = SuborgPromise>() => T;
  subgroups: <T = FragmentableArray<SubGroup>>(args?: {
    where?: SubGroupWhereInput;
    orderBy?: SubGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  members: <T = FragmentableArray<GroupMember>>(args?: {
    where?: GroupMemberWhereInput;
    orderBy?: GroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groupRoles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SubGroup {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface SubGroupPromise extends Promise<SubGroup>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  groupid: <T = GroupPromise>() => T;
  members: <T = FragmentableArray<SubGroupMember>>(args?: {
    where?: SubGroupMemberWhereInput;
    orderBy?: SubGroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subgroupRoles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SubGroupSubscription
  extends Promise<AsyncIterator<SubGroup>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  groupid: <T = GroupSubscription>() => T;
  members: <T = Promise<AsyncIterator<SubGroupMemberSubscription>>>(args?: {
    where?: SubGroupMemberWhereInput;
    orderBy?: SubGroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subgroupRoles: <T = Promise<AsyncIterator<RoleSubscription>>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SubGroupNullablePromise
  extends Promise<SubGroup | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  groupid: <T = GroupPromise>() => T;
  members: <T = FragmentableArray<SubGroupMember>>(args?: {
    where?: SubGroupMemberWhereInput;
    orderBy?: SubGroupMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subgroupRoles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SubGroupMember {
  id: ID_Output;
  status?: MemberStatus;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface SubGroupMemberPromise
  extends Promise<SubGroupMember>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userid: <T = UserPromise>() => T;
  member: <T = SubGroupPromise>() => T;
  status: () => Promise<MemberStatus>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SubGroupMemberSubscription
  extends Promise<AsyncIterator<SubGroupMember>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userid: <T = UserSubscription>() => T;
  member: <T = SubGroupSubscription>() => T;
  status: () => Promise<AsyncIterator<MemberStatus>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SubGroupMemberNullablePromise
  extends Promise<SubGroupMember | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userid: <T = UserPromise>() => T;
  member: <T = SubGroupPromise>() => T;
  status: () => Promise<MemberStatus>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Role {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface RolePromise extends Promise<Role>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  org: <T = OrganizationPromise>() => T;
  suborg: <T = SuborgPromise>() => T;
  group: <T = GroupPromise>() => T;
  subgroup: <T = SubGroupPromise>() => T;
  members: <T = FragmentableArray<RoleMember>>(args?: {
    where?: RoleMemberWhereInput;
    orderBy?: RoleMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface RoleSubscription
  extends Promise<AsyncIterator<Role>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  org: <T = OrganizationSubscription>() => T;
  suborg: <T = SuborgSubscription>() => T;
  group: <T = GroupSubscription>() => T;
  subgroup: <T = SubGroupSubscription>() => T;
  members: <T = Promise<AsyncIterator<RoleMemberSubscription>>>(args?: {
    where?: RoleMemberWhereInput;
    orderBy?: RoleMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoleNullablePromise
  extends Promise<Role | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  org: <T = OrganizationPromise>() => T;
  suborg: <T = SuborgPromise>() => T;
  group: <T = GroupPromise>() => T;
  subgroup: <T = SubGroupPromise>() => T;
  members: <T = FragmentableArray<RoleMember>>(args?: {
    where?: RoleMemberWhereInput;
    orderBy?: RoleMemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface RoleMember {
  id: ID_Output;
  status?: RoleStatus;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface RoleMemberPromise extends Promise<RoleMember>, Fragmentable {
  id: () => Promise<ID_Output>;
  userid: <T = UserPromise>() => T;
  role: <T = RolePromise>() => T;
  status: () => Promise<RoleStatus>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface RoleMemberSubscription
  extends Promise<AsyncIterator<RoleMember>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userid: <T = UserSubscription>() => T;
  role: <T = RoleSubscription>() => T;
  status: () => Promise<AsyncIterator<RoleStatus>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoleMemberNullablePromise
  extends Promise<RoleMember | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userid: <T = UserPromise>() => T;
  role: <T = RolePromise>() => T;
  status: () => Promise<RoleStatus>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GroupMember {
  id: ID_Output;
  status?: MemberStatus;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface GroupMemberPromise extends Promise<GroupMember>, Fragmentable {
  id: () => Promise<ID_Output>;
  userid: <T = UserPromise>() => T;
  member: <T = GroupPromise>() => T;
  status: () => Promise<MemberStatus>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GroupMemberSubscription
  extends Promise<AsyncIterator<GroupMember>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userid: <T = UserSubscription>() => T;
  member: <T = GroupSubscription>() => T;
  status: () => Promise<AsyncIterator<MemberStatus>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GroupMemberNullablePromise
  extends Promise<GroupMember | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userid: <T = UserPromise>() => T;
  member: <T = GroupPromise>() => T;
  status: () => Promise<MemberStatus>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Post {
  id: ID_Output;
  title: String;
  body: String;
  published: Boolean;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  published: () => Promise<Boolean>;
  author: <T = UserPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  author: <T = UserSubscription>() => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  published: () => Promise<Boolean>;
  author: <T = UserPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupMemberConnection {
  pageInfo: PageInfo;
  edges: GroupMemberEdge[];
}

export interface GroupMemberConnectionPromise
  extends Promise<GroupMemberConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupMemberEdge>>() => T;
  aggregate: <T = AggregateGroupMemberPromise>() => T;
}

export interface GroupMemberConnectionSubscription
  extends Promise<AsyncIterator<GroupMemberConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupMemberEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupMemberSubscription>() => T;
}

export interface GroupMemberEdge {
  node: GroupMember;
  cursor: String;
}

export interface GroupMemberEdgePromise
  extends Promise<GroupMemberEdge>,
    Fragmentable {
  node: <T = GroupMemberPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupMemberEdgeSubscription
  extends Promise<AsyncIterator<GroupMemberEdge>>,
    Fragmentable {
  node: <T = GroupMemberSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGroupMember {
  count: Int;
}

export interface AggregateGroupMemberPromise
  extends Promise<AggregateGroupMember>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupMemberSubscription
  extends Promise<AsyncIterator<AggregateGroupMember>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrganizationConnection {
  pageInfo: PageInfo;
  edges: OrganizationEdge[];
}

export interface OrganizationConnectionPromise
  extends Promise<OrganizationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrganizationEdge>>() => T;
  aggregate: <T = AggregateOrganizationPromise>() => T;
}

export interface OrganizationConnectionSubscription
  extends Promise<AsyncIterator<OrganizationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrganizationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrganizationSubscription>() => T;
}

export interface OrganizationEdge {
  node: Organization;
  cursor: String;
}

export interface OrganizationEdgePromise
  extends Promise<OrganizationEdge>,
    Fragmentable {
  node: <T = OrganizationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrganizationEdgeSubscription
  extends Promise<AsyncIterator<OrganizationEdge>>,
    Fragmentable {
  node: <T = OrganizationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrganization {
  count: Int;
}

export interface AggregateOrganizationPromise
  extends Promise<AggregateOrganization>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrganizationSubscription
  extends Promise<AsyncIterator<AggregateOrganization>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoleConnection {
  pageInfo: PageInfo;
  edges: RoleEdge[];
}

export interface RoleConnectionPromise
  extends Promise<RoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoleEdge>>() => T;
  aggregate: <T = AggregateRolePromise>() => T;
}

export interface RoleConnectionSubscription
  extends Promise<AsyncIterator<RoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleSubscription>() => T;
}

export interface RoleEdge {
  node: Role;
  cursor: String;
}

export interface RoleEdgePromise extends Promise<RoleEdge>, Fragmentable {
  node: <T = RolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoleEdgeSubscription
  extends Promise<AsyncIterator<RoleEdge>>,
    Fragmentable {
  node: <T = RoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRole {
  count: Int;
}

export interface AggregateRolePromise
  extends Promise<AggregateRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleSubscription
  extends Promise<AsyncIterator<AggregateRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoleMemberConnection {
  pageInfo: PageInfo;
  edges: RoleMemberEdge[];
}

export interface RoleMemberConnectionPromise
  extends Promise<RoleMemberConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoleMemberEdge>>() => T;
  aggregate: <T = AggregateRoleMemberPromise>() => T;
}

export interface RoleMemberConnectionSubscription
  extends Promise<AsyncIterator<RoleMemberConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleMemberEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleMemberSubscription>() => T;
}

export interface RoleMemberEdge {
  node: RoleMember;
  cursor: String;
}

export interface RoleMemberEdgePromise
  extends Promise<RoleMemberEdge>,
    Fragmentable {
  node: <T = RoleMemberPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoleMemberEdgeSubscription
  extends Promise<AsyncIterator<RoleMemberEdge>>,
    Fragmentable {
  node: <T = RoleMemberSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRoleMember {
  count: Int;
}

export interface AggregateRoleMemberPromise
  extends Promise<AggregateRoleMember>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleMemberSubscription
  extends Promise<AsyncIterator<AggregateRoleMember>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SubGroupConnection {
  pageInfo: PageInfo;
  edges: SubGroupEdge[];
}

export interface SubGroupConnectionPromise
  extends Promise<SubGroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubGroupEdge>>() => T;
  aggregate: <T = AggregateSubGroupPromise>() => T;
}

export interface SubGroupConnectionSubscription
  extends Promise<AsyncIterator<SubGroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SubGroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSubGroupSubscription>() => T;
}

export interface SubGroupEdge {
  node: SubGroup;
  cursor: String;
}

export interface SubGroupEdgePromise
  extends Promise<SubGroupEdge>,
    Fragmentable {
  node: <T = SubGroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubGroupEdgeSubscription
  extends Promise<AsyncIterator<SubGroupEdge>>,
    Fragmentable {
  node: <T = SubGroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSubGroup {
  count: Int;
}

export interface AggregateSubGroupPromise
  extends Promise<AggregateSubGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubGroupSubscription
  extends Promise<AsyncIterator<AggregateSubGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SubGroupMemberConnection {
  pageInfo: PageInfo;
  edges: SubGroupMemberEdge[];
}

export interface SubGroupMemberConnectionPromise
  extends Promise<SubGroupMemberConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubGroupMemberEdge>>() => T;
  aggregate: <T = AggregateSubGroupMemberPromise>() => T;
}

export interface SubGroupMemberConnectionSubscription
  extends Promise<AsyncIterator<SubGroupMemberConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SubGroupMemberEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSubGroupMemberSubscription>() => T;
}

export interface SubGroupMemberEdge {
  node: SubGroupMember;
  cursor: String;
}

export interface SubGroupMemberEdgePromise
  extends Promise<SubGroupMemberEdge>,
    Fragmentable {
  node: <T = SubGroupMemberPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubGroupMemberEdgeSubscription
  extends Promise<AsyncIterator<SubGroupMemberEdge>>,
    Fragmentable {
  node: <T = SubGroupMemberSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSubGroupMember {
  count: Int;
}

export interface AggregateSubGroupMemberPromise
  extends Promise<AggregateSubGroupMember>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubGroupMemberSubscription
  extends Promise<AsyncIterator<AggregateSubGroupMember>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SuborgConnection {
  pageInfo: PageInfo;
  edges: SuborgEdge[];
}

export interface SuborgConnectionPromise
  extends Promise<SuborgConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SuborgEdge>>() => T;
  aggregate: <T = AggregateSuborgPromise>() => T;
}

export interface SuborgConnectionSubscription
  extends Promise<AsyncIterator<SuborgConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SuborgEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSuborgSubscription>() => T;
}

export interface SuborgEdge {
  node: Suborg;
  cursor: String;
}

export interface SuborgEdgePromise extends Promise<SuborgEdge>, Fragmentable {
  node: <T = SuborgPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SuborgEdgeSubscription
  extends Promise<AsyncIterator<SuborgEdge>>,
    Fragmentable {
  node: <T = SuborgSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSuborg {
  count: Int;
}

export interface AggregateSuborgPromise
  extends Promise<AggregateSuborg>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSuborgSubscription
  extends Promise<AsyncIterator<AggregateSuborg>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  text: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface GroupPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GroupMemberSubscriptionPayload {
  mutation: MutationType;
  node: GroupMember;
  updatedFields: String[];
  previousValues: GroupMemberPreviousValues;
}

export interface GroupMemberSubscriptionPayloadPromise
  extends Promise<GroupMemberSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupMemberPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupMemberPreviousValuesPromise>() => T;
}

export interface GroupMemberSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupMemberSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupMemberSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupMemberPreviousValuesSubscription>() => T;
}

export interface GroupMemberPreviousValues {
  id: ID_Output;
  status?: MemberStatus;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface GroupMemberPreviousValuesPromise
  extends Promise<GroupMemberPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<MemberStatus>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GroupMemberPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupMemberPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<MemberStatus>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrganizationSubscriptionPayload {
  mutation: MutationType;
  node: Organization;
  updatedFields: String[];
  previousValues: OrganizationPreviousValues;
}

export interface OrganizationSubscriptionPayloadPromise
  extends Promise<OrganizationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrganizationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrganizationPreviousValuesPromise>() => T;
}

export interface OrganizationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrganizationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrganizationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrganizationPreviousValuesSubscription>() => T;
}

export interface OrganizationPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface OrganizationPreviousValuesPromise
  extends Promise<OrganizationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface OrganizationPreviousValuesSubscription
  extends Promise<AsyncIterator<OrganizationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  body: String;
  published: Boolean;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  published: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoleSubscriptionPayload {
  mutation: MutationType;
  node: Role;
  updatedFields: String[];
  previousValues: RolePreviousValues;
}

export interface RoleSubscriptionPayloadPromise
  extends Promise<RoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RolePreviousValuesPromise>() => T;
}

export interface RoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RolePreviousValuesSubscription>() => T;
}

export interface RolePreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface RolePreviousValuesPromise
  extends Promise<RolePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface RolePreviousValuesSubscription
  extends Promise<AsyncIterator<RolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoleMemberSubscriptionPayload {
  mutation: MutationType;
  node: RoleMember;
  updatedFields: String[];
  previousValues: RoleMemberPreviousValues;
}

export interface RoleMemberSubscriptionPayloadPromise
  extends Promise<RoleMemberSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RoleMemberPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoleMemberPreviousValuesPromise>() => T;
}

export interface RoleMemberSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleMemberSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleMemberSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoleMemberPreviousValuesSubscription>() => T;
}

export interface RoleMemberPreviousValues {
  id: ID_Output;
  status?: RoleStatus;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface RoleMemberPreviousValuesPromise
  extends Promise<RoleMemberPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<RoleStatus>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface RoleMemberPreviousValuesSubscription
  extends Promise<AsyncIterator<RoleMemberPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<RoleStatus>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SubGroupSubscriptionPayload {
  mutation: MutationType;
  node: SubGroup;
  updatedFields: String[];
  previousValues: SubGroupPreviousValues;
}

export interface SubGroupSubscriptionPayloadPromise
  extends Promise<SubGroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SubGroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SubGroupPreviousValuesPromise>() => T;
}

export interface SubGroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SubGroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SubGroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SubGroupPreviousValuesSubscription>() => T;
}

export interface SubGroupPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface SubGroupPreviousValuesPromise
  extends Promise<SubGroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SubGroupPreviousValuesSubscription
  extends Promise<AsyncIterator<SubGroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SubGroupMemberSubscriptionPayload {
  mutation: MutationType;
  node: SubGroupMember;
  updatedFields: String[];
  previousValues: SubGroupMemberPreviousValues;
}

export interface SubGroupMemberSubscriptionPayloadPromise
  extends Promise<SubGroupMemberSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SubGroupMemberPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SubGroupMemberPreviousValuesPromise>() => T;
}

export interface SubGroupMemberSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SubGroupMemberSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SubGroupMemberSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SubGroupMemberPreviousValuesSubscription>() => T;
}

export interface SubGroupMemberPreviousValues {
  id: ID_Output;
  status?: MemberStatus;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface SubGroupMemberPreviousValuesPromise
  extends Promise<SubGroupMemberPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<MemberStatus>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SubGroupMemberPreviousValuesSubscription
  extends Promise<AsyncIterator<SubGroupMemberPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<MemberStatus>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SuborgSubscriptionPayload {
  mutation: MutationType;
  node: Suborg;
  updatedFields: String[];
  previousValues: SuborgPreviousValues;
}

export interface SuborgSubscriptionPayloadPromise
  extends Promise<SuborgSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SuborgPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SuborgPreviousValuesPromise>() => T;
}

export interface SuborgSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SuborgSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SuborgSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SuborgPreviousValuesSubscription>() => T;
}

export interface SuborgPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface SuborgPreviousValuesPromise
  extends Promise<SuborgPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SuborgPreviousValuesSubscription
  extends Promise<AsyncIterator<SuborgPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  createdBy?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdBy: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdBy: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Organization",
    embedded: false
  },
  {
    name: "Suborg",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "GroupMember",
    embedded: false
  },
  {
    name: "SubGroup",
    embedded: false
  },
  {
    name: "SubGroupMember",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "RoleMember",
    embedded: false
  },
  {
    name: "RoleStatus",
    embedded: false
  },
  {
    name: "MemberStatus",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;

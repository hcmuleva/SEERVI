module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Address {
  id: ID!
  house: String
  landmark: String
  published: Boolean!
  updatedAt: DateTime!
  createdAt: DateTime!
  author: User!
  baseAddress: BaseAddress
}

type AddressConnection {
  pageInfo: PageInfo!
  edges: [AddressEdge]!
  aggregate: AggregateAddress!
}

input AddressCreateInput {
  id: ID
  house: String
  landmark: String
  published: Boolean!
  author: UserCreateOneWithoutAddressesInput!
  baseAddress: BaseAddressCreateOneInput
}

input AddressCreateManyWithoutAuthorInput {
  create: [AddressCreateWithoutAuthorInput!]
  connect: [AddressWhereUniqueInput!]
}

input AddressCreateWithoutAuthorInput {
  id: ID
  house: String
  landmark: String
  published: Boolean!
  baseAddress: BaseAddressCreateOneInput
}

type AddressEdge {
  node: Address!
  cursor: String!
}

enum AddressOrderByInput {
  id_ASC
  id_DESC
  house_ASC
  house_DESC
  landmark_ASC
  landmark_DESC
  published_ASC
  published_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AddressPreviousValues {
  id: ID!
  house: String
  landmark: String
  published: Boolean!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input AddressScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  house: String
  house_not: String
  house_in: [String!]
  house_not_in: [String!]
  house_lt: String
  house_lte: String
  house_gt: String
  house_gte: String
  house_contains: String
  house_not_contains: String
  house_starts_with: String
  house_not_starts_with: String
  house_ends_with: String
  house_not_ends_with: String
  landmark: String
  landmark_not: String
  landmark_in: [String!]
  landmark_not_in: [String!]
  landmark_lt: String
  landmark_lte: String
  landmark_gt: String
  landmark_gte: String
  landmark_contains: String
  landmark_not_contains: String
  landmark_starts_with: String
  landmark_not_starts_with: String
  landmark_ends_with: String
  landmark_not_ends_with: String
  published: Boolean
  published_not: Boolean
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [AddressScalarWhereInput!]
  OR: [AddressScalarWhereInput!]
  NOT: [AddressScalarWhereInput!]
}

type AddressSubscriptionPayload {
  mutation: MutationType!
  node: Address
  updatedFields: [String!]
  previousValues: AddressPreviousValues
}

input AddressSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AddressWhereInput
  AND: [AddressSubscriptionWhereInput!]
  OR: [AddressSubscriptionWhereInput!]
  NOT: [AddressSubscriptionWhereInput!]
}

input AddressUpdateInput {
  house: String
  landmark: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutAddressesInput
  baseAddress: BaseAddressUpdateOneInput
}

input AddressUpdateManyDataInput {
  house: String
  landmark: String
  published: Boolean
}

input AddressUpdateManyMutationInput {
  house: String
  landmark: String
  published: Boolean
}

input AddressUpdateManyWithoutAuthorInput {
  create: [AddressCreateWithoutAuthorInput!]
  delete: [AddressWhereUniqueInput!]
  connect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  disconnect: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [AddressScalarWhereInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
}

input AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput!
  data: AddressUpdateManyDataInput!
}

input AddressUpdateWithoutAuthorDataInput {
  house: String
  landmark: String
  published: Boolean
  baseAddress: BaseAddressUpdateOneInput
}

input AddressUpdateWithWhereUniqueWithoutAuthorInput {
  where: AddressWhereUniqueInput!
  data: AddressUpdateWithoutAuthorDataInput!
}

input AddressUpsertWithWhereUniqueWithoutAuthorInput {
  where: AddressWhereUniqueInput!
  update: AddressUpdateWithoutAuthorDataInput!
  create: AddressCreateWithoutAuthorInput!
}

input AddressWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  house: String
  house_not: String
  house_in: [String!]
  house_not_in: [String!]
  house_lt: String
  house_lte: String
  house_gt: String
  house_gte: String
  house_contains: String
  house_not_contains: String
  house_starts_with: String
  house_not_starts_with: String
  house_ends_with: String
  house_not_ends_with: String
  landmark: String
  landmark_not: String
  landmark_in: [String!]
  landmark_not_in: [String!]
  landmark_lt: String
  landmark_lte: String
  landmark_gt: String
  landmark_gte: String
  landmark_contains: String
  landmark_not_contains: String
  landmark_starts_with: String
  landmark_not_starts_with: String
  landmark_ends_with: String
  landmark_not_ends_with: String
  published: Boolean
  published_not: Boolean
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  author: UserWhereInput
  baseAddress: BaseAddressWhereInput
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
}

input AddressWhereUniqueInput {
  id: ID
}

type AggregateAddress {
  count: Int!
}

type AggregateBaseAddress {
  count: Int!
}

type AggregateBoard {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateCompetition {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateOrganization {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateSpecialization {
  count: Int!
}

type AggregateStudyCatelog {
  count: Int!
}

type AggregateSubject {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BaseAddress {
  id: ID!
  officename: String
  pincode: String
  officeType: String
  Deliverystatus: String
  divisionname: String
  regionname: String
  circlename: String
  taluk: String
  districtname: String
  statename: String
  telephone: String
  relatedSuboffice: String
  relatedHeadoffice: String
  longitude: String
  latitude: String
}

type BaseAddressConnection {
  pageInfo: PageInfo!
  edges: [BaseAddressEdge]!
  aggregate: AggregateBaseAddress!
}

input BaseAddressCreateInput {
  id: ID
  officename: String
  pincode: String
  officeType: String
  Deliverystatus: String
  divisionname: String
  regionname: String
  circlename: String
  taluk: String
  districtname: String
  statename: String
  telephone: String
  relatedSuboffice: String
  relatedHeadoffice: String
  longitude: String
  latitude: String
}

input BaseAddressCreateOneInput {
  create: BaseAddressCreateInput
  connect: BaseAddressWhereUniqueInput
}

type BaseAddressEdge {
  node: BaseAddress!
  cursor: String!
}

enum BaseAddressOrderByInput {
  id_ASC
  id_DESC
  officename_ASC
  officename_DESC
  pincode_ASC
  pincode_DESC
  officeType_ASC
  officeType_DESC
  Deliverystatus_ASC
  Deliverystatus_DESC
  divisionname_ASC
  divisionname_DESC
  regionname_ASC
  regionname_DESC
  circlename_ASC
  circlename_DESC
  taluk_ASC
  taluk_DESC
  districtname_ASC
  districtname_DESC
  statename_ASC
  statename_DESC
  telephone_ASC
  telephone_DESC
  relatedSuboffice_ASC
  relatedSuboffice_DESC
  relatedHeadoffice_ASC
  relatedHeadoffice_DESC
  longitude_ASC
  longitude_DESC
  latitude_ASC
  latitude_DESC
}

type BaseAddressPreviousValues {
  id: ID!
  officename: String
  pincode: String
  officeType: String
  Deliverystatus: String
  divisionname: String
  regionname: String
  circlename: String
  taluk: String
  districtname: String
  statename: String
  telephone: String
  relatedSuboffice: String
  relatedHeadoffice: String
  longitude: String
  latitude: String
}

type BaseAddressSubscriptionPayload {
  mutation: MutationType!
  node: BaseAddress
  updatedFields: [String!]
  previousValues: BaseAddressPreviousValues
}

input BaseAddressSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BaseAddressWhereInput
  AND: [BaseAddressSubscriptionWhereInput!]
  OR: [BaseAddressSubscriptionWhereInput!]
  NOT: [BaseAddressSubscriptionWhereInput!]
}

input BaseAddressUpdateDataInput {
  officename: String
  pincode: String
  officeType: String
  Deliverystatus: String
  divisionname: String
  regionname: String
  circlename: String
  taluk: String
  districtname: String
  statename: String
  telephone: String
  relatedSuboffice: String
  relatedHeadoffice: String
  longitude: String
  latitude: String
}

input BaseAddressUpdateInput {
  officename: String
  pincode: String
  officeType: String
  Deliverystatus: String
  divisionname: String
  regionname: String
  circlename: String
  taluk: String
  districtname: String
  statename: String
  telephone: String
  relatedSuboffice: String
  relatedHeadoffice: String
  longitude: String
  latitude: String
}

input BaseAddressUpdateManyMutationInput {
  officename: String
  pincode: String
  officeType: String
  Deliverystatus: String
  divisionname: String
  regionname: String
  circlename: String
  taluk: String
  districtname: String
  statename: String
  telephone: String
  relatedSuboffice: String
  relatedHeadoffice: String
  longitude: String
  latitude: String
}

input BaseAddressUpdateOneInput {
  create: BaseAddressCreateInput
  update: BaseAddressUpdateDataInput
  upsert: BaseAddressUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: BaseAddressWhereUniqueInput
}

input BaseAddressUpsertNestedInput {
  update: BaseAddressUpdateDataInput!
  create: BaseAddressCreateInput!
}

input BaseAddressWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  officename: String
  officename_not: String
  officename_in: [String!]
  officename_not_in: [String!]
  officename_lt: String
  officename_lte: String
  officename_gt: String
  officename_gte: String
  officename_contains: String
  officename_not_contains: String
  officename_starts_with: String
  officename_not_starts_with: String
  officename_ends_with: String
  officename_not_ends_with: String
  pincode: String
  pincode_not: String
  pincode_in: [String!]
  pincode_not_in: [String!]
  pincode_lt: String
  pincode_lte: String
  pincode_gt: String
  pincode_gte: String
  pincode_contains: String
  pincode_not_contains: String
  pincode_starts_with: String
  pincode_not_starts_with: String
  pincode_ends_with: String
  pincode_not_ends_with: String
  officeType: String
  officeType_not: String
  officeType_in: [String!]
  officeType_not_in: [String!]
  officeType_lt: String
  officeType_lte: String
  officeType_gt: String
  officeType_gte: String
  officeType_contains: String
  officeType_not_contains: String
  officeType_starts_with: String
  officeType_not_starts_with: String
  officeType_ends_with: String
  officeType_not_ends_with: String
  Deliverystatus: String
  Deliverystatus_not: String
  Deliverystatus_in: [String!]
  Deliverystatus_not_in: [String!]
  Deliverystatus_lt: String
  Deliverystatus_lte: String
  Deliverystatus_gt: String
  Deliverystatus_gte: String
  Deliverystatus_contains: String
  Deliverystatus_not_contains: String
  Deliverystatus_starts_with: String
  Deliverystatus_not_starts_with: String
  Deliverystatus_ends_with: String
  Deliverystatus_not_ends_with: String
  divisionname: String
  divisionname_not: String
  divisionname_in: [String!]
  divisionname_not_in: [String!]
  divisionname_lt: String
  divisionname_lte: String
  divisionname_gt: String
  divisionname_gte: String
  divisionname_contains: String
  divisionname_not_contains: String
  divisionname_starts_with: String
  divisionname_not_starts_with: String
  divisionname_ends_with: String
  divisionname_not_ends_with: String
  regionname: String
  regionname_not: String
  regionname_in: [String!]
  regionname_not_in: [String!]
  regionname_lt: String
  regionname_lte: String
  regionname_gt: String
  regionname_gte: String
  regionname_contains: String
  regionname_not_contains: String
  regionname_starts_with: String
  regionname_not_starts_with: String
  regionname_ends_with: String
  regionname_not_ends_with: String
  circlename: String
  circlename_not: String
  circlename_in: [String!]
  circlename_not_in: [String!]
  circlename_lt: String
  circlename_lte: String
  circlename_gt: String
  circlename_gte: String
  circlename_contains: String
  circlename_not_contains: String
  circlename_starts_with: String
  circlename_not_starts_with: String
  circlename_ends_with: String
  circlename_not_ends_with: String
  taluk: String
  taluk_not: String
  taluk_in: [String!]
  taluk_not_in: [String!]
  taluk_lt: String
  taluk_lte: String
  taluk_gt: String
  taluk_gte: String
  taluk_contains: String
  taluk_not_contains: String
  taluk_starts_with: String
  taluk_not_starts_with: String
  taluk_ends_with: String
  taluk_not_ends_with: String
  districtname: String
  districtname_not: String
  districtname_in: [String!]
  districtname_not_in: [String!]
  districtname_lt: String
  districtname_lte: String
  districtname_gt: String
  districtname_gte: String
  districtname_contains: String
  districtname_not_contains: String
  districtname_starts_with: String
  districtname_not_starts_with: String
  districtname_ends_with: String
  districtname_not_ends_with: String
  statename: String
  statename_not: String
  statename_in: [String!]
  statename_not_in: [String!]
  statename_lt: String
  statename_lte: String
  statename_gt: String
  statename_gte: String
  statename_contains: String
  statename_not_contains: String
  statename_starts_with: String
  statename_not_starts_with: String
  statename_ends_with: String
  statename_not_ends_with: String
  telephone: String
  telephone_not: String
  telephone_in: [String!]
  telephone_not_in: [String!]
  telephone_lt: String
  telephone_lte: String
  telephone_gt: String
  telephone_gte: String
  telephone_contains: String
  telephone_not_contains: String
  telephone_starts_with: String
  telephone_not_starts_with: String
  telephone_ends_with: String
  telephone_not_ends_with: String
  relatedSuboffice: String
  relatedSuboffice_not: String
  relatedSuboffice_in: [String!]
  relatedSuboffice_not_in: [String!]
  relatedSuboffice_lt: String
  relatedSuboffice_lte: String
  relatedSuboffice_gt: String
  relatedSuboffice_gte: String
  relatedSuboffice_contains: String
  relatedSuboffice_not_contains: String
  relatedSuboffice_starts_with: String
  relatedSuboffice_not_starts_with: String
  relatedSuboffice_ends_with: String
  relatedSuboffice_not_ends_with: String
  relatedHeadoffice: String
  relatedHeadoffice_not: String
  relatedHeadoffice_in: [String!]
  relatedHeadoffice_not_in: [String!]
  relatedHeadoffice_lt: String
  relatedHeadoffice_lte: String
  relatedHeadoffice_gt: String
  relatedHeadoffice_gte: String
  relatedHeadoffice_contains: String
  relatedHeadoffice_not_contains: String
  relatedHeadoffice_starts_with: String
  relatedHeadoffice_not_starts_with: String
  relatedHeadoffice_ends_with: String
  relatedHeadoffice_not_ends_with: String
  longitude: String
  longitude_not: String
  longitude_in: [String!]
  longitude_not_in: [String!]
  longitude_lt: String
  longitude_lte: String
  longitude_gt: String
  longitude_gte: String
  longitude_contains: String
  longitude_not_contains: String
  longitude_starts_with: String
  longitude_not_starts_with: String
  longitude_ends_with: String
  longitude_not_ends_with: String
  latitude: String
  latitude_not: String
  latitude_in: [String!]
  latitude_not_in: [String!]
  latitude_lt: String
  latitude_lte: String
  latitude_gt: String
  latitude_gte: String
  latitude_contains: String
  latitude_not_contains: String
  latitude_starts_with: String
  latitude_not_starts_with: String
  latitude_ends_with: String
  latitude_not_ends_with: String
  AND: [BaseAddressWhereInput!]
  OR: [BaseAddressWhereInput!]
  NOT: [BaseAddressWhereInput!]
}

input BaseAddressWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type Board {
  id: ID!
  name: String
  catelog: StudyCatelog!
}

type BoardConnection {
  pageInfo: PageInfo!
  edges: [BoardEdge]!
  aggregate: AggregateBoard!
}

input BoardCreateInput {
  id: ID
  name: String
  catelog: StudyCatelogCreateOneWithoutBoardsInput!
}

input BoardCreateManyWithoutCatelogInput {
  create: [BoardCreateWithoutCatelogInput!]
  connect: [BoardWhereUniqueInput!]
}

input BoardCreateWithoutCatelogInput {
  id: ID
  name: String
}

type BoardEdge {
  node: Board!
  cursor: String!
}

enum BoardOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type BoardPreviousValues {
  id: ID!
  name: String
}

input BoardScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [BoardScalarWhereInput!]
  OR: [BoardScalarWhereInput!]
  NOT: [BoardScalarWhereInput!]
}

type BoardSubscriptionPayload {
  mutation: MutationType!
  node: Board
  updatedFields: [String!]
  previousValues: BoardPreviousValues
}

input BoardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BoardWhereInput
  AND: [BoardSubscriptionWhereInput!]
  OR: [BoardSubscriptionWhereInput!]
  NOT: [BoardSubscriptionWhereInput!]
}

input BoardUpdateInput {
  name: String
  catelog: StudyCatelogUpdateOneRequiredWithoutBoardsInput
}

input BoardUpdateManyDataInput {
  name: String
}

input BoardUpdateManyMutationInput {
  name: String
}

input BoardUpdateManyWithoutCatelogInput {
  create: [BoardCreateWithoutCatelogInput!]
  delete: [BoardWhereUniqueInput!]
  connect: [BoardWhereUniqueInput!]
  set: [BoardWhereUniqueInput!]
  disconnect: [BoardWhereUniqueInput!]
  update: [BoardUpdateWithWhereUniqueWithoutCatelogInput!]
  upsert: [BoardUpsertWithWhereUniqueWithoutCatelogInput!]
  deleteMany: [BoardScalarWhereInput!]
  updateMany: [BoardUpdateManyWithWhereNestedInput!]
}

input BoardUpdateManyWithWhereNestedInput {
  where: BoardScalarWhereInput!
  data: BoardUpdateManyDataInput!
}

input BoardUpdateWithoutCatelogDataInput {
  name: String
}

input BoardUpdateWithWhereUniqueWithoutCatelogInput {
  where: BoardWhereUniqueInput!
  data: BoardUpdateWithoutCatelogDataInput!
}

input BoardUpsertWithWhereUniqueWithoutCatelogInput {
  where: BoardWhereUniqueInput!
  update: BoardUpdateWithoutCatelogDataInput!
  create: BoardCreateWithoutCatelogInput!
}

input BoardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  catelog: StudyCatelogWhereInput
  AND: [BoardWhereInput!]
  OR: [BoardWhereInput!]
  NOT: [BoardWhereInput!]
}

input BoardWhereUniqueInput {
  id: ID
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  text: String!
  author: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutAuthorInput {
  id: ID
  text: String!
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutPostInput {
  id: ID
  text: String!
  author: UserCreateOneWithoutCommentsInput!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  text: String
}

input CommentUpdateManyMutationInput {
  text: String
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutAuthorDataInput {
  text: String
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutPostDataInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  author: UserWhereInput
  post: PostWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

type Competition {
  id: ID!
  name: String
  catelog: StudyCatelog!
}

type CompetitionConnection {
  pageInfo: PageInfo!
  edges: [CompetitionEdge]!
  aggregate: AggregateCompetition!
}

input CompetitionCreateInput {
  id: ID
  name: String
  catelog: StudyCatelogCreateOneWithoutCompetitionInput!
}

input CompetitionCreateManyWithoutCatelogInput {
  create: [CompetitionCreateWithoutCatelogInput!]
  connect: [CompetitionWhereUniqueInput!]
}

input CompetitionCreateWithoutCatelogInput {
  id: ID
  name: String
}

type CompetitionEdge {
  node: Competition!
  cursor: String!
}

enum CompetitionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type CompetitionPreviousValues {
  id: ID!
  name: String
}

input CompetitionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CompetitionScalarWhereInput!]
  OR: [CompetitionScalarWhereInput!]
  NOT: [CompetitionScalarWhereInput!]
}

type CompetitionSubscriptionPayload {
  mutation: MutationType!
  node: Competition
  updatedFields: [String!]
  previousValues: CompetitionPreviousValues
}

input CompetitionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompetitionWhereInput
  AND: [CompetitionSubscriptionWhereInput!]
  OR: [CompetitionSubscriptionWhereInput!]
  NOT: [CompetitionSubscriptionWhereInput!]
}

input CompetitionUpdateInput {
  name: String
  catelog: StudyCatelogUpdateOneRequiredWithoutCompetitionInput
}

input CompetitionUpdateManyDataInput {
  name: String
}

input CompetitionUpdateManyMutationInput {
  name: String
}

input CompetitionUpdateManyWithoutCatelogInput {
  create: [CompetitionCreateWithoutCatelogInput!]
  delete: [CompetitionWhereUniqueInput!]
  connect: [CompetitionWhereUniqueInput!]
  set: [CompetitionWhereUniqueInput!]
  disconnect: [CompetitionWhereUniqueInput!]
  update: [CompetitionUpdateWithWhereUniqueWithoutCatelogInput!]
  upsert: [CompetitionUpsertWithWhereUniqueWithoutCatelogInput!]
  deleteMany: [CompetitionScalarWhereInput!]
  updateMany: [CompetitionUpdateManyWithWhereNestedInput!]
}

input CompetitionUpdateManyWithWhereNestedInput {
  where: CompetitionScalarWhereInput!
  data: CompetitionUpdateManyDataInput!
}

input CompetitionUpdateWithoutCatelogDataInput {
  name: String
}

input CompetitionUpdateWithWhereUniqueWithoutCatelogInput {
  where: CompetitionWhereUniqueInput!
  data: CompetitionUpdateWithoutCatelogDataInput!
}

input CompetitionUpsertWithWhereUniqueWithoutCatelogInput {
  where: CompetitionWhereUniqueInput!
  update: CompetitionUpdateWithoutCatelogDataInput!
  create: CompetitionCreateWithoutCatelogInput!
}

input CompetitionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  catelog: StudyCatelogWhereInput
  AND: [CompetitionWhereInput!]
  OR: [CompetitionWhereInput!]
  NOT: [CompetitionWhereInput!]
}

input CompetitionWhereUniqueInput {
  id: ID
}

scalar DateTime

type File {
  id: ID!
  path: String
  filename: String!
  mimetype: String!
  encoding: String!
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  path: String
  filename: String!
  mimetype: String!
  encoding: String!
}

type FileEdge {
  node: File!
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  path_ASC
  path_DESC
  filename_ASC
  filename_DESC
  mimetype_ASC
  mimetype_DESC
  encoding_ASC
  encoding_DESC
}

type FilePreviousValues {
  id: ID!
  path: String
  filename: String!
  mimetype: String!
  encoding: String!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FileWhereInput
  AND: [FileSubscriptionWhereInput!]
  OR: [FileSubscriptionWhereInput!]
  NOT: [FileSubscriptionWhereInput!]
}

input FileUpdateInput {
  path: String
  filename: String
  mimetype: String
  encoding: String
}

input FileUpdateManyMutationInput {
  path: String
  filename: String
  mimetype: String
  encoding: String
}

input FileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  path: String
  path_not: String
  path_in: [String!]
  path_not_in: [String!]
  path_lt: String
  path_lte: String
  path_gt: String
  path_gte: String
  path_contains: String
  path_not_contains: String
  path_starts_with: String
  path_not_starts_with: String
  path_ends_with: String
  path_not_ends_with: String
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  mimetype: String
  mimetype_not: String
  mimetype_in: [String!]
  mimetype_not_in: [String!]
  mimetype_lt: String
  mimetype_lte: String
  mimetype_gt: String
  mimetype_gte: String
  mimetype_contains: String
  mimetype_not_contains: String
  mimetype_starts_with: String
  mimetype_not_starts_with: String
  mimetype_ends_with: String
  mimetype_not_ends_with: String
  encoding: String
  encoding_not: String
  encoding_in: [String!]
  encoding_not_in: [String!]
  encoding_lt: String
  encoding_lte: String
  encoding_gt: String
  encoding_gte: String
  encoding_contains: String
  encoding_not_contains: String
  encoding_starts_with: String
  encoding_not_starts_with: String
  encoding_ends_with: String
  encoding_not_ends_with: String
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
}

input FileWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createAddress(data: AddressCreateInput!): Address!
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateManyAddresses(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  upsertAddress(where: AddressWhereUniqueInput!, create: AddressCreateInput!, update: AddressUpdateInput!): Address!
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  createBaseAddress(data: BaseAddressCreateInput!): BaseAddress!
  updateBaseAddress(data: BaseAddressUpdateInput!, where: BaseAddressWhereUniqueInput!): BaseAddress
  updateManyBaseAddresses(data: BaseAddressUpdateManyMutationInput!, where: BaseAddressWhereInput): BatchPayload!
  upsertBaseAddress(where: BaseAddressWhereUniqueInput!, create: BaseAddressCreateInput!, update: BaseAddressUpdateInput!): BaseAddress!
  deleteBaseAddress(where: BaseAddressWhereUniqueInput!): BaseAddress
  deleteManyBaseAddresses(where: BaseAddressWhereInput): BatchPayload!
  createBoard(data: BoardCreateInput!): Board!
  updateBoard(data: BoardUpdateInput!, where: BoardWhereUniqueInput!): Board
  updateManyBoards(data: BoardUpdateManyMutationInput!, where: BoardWhereInput): BatchPayload!
  upsertBoard(where: BoardWhereUniqueInput!, create: BoardCreateInput!, update: BoardUpdateInput!): Board!
  deleteBoard(where: BoardWhereUniqueInput!): Board
  deleteManyBoards(where: BoardWhereInput): BatchPayload!
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createCompetition(data: CompetitionCreateInput!): Competition!
  updateCompetition(data: CompetitionUpdateInput!, where: CompetitionWhereUniqueInput!): Competition
  updateManyCompetitions(data: CompetitionUpdateManyMutationInput!, where: CompetitionWhereInput): BatchPayload!
  upsertCompetition(where: CompetitionWhereUniqueInput!, create: CompetitionCreateInput!, update: CompetitionUpdateInput!): Competition!
  deleteCompetition(where: CompetitionWhereUniqueInput!): Competition
  deleteManyCompetitions(where: CompetitionWhereInput): BatchPayload!
  createFile(data: FileCreateInput!): File!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  deleteFile(where: FileWhereUniqueInput!): File
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  createOrganization(data: OrganizationCreateInput!): Organization!
  updateOrganization(data: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization
  updateManyOrganizations(data: OrganizationUpdateManyMutationInput!, where: OrganizationWhereInput): BatchPayload!
  upsertOrganization(where: OrganizationWhereUniqueInput!, create: OrganizationCreateInput!, update: OrganizationUpdateInput!): Organization!
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteManyOrganizations(where: OrganizationWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createRole(data: RoleCreateInput!): Role!
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  createSpecialization(data: SpecializationCreateInput!): Specialization!
  updateSpecialization(data: SpecializationUpdateInput!, where: SpecializationWhereUniqueInput!): Specialization
  updateManySpecializations(data: SpecializationUpdateManyMutationInput!, where: SpecializationWhereInput): BatchPayload!
  upsertSpecialization(where: SpecializationWhereUniqueInput!, create: SpecializationCreateInput!, update: SpecializationUpdateInput!): Specialization!
  deleteSpecialization(where: SpecializationWhereUniqueInput!): Specialization
  deleteManySpecializations(where: SpecializationWhereInput): BatchPayload!
  createStudyCatelog(data: StudyCatelogCreateInput!): StudyCatelog!
  updateStudyCatelog(data: StudyCatelogUpdateInput!, where: StudyCatelogWhereUniqueInput!): StudyCatelog
  updateManyStudyCatelogs(data: StudyCatelogUpdateManyMutationInput!, where: StudyCatelogWhereInput): BatchPayload!
  upsertStudyCatelog(where: StudyCatelogWhereUniqueInput!, create: StudyCatelogCreateInput!, update: StudyCatelogUpdateInput!): StudyCatelog!
  deleteStudyCatelog(where: StudyCatelogWhereUniqueInput!): StudyCatelog
  deleteManyStudyCatelogs(where: StudyCatelogWhereInput): BatchPayload!
  createSubject(data: SubjectCreateInput!): Subject!
  updateSubject(data: SubjectUpdateInput!, where: SubjectWhereUniqueInput!): Subject
  updateManySubjects(data: SubjectUpdateManyMutationInput!, where: SubjectWhereInput): BatchPayload!
  upsertSubject(where: SubjectWhereUniqueInput!, create: SubjectCreateInput!, update: SubjectUpdateInput!): Subject!
  deleteSubject(where: SubjectWhereUniqueInput!): Subject
  deleteManySubjects(where: SubjectWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Organization {
  id: ID!
  name: String!
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
  author(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
}

type OrganizationConnection {
  pageInfo: PageInfo!
  edges: [OrganizationEdge]!
  aggregate: AggregateOrganization!
}

input OrganizationCreateInput {
  id: ID
  name: String!
  description: String
  author: UserCreateManyWithoutOrgInput
  roles: RoleCreateManyWithoutOrgsInput
}

input OrganizationCreateOneWithoutAuthorInput {
  create: OrganizationCreateWithoutAuthorInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateOneWithoutRolesInput {
  create: OrganizationCreateWithoutRolesInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateWithoutAuthorInput {
  id: ID
  name: String!
  description: String
  roles: RoleCreateManyWithoutOrgsInput
}

input OrganizationCreateWithoutRolesInput {
  id: ID
  name: String!
  description: String
  author: UserCreateManyWithoutOrgInput
}

type OrganizationEdge {
  node: Organization!
  cursor: String!
}

enum OrganizationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrganizationPreviousValues {
  id: ID!
  name: String!
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type OrganizationSubscriptionPayload {
  mutation: MutationType!
  node: Organization
  updatedFields: [String!]
  previousValues: OrganizationPreviousValues
}

input OrganizationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrganizationWhereInput
  AND: [OrganizationSubscriptionWhereInput!]
  OR: [OrganizationSubscriptionWhereInput!]
  NOT: [OrganizationSubscriptionWhereInput!]
}

input OrganizationUpdateInput {
  name: String
  description: String
  author: UserUpdateManyWithoutOrgInput
  roles: RoleUpdateManyWithoutOrgsInput
}

input OrganizationUpdateManyMutationInput {
  name: String
  description: String
}

input OrganizationUpdateOneRequiredWithoutAuthorInput {
  create: OrganizationCreateWithoutAuthorInput
  update: OrganizationUpdateWithoutAuthorDataInput
  upsert: OrganizationUpsertWithoutAuthorInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationUpdateOneRequiredWithoutRolesInput {
  create: OrganizationCreateWithoutRolesInput
  update: OrganizationUpdateWithoutRolesDataInput
  upsert: OrganizationUpsertWithoutRolesInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationUpdateWithoutAuthorDataInput {
  name: String
  description: String
  roles: RoleUpdateManyWithoutOrgsInput
}

input OrganizationUpdateWithoutRolesDataInput {
  name: String
  description: String
  author: UserUpdateManyWithoutOrgInput
}

input OrganizationUpsertWithoutAuthorInput {
  update: OrganizationUpdateWithoutAuthorDataInput!
  create: OrganizationCreateWithoutAuthorInput!
}

input OrganizationUpsertWithoutRolesInput {
  update: OrganizationUpdateWithoutRolesDataInput!
  create: OrganizationCreateWithoutRolesInput!
}

input OrganizationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  author_every: UserWhereInput
  author_some: UserWhereInput
  author_none: UserWhereInput
  roles_every: RoleWhereInput
  roles_some: RoleWhereInput
  roles_none: RoleWhereInput
  AND: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
}

input OrganizationWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  body: String!
  published: Boolean!
  author: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutAuthorInput {
  id: ID
  title: String!
  body: String!
  published: Boolean!
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateWithoutCommentsInput {
  id: ID
  title: String!
  body: String!
  published: Boolean!
  author: UserCreateOneWithoutPostsInput!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  published_ASC
  published_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  published: Boolean
  published_not: Boolean
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  title: String
  body: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
  title: String
  body: String
  published: Boolean
}

input PostUpdateManyMutationInput {
  title: String
  body: String
  published: Boolean
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostUpdateWithoutAuthorDataInput {
  title: String
  body: String
  published: Boolean
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithoutCommentsDataInput {
  title: String
  body: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  published: Boolean
  published_not: Boolean
  author: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  address(where: AddressWhereUniqueInput!): Address
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address]!
  addressesConnection(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AddressConnection!
  baseAddress(where: BaseAddressWhereUniqueInput!): BaseAddress
  baseAddresses(where: BaseAddressWhereInput, orderBy: BaseAddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BaseAddress]!
  baseAddressesConnection(where: BaseAddressWhereInput, orderBy: BaseAddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BaseAddressConnection!
  board(where: BoardWhereUniqueInput!): Board
  boards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board]!
  boardsConnection(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BoardConnection!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  competition(where: CompetitionWhereUniqueInput!): Competition
  competitions(where: CompetitionWhereInput, orderBy: CompetitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Competition]!
  competitionsConnection(where: CompetitionWhereInput, orderBy: CompetitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompetitionConnection!
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizations(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Organization]!
  organizationsConnection(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrganizationConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  specialization(where: SpecializationWhereUniqueInput!): Specialization
  specializations(where: SpecializationWhereInput, orderBy: SpecializationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Specialization]!
  specializationsConnection(where: SpecializationWhereInput, orderBy: SpecializationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpecializationConnection!
  studyCatelog(where: StudyCatelogWhereUniqueInput!): StudyCatelog
  studyCatelogs(where: StudyCatelogWhereInput, orderBy: StudyCatelogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StudyCatelog]!
  studyCatelogsConnection(where: StudyCatelogWhereInput, orderBy: StudyCatelogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StudyCatelogConnection!
  subject(where: SubjectWhereUniqueInput!): Subject
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject]!
  subjectsConnection(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubjectConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Role {
  id: ID!
  roleName: String!
  createdBy: String!
  users: User!
  orgs: Organization!
}

type RoleConnection {
  pageInfo: PageInfo!
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  id: ID
  roleName: String!
  createdBy: String!
  users: UserCreateOneWithoutRolesInput!
  orgs: OrganizationCreateOneWithoutRolesInput!
}

input RoleCreateManyWithoutOrgsInput {
  create: [RoleCreateWithoutOrgsInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateManyWithoutUsersInput {
  create: [RoleCreateWithoutUsersInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateWithoutOrgsInput {
  id: ID
  roleName: String!
  createdBy: String!
  users: UserCreateOneWithoutRolesInput!
}

input RoleCreateWithoutUsersInput {
  id: ID
  roleName: String!
  createdBy: String!
  orgs: OrganizationCreateOneWithoutRolesInput!
}

type RoleEdge {
  node: Role!
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  roleName_ASC
  roleName_DESC
  createdBy_ASC
  createdBy_DESC
}

type RolePreviousValues {
  id: ID!
  roleName: String!
  createdBy: String!
}

input RoleScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  roleName: String
  roleName_not: String
  roleName_in: [String!]
  roleName_not_in: [String!]
  roleName_lt: String
  roleName_lte: String
  roleName_gt: String
  roleName_gte: String
  roleName_contains: String
  roleName_not_contains: String
  roleName_starts_with: String
  roleName_not_starts_with: String
  roleName_ends_with: String
  roleName_not_ends_with: String
  createdBy: String
  createdBy_not: String
  createdBy_in: [String!]
  createdBy_not_in: [String!]
  createdBy_lt: String
  createdBy_lte: String
  createdBy_gt: String
  createdBy_gte: String
  createdBy_contains: String
  createdBy_not_contains: String
  createdBy_starts_with: String
  createdBy_not_starts_with: String
  createdBy_ends_with: String
  createdBy_not_ends_with: String
  AND: [RoleScalarWhereInput!]
  OR: [RoleScalarWhereInput!]
  NOT: [RoleScalarWhereInput!]
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
  AND: [RoleSubscriptionWhereInput!]
  OR: [RoleSubscriptionWhereInput!]
  NOT: [RoleSubscriptionWhereInput!]
}

input RoleUpdateInput {
  roleName: String
  createdBy: String
  users: UserUpdateOneRequiredWithoutRolesInput
  orgs: OrganizationUpdateOneRequiredWithoutRolesInput
}

input RoleUpdateManyDataInput {
  roleName: String
  createdBy: String
}

input RoleUpdateManyMutationInput {
  roleName: String
  createdBy: String
}

input RoleUpdateManyWithoutOrgsInput {
  create: [RoleCreateWithoutOrgsInput!]
  delete: [RoleWhereUniqueInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutOrgsInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutOrgsInput!]
  deleteMany: [RoleScalarWhereInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
}

input RoleUpdateManyWithoutUsersInput {
  create: [RoleCreateWithoutUsersInput!]
  delete: [RoleWhereUniqueInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutUsersInput!]
  deleteMany: [RoleScalarWhereInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
}

input RoleUpdateManyWithWhereNestedInput {
  where: RoleScalarWhereInput!
  data: RoleUpdateManyDataInput!
}

input RoleUpdateWithoutOrgsDataInput {
  roleName: String
  createdBy: String
  users: UserUpdateOneRequiredWithoutRolesInput
}

input RoleUpdateWithoutUsersDataInput {
  roleName: String
  createdBy: String
  orgs: OrganizationUpdateOneRequiredWithoutRolesInput
}

input RoleUpdateWithWhereUniqueWithoutOrgsInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutOrgsDataInput!
}

input RoleUpdateWithWhereUniqueWithoutUsersInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutUsersDataInput!
}

input RoleUpsertWithWhereUniqueWithoutOrgsInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutOrgsDataInput!
  create: RoleCreateWithoutOrgsInput!
}

input RoleUpsertWithWhereUniqueWithoutUsersInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutUsersDataInput!
  create: RoleCreateWithoutUsersInput!
}

input RoleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  roleName: String
  roleName_not: String
  roleName_in: [String!]
  roleName_not_in: [String!]
  roleName_lt: String
  roleName_lte: String
  roleName_gt: String
  roleName_gte: String
  roleName_contains: String
  roleName_not_contains: String
  roleName_starts_with: String
  roleName_not_starts_with: String
  roleName_ends_with: String
  roleName_not_ends_with: String
  createdBy: String
  createdBy_not: String
  createdBy_in: [String!]
  createdBy_not_in: [String!]
  createdBy_lt: String
  createdBy_lte: String
  createdBy_gt: String
  createdBy_gte: String
  createdBy_contains: String
  createdBy_not_contains: String
  createdBy_starts_with: String
  createdBy_not_starts_with: String
  createdBy_ends_with: String
  createdBy_not_ends_with: String
  users: UserWhereInput
  orgs: OrganizationWhereInput
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
}

input RoleWhereUniqueInput {
  id: ID
}

type Specialization {
  id: ID!
  name: String
  catelog: StudyCatelog!
}

type SpecializationConnection {
  pageInfo: PageInfo!
  edges: [SpecializationEdge]!
  aggregate: AggregateSpecialization!
}

input SpecializationCreateInput {
  id: ID
  name: String
  catelog: StudyCatelogCreateOneWithoutSpecializationInput!
}

input SpecializationCreateManyWithoutCatelogInput {
  create: [SpecializationCreateWithoutCatelogInput!]
  connect: [SpecializationWhereUniqueInput!]
}

input SpecializationCreateWithoutCatelogInput {
  id: ID
  name: String
}

type SpecializationEdge {
  node: Specialization!
  cursor: String!
}

enum SpecializationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type SpecializationPreviousValues {
  id: ID!
  name: String
}

input SpecializationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [SpecializationScalarWhereInput!]
  OR: [SpecializationScalarWhereInput!]
  NOT: [SpecializationScalarWhereInput!]
}

type SpecializationSubscriptionPayload {
  mutation: MutationType!
  node: Specialization
  updatedFields: [String!]
  previousValues: SpecializationPreviousValues
}

input SpecializationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SpecializationWhereInput
  AND: [SpecializationSubscriptionWhereInput!]
  OR: [SpecializationSubscriptionWhereInput!]
  NOT: [SpecializationSubscriptionWhereInput!]
}

input SpecializationUpdateInput {
  name: String
  catelog: StudyCatelogUpdateOneRequiredWithoutSpecializationInput
}

input SpecializationUpdateManyDataInput {
  name: String
}

input SpecializationUpdateManyMutationInput {
  name: String
}

input SpecializationUpdateManyWithoutCatelogInput {
  create: [SpecializationCreateWithoutCatelogInput!]
  delete: [SpecializationWhereUniqueInput!]
  connect: [SpecializationWhereUniqueInput!]
  set: [SpecializationWhereUniqueInput!]
  disconnect: [SpecializationWhereUniqueInput!]
  update: [SpecializationUpdateWithWhereUniqueWithoutCatelogInput!]
  upsert: [SpecializationUpsertWithWhereUniqueWithoutCatelogInput!]
  deleteMany: [SpecializationScalarWhereInput!]
  updateMany: [SpecializationUpdateManyWithWhereNestedInput!]
}

input SpecializationUpdateManyWithWhereNestedInput {
  where: SpecializationScalarWhereInput!
  data: SpecializationUpdateManyDataInput!
}

input SpecializationUpdateWithoutCatelogDataInput {
  name: String
}

input SpecializationUpdateWithWhereUniqueWithoutCatelogInput {
  where: SpecializationWhereUniqueInput!
  data: SpecializationUpdateWithoutCatelogDataInput!
}

input SpecializationUpsertWithWhereUniqueWithoutCatelogInput {
  where: SpecializationWhereUniqueInput!
  update: SpecializationUpdateWithoutCatelogDataInput!
  create: SpecializationCreateWithoutCatelogInput!
}

input SpecializationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  catelog: StudyCatelogWhereInput
  AND: [SpecializationWhereInput!]
  OR: [SpecializationWhereInput!]
  NOT: [SpecializationWhereInput!]
}

input SpecializationWhereUniqueInput {
  id: ID
}

type StudyCatelog {
  id: ID!
  std: String!
  substd: String
  academic: String
  subacademic: String
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  boards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board!]
  specialization(where: SpecializationWhereInput, orderBy: SpecializationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Specialization!]
  competition(where: CompetitionWhereInput, orderBy: CompetitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Competition!]
  published: Boolean
}

type StudyCatelogConnection {
  pageInfo: PageInfo!
  edges: [StudyCatelogEdge]!
  aggregate: AggregateStudyCatelog!
}

input StudyCatelogCreateInput {
  id: ID
  std: String!
  substd: String
  academic: String
  subacademic: String
  subjects: SubjectCreateManyWithoutCatelogInput
  boards: BoardCreateManyWithoutCatelogInput
  specialization: SpecializationCreateManyWithoutCatelogInput
  competition: CompetitionCreateManyWithoutCatelogInput
  published: Boolean
}

input StudyCatelogCreateOneWithoutBoardsInput {
  create: StudyCatelogCreateWithoutBoardsInput
  connect: StudyCatelogWhereUniqueInput
}

input StudyCatelogCreateOneWithoutCompetitionInput {
  create: StudyCatelogCreateWithoutCompetitionInput
  connect: StudyCatelogWhereUniqueInput
}

input StudyCatelogCreateOneWithoutSpecializationInput {
  create: StudyCatelogCreateWithoutSpecializationInput
  connect: StudyCatelogWhereUniqueInput
}

input StudyCatelogCreateOneWithoutSubjectsInput {
  create: StudyCatelogCreateWithoutSubjectsInput
  connect: StudyCatelogWhereUniqueInput
}

input StudyCatelogCreateWithoutBoardsInput {
  id: ID
  std: String!
  substd: String
  academic: String
  subacademic: String
  subjects: SubjectCreateManyWithoutCatelogInput
  specialization: SpecializationCreateManyWithoutCatelogInput
  competition: CompetitionCreateManyWithoutCatelogInput
  published: Boolean
}

input StudyCatelogCreateWithoutCompetitionInput {
  id: ID
  std: String!
  substd: String
  academic: String
  subacademic: String
  subjects: SubjectCreateManyWithoutCatelogInput
  boards: BoardCreateManyWithoutCatelogInput
  specialization: SpecializationCreateManyWithoutCatelogInput
  published: Boolean
}

input StudyCatelogCreateWithoutSpecializationInput {
  id: ID
  std: String!
  substd: String
  academic: String
  subacademic: String
  subjects: SubjectCreateManyWithoutCatelogInput
  boards: BoardCreateManyWithoutCatelogInput
  competition: CompetitionCreateManyWithoutCatelogInput
  published: Boolean
}

input StudyCatelogCreateWithoutSubjectsInput {
  id: ID
  std: String!
  substd: String
  academic: String
  subacademic: String
  boards: BoardCreateManyWithoutCatelogInput
  specialization: SpecializationCreateManyWithoutCatelogInput
  competition: CompetitionCreateManyWithoutCatelogInput
  published: Boolean
}

type StudyCatelogEdge {
  node: StudyCatelog!
  cursor: String!
}

enum StudyCatelogOrderByInput {
  id_ASC
  id_DESC
  std_ASC
  std_DESC
  substd_ASC
  substd_DESC
  academic_ASC
  academic_DESC
  subacademic_ASC
  subacademic_DESC
  published_ASC
  published_DESC
}

type StudyCatelogPreviousValues {
  id: ID!
  std: String!
  substd: String
  academic: String
  subacademic: String
  published: Boolean
}

type StudyCatelogSubscriptionPayload {
  mutation: MutationType!
  node: StudyCatelog
  updatedFields: [String!]
  previousValues: StudyCatelogPreviousValues
}

input StudyCatelogSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StudyCatelogWhereInput
  AND: [StudyCatelogSubscriptionWhereInput!]
  OR: [StudyCatelogSubscriptionWhereInput!]
  NOT: [StudyCatelogSubscriptionWhereInput!]
}

input StudyCatelogUpdateInput {
  std: String
  substd: String
  academic: String
  subacademic: String
  subjects: SubjectUpdateManyWithoutCatelogInput
  boards: BoardUpdateManyWithoutCatelogInput
  specialization: SpecializationUpdateManyWithoutCatelogInput
  competition: CompetitionUpdateManyWithoutCatelogInput
  published: Boolean
}

input StudyCatelogUpdateManyMutationInput {
  std: String
  substd: String
  academic: String
  subacademic: String
  published: Boolean
}

input StudyCatelogUpdateOneRequiredWithoutBoardsInput {
  create: StudyCatelogCreateWithoutBoardsInput
  update: StudyCatelogUpdateWithoutBoardsDataInput
  upsert: StudyCatelogUpsertWithoutBoardsInput
  connect: StudyCatelogWhereUniqueInput
}

input StudyCatelogUpdateOneRequiredWithoutCompetitionInput {
  create: StudyCatelogCreateWithoutCompetitionInput
  update: StudyCatelogUpdateWithoutCompetitionDataInput
  upsert: StudyCatelogUpsertWithoutCompetitionInput
  connect: StudyCatelogWhereUniqueInput
}

input StudyCatelogUpdateOneRequiredWithoutSpecializationInput {
  create: StudyCatelogCreateWithoutSpecializationInput
  update: StudyCatelogUpdateWithoutSpecializationDataInput
  upsert: StudyCatelogUpsertWithoutSpecializationInput
  connect: StudyCatelogWhereUniqueInput
}

input StudyCatelogUpdateOneRequiredWithoutSubjectsInput {
  create: StudyCatelogCreateWithoutSubjectsInput
  update: StudyCatelogUpdateWithoutSubjectsDataInput
  upsert: StudyCatelogUpsertWithoutSubjectsInput
  connect: StudyCatelogWhereUniqueInput
}

input StudyCatelogUpdateWithoutBoardsDataInput {
  std: String
  substd: String
  academic: String
  subacademic: String
  subjects: SubjectUpdateManyWithoutCatelogInput
  specialization: SpecializationUpdateManyWithoutCatelogInput
  competition: CompetitionUpdateManyWithoutCatelogInput
  published: Boolean
}

input StudyCatelogUpdateWithoutCompetitionDataInput {
  std: String
  substd: String
  academic: String
  subacademic: String
  subjects: SubjectUpdateManyWithoutCatelogInput
  boards: BoardUpdateManyWithoutCatelogInput
  specialization: SpecializationUpdateManyWithoutCatelogInput
  published: Boolean
}

input StudyCatelogUpdateWithoutSpecializationDataInput {
  std: String
  substd: String
  academic: String
  subacademic: String
  subjects: SubjectUpdateManyWithoutCatelogInput
  boards: BoardUpdateManyWithoutCatelogInput
  competition: CompetitionUpdateManyWithoutCatelogInput
  published: Boolean
}

input StudyCatelogUpdateWithoutSubjectsDataInput {
  std: String
  substd: String
  academic: String
  subacademic: String
  boards: BoardUpdateManyWithoutCatelogInput
  specialization: SpecializationUpdateManyWithoutCatelogInput
  competition: CompetitionUpdateManyWithoutCatelogInput
  published: Boolean
}

input StudyCatelogUpsertWithoutBoardsInput {
  update: StudyCatelogUpdateWithoutBoardsDataInput!
  create: StudyCatelogCreateWithoutBoardsInput!
}

input StudyCatelogUpsertWithoutCompetitionInput {
  update: StudyCatelogUpdateWithoutCompetitionDataInput!
  create: StudyCatelogCreateWithoutCompetitionInput!
}

input StudyCatelogUpsertWithoutSpecializationInput {
  update: StudyCatelogUpdateWithoutSpecializationDataInput!
  create: StudyCatelogCreateWithoutSpecializationInput!
}

input StudyCatelogUpsertWithoutSubjectsInput {
  update: StudyCatelogUpdateWithoutSubjectsDataInput!
  create: StudyCatelogCreateWithoutSubjectsInput!
}

input StudyCatelogWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  std: String
  std_not: String
  std_in: [String!]
  std_not_in: [String!]
  std_lt: String
  std_lte: String
  std_gt: String
  std_gte: String
  std_contains: String
  std_not_contains: String
  std_starts_with: String
  std_not_starts_with: String
  std_ends_with: String
  std_not_ends_with: String
  substd: String
  substd_not: String
  substd_in: [String!]
  substd_not_in: [String!]
  substd_lt: String
  substd_lte: String
  substd_gt: String
  substd_gte: String
  substd_contains: String
  substd_not_contains: String
  substd_starts_with: String
  substd_not_starts_with: String
  substd_ends_with: String
  substd_not_ends_with: String
  academic: String
  academic_not: String
  academic_in: [String!]
  academic_not_in: [String!]
  academic_lt: String
  academic_lte: String
  academic_gt: String
  academic_gte: String
  academic_contains: String
  academic_not_contains: String
  academic_starts_with: String
  academic_not_starts_with: String
  academic_ends_with: String
  academic_not_ends_with: String
  subacademic: String
  subacademic_not: String
  subacademic_in: [String!]
  subacademic_not_in: [String!]
  subacademic_lt: String
  subacademic_lte: String
  subacademic_gt: String
  subacademic_gte: String
  subacademic_contains: String
  subacademic_not_contains: String
  subacademic_starts_with: String
  subacademic_not_starts_with: String
  subacademic_ends_with: String
  subacademic_not_ends_with: String
  subjects_every: SubjectWhereInput
  subjects_some: SubjectWhereInput
  subjects_none: SubjectWhereInput
  boards_every: BoardWhereInput
  boards_some: BoardWhereInput
  boards_none: BoardWhereInput
  specialization_every: SpecializationWhereInput
  specialization_some: SpecializationWhereInput
  specialization_none: SpecializationWhereInput
  competition_every: CompetitionWhereInput
  competition_some: CompetitionWhereInput
  competition_none: CompetitionWhereInput
  published: Boolean
  published_not: Boolean
  AND: [StudyCatelogWhereInput!]
  OR: [StudyCatelogWhereInput!]
  NOT: [StudyCatelogWhereInput!]
}

input StudyCatelogWhereUniqueInput {
  id: ID
}

type Subject {
  id: ID!
  name: String
  catelog: StudyCatelog!
}

type SubjectConnection {
  pageInfo: PageInfo!
  edges: [SubjectEdge]!
  aggregate: AggregateSubject!
}

input SubjectCreateInput {
  id: ID
  name: String
  catelog: StudyCatelogCreateOneWithoutSubjectsInput!
}

input SubjectCreateManyWithoutCatelogInput {
  create: [SubjectCreateWithoutCatelogInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateWithoutCatelogInput {
  id: ID
  name: String
}

type SubjectEdge {
  node: Subject!
  cursor: String!
}

enum SubjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type SubjectPreviousValues {
  id: ID!
  name: String
}

input SubjectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [SubjectScalarWhereInput!]
  OR: [SubjectScalarWhereInput!]
  NOT: [SubjectScalarWhereInput!]
}

type SubjectSubscriptionPayload {
  mutation: MutationType!
  node: Subject
  updatedFields: [String!]
  previousValues: SubjectPreviousValues
}

input SubjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SubjectWhereInput
  AND: [SubjectSubscriptionWhereInput!]
  OR: [SubjectSubscriptionWhereInput!]
  NOT: [SubjectSubscriptionWhereInput!]
}

input SubjectUpdateInput {
  name: String
  catelog: StudyCatelogUpdateOneRequiredWithoutSubjectsInput
}

input SubjectUpdateManyDataInput {
  name: String
}

input SubjectUpdateManyMutationInput {
  name: String
}

input SubjectUpdateManyWithoutCatelogInput {
  create: [SubjectCreateWithoutCatelogInput!]
  delete: [SubjectWhereUniqueInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutCatelogInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutCatelogInput!]
  deleteMany: [SubjectScalarWhereInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
}

input SubjectUpdateManyWithWhereNestedInput {
  where: SubjectScalarWhereInput!
  data: SubjectUpdateManyDataInput!
}

input SubjectUpdateWithoutCatelogDataInput {
  name: String
}

input SubjectUpdateWithWhereUniqueWithoutCatelogInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutCatelogDataInput!
}

input SubjectUpsertWithWhereUniqueWithoutCatelogInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutCatelogDataInput!
  create: SubjectCreateWithoutCatelogInput!
}

input SubjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  catelog: StudyCatelogWhereInput
  AND: [SubjectWhereInput!]
  OR: [SubjectWhereInput!]
  NOT: [SubjectWhereInput!]
}

input SubjectWhereUniqueInput {
  id: ID
}

type Subscription {
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
  baseAddress(where: BaseAddressSubscriptionWhereInput): BaseAddressSubscriptionPayload
  board(where: BoardSubscriptionWhereInput): BoardSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  competition(where: CompetitionSubscriptionWhereInput): CompetitionSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  organization(where: OrganizationSubscriptionWhereInput): OrganizationSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  specialization(where: SpecializationSubscriptionWhereInput): SpecializationSubscriptionPayload
  studyCatelog(where: StudyCatelogSubscriptionWhereInput): StudyCatelogSubscriptionPayload
  subject(where: SubjectSubscriptionWhereInput): SubjectSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address!]
  org: Organization!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  updatedAt: DateTime!
  createdAt: DateTime!
  createdBy: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  addresses: AddressCreateManyWithoutAuthorInput
  org: OrganizationCreateOneWithoutAuthorInput!
  roles: RoleCreateManyWithoutUsersInput
  createdBy: String
}

input UserCreateManyWithoutOrgInput {
  create: [UserCreateWithoutOrgInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutAddressesInput {
  create: UserCreateWithoutAddressesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRolesInput {
  create: UserCreateWithoutRolesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAddressesInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  org: OrganizationCreateOneWithoutAuthorInput!
  roles: RoleCreateManyWithoutUsersInput
  createdBy: String
}

input UserCreateWithoutCommentsInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  addresses: AddressCreateManyWithoutAuthorInput
  org: OrganizationCreateOneWithoutAuthorInput!
  roles: RoleCreateManyWithoutUsersInput
  createdBy: String
}

input UserCreateWithoutOrgInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  addresses: AddressCreateManyWithoutAuthorInput
  roles: RoleCreateManyWithoutUsersInput
  createdBy: String
}

input UserCreateWithoutPostsInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  comments: CommentCreateManyWithoutAuthorInput
  addresses: AddressCreateManyWithoutAuthorInput
  org: OrganizationCreateOneWithoutAuthorInput!
  roles: RoleCreateManyWithoutUsersInput
  createdBy: String
}

input UserCreateWithoutRolesInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  addresses: AddressCreateManyWithoutAuthorInput
  org: OrganizationCreateOneWithoutAuthorInput!
  createdBy: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  createdBy_ASC
  createdBy_DESC
}

type UserPreviousValues {
  id: ID!
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
  createdBy: String
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdBy: String
  createdBy_not: String
  createdBy_in: [String!]
  createdBy_not_in: [String!]
  createdBy_lt: String
  createdBy_lte: String
  createdBy_gt: String
  createdBy_gte: String
  createdBy_contains: String
  createdBy_not_contains: String
  createdBy_starts_with: String
  createdBy_not_starts_with: String
  createdBy_ends_with: String
  createdBy_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  firstname: String
  lastname: String
  email: String
  password: String
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  addresses: AddressUpdateManyWithoutAuthorInput
  org: OrganizationUpdateOneRequiredWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  createdBy: String
}

input UserUpdateManyDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
}

input UserUpdateManyMutationInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
}

input UserUpdateManyWithoutOrgInput {
  create: [UserCreateWithoutOrgInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutOrgInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutOrgInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutAddressesInput {
  create: UserCreateWithoutAddressesInput
  update: UserUpdateWithoutAddressesDataInput
  upsert: UserUpsertWithoutAddressesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutRolesInput {
  create: UserCreateWithoutRolesInput
  update: UserUpdateWithoutRolesDataInput
  upsert: UserUpsertWithoutRolesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutAddressesDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  org: OrganizationUpdateOneRequiredWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  createdBy: String
}

input UserUpdateWithoutCommentsDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  posts: PostUpdateManyWithoutAuthorInput
  addresses: AddressUpdateManyWithoutAuthorInput
  org: OrganizationUpdateOneRequiredWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  createdBy: String
}

input UserUpdateWithoutOrgDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  addresses: AddressUpdateManyWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  createdBy: String
}

input UserUpdateWithoutPostsDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  comments: CommentUpdateManyWithoutAuthorInput
  addresses: AddressUpdateManyWithoutAuthorInput
  org: OrganizationUpdateOneRequiredWithoutAuthorInput
  roles: RoleUpdateManyWithoutUsersInput
  createdBy: String
}

input UserUpdateWithoutRolesDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  addresses: AddressUpdateManyWithoutAuthorInput
  org: OrganizationUpdateOneRequiredWithoutAuthorInput
  createdBy: String
}

input UserUpdateWithWhereUniqueWithoutOrgInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutOrgDataInput!
}

input UserUpsertWithoutAddressesInput {
  update: UserUpdateWithoutAddressesDataInput!
  create: UserCreateWithoutAddressesInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithoutRolesInput {
  update: UserUpdateWithoutRolesDataInput!
  create: UserCreateWithoutRolesInput!
}

input UserUpsertWithWhereUniqueWithoutOrgInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutOrgDataInput!
  create: UserCreateWithoutOrgInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  addresses_every: AddressWhereInput
  addresses_some: AddressWhereInput
  addresses_none: AddressWhereInput
  org: OrganizationWhereInput
  roles_every: RoleWhereInput
  roles_some: RoleWhereInput
  roles_none: RoleWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdBy: String
  createdBy_not: String
  createdBy_in: [String!]
  createdBy_not_in: [String!]
  createdBy_lt: String
  createdBy_lte: String
  createdBy_gt: String
  createdBy_gte: String
  createdBy_contains: String
  createdBy_not_contains: String
  createdBy_starts_with: String
  createdBy_not_starts_with: String
  createdBy_ends_with: String
  createdBy_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    
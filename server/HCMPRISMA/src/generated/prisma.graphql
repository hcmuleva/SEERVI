# source: http://localhost:4466
# timestamp: Thu May 28 2020 19:33:40 GMT+0530 (India Standard Time)

type Address implements Node {
  id: ID!
  adressline: String!
  tehsil: String!
  city: String!
  district: String!
  state: String!
  pincode: String!
  personalProfile: PersonalProfile
}

"""A connection to a list of items."""
type AddressConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AddressEdge]!
  aggregate: AggregateAddress!
}

input AddressCreateInput {
  id: ID
  adressline: String!
  tehsil: String!
  city: String!
  district: String!
  state: String!
  pincode: String!
  personalProfile: PersonalProfileCreateOneWithoutAddressesInput
}

input AddressCreateManyWithoutPersonalProfileInput {
  create: [AddressCreateWithoutPersonalProfileInput!]
  connect: [AddressWhereUniqueInput!]
}

input AddressCreateWithoutPersonalProfileInput {
  id: ID
  adressline: String!
  tehsil: String!
  city: String!
  district: String!
  state: String!
  pincode: String!
}

"""An edge in a connection."""
type AddressEdge {
  """The item at the end of the edge."""
  node: Address!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AddressOrderByInput {
  id_ASC
  id_DESC
  adressline_ASC
  adressline_DESC
  tehsil_ASC
  tehsil_DESC
  city_ASC
  city_DESC
  district_ASC
  district_DESC
  state_ASC
  state_DESC
  pincode_ASC
  pincode_DESC
}

type AddressPreviousValues {
  id: ID!
  adressline: String!
  tehsil: String!
  city: String!
  district: String!
  state: String!
  pincode: String!
}

input AddressScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  adressline: String

  """All values that are not equal to given value."""
  adressline_not: String

  """All values that are contained in given list."""
  adressline_in: [String!]

  """All values that are not contained in given list."""
  adressline_not_in: [String!]

  """All values less than the given value."""
  adressline_lt: String

  """All values less than or equal the given value."""
  adressline_lte: String

  """All values greater than the given value."""
  adressline_gt: String

  """All values greater than or equal the given value."""
  adressline_gte: String

  """All values containing the given string."""
  adressline_contains: String

  """All values not containing the given string."""
  adressline_not_contains: String

  """All values starting with the given string."""
  adressline_starts_with: String

  """All values not starting with the given string."""
  adressline_not_starts_with: String

  """All values ending with the given string."""
  adressline_ends_with: String

  """All values not ending with the given string."""
  adressline_not_ends_with: String
  tehsil: String

  """All values that are not equal to given value."""
  tehsil_not: String

  """All values that are contained in given list."""
  tehsil_in: [String!]

  """All values that are not contained in given list."""
  tehsil_not_in: [String!]

  """All values less than the given value."""
  tehsil_lt: String

  """All values less than or equal the given value."""
  tehsil_lte: String

  """All values greater than the given value."""
  tehsil_gt: String

  """All values greater than or equal the given value."""
  tehsil_gte: String

  """All values containing the given string."""
  tehsil_contains: String

  """All values not containing the given string."""
  tehsil_not_contains: String

  """All values starting with the given string."""
  tehsil_starts_with: String

  """All values not starting with the given string."""
  tehsil_not_starts_with: String

  """All values ending with the given string."""
  tehsil_ends_with: String

  """All values not ending with the given string."""
  tehsil_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  district: String

  """All values that are not equal to given value."""
  district_not: String

  """All values that are contained in given list."""
  district_in: [String!]

  """All values that are not contained in given list."""
  district_not_in: [String!]

  """All values less than the given value."""
  district_lt: String

  """All values less than or equal the given value."""
  district_lte: String

  """All values greater than the given value."""
  district_gt: String

  """All values greater than or equal the given value."""
  district_gte: String

  """All values containing the given string."""
  district_contains: String

  """All values not containing the given string."""
  district_not_contains: String

  """All values starting with the given string."""
  district_starts_with: String

  """All values not starting with the given string."""
  district_not_starts_with: String

  """All values ending with the given string."""
  district_ends_with: String

  """All values not ending with the given string."""
  district_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  pincode: String

  """All values that are not equal to given value."""
  pincode_not: String

  """All values that are contained in given list."""
  pincode_in: [String!]

  """All values that are not contained in given list."""
  pincode_not_in: [String!]

  """All values less than the given value."""
  pincode_lt: String

  """All values less than or equal the given value."""
  pincode_lte: String

  """All values greater than the given value."""
  pincode_gt: String

  """All values greater than or equal the given value."""
  pincode_gte: String

  """All values containing the given string."""
  pincode_contains: String

  """All values not containing the given string."""
  pincode_not_contains: String

  """All values starting with the given string."""
  pincode_starts_with: String

  """All values not starting with the given string."""
  pincode_not_starts_with: String

  """All values ending with the given string."""
  pincode_ends_with: String

  """All values not ending with the given string."""
  pincode_not_ends_with: String
}

type AddressSubscriptionPayload {
  mutation: MutationType!
  node: Address
  updatedFields: [String!]
  previousValues: AddressPreviousValues
}

input AddressSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AddressWhereInput
}

input AddressUpdateInput {
  adressline: String
  tehsil: String
  city: String
  district: String
  state: String
  pincode: String
  personalProfile: PersonalProfileUpdateOneWithoutAddressesInput
}

input AddressUpdateManyDataInput {
  adressline: String
  tehsil: String
  city: String
  district: String
  state: String
  pincode: String
}

input AddressUpdateManyMutationInput {
  adressline: String
  tehsil: String
  city: String
  district: String
  state: String
  pincode: String
}

input AddressUpdateManyWithoutPersonalProfileInput {
  create: [AddressCreateWithoutPersonalProfileInput!]
  connect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  disconnect: [AddressWhereUniqueInput!]
  delete: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutPersonalProfileInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
  deleteMany: [AddressScalarWhereInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutPersonalProfileInput!]
}

input AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput!
  data: AddressUpdateManyDataInput!
}

input AddressUpdateWithoutPersonalProfileDataInput {
  adressline: String
  tehsil: String
  city: String
  district: String
  state: String
  pincode: String
}

input AddressUpdateWithWhereUniqueWithoutPersonalProfileInput {
  where: AddressWhereUniqueInput!
  data: AddressUpdateWithoutPersonalProfileDataInput!
}

input AddressUpsertWithWhereUniqueWithoutPersonalProfileInput {
  where: AddressWhereUniqueInput!
  update: AddressUpdateWithoutPersonalProfileDataInput!
  create: AddressCreateWithoutPersonalProfileInput!
}

input AddressWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  adressline: String

  """All values that are not equal to given value."""
  adressline_not: String

  """All values that are contained in given list."""
  adressline_in: [String!]

  """All values that are not contained in given list."""
  adressline_not_in: [String!]

  """All values less than the given value."""
  adressline_lt: String

  """All values less than or equal the given value."""
  adressline_lte: String

  """All values greater than the given value."""
  adressline_gt: String

  """All values greater than or equal the given value."""
  adressline_gte: String

  """All values containing the given string."""
  adressline_contains: String

  """All values not containing the given string."""
  adressline_not_contains: String

  """All values starting with the given string."""
  adressline_starts_with: String

  """All values not starting with the given string."""
  adressline_not_starts_with: String

  """All values ending with the given string."""
  adressline_ends_with: String

  """All values not ending with the given string."""
  adressline_not_ends_with: String
  tehsil: String

  """All values that are not equal to given value."""
  tehsil_not: String

  """All values that are contained in given list."""
  tehsil_in: [String!]

  """All values that are not contained in given list."""
  tehsil_not_in: [String!]

  """All values less than the given value."""
  tehsil_lt: String

  """All values less than or equal the given value."""
  tehsil_lte: String

  """All values greater than the given value."""
  tehsil_gt: String

  """All values greater than or equal the given value."""
  tehsil_gte: String

  """All values containing the given string."""
  tehsil_contains: String

  """All values not containing the given string."""
  tehsil_not_contains: String

  """All values starting with the given string."""
  tehsil_starts_with: String

  """All values not starting with the given string."""
  tehsil_not_starts_with: String

  """All values ending with the given string."""
  tehsil_ends_with: String

  """All values not ending with the given string."""
  tehsil_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  district: String

  """All values that are not equal to given value."""
  district_not: String

  """All values that are contained in given list."""
  district_in: [String!]

  """All values that are not contained in given list."""
  district_not_in: [String!]

  """All values less than the given value."""
  district_lt: String

  """All values less than or equal the given value."""
  district_lte: String

  """All values greater than the given value."""
  district_gt: String

  """All values greater than or equal the given value."""
  district_gte: String

  """All values containing the given string."""
  district_contains: String

  """All values not containing the given string."""
  district_not_contains: String

  """All values starting with the given string."""
  district_starts_with: String

  """All values not starting with the given string."""
  district_not_starts_with: String

  """All values ending with the given string."""
  district_ends_with: String

  """All values not ending with the given string."""
  district_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  pincode: String

  """All values that are not equal to given value."""
  pincode_not: String

  """All values that are contained in given list."""
  pincode_in: [String!]

  """All values that are not contained in given list."""
  pincode_not_in: [String!]

  """All values less than the given value."""
  pincode_lt: String

  """All values less than or equal the given value."""
  pincode_lte: String

  """All values greater than the given value."""
  pincode_gt: String

  """All values greater than or equal the given value."""
  pincode_gte: String

  """All values containing the given string."""
  pincode_contains: String

  """All values not containing the given string."""
  pincode_not_contains: String

  """All values starting with the given string."""
  pincode_starts_with: String

  """All values not starting with the given string."""
  pincode_not_starts_with: String

  """All values ending with the given string."""
  pincode_ends_with: String

  """All values not ending with the given string."""
  pincode_not_ends_with: String
  personalProfile: PersonalProfileWhereInput
}

input AddressWhereUniqueInput {
  id: ID
}

type AggregateAddress {
  count: Int!
}

type AggregateBookmark {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateContent {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateEducationProfile {
  count: Int!
}

type AggregateExam {
  count: Int!
}

type AggregateExample {
  count: Int!
}

type AggregateFormula {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateMedium {
  count: Int!
}

type AggregateNote {
  count: Int!
}

type AggregateOption {
  count: Int!
}

type AggregateOrganization {
  count: Int!
}

type AggregatePersonalProfile {
  count: Int!
}

type AggregatePoll {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateProfile {
  count: Int!
}

type AggregateQuestion {
  count: Int!
}

type AggregateResult {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateStd {
  count: Int!
}

type AggregateSubGroup {
  count: Int!
}

type AggregateSubject {
  count: Int!
}

type AggregateSubjectSubscription {
  count: Int!
}

type AggregateSuborg {
  count: Int!
}

type AggregateTipsTrick {
  count: Int!
}

type AggregateTopic {
  count: Int!
}

type AggregateUnit {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserRole {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Bookmark implements Node {
  id: ID!
  name: String!
  userid: User!
  updatedAt: DateTime!
  createdAt: DateTime!
  subject: Subject
  unit: Unit
  topic: Topic
}

"""A connection to a list of items."""
type BookmarkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookmarkEdge]!
  aggregate: AggregateBookmark!
}

input BookmarkCreateInput {
  id: ID
  name: String!
  userid: UserCreateOneWithoutBookmarksInput!
  subject: SubjectCreateOneWithoutBookmarksInput
  unit: UnitCreateOneWithoutBookmarksInput
  topic: TopicCreateOneWithoutBookmarksInput
}

input BookmarkCreateManyWithoutSubjectInput {
  create: [BookmarkCreateWithoutSubjectInput!]
  connect: [BookmarkWhereUniqueInput!]
}

input BookmarkCreateManyWithoutTopicInput {
  create: [BookmarkCreateWithoutTopicInput!]
  connect: [BookmarkWhereUniqueInput!]
}

input BookmarkCreateManyWithoutUnitInput {
  create: [BookmarkCreateWithoutUnitInput!]
  connect: [BookmarkWhereUniqueInput!]
}

input BookmarkCreateManyWithoutUseridInput {
  create: [BookmarkCreateWithoutUseridInput!]
  connect: [BookmarkWhereUniqueInput!]
}

input BookmarkCreateWithoutSubjectInput {
  id: ID
  name: String!
  userid: UserCreateOneWithoutBookmarksInput!
  unit: UnitCreateOneWithoutBookmarksInput
  topic: TopicCreateOneWithoutBookmarksInput
}

input BookmarkCreateWithoutTopicInput {
  id: ID
  name: String!
  userid: UserCreateOneWithoutBookmarksInput!
  subject: SubjectCreateOneWithoutBookmarksInput
  unit: UnitCreateOneWithoutBookmarksInput
}

input BookmarkCreateWithoutUnitInput {
  id: ID
  name: String!
  userid: UserCreateOneWithoutBookmarksInput!
  subject: SubjectCreateOneWithoutBookmarksInput
  topic: TopicCreateOneWithoutBookmarksInput
}

input BookmarkCreateWithoutUseridInput {
  id: ID
  name: String!
  subject: SubjectCreateOneWithoutBookmarksInput
  unit: UnitCreateOneWithoutBookmarksInput
  topic: TopicCreateOneWithoutBookmarksInput
}

"""An edge in a connection."""
type BookmarkEdge {
  """The item at the end of the edge."""
  node: Bookmark!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookmarkOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BookmarkPreviousValues {
  id: ID!
  name: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input BookmarkScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BookmarkScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookmarkScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookmarkScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type BookmarkSubscriptionPayload {
  mutation: MutationType!
  node: Bookmark
  updatedFields: [String!]
  previousValues: BookmarkPreviousValues
}

input BookmarkSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookmarkSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookmarkSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookmarkSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookmarkWhereInput
}

input BookmarkUpdateInput {
  name: String
  userid: UserUpdateOneRequiredWithoutBookmarksInput
  subject: SubjectUpdateOneWithoutBookmarksInput
  unit: UnitUpdateOneWithoutBookmarksInput
  topic: TopicUpdateOneWithoutBookmarksInput
}

input BookmarkUpdateManyDataInput {
  name: String
}

input BookmarkUpdateManyMutationInput {
  name: String
}

input BookmarkUpdateManyWithoutSubjectInput {
  create: [BookmarkCreateWithoutSubjectInput!]
  connect: [BookmarkWhereUniqueInput!]
  set: [BookmarkWhereUniqueInput!]
  disconnect: [BookmarkWhereUniqueInput!]
  delete: [BookmarkWhereUniqueInput!]
  update: [BookmarkUpdateWithWhereUniqueWithoutSubjectInput!]
  updateMany: [BookmarkUpdateManyWithWhereNestedInput!]
  deleteMany: [BookmarkScalarWhereInput!]
  upsert: [BookmarkUpsertWithWhereUniqueWithoutSubjectInput!]
}

input BookmarkUpdateManyWithoutTopicInput {
  create: [BookmarkCreateWithoutTopicInput!]
  connect: [BookmarkWhereUniqueInput!]
  set: [BookmarkWhereUniqueInput!]
  disconnect: [BookmarkWhereUniqueInput!]
  delete: [BookmarkWhereUniqueInput!]
  update: [BookmarkUpdateWithWhereUniqueWithoutTopicInput!]
  updateMany: [BookmarkUpdateManyWithWhereNestedInput!]
  deleteMany: [BookmarkScalarWhereInput!]
  upsert: [BookmarkUpsertWithWhereUniqueWithoutTopicInput!]
}

input BookmarkUpdateManyWithoutUnitInput {
  create: [BookmarkCreateWithoutUnitInput!]
  connect: [BookmarkWhereUniqueInput!]
  set: [BookmarkWhereUniqueInput!]
  disconnect: [BookmarkWhereUniqueInput!]
  delete: [BookmarkWhereUniqueInput!]
  update: [BookmarkUpdateWithWhereUniqueWithoutUnitInput!]
  updateMany: [BookmarkUpdateManyWithWhereNestedInput!]
  deleteMany: [BookmarkScalarWhereInput!]
  upsert: [BookmarkUpsertWithWhereUniqueWithoutUnitInput!]
}

input BookmarkUpdateManyWithoutUseridInput {
  create: [BookmarkCreateWithoutUseridInput!]
  connect: [BookmarkWhereUniqueInput!]
  set: [BookmarkWhereUniqueInput!]
  disconnect: [BookmarkWhereUniqueInput!]
  delete: [BookmarkWhereUniqueInput!]
  update: [BookmarkUpdateWithWhereUniqueWithoutUseridInput!]
  updateMany: [BookmarkUpdateManyWithWhereNestedInput!]
  deleteMany: [BookmarkScalarWhereInput!]
  upsert: [BookmarkUpsertWithWhereUniqueWithoutUseridInput!]
}

input BookmarkUpdateManyWithWhereNestedInput {
  where: BookmarkScalarWhereInput!
  data: BookmarkUpdateManyDataInput!
}

input BookmarkUpdateWithoutSubjectDataInput {
  name: String
  userid: UserUpdateOneRequiredWithoutBookmarksInput
  unit: UnitUpdateOneWithoutBookmarksInput
  topic: TopicUpdateOneWithoutBookmarksInput
}

input BookmarkUpdateWithoutTopicDataInput {
  name: String
  userid: UserUpdateOneRequiredWithoutBookmarksInput
  subject: SubjectUpdateOneWithoutBookmarksInput
  unit: UnitUpdateOneWithoutBookmarksInput
}

input BookmarkUpdateWithoutUnitDataInput {
  name: String
  userid: UserUpdateOneRequiredWithoutBookmarksInput
  subject: SubjectUpdateOneWithoutBookmarksInput
  topic: TopicUpdateOneWithoutBookmarksInput
}

input BookmarkUpdateWithoutUseridDataInput {
  name: String
  subject: SubjectUpdateOneWithoutBookmarksInput
  unit: UnitUpdateOneWithoutBookmarksInput
  topic: TopicUpdateOneWithoutBookmarksInput
}

input BookmarkUpdateWithWhereUniqueWithoutSubjectInput {
  where: BookmarkWhereUniqueInput!
  data: BookmarkUpdateWithoutSubjectDataInput!
}

input BookmarkUpdateWithWhereUniqueWithoutTopicInput {
  where: BookmarkWhereUniqueInput!
  data: BookmarkUpdateWithoutTopicDataInput!
}

input BookmarkUpdateWithWhereUniqueWithoutUnitInput {
  where: BookmarkWhereUniqueInput!
  data: BookmarkUpdateWithoutUnitDataInput!
}

input BookmarkUpdateWithWhereUniqueWithoutUseridInput {
  where: BookmarkWhereUniqueInput!
  data: BookmarkUpdateWithoutUseridDataInput!
}

input BookmarkUpsertWithWhereUniqueWithoutSubjectInput {
  where: BookmarkWhereUniqueInput!
  update: BookmarkUpdateWithoutSubjectDataInput!
  create: BookmarkCreateWithoutSubjectInput!
}

input BookmarkUpsertWithWhereUniqueWithoutTopicInput {
  where: BookmarkWhereUniqueInput!
  update: BookmarkUpdateWithoutTopicDataInput!
  create: BookmarkCreateWithoutTopicInput!
}

input BookmarkUpsertWithWhereUniqueWithoutUnitInput {
  where: BookmarkWhereUniqueInput!
  update: BookmarkUpdateWithoutUnitDataInput!
  create: BookmarkCreateWithoutUnitInput!
}

input BookmarkUpsertWithWhereUniqueWithoutUseridInput {
  where: BookmarkWhereUniqueInput!
  update: BookmarkUpdateWithoutUseridDataInput!
  create: BookmarkCreateWithoutUseridInput!
}

input BookmarkWhereInput {
  """Logical AND on all given filters."""
  AND: [BookmarkWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookmarkWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookmarkWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  userid: UserWhereInput
  subject: SubjectWhereInput
  unit: UnitWhereInput
  topic: TopicWhereInput
}

input BookmarkWhereUniqueInput {
  id: ID
}

enum Color {
  RED
  BLLUE
  GREEN
}

type Comment implements Node {
  id: ID!
  text: String!
  author: User!
  post: Post!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  text: String!
  author: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutAuthorInput {
  id: ID
  text: String!
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutPostInput {
  id: ID
  text: String!
  author: UserCreateOneWithoutCommentsInput!
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input CommentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  text: String
}

input CommentUpdateManyMutationInput {
  text: String
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutAuthorDataInput {
  text: String
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutPostDataInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author: UserWhereInput
  post: PostWhereInput
}

input CommentWhereUniqueInput {
  id: ID
}

type Content implements Node {
  id: ID!
  name: String!
  level: Int
  fileInfo: Json
  type: String!
  url: String
  subject: Subject
  unit: Unit
  topic: Topic
  createdBy: User
  updateBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type ContentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContentEdge]!
  aggregate: AggregateContent!
}

input ContentCreateInput {
  id: ID
  name: String!
  level: Int
  fileInfo: Json
  type: String!
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutContentsInput
  unit: UnitCreateOneWithoutContentsInput
  topic: TopicCreateOneWithoutContentsInput
  createdBy: UserCreateOneWithoutContentByMeInput
  updateBy: UserCreateManyWithoutContentUpdateByMeInput
}

input ContentCreateManyWithoutCreatedByInput {
  create: [ContentCreateWithoutCreatedByInput!]
  connect: [ContentWhereUniqueInput!]
}

input ContentCreateManyWithoutSubjectInput {
  create: [ContentCreateWithoutSubjectInput!]
  connect: [ContentWhereUniqueInput!]
}

input ContentCreateManyWithoutTopicInput {
  create: [ContentCreateWithoutTopicInput!]
  connect: [ContentWhereUniqueInput!]
}

input ContentCreateManyWithoutUnitInput {
  create: [ContentCreateWithoutUnitInput!]
  connect: [ContentWhereUniqueInput!]
}

input ContentCreateManyWithoutUpdateByInput {
  create: [ContentCreateWithoutUpdateByInput!]
  connect: [ContentWhereUniqueInput!]
}

input ContentCreateWithoutCreatedByInput {
  id: ID
  name: String!
  level: Int
  fileInfo: Json
  type: String!
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutContentsInput
  unit: UnitCreateOneWithoutContentsInput
  topic: TopicCreateOneWithoutContentsInput
  updateBy: UserCreateManyWithoutContentUpdateByMeInput
}

input ContentCreateWithoutSubjectInput {
  id: ID
  name: String!
  level: Int
  fileInfo: Json
  type: String!
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  unit: UnitCreateOneWithoutContentsInput
  topic: TopicCreateOneWithoutContentsInput
  createdBy: UserCreateOneWithoutContentByMeInput
  updateBy: UserCreateManyWithoutContentUpdateByMeInput
}

input ContentCreateWithoutTopicInput {
  id: ID
  name: String!
  level: Int
  fileInfo: Json
  type: String!
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutContentsInput
  unit: UnitCreateOneWithoutContentsInput
  createdBy: UserCreateOneWithoutContentByMeInput
  updateBy: UserCreateManyWithoutContentUpdateByMeInput
}

input ContentCreateWithoutUnitInput {
  id: ID
  name: String!
  level: Int
  fileInfo: Json
  type: String!
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutContentsInput
  topic: TopicCreateOneWithoutContentsInput
  createdBy: UserCreateOneWithoutContentByMeInput
  updateBy: UserCreateManyWithoutContentUpdateByMeInput
}

input ContentCreateWithoutUpdateByInput {
  id: ID
  name: String!
  level: Int
  fileInfo: Json
  type: String!
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutContentsInput
  unit: UnitCreateOneWithoutContentsInput
  topic: TopicCreateOneWithoutContentsInput
  createdBy: UserCreateOneWithoutContentByMeInput
}

"""An edge in a connection."""
type ContentEdge {
  """The item at the end of the edge."""
  node: Content!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  level_ASC
  level_DESC
  fileInfo_ASC
  fileInfo_DESC
  type_ASC
  type_DESC
  url_ASC
  url_DESC
  plantDate_ASC
  plantDate_DESC
  isPublished_ASC
  isPublished_DESC
  state_ASC
  state_DESC
  status_ASC
  status_DESC
  available_ASC
  available_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ContentPreviousValues {
  id: ID!
  name: String!
  level: Int
  fileInfo: Json
  type: String!
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input ContentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ContentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  level: Int

  """All values that are not equal to given value."""
  level_not: Int

  """All values that are contained in given list."""
  level_in: [Int!]

  """All values that are not contained in given list."""
  level_not_in: [Int!]

  """All values less than the given value."""
  level_lt: Int

  """All values less than or equal the given value."""
  level_lte: Int

  """All values greater than the given value."""
  level_gt: Int

  """All values greater than or equal the given value."""
  level_gte: Int
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  plantDate: DateTime

  """All values that are not equal to given value."""
  plantDate_not: DateTime

  """All values that are contained in given list."""
  plantDate_in: [DateTime!]

  """All values that are not contained in given list."""
  plantDate_not_in: [DateTime!]

  """All values less than the given value."""
  plantDate_lt: DateTime

  """All values less than or equal the given value."""
  plantDate_lte: DateTime

  """All values greater than the given value."""
  plantDate_gt: DateTime

  """All values greater than or equal the given value."""
  plantDate_gte: DateTime
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  available: String

  """All values that are not equal to given value."""
  available_not: String

  """All values that are contained in given list."""
  available_in: [String!]

  """All values that are not contained in given list."""
  available_not_in: [String!]

  """All values less than the given value."""
  available_lt: String

  """All values less than or equal the given value."""
  available_lte: String

  """All values greater than the given value."""
  available_gt: String

  """All values greater than or equal the given value."""
  available_gte: String

  """All values containing the given string."""
  available_contains: String

  """All values not containing the given string."""
  available_not_contains: String

  """All values starting with the given string."""
  available_starts_with: String

  """All values not starting with the given string."""
  available_not_starts_with: String

  """All values ending with the given string."""
  available_ends_with: String

  """All values not ending with the given string."""
  available_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type ContentSubscriptionPayload {
  mutation: MutationType!
  node: Content
  updatedFields: [String!]
  previousValues: ContentPreviousValues
}

input ContentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContentWhereInput
}

input ContentUpdateInput {
  name: String
  level: Int
  fileInfo: Json
  type: String
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutContentsInput
  unit: UnitUpdateOneWithoutContentsInput
  topic: TopicUpdateOneWithoutContentsInput
  createdBy: UserUpdateOneWithoutContentByMeInput
  updateBy: UserUpdateManyWithoutContentUpdateByMeInput
}

input ContentUpdateManyDataInput {
  name: String
  level: Int
  fileInfo: Json
  type: String
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input ContentUpdateManyMutationInput {
  name: String
  level: Int
  fileInfo: Json
  type: String
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input ContentUpdateManyWithoutCreatedByInput {
  create: [ContentCreateWithoutCreatedByInput!]
  connect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
  disconnect: [ContentWhereUniqueInput!]
  delete: [ContentWhereUniqueInput!]
  update: [ContentUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [ContentUpdateManyWithWhereNestedInput!]
  deleteMany: [ContentScalarWhereInput!]
  upsert: [ContentUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input ContentUpdateManyWithoutSubjectInput {
  create: [ContentCreateWithoutSubjectInput!]
  connect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
  disconnect: [ContentWhereUniqueInput!]
  delete: [ContentWhereUniqueInput!]
  update: [ContentUpdateWithWhereUniqueWithoutSubjectInput!]
  updateMany: [ContentUpdateManyWithWhereNestedInput!]
  deleteMany: [ContentScalarWhereInput!]
  upsert: [ContentUpsertWithWhereUniqueWithoutSubjectInput!]
}

input ContentUpdateManyWithoutTopicInput {
  create: [ContentCreateWithoutTopicInput!]
  connect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
  disconnect: [ContentWhereUniqueInput!]
  delete: [ContentWhereUniqueInput!]
  update: [ContentUpdateWithWhereUniqueWithoutTopicInput!]
  updateMany: [ContentUpdateManyWithWhereNestedInput!]
  deleteMany: [ContentScalarWhereInput!]
  upsert: [ContentUpsertWithWhereUniqueWithoutTopicInput!]
}

input ContentUpdateManyWithoutUnitInput {
  create: [ContentCreateWithoutUnitInput!]
  connect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
  disconnect: [ContentWhereUniqueInput!]
  delete: [ContentWhereUniqueInput!]
  update: [ContentUpdateWithWhereUniqueWithoutUnitInput!]
  updateMany: [ContentUpdateManyWithWhereNestedInput!]
  deleteMany: [ContentScalarWhereInput!]
  upsert: [ContentUpsertWithWhereUniqueWithoutUnitInput!]
}

input ContentUpdateManyWithoutUpdateByInput {
  create: [ContentCreateWithoutUpdateByInput!]
  connect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
  disconnect: [ContentWhereUniqueInput!]
  delete: [ContentWhereUniqueInput!]
  update: [ContentUpdateWithWhereUniqueWithoutUpdateByInput!]
  updateMany: [ContentUpdateManyWithWhereNestedInput!]
  deleteMany: [ContentScalarWhereInput!]
  upsert: [ContentUpsertWithWhereUniqueWithoutUpdateByInput!]
}

input ContentUpdateManyWithWhereNestedInput {
  where: ContentScalarWhereInput!
  data: ContentUpdateManyDataInput!
}

input ContentUpdateWithoutCreatedByDataInput {
  name: String
  level: Int
  fileInfo: Json
  type: String
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutContentsInput
  unit: UnitUpdateOneWithoutContentsInput
  topic: TopicUpdateOneWithoutContentsInput
  updateBy: UserUpdateManyWithoutContentUpdateByMeInput
}

input ContentUpdateWithoutSubjectDataInput {
  name: String
  level: Int
  fileInfo: Json
  type: String
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  unit: UnitUpdateOneWithoutContentsInput
  topic: TopicUpdateOneWithoutContentsInput
  createdBy: UserUpdateOneWithoutContentByMeInput
  updateBy: UserUpdateManyWithoutContentUpdateByMeInput
}

input ContentUpdateWithoutTopicDataInput {
  name: String
  level: Int
  fileInfo: Json
  type: String
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutContentsInput
  unit: UnitUpdateOneWithoutContentsInput
  createdBy: UserUpdateOneWithoutContentByMeInput
  updateBy: UserUpdateManyWithoutContentUpdateByMeInput
}

input ContentUpdateWithoutUnitDataInput {
  name: String
  level: Int
  fileInfo: Json
  type: String
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutContentsInput
  topic: TopicUpdateOneWithoutContentsInput
  createdBy: UserUpdateOneWithoutContentByMeInput
  updateBy: UserUpdateManyWithoutContentUpdateByMeInput
}

input ContentUpdateWithoutUpdateByDataInput {
  name: String
  level: Int
  fileInfo: Json
  type: String
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutContentsInput
  unit: UnitUpdateOneWithoutContentsInput
  topic: TopicUpdateOneWithoutContentsInput
  createdBy: UserUpdateOneWithoutContentByMeInput
}

input ContentUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ContentWhereUniqueInput!
  data: ContentUpdateWithoutCreatedByDataInput!
}

input ContentUpdateWithWhereUniqueWithoutSubjectInput {
  where: ContentWhereUniqueInput!
  data: ContentUpdateWithoutSubjectDataInput!
}

input ContentUpdateWithWhereUniqueWithoutTopicInput {
  where: ContentWhereUniqueInput!
  data: ContentUpdateWithoutTopicDataInput!
}

input ContentUpdateWithWhereUniqueWithoutUnitInput {
  where: ContentWhereUniqueInput!
  data: ContentUpdateWithoutUnitDataInput!
}

input ContentUpdateWithWhereUniqueWithoutUpdateByInput {
  where: ContentWhereUniqueInput!
  data: ContentUpdateWithoutUpdateByDataInput!
}

input ContentUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ContentWhereUniqueInput!
  update: ContentUpdateWithoutCreatedByDataInput!
  create: ContentCreateWithoutCreatedByInput!
}

input ContentUpsertWithWhereUniqueWithoutSubjectInput {
  where: ContentWhereUniqueInput!
  update: ContentUpdateWithoutSubjectDataInput!
  create: ContentCreateWithoutSubjectInput!
}

input ContentUpsertWithWhereUniqueWithoutTopicInput {
  where: ContentWhereUniqueInput!
  update: ContentUpdateWithoutTopicDataInput!
  create: ContentCreateWithoutTopicInput!
}

input ContentUpsertWithWhereUniqueWithoutUnitInput {
  where: ContentWhereUniqueInput!
  update: ContentUpdateWithoutUnitDataInput!
  create: ContentCreateWithoutUnitInput!
}

input ContentUpsertWithWhereUniqueWithoutUpdateByInput {
  where: ContentWhereUniqueInput!
  update: ContentUpdateWithoutUpdateByDataInput!
  create: ContentCreateWithoutUpdateByInput!
}

input ContentWhereInput {
  """Logical AND on all given filters."""
  AND: [ContentWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  level: Int

  """All values that are not equal to given value."""
  level_not: Int

  """All values that are contained in given list."""
  level_in: [Int!]

  """All values that are not contained in given list."""
  level_not_in: [Int!]

  """All values less than the given value."""
  level_lt: Int

  """All values less than or equal the given value."""
  level_lte: Int

  """All values greater than the given value."""
  level_gt: Int

  """All values greater than or equal the given value."""
  level_gte: Int
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  plantDate: DateTime

  """All values that are not equal to given value."""
  plantDate_not: DateTime

  """All values that are contained in given list."""
  plantDate_in: [DateTime!]

  """All values that are not contained in given list."""
  plantDate_not_in: [DateTime!]

  """All values less than the given value."""
  plantDate_lt: DateTime

  """All values less than or equal the given value."""
  plantDate_lte: DateTime

  """All values greater than the given value."""
  plantDate_gt: DateTime

  """All values greater than or equal the given value."""
  plantDate_gte: DateTime
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  available: String

  """All values that are not equal to given value."""
  available_not: String

  """All values that are contained in given list."""
  available_in: [String!]

  """All values that are not contained in given list."""
  available_not_in: [String!]

  """All values less than the given value."""
  available_lt: String

  """All values less than or equal the given value."""
  available_lte: String

  """All values greater than the given value."""
  available_gt: String

  """All values greater than or equal the given value."""
  available_gte: String

  """All values containing the given string."""
  available_contains: String

  """All values not containing the given string."""
  available_not_contains: String

  """All values starting with the given string."""
  available_starts_with: String

  """All values not starting with the given string."""
  available_not_starts_with: String

  """All values ending with the given string."""
  available_ends_with: String

  """All values not ending with the given string."""
  available_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  subject: SubjectWhereInput
  unit: UnitWhereInput
  topic: TopicWhereInput
  createdBy: UserWhereInput
  updateBy_every: UserWhereInput
  updateBy_some: UserWhereInput
  updateBy_none: UserWhereInput
}

input ContentWhereUniqueInput {
  id: ID
}

type Course implements Node {
  id: ID!
  name: String
  coursecode: String
}

"""A connection to a list of items."""
type CourseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  id: ID
  name: String
  coursecode: String
}

input CourseCreateOneInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
}

"""An edge in a connection."""
type CourseEdge {
  """The item at the end of the edge."""
  node: Course!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  coursecode_ASC
  coursecode_DESC
}

type CoursePreviousValues {
  id: ID!
  name: String
  coursecode: String
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
}

input CourseUpdateDataInput {
  name: String
  coursecode: String
}

input CourseUpdateInput {
  name: String
  coursecode: String
}

input CourseUpdateManyMutationInput {
  name: String
  coursecode: String
}

input CourseUpdateOneInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CourseUpdateDataInput
  upsert: CourseUpsertNestedInput
}

input CourseUpsertNestedInput {
  update: CourseUpdateDataInput!
  create: CourseCreateInput!
}

input CourseWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  coursecode: String

  """All values that are not equal to given value."""
  coursecode_not: String

  """All values that are contained in given list."""
  coursecode_in: [String!]

  """All values that are not contained in given list."""
  coursecode_not_in: [String!]

  """All values less than the given value."""
  coursecode_lt: String

  """All values less than or equal the given value."""
  coursecode_lte: String

  """All values greater than the given value."""
  coursecode_gt: String

  """All values greater than or equal the given value."""
  coursecode_gte: String

  """All values containing the given string."""
  coursecode_contains: String

  """All values not containing the given string."""
  coursecode_not_contains: String

  """All values starting with the given string."""
  coursecode_starts_with: String

  """All values not starting with the given string."""
  coursecode_not_starts_with: String

  """All values ending with the given string."""
  coursecode_ends_with: String

  """All values not ending with the given string."""
  coursecode_not_ends_with: String
}

input CourseWhereUniqueInput {
  id: ID
}

scalar DateTime

type EducationProfile implements Node {
  id: ID!
  name: String!
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  std(where: StdWhereInput, orderBy: StdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Std!]
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
  profileId: Profile!
}

"""A connection to a list of items."""
type EducationProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EducationProfileEdge]!
  aggregate: AggregateEducationProfile!
}

input EducationProfileCreateInput {
  id: ID
  name: String!
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
  std: StdCreateManyWithoutEducationprofilesInput
  profileId: ProfileCreateOneWithoutEducationProfilesInput!
}

input EducationProfileCreateManyWithoutProfileIdInput {
  create: [EducationProfileCreateWithoutProfileIdInput!]
  connect: [EducationProfileWhereUniqueInput!]
}

input EducationProfileCreateManyWithoutStdInput {
  create: [EducationProfileCreateWithoutStdInput!]
  connect: [EducationProfileWhereUniqueInput!]
}

input EducationProfileCreateWithoutProfileIdInput {
  id: ID
  name: String!
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
  std: StdCreateManyWithoutEducationprofilesInput
}

input EducationProfileCreateWithoutStdInput {
  id: ID
  name: String!
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
  profileId: ProfileCreateOneWithoutEducationProfilesInput!
}

"""An edge in a connection."""
type EducationProfileEdge {
  """The item at the end of the edge."""
  node: EducationProfile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EducationProfileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  profiileType_ASC
  profiileType_DESC
  educationLevel_ASC
  educationLevel_DESC
  educationType_ASC
  educationType_DESC
  specialization_ASC
  specialization_DESC
  startedYear_ASC
  startedYear_DESC
  completedYear_ASC
  completedYear_DESC
  result_ASC
  result_DESC
  status_ASC
  status_DESC
  remark_ASC
  remark_DESC
}

type EducationProfilePreviousValues {
  id: ID!
  name: String!
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
}

input EducationProfileScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EducationProfileScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EducationProfileScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EducationProfileScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  profiileType: String

  """All values that are not equal to given value."""
  profiileType_not: String

  """All values that are contained in given list."""
  profiileType_in: [String!]

  """All values that are not contained in given list."""
  profiileType_not_in: [String!]

  """All values less than the given value."""
  profiileType_lt: String

  """All values less than or equal the given value."""
  profiileType_lte: String

  """All values greater than the given value."""
  profiileType_gt: String

  """All values greater than or equal the given value."""
  profiileType_gte: String

  """All values containing the given string."""
  profiileType_contains: String

  """All values not containing the given string."""
  profiileType_not_contains: String

  """All values starting with the given string."""
  profiileType_starts_with: String

  """All values not starting with the given string."""
  profiileType_not_starts_with: String

  """All values ending with the given string."""
  profiileType_ends_with: String

  """All values not ending with the given string."""
  profiileType_not_ends_with: String
  educationLevel: String

  """All values that are not equal to given value."""
  educationLevel_not: String

  """All values that are contained in given list."""
  educationLevel_in: [String!]

  """All values that are not contained in given list."""
  educationLevel_not_in: [String!]

  """All values less than the given value."""
  educationLevel_lt: String

  """All values less than or equal the given value."""
  educationLevel_lte: String

  """All values greater than the given value."""
  educationLevel_gt: String

  """All values greater than or equal the given value."""
  educationLevel_gte: String

  """All values containing the given string."""
  educationLevel_contains: String

  """All values not containing the given string."""
  educationLevel_not_contains: String

  """All values starting with the given string."""
  educationLevel_starts_with: String

  """All values not starting with the given string."""
  educationLevel_not_starts_with: String

  """All values ending with the given string."""
  educationLevel_ends_with: String

  """All values not ending with the given string."""
  educationLevel_not_ends_with: String
  educationType: String

  """All values that are not equal to given value."""
  educationType_not: String

  """All values that are contained in given list."""
  educationType_in: [String!]

  """All values that are not contained in given list."""
  educationType_not_in: [String!]

  """All values less than the given value."""
  educationType_lt: String

  """All values less than or equal the given value."""
  educationType_lte: String

  """All values greater than the given value."""
  educationType_gt: String

  """All values greater than or equal the given value."""
  educationType_gte: String

  """All values containing the given string."""
  educationType_contains: String

  """All values not containing the given string."""
  educationType_not_contains: String

  """All values starting with the given string."""
  educationType_starts_with: String

  """All values not starting with the given string."""
  educationType_not_starts_with: String

  """All values ending with the given string."""
  educationType_ends_with: String

  """All values not ending with the given string."""
  educationType_not_ends_with: String
  specialization: String

  """All values that are not equal to given value."""
  specialization_not: String

  """All values that are contained in given list."""
  specialization_in: [String!]

  """All values that are not contained in given list."""
  specialization_not_in: [String!]

  """All values less than the given value."""
  specialization_lt: String

  """All values less than or equal the given value."""
  specialization_lte: String

  """All values greater than the given value."""
  specialization_gt: String

  """All values greater than or equal the given value."""
  specialization_gte: String

  """All values containing the given string."""
  specialization_contains: String

  """All values not containing the given string."""
  specialization_not_contains: String

  """All values starting with the given string."""
  specialization_starts_with: String

  """All values not starting with the given string."""
  specialization_not_starts_with: String

  """All values ending with the given string."""
  specialization_ends_with: String

  """All values not ending with the given string."""
  specialization_not_ends_with: String
  startedYear: DateTime

  """All values that are not equal to given value."""
  startedYear_not: DateTime

  """All values that are contained in given list."""
  startedYear_in: [DateTime!]

  """All values that are not contained in given list."""
  startedYear_not_in: [DateTime!]

  """All values less than the given value."""
  startedYear_lt: DateTime

  """All values less than or equal the given value."""
  startedYear_lte: DateTime

  """All values greater than the given value."""
  startedYear_gt: DateTime

  """All values greater than or equal the given value."""
  startedYear_gte: DateTime
  completedYear: DateTime

  """All values that are not equal to given value."""
  completedYear_not: DateTime

  """All values that are contained in given list."""
  completedYear_in: [DateTime!]

  """All values that are not contained in given list."""
  completedYear_not_in: [DateTime!]

  """All values less than the given value."""
  completedYear_lt: DateTime

  """All values less than or equal the given value."""
  completedYear_lte: DateTime

  """All values greater than the given value."""
  completedYear_gt: DateTime

  """All values greater than or equal the given value."""
  completedYear_gte: DateTime
  result: String

  """All values that are not equal to given value."""
  result_not: String

  """All values that are contained in given list."""
  result_in: [String!]

  """All values that are not contained in given list."""
  result_not_in: [String!]

  """All values less than the given value."""
  result_lt: String

  """All values less than or equal the given value."""
  result_lte: String

  """All values greater than the given value."""
  result_gt: String

  """All values greater than or equal the given value."""
  result_gte: String

  """All values containing the given string."""
  result_contains: String

  """All values not containing the given string."""
  result_not_contains: String

  """All values starting with the given string."""
  result_starts_with: String

  """All values not starting with the given string."""
  result_not_starts_with: String

  """All values ending with the given string."""
  result_ends_with: String

  """All values not ending with the given string."""
  result_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  remark: String

  """All values that are not equal to given value."""
  remark_not: String

  """All values that are contained in given list."""
  remark_in: [String!]

  """All values that are not contained in given list."""
  remark_not_in: [String!]

  """All values less than the given value."""
  remark_lt: String

  """All values less than or equal the given value."""
  remark_lte: String

  """All values greater than the given value."""
  remark_gt: String

  """All values greater than or equal the given value."""
  remark_gte: String

  """All values containing the given string."""
  remark_contains: String

  """All values not containing the given string."""
  remark_not_contains: String

  """All values starting with the given string."""
  remark_starts_with: String

  """All values not starting with the given string."""
  remark_not_starts_with: String

  """All values ending with the given string."""
  remark_ends_with: String

  """All values not ending with the given string."""
  remark_not_ends_with: String
}

type EducationProfileSubscriptionPayload {
  mutation: MutationType!
  node: EducationProfile
  updatedFields: [String!]
  previousValues: EducationProfilePreviousValues
}

input EducationProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EducationProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EducationProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EducationProfileSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EducationProfileWhereInput
}

input EducationProfileUpdateInput {
  name: String
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
  std: StdUpdateManyWithoutEducationprofilesInput
  profileId: ProfileUpdateOneRequiredWithoutEducationProfilesInput
}

input EducationProfileUpdateManyDataInput {
  name: String
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
}

input EducationProfileUpdateManyMutationInput {
  name: String
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
}

input EducationProfileUpdateManyWithoutProfileIdInput {
  create: [EducationProfileCreateWithoutProfileIdInput!]
  connect: [EducationProfileWhereUniqueInput!]
  set: [EducationProfileWhereUniqueInput!]
  disconnect: [EducationProfileWhereUniqueInput!]
  delete: [EducationProfileWhereUniqueInput!]
  update: [EducationProfileUpdateWithWhereUniqueWithoutProfileIdInput!]
  updateMany: [EducationProfileUpdateManyWithWhereNestedInput!]
  deleteMany: [EducationProfileScalarWhereInput!]
  upsert: [EducationProfileUpsertWithWhereUniqueWithoutProfileIdInput!]
}

input EducationProfileUpdateManyWithoutStdInput {
  create: [EducationProfileCreateWithoutStdInput!]
  connect: [EducationProfileWhereUniqueInput!]
  set: [EducationProfileWhereUniqueInput!]
  disconnect: [EducationProfileWhereUniqueInput!]
  delete: [EducationProfileWhereUniqueInput!]
  update: [EducationProfileUpdateWithWhereUniqueWithoutStdInput!]
  updateMany: [EducationProfileUpdateManyWithWhereNestedInput!]
  deleteMany: [EducationProfileScalarWhereInput!]
  upsert: [EducationProfileUpsertWithWhereUniqueWithoutStdInput!]
}

input EducationProfileUpdateManyWithWhereNestedInput {
  where: EducationProfileScalarWhereInput!
  data: EducationProfileUpdateManyDataInput!
}

input EducationProfileUpdateWithoutProfileIdDataInput {
  name: String
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
  std: StdUpdateManyWithoutEducationprofilesInput
}

input EducationProfileUpdateWithoutStdDataInput {
  name: String
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
  profileId: ProfileUpdateOneRequiredWithoutEducationProfilesInput
}

input EducationProfileUpdateWithWhereUniqueWithoutProfileIdInput {
  where: EducationProfileWhereUniqueInput!
  data: EducationProfileUpdateWithoutProfileIdDataInput!
}

input EducationProfileUpdateWithWhereUniqueWithoutStdInput {
  where: EducationProfileWhereUniqueInput!
  data: EducationProfileUpdateWithoutStdDataInput!
}

input EducationProfileUpsertWithWhereUniqueWithoutProfileIdInput {
  where: EducationProfileWhereUniqueInput!
  update: EducationProfileUpdateWithoutProfileIdDataInput!
  create: EducationProfileCreateWithoutProfileIdInput!
}

input EducationProfileUpsertWithWhereUniqueWithoutStdInput {
  where: EducationProfileWhereUniqueInput!
  update: EducationProfileUpdateWithoutStdDataInput!
  create: EducationProfileCreateWithoutStdInput!
}

input EducationProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [EducationProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [EducationProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EducationProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  profiileType: String

  """All values that are not equal to given value."""
  profiileType_not: String

  """All values that are contained in given list."""
  profiileType_in: [String!]

  """All values that are not contained in given list."""
  profiileType_not_in: [String!]

  """All values less than the given value."""
  profiileType_lt: String

  """All values less than or equal the given value."""
  profiileType_lte: String

  """All values greater than the given value."""
  profiileType_gt: String

  """All values greater than or equal the given value."""
  profiileType_gte: String

  """All values containing the given string."""
  profiileType_contains: String

  """All values not containing the given string."""
  profiileType_not_contains: String

  """All values starting with the given string."""
  profiileType_starts_with: String

  """All values not starting with the given string."""
  profiileType_not_starts_with: String

  """All values ending with the given string."""
  profiileType_ends_with: String

  """All values not ending with the given string."""
  profiileType_not_ends_with: String
  educationLevel: String

  """All values that are not equal to given value."""
  educationLevel_not: String

  """All values that are contained in given list."""
  educationLevel_in: [String!]

  """All values that are not contained in given list."""
  educationLevel_not_in: [String!]

  """All values less than the given value."""
  educationLevel_lt: String

  """All values less than or equal the given value."""
  educationLevel_lte: String

  """All values greater than the given value."""
  educationLevel_gt: String

  """All values greater than or equal the given value."""
  educationLevel_gte: String

  """All values containing the given string."""
  educationLevel_contains: String

  """All values not containing the given string."""
  educationLevel_not_contains: String

  """All values starting with the given string."""
  educationLevel_starts_with: String

  """All values not starting with the given string."""
  educationLevel_not_starts_with: String

  """All values ending with the given string."""
  educationLevel_ends_with: String

  """All values not ending with the given string."""
  educationLevel_not_ends_with: String
  educationType: String

  """All values that are not equal to given value."""
  educationType_not: String

  """All values that are contained in given list."""
  educationType_in: [String!]

  """All values that are not contained in given list."""
  educationType_not_in: [String!]

  """All values less than the given value."""
  educationType_lt: String

  """All values less than or equal the given value."""
  educationType_lte: String

  """All values greater than the given value."""
  educationType_gt: String

  """All values greater than or equal the given value."""
  educationType_gte: String

  """All values containing the given string."""
  educationType_contains: String

  """All values not containing the given string."""
  educationType_not_contains: String

  """All values starting with the given string."""
  educationType_starts_with: String

  """All values not starting with the given string."""
  educationType_not_starts_with: String

  """All values ending with the given string."""
  educationType_ends_with: String

  """All values not ending with the given string."""
  educationType_not_ends_with: String
  specialization: String

  """All values that are not equal to given value."""
  specialization_not: String

  """All values that are contained in given list."""
  specialization_in: [String!]

  """All values that are not contained in given list."""
  specialization_not_in: [String!]

  """All values less than the given value."""
  specialization_lt: String

  """All values less than or equal the given value."""
  specialization_lte: String

  """All values greater than the given value."""
  specialization_gt: String

  """All values greater than or equal the given value."""
  specialization_gte: String

  """All values containing the given string."""
  specialization_contains: String

  """All values not containing the given string."""
  specialization_not_contains: String

  """All values starting with the given string."""
  specialization_starts_with: String

  """All values not starting with the given string."""
  specialization_not_starts_with: String

  """All values ending with the given string."""
  specialization_ends_with: String

  """All values not ending with the given string."""
  specialization_not_ends_with: String
  startedYear: DateTime

  """All values that are not equal to given value."""
  startedYear_not: DateTime

  """All values that are contained in given list."""
  startedYear_in: [DateTime!]

  """All values that are not contained in given list."""
  startedYear_not_in: [DateTime!]

  """All values less than the given value."""
  startedYear_lt: DateTime

  """All values less than or equal the given value."""
  startedYear_lte: DateTime

  """All values greater than the given value."""
  startedYear_gt: DateTime

  """All values greater than or equal the given value."""
  startedYear_gte: DateTime
  completedYear: DateTime

  """All values that are not equal to given value."""
  completedYear_not: DateTime

  """All values that are contained in given list."""
  completedYear_in: [DateTime!]

  """All values that are not contained in given list."""
  completedYear_not_in: [DateTime!]

  """All values less than the given value."""
  completedYear_lt: DateTime

  """All values less than or equal the given value."""
  completedYear_lte: DateTime

  """All values greater than the given value."""
  completedYear_gt: DateTime

  """All values greater than or equal the given value."""
  completedYear_gte: DateTime
  result: String

  """All values that are not equal to given value."""
  result_not: String

  """All values that are contained in given list."""
  result_in: [String!]

  """All values that are not contained in given list."""
  result_not_in: [String!]

  """All values less than the given value."""
  result_lt: String

  """All values less than or equal the given value."""
  result_lte: String

  """All values greater than the given value."""
  result_gt: String

  """All values greater than or equal the given value."""
  result_gte: String

  """All values containing the given string."""
  result_contains: String

  """All values not containing the given string."""
  result_not_contains: String

  """All values starting with the given string."""
  result_starts_with: String

  """All values not starting with the given string."""
  result_not_starts_with: String

  """All values ending with the given string."""
  result_ends_with: String

  """All values not ending with the given string."""
  result_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  remark: String

  """All values that are not equal to given value."""
  remark_not: String

  """All values that are contained in given list."""
  remark_in: [String!]

  """All values that are not contained in given list."""
  remark_not_in: [String!]

  """All values less than the given value."""
  remark_lt: String

  """All values less than or equal the given value."""
  remark_lte: String

  """All values greater than the given value."""
  remark_gt: String

  """All values greater than or equal the given value."""
  remark_gte: String

  """All values containing the given string."""
  remark_contains: String

  """All values not containing the given string."""
  remark_not_contains: String

  """All values starting with the given string."""
  remark_starts_with: String

  """All values not starting with the given string."""
  remark_not_starts_with: String

  """All values ending with the given string."""
  remark_ends_with: String

  """All values not ending with the given string."""
  remark_not_ends_with: String
  std_every: StdWhereInput
  std_some: StdWhereInput
  std_none: StdWhereInput
  profileId: ProfileWhereInput
}

input EducationProfileWhereUniqueInput {
  id: ID
}

type Exam implements Node {
  id: ID!
  name: String!
  type: String!
  subject: Subject
  unit: Unit
  topic: Topic
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  markingscheme: Json
  level: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  createdBy: User!
  weightage: Float
  totalmarks: Float
  validFrom: DateTime
  validTo: DateTime
  retryAllowed: Boolean
  results(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result!]
  course: Course
}

"""A connection to a list of items."""
type ExamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExamEdge]!
  aggregate: AggregateExam!
}

input ExamCreateInput {
  id: ID
  name: String!
  type: String!
  markingscheme: Json
  level: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  subject: SubjectCreateOneWithoutExamsInput
  unit: UnitCreateOneWithoutExamsInput
  topic: TopicCreateOneInput
  questions: QuestionCreateManyWithoutExamInput
  createdBy: UserCreateOneWithoutExamCreatedByInput!
  results: ResultCreateManyWithoutExamInput
  course: CourseCreateOneInput
}

input ExamCreateManyInput {
  create: [ExamCreateInput!]
  connect: [ExamWhereUniqueInput!]
}

input ExamCreateManyWithoutCreatedByInput {
  create: [ExamCreateWithoutCreatedByInput!]
  connect: [ExamWhereUniqueInput!]
}

input ExamCreateManyWithoutQuestionsInput {
  create: [ExamCreateWithoutQuestionsInput!]
  connect: [ExamWhereUniqueInput!]
}

input ExamCreateManyWithoutSubjectInput {
  create: [ExamCreateWithoutSubjectInput!]
  connect: [ExamWhereUniqueInput!]
}

input ExamCreateManyWithoutUnitInput {
  create: [ExamCreateWithoutUnitInput!]
  connect: [ExamWhereUniqueInput!]
}

input ExamCreateOneWithoutResultsInput {
  create: ExamCreateWithoutResultsInput
  connect: ExamWhereUniqueInput
}

input ExamCreateWithoutCreatedByInput {
  id: ID
  name: String!
  type: String!
  markingscheme: Json
  level: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  subject: SubjectCreateOneWithoutExamsInput
  unit: UnitCreateOneWithoutExamsInput
  topic: TopicCreateOneInput
  questions: QuestionCreateManyWithoutExamInput
  results: ResultCreateManyWithoutExamInput
  course: CourseCreateOneInput
}

input ExamCreateWithoutQuestionsInput {
  id: ID
  name: String!
  type: String!
  markingscheme: Json
  level: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  subject: SubjectCreateOneWithoutExamsInput
  unit: UnitCreateOneWithoutExamsInput
  topic: TopicCreateOneInput
  createdBy: UserCreateOneWithoutExamCreatedByInput!
  results: ResultCreateManyWithoutExamInput
  course: CourseCreateOneInput
}

input ExamCreateWithoutResultsInput {
  id: ID
  name: String!
  type: String!
  markingscheme: Json
  level: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  subject: SubjectCreateOneWithoutExamsInput
  unit: UnitCreateOneWithoutExamsInput
  topic: TopicCreateOneInput
  questions: QuestionCreateManyWithoutExamInput
  createdBy: UserCreateOneWithoutExamCreatedByInput!
  course: CourseCreateOneInput
}

input ExamCreateWithoutSubjectInput {
  id: ID
  name: String!
  type: String!
  markingscheme: Json
  level: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  unit: UnitCreateOneWithoutExamsInput
  topic: TopicCreateOneInput
  questions: QuestionCreateManyWithoutExamInput
  createdBy: UserCreateOneWithoutExamCreatedByInput!
  results: ResultCreateManyWithoutExamInput
  course: CourseCreateOneInput
}

input ExamCreateWithoutUnitInput {
  id: ID
  name: String!
  type: String!
  markingscheme: Json
  level: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  subject: SubjectCreateOneWithoutExamsInput
  topic: TopicCreateOneInput
  questions: QuestionCreateManyWithoutExamInput
  createdBy: UserCreateOneWithoutExamCreatedByInput!
  results: ResultCreateManyWithoutExamInput
  course: CourseCreateOneInput
}

"""An edge in a connection."""
type ExamEdge {
  """The item at the end of the edge."""
  node: Exam!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ExamOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  markingscheme_ASC
  markingscheme_DESC
  level_ASC
  level_DESC
  threshold_ASC
  threshold_DESC
  isForLevelPromotion_ASC
  isForLevelPromotion_DESC
  showExplaination_ASC
  showExplaination_DESC
  showanswer_ASC
  showanswer_DESC
  description_ASC
  description_DESC
  allowedCorrection_ASC
  allowedCorrection_DESC
  duration_ASC
  duration_DESC
  commentFromTeacher_ASC
  commentFromTeacher_DESC
  isPublished_ASC
  isPublished_DESC
  isApproved_ASC
  isApproved_DESC
  weightage_ASC
  weightage_DESC
  totalmarks_ASC
  totalmarks_DESC
  validFrom_ASC
  validFrom_DESC
  validTo_ASC
  validTo_DESC
  retryAllowed_ASC
  retryAllowed_DESC
}

type Example implements Node {
  id: ID!
  name: String
  subject: Subject
  unit: Unit
  topic: Topic
  level: Int
  fileInfo: Json
  type: String!
  url: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  createdBy: User
}

"""A connection to a list of items."""
type ExampleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExampleEdge]!
  aggregate: AggregateExample!
}

input ExampleCreateInput {
  id: ID
  name: String
  level: Int
  fileInfo: Json
  type: String!
  url: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutExamplesInput
  unit: UnitCreateOneWithoutExamplesInput
  topic: TopicCreateOneWithoutExamplesInput
  createdBy: UserCreateOneInput
}

input ExampleCreateManyWithoutSubjectInput {
  create: [ExampleCreateWithoutSubjectInput!]
  connect: [ExampleWhereUniqueInput!]
}

input ExampleCreateManyWithoutTopicInput {
  create: [ExampleCreateWithoutTopicInput!]
  connect: [ExampleWhereUniqueInput!]
}

input ExampleCreateManyWithoutUnitInput {
  create: [ExampleCreateWithoutUnitInput!]
  connect: [ExampleWhereUniqueInput!]
}

input ExampleCreateWithoutSubjectInput {
  id: ID
  name: String
  level: Int
  fileInfo: Json
  type: String!
  url: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  unit: UnitCreateOneWithoutExamplesInput
  topic: TopicCreateOneWithoutExamplesInput
  createdBy: UserCreateOneInput
}

input ExampleCreateWithoutTopicInput {
  id: ID
  name: String
  level: Int
  fileInfo: Json
  type: String!
  url: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutExamplesInput
  unit: UnitCreateOneWithoutExamplesInput
  createdBy: UserCreateOneInput
}

input ExampleCreateWithoutUnitInput {
  id: ID
  name: String
  level: Int
  fileInfo: Json
  type: String!
  url: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutExamplesInput
  topic: TopicCreateOneWithoutExamplesInput
  createdBy: UserCreateOneInput
}

"""An edge in a connection."""
type ExampleEdge {
  """The item at the end of the edge."""
  node: Example!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ExampleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  level_ASC
  level_DESC
  fileInfo_ASC
  fileInfo_DESC
  type_ASC
  type_DESC
  url_ASC
  url_DESC
  isPublished_ASC
  isPublished_DESC
  state_ASC
  state_DESC
  status_ASC
  status_DESC
  available_ASC
  available_DESC
}

type ExamplePreviousValues {
  id: ID!
  name: String
  level: Int
  fileInfo: Json
  type: String!
  url: String
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input ExampleScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ExampleScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExampleScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExampleScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  level: Int

  """All values that are not equal to given value."""
  level_not: Int

  """All values that are contained in given list."""
  level_in: [Int!]

  """All values that are not contained in given list."""
  level_not_in: [Int!]

  """All values less than the given value."""
  level_lt: Int

  """All values less than or equal the given value."""
  level_lte: Int

  """All values greater than the given value."""
  level_gt: Int

  """All values greater than or equal the given value."""
  level_gte: Int
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  available: String

  """All values that are not equal to given value."""
  available_not: String

  """All values that are contained in given list."""
  available_in: [String!]

  """All values that are not contained in given list."""
  available_not_in: [String!]

  """All values less than the given value."""
  available_lt: String

  """All values less than or equal the given value."""
  available_lte: String

  """All values greater than the given value."""
  available_gt: String

  """All values greater than or equal the given value."""
  available_gte: String

  """All values containing the given string."""
  available_contains: String

  """All values not containing the given string."""
  available_not_contains: String

  """All values starting with the given string."""
  available_starts_with: String

  """All values not starting with the given string."""
  available_not_starts_with: String

  """All values ending with the given string."""
  available_ends_with: String

  """All values not ending with the given string."""
  available_not_ends_with: String
}

type ExampleSubscriptionPayload {
  mutation: MutationType!
  node: Example
  updatedFields: [String!]
  previousValues: ExamplePreviousValues
}

input ExampleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ExampleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExampleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExampleSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ExampleWhereInput
}

input ExampleUpdateInput {
  name: String
  level: Int
  fileInfo: Json
  type: String
  url: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutExamplesInput
  unit: UnitUpdateOneWithoutExamplesInput
  topic: TopicUpdateOneWithoutExamplesInput
  createdBy: UserUpdateOneInput
}

input ExampleUpdateManyDataInput {
  name: String
  level: Int
  fileInfo: Json
  type: String
  url: String
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input ExampleUpdateManyMutationInput {
  name: String
  level: Int
  fileInfo: Json
  type: String
  url: String
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input ExampleUpdateManyWithoutSubjectInput {
  create: [ExampleCreateWithoutSubjectInput!]
  connect: [ExampleWhereUniqueInput!]
  set: [ExampleWhereUniqueInput!]
  disconnect: [ExampleWhereUniqueInput!]
  delete: [ExampleWhereUniqueInput!]
  update: [ExampleUpdateWithWhereUniqueWithoutSubjectInput!]
  updateMany: [ExampleUpdateManyWithWhereNestedInput!]
  deleteMany: [ExampleScalarWhereInput!]
  upsert: [ExampleUpsertWithWhereUniqueWithoutSubjectInput!]
}

input ExampleUpdateManyWithoutTopicInput {
  create: [ExampleCreateWithoutTopicInput!]
  connect: [ExampleWhereUniqueInput!]
  set: [ExampleWhereUniqueInput!]
  disconnect: [ExampleWhereUniqueInput!]
  delete: [ExampleWhereUniqueInput!]
  update: [ExampleUpdateWithWhereUniqueWithoutTopicInput!]
  updateMany: [ExampleUpdateManyWithWhereNestedInput!]
  deleteMany: [ExampleScalarWhereInput!]
  upsert: [ExampleUpsertWithWhereUniqueWithoutTopicInput!]
}

input ExampleUpdateManyWithoutUnitInput {
  create: [ExampleCreateWithoutUnitInput!]
  connect: [ExampleWhereUniqueInput!]
  set: [ExampleWhereUniqueInput!]
  disconnect: [ExampleWhereUniqueInput!]
  delete: [ExampleWhereUniqueInput!]
  update: [ExampleUpdateWithWhereUniqueWithoutUnitInput!]
  updateMany: [ExampleUpdateManyWithWhereNestedInput!]
  deleteMany: [ExampleScalarWhereInput!]
  upsert: [ExampleUpsertWithWhereUniqueWithoutUnitInput!]
}

input ExampleUpdateManyWithWhereNestedInput {
  where: ExampleScalarWhereInput!
  data: ExampleUpdateManyDataInput!
}

input ExampleUpdateWithoutSubjectDataInput {
  name: String
  level: Int
  fileInfo: Json
  type: String
  url: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  unit: UnitUpdateOneWithoutExamplesInput
  topic: TopicUpdateOneWithoutExamplesInput
  createdBy: UserUpdateOneInput
}

input ExampleUpdateWithoutTopicDataInput {
  name: String
  level: Int
  fileInfo: Json
  type: String
  url: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutExamplesInput
  unit: UnitUpdateOneWithoutExamplesInput
  createdBy: UserUpdateOneInput
}

input ExampleUpdateWithoutUnitDataInput {
  name: String
  level: Int
  fileInfo: Json
  type: String
  url: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutExamplesInput
  topic: TopicUpdateOneWithoutExamplesInput
  createdBy: UserUpdateOneInput
}

input ExampleUpdateWithWhereUniqueWithoutSubjectInput {
  where: ExampleWhereUniqueInput!
  data: ExampleUpdateWithoutSubjectDataInput!
}

input ExampleUpdateWithWhereUniqueWithoutTopicInput {
  where: ExampleWhereUniqueInput!
  data: ExampleUpdateWithoutTopicDataInput!
}

input ExampleUpdateWithWhereUniqueWithoutUnitInput {
  where: ExampleWhereUniqueInput!
  data: ExampleUpdateWithoutUnitDataInput!
}

input ExampleUpsertWithWhereUniqueWithoutSubjectInput {
  where: ExampleWhereUniqueInput!
  update: ExampleUpdateWithoutSubjectDataInput!
  create: ExampleCreateWithoutSubjectInput!
}

input ExampleUpsertWithWhereUniqueWithoutTopicInput {
  where: ExampleWhereUniqueInput!
  update: ExampleUpdateWithoutTopicDataInput!
  create: ExampleCreateWithoutTopicInput!
}

input ExampleUpsertWithWhereUniqueWithoutUnitInput {
  where: ExampleWhereUniqueInput!
  update: ExampleUpdateWithoutUnitDataInput!
  create: ExampleCreateWithoutUnitInput!
}

input ExampleWhereInput {
  """Logical AND on all given filters."""
  AND: [ExampleWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExampleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExampleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  level: Int

  """All values that are not equal to given value."""
  level_not: Int

  """All values that are contained in given list."""
  level_in: [Int!]

  """All values that are not contained in given list."""
  level_not_in: [Int!]

  """All values less than the given value."""
  level_lt: Int

  """All values less than or equal the given value."""
  level_lte: Int

  """All values greater than the given value."""
  level_gt: Int

  """All values greater than or equal the given value."""
  level_gte: Int
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  available: String

  """All values that are not equal to given value."""
  available_not: String

  """All values that are contained in given list."""
  available_in: [String!]

  """All values that are not contained in given list."""
  available_not_in: [String!]

  """All values less than the given value."""
  available_lt: String

  """All values less than or equal the given value."""
  available_lte: String

  """All values greater than the given value."""
  available_gt: String

  """All values greater than or equal the given value."""
  available_gte: String

  """All values containing the given string."""
  available_contains: String

  """All values not containing the given string."""
  available_not_contains: String

  """All values starting with the given string."""
  available_starts_with: String

  """All values not starting with the given string."""
  available_not_starts_with: String

  """All values ending with the given string."""
  available_ends_with: String

  """All values not ending with the given string."""
  available_not_ends_with: String
  subject: SubjectWhereInput
  unit: UnitWhereInput
  topic: TopicWhereInput
  createdBy: UserWhereInput
}

input ExampleWhereUniqueInput {
  id: ID
}

type ExamPreviousValues {
  id: ID!
  name: String!
  type: String!
  markingscheme: Json
  level: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validFrom: DateTime
  validTo: DateTime
  retryAllowed: Boolean
}

input ExamScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ExamScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExamScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExamScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  level: Int

  """All values that are not equal to given value."""
  level_not: Int

  """All values that are contained in given list."""
  level_in: [Int!]

  """All values that are not contained in given list."""
  level_not_in: [Int!]

  """All values less than the given value."""
  level_lt: Int

  """All values less than or equal the given value."""
  level_lte: Int

  """All values greater than the given value."""
  level_gt: Int

  """All values greater than or equal the given value."""
  level_gte: Int
  isForLevelPromotion: Boolean

  """All values that are not equal to given value."""
  isForLevelPromotion_not: Boolean
  showExplaination: String

  """All values that are not equal to given value."""
  showExplaination_not: String

  """All values that are contained in given list."""
  showExplaination_in: [String!]

  """All values that are not contained in given list."""
  showExplaination_not_in: [String!]

  """All values less than the given value."""
  showExplaination_lt: String

  """All values less than or equal the given value."""
  showExplaination_lte: String

  """All values greater than the given value."""
  showExplaination_gt: String

  """All values greater than or equal the given value."""
  showExplaination_gte: String

  """All values containing the given string."""
  showExplaination_contains: String

  """All values not containing the given string."""
  showExplaination_not_contains: String

  """All values starting with the given string."""
  showExplaination_starts_with: String

  """All values not starting with the given string."""
  showExplaination_not_starts_with: String

  """All values ending with the given string."""
  showExplaination_ends_with: String

  """All values not ending with the given string."""
  showExplaination_not_ends_with: String
  showanswer: Boolean

  """All values that are not equal to given value."""
  showanswer_not: Boolean
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  allowedCorrection: Boolean

  """All values that are not equal to given value."""
  allowedCorrection_not: Boolean
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  commentFromTeacher: String

  """All values that are not equal to given value."""
  commentFromTeacher_not: String

  """All values that are contained in given list."""
  commentFromTeacher_in: [String!]

  """All values that are not contained in given list."""
  commentFromTeacher_not_in: [String!]

  """All values less than the given value."""
  commentFromTeacher_lt: String

  """All values less than or equal the given value."""
  commentFromTeacher_lte: String

  """All values greater than the given value."""
  commentFromTeacher_gt: String

  """All values greater than or equal the given value."""
  commentFromTeacher_gte: String

  """All values containing the given string."""
  commentFromTeacher_contains: String

  """All values not containing the given string."""
  commentFromTeacher_not_contains: String

  """All values starting with the given string."""
  commentFromTeacher_starts_with: String

  """All values not starting with the given string."""
  commentFromTeacher_not_starts_with: String

  """All values ending with the given string."""
  commentFromTeacher_ends_with: String

  """All values not ending with the given string."""
  commentFromTeacher_not_ends_with: String
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  isApproved: Boolean

  """All values that are not equal to given value."""
  isApproved_not: Boolean
  weightage: Float

  """All values that are not equal to given value."""
  weightage_not: Float

  """All values that are contained in given list."""
  weightage_in: [Float!]

  """All values that are not contained in given list."""
  weightage_not_in: [Float!]

  """All values less than the given value."""
  weightage_lt: Float

  """All values less than or equal the given value."""
  weightage_lte: Float

  """All values greater than the given value."""
  weightage_gt: Float

  """All values greater than or equal the given value."""
  weightage_gte: Float
  totalmarks: Float

  """All values that are not equal to given value."""
  totalmarks_not: Float

  """All values that are contained in given list."""
  totalmarks_in: [Float!]

  """All values that are not contained in given list."""
  totalmarks_not_in: [Float!]

  """All values less than the given value."""
  totalmarks_lt: Float

  """All values less than or equal the given value."""
  totalmarks_lte: Float

  """All values greater than the given value."""
  totalmarks_gt: Float

  """All values greater than or equal the given value."""
  totalmarks_gte: Float
  validFrom: DateTime

  """All values that are not equal to given value."""
  validFrom_not: DateTime

  """All values that are contained in given list."""
  validFrom_in: [DateTime!]

  """All values that are not contained in given list."""
  validFrom_not_in: [DateTime!]

  """All values less than the given value."""
  validFrom_lt: DateTime

  """All values less than or equal the given value."""
  validFrom_lte: DateTime

  """All values greater than the given value."""
  validFrom_gt: DateTime

  """All values greater than or equal the given value."""
  validFrom_gte: DateTime
  validTo: DateTime

  """All values that are not equal to given value."""
  validTo_not: DateTime

  """All values that are contained in given list."""
  validTo_in: [DateTime!]

  """All values that are not contained in given list."""
  validTo_not_in: [DateTime!]

  """All values less than the given value."""
  validTo_lt: DateTime

  """All values less than or equal the given value."""
  validTo_lte: DateTime

  """All values greater than the given value."""
  validTo_gt: DateTime

  """All values greater than or equal the given value."""
  validTo_gte: DateTime
  retryAllowed: Boolean

  """All values that are not equal to given value."""
  retryAllowed_not: Boolean
}

type ExamSubscriptionPayload {
  mutation: MutationType!
  node: Exam
  updatedFields: [String!]
  previousValues: ExamPreviousValues
}

input ExamSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ExamSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExamSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExamSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ExamWhereInput
}

input ExamUpdateDataInput {
  name: String
  type: String
  markingscheme: Json
  level: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  subject: SubjectUpdateOneWithoutExamsInput
  unit: UnitUpdateOneWithoutExamsInput
  topic: TopicUpdateOneInput
  questions: QuestionUpdateManyWithoutExamInput
  createdBy: UserUpdateOneRequiredWithoutExamCreatedByInput
  results: ResultUpdateManyWithoutExamInput
  course: CourseUpdateOneInput
}

input ExamUpdateInput {
  name: String
  type: String
  markingscheme: Json
  level: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  subject: SubjectUpdateOneWithoutExamsInput
  unit: UnitUpdateOneWithoutExamsInput
  topic: TopicUpdateOneInput
  questions: QuestionUpdateManyWithoutExamInput
  createdBy: UserUpdateOneRequiredWithoutExamCreatedByInput
  results: ResultUpdateManyWithoutExamInput
  course: CourseUpdateOneInput
}

input ExamUpdateManyDataInput {
  name: String
  type: String
  markingscheme: Json
  level: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
}

input ExamUpdateManyInput {
  create: [ExamCreateInput!]
  connect: [ExamWhereUniqueInput!]
  set: [ExamWhereUniqueInput!]
  disconnect: [ExamWhereUniqueInput!]
  delete: [ExamWhereUniqueInput!]
  update: [ExamUpdateWithWhereUniqueNestedInput!]
  updateMany: [ExamUpdateManyWithWhereNestedInput!]
  deleteMany: [ExamScalarWhereInput!]
  upsert: [ExamUpsertWithWhereUniqueNestedInput!]
}

input ExamUpdateManyMutationInput {
  name: String
  type: String
  markingscheme: Json
  level: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
}

input ExamUpdateManyWithoutCreatedByInput {
  create: [ExamCreateWithoutCreatedByInput!]
  connect: [ExamWhereUniqueInput!]
  set: [ExamWhereUniqueInput!]
  disconnect: [ExamWhereUniqueInput!]
  delete: [ExamWhereUniqueInput!]
  update: [ExamUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [ExamUpdateManyWithWhereNestedInput!]
  deleteMany: [ExamScalarWhereInput!]
  upsert: [ExamUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input ExamUpdateManyWithoutQuestionsInput {
  create: [ExamCreateWithoutQuestionsInput!]
  connect: [ExamWhereUniqueInput!]
  set: [ExamWhereUniqueInput!]
  disconnect: [ExamWhereUniqueInput!]
  delete: [ExamWhereUniqueInput!]
  update: [ExamUpdateWithWhereUniqueWithoutQuestionsInput!]
  updateMany: [ExamUpdateManyWithWhereNestedInput!]
  deleteMany: [ExamScalarWhereInput!]
  upsert: [ExamUpsertWithWhereUniqueWithoutQuestionsInput!]
}

input ExamUpdateManyWithoutSubjectInput {
  create: [ExamCreateWithoutSubjectInput!]
  connect: [ExamWhereUniqueInput!]
  set: [ExamWhereUniqueInput!]
  disconnect: [ExamWhereUniqueInput!]
  delete: [ExamWhereUniqueInput!]
  update: [ExamUpdateWithWhereUniqueWithoutSubjectInput!]
  updateMany: [ExamUpdateManyWithWhereNestedInput!]
  deleteMany: [ExamScalarWhereInput!]
  upsert: [ExamUpsertWithWhereUniqueWithoutSubjectInput!]
}

input ExamUpdateManyWithoutUnitInput {
  create: [ExamCreateWithoutUnitInput!]
  connect: [ExamWhereUniqueInput!]
  set: [ExamWhereUniqueInput!]
  disconnect: [ExamWhereUniqueInput!]
  delete: [ExamWhereUniqueInput!]
  update: [ExamUpdateWithWhereUniqueWithoutUnitInput!]
  updateMany: [ExamUpdateManyWithWhereNestedInput!]
  deleteMany: [ExamScalarWhereInput!]
  upsert: [ExamUpsertWithWhereUniqueWithoutUnitInput!]
}

input ExamUpdateManyWithWhereNestedInput {
  where: ExamScalarWhereInput!
  data: ExamUpdateManyDataInput!
}

input ExamUpdateOneRequiredWithoutResultsInput {
  create: ExamCreateWithoutResultsInput
  connect: ExamWhereUniqueInput
  update: ExamUpdateWithoutResultsDataInput
  upsert: ExamUpsertWithoutResultsInput
}

input ExamUpdateWithoutCreatedByDataInput {
  name: String
  type: String
  markingscheme: Json
  level: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  subject: SubjectUpdateOneWithoutExamsInput
  unit: UnitUpdateOneWithoutExamsInput
  topic: TopicUpdateOneInput
  questions: QuestionUpdateManyWithoutExamInput
  results: ResultUpdateManyWithoutExamInput
  course: CourseUpdateOneInput
}

input ExamUpdateWithoutQuestionsDataInput {
  name: String
  type: String
  markingscheme: Json
  level: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  subject: SubjectUpdateOneWithoutExamsInput
  unit: UnitUpdateOneWithoutExamsInput
  topic: TopicUpdateOneInput
  createdBy: UserUpdateOneRequiredWithoutExamCreatedByInput
  results: ResultUpdateManyWithoutExamInput
  course: CourseUpdateOneInput
}

input ExamUpdateWithoutResultsDataInput {
  name: String
  type: String
  markingscheme: Json
  level: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  subject: SubjectUpdateOneWithoutExamsInput
  unit: UnitUpdateOneWithoutExamsInput
  topic: TopicUpdateOneInput
  questions: QuestionUpdateManyWithoutExamInput
  createdBy: UserUpdateOneRequiredWithoutExamCreatedByInput
  course: CourseUpdateOneInput
}

input ExamUpdateWithoutSubjectDataInput {
  name: String
  type: String
  markingscheme: Json
  level: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  unit: UnitUpdateOneWithoutExamsInput
  topic: TopicUpdateOneInput
  questions: QuestionUpdateManyWithoutExamInput
  createdBy: UserUpdateOneRequiredWithoutExamCreatedByInput
  results: ResultUpdateManyWithoutExamInput
  course: CourseUpdateOneInput
}

input ExamUpdateWithoutUnitDataInput {
  name: String
  type: String
  markingscheme: Json
  level: Int
  threshold: Json
  isForLevelPromotion: Boolean
  showExplaination: String
  showanswer: Boolean
  description: String
  allowedCorrection: Boolean
  duration: Int
  commentFromTeacher: String
  isPublished: Boolean
  isApproved: Boolean
  weightage: Float
  totalmarks: Float
  validTo: DateTime
  retryAllowed: Boolean
  subject: SubjectUpdateOneWithoutExamsInput
  topic: TopicUpdateOneInput
  questions: QuestionUpdateManyWithoutExamInput
  createdBy: UserUpdateOneRequiredWithoutExamCreatedByInput
  results: ResultUpdateManyWithoutExamInput
  course: CourseUpdateOneInput
}

input ExamUpdateWithWhereUniqueNestedInput {
  where: ExamWhereUniqueInput!
  data: ExamUpdateDataInput!
}

input ExamUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ExamWhereUniqueInput!
  data: ExamUpdateWithoutCreatedByDataInput!
}

input ExamUpdateWithWhereUniqueWithoutQuestionsInput {
  where: ExamWhereUniqueInput!
  data: ExamUpdateWithoutQuestionsDataInput!
}

input ExamUpdateWithWhereUniqueWithoutSubjectInput {
  where: ExamWhereUniqueInput!
  data: ExamUpdateWithoutSubjectDataInput!
}

input ExamUpdateWithWhereUniqueWithoutUnitInput {
  where: ExamWhereUniqueInput!
  data: ExamUpdateWithoutUnitDataInput!
}

input ExamUpsertWithoutResultsInput {
  update: ExamUpdateWithoutResultsDataInput!
  create: ExamCreateWithoutResultsInput!
}

input ExamUpsertWithWhereUniqueNestedInput {
  where: ExamWhereUniqueInput!
  update: ExamUpdateDataInput!
  create: ExamCreateInput!
}

input ExamUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ExamWhereUniqueInput!
  update: ExamUpdateWithoutCreatedByDataInput!
  create: ExamCreateWithoutCreatedByInput!
}

input ExamUpsertWithWhereUniqueWithoutQuestionsInput {
  where: ExamWhereUniqueInput!
  update: ExamUpdateWithoutQuestionsDataInput!
  create: ExamCreateWithoutQuestionsInput!
}

input ExamUpsertWithWhereUniqueWithoutSubjectInput {
  where: ExamWhereUniqueInput!
  update: ExamUpdateWithoutSubjectDataInput!
  create: ExamCreateWithoutSubjectInput!
}

input ExamUpsertWithWhereUniqueWithoutUnitInput {
  where: ExamWhereUniqueInput!
  update: ExamUpdateWithoutUnitDataInput!
  create: ExamCreateWithoutUnitInput!
}

input ExamWhereInput {
  """Logical AND on all given filters."""
  AND: [ExamWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExamWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExamWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  level: Int

  """All values that are not equal to given value."""
  level_not: Int

  """All values that are contained in given list."""
  level_in: [Int!]

  """All values that are not contained in given list."""
  level_not_in: [Int!]

  """All values less than the given value."""
  level_lt: Int

  """All values less than or equal the given value."""
  level_lte: Int

  """All values greater than the given value."""
  level_gt: Int

  """All values greater than or equal the given value."""
  level_gte: Int
  isForLevelPromotion: Boolean

  """All values that are not equal to given value."""
  isForLevelPromotion_not: Boolean
  showExplaination: String

  """All values that are not equal to given value."""
  showExplaination_not: String

  """All values that are contained in given list."""
  showExplaination_in: [String!]

  """All values that are not contained in given list."""
  showExplaination_not_in: [String!]

  """All values less than the given value."""
  showExplaination_lt: String

  """All values less than or equal the given value."""
  showExplaination_lte: String

  """All values greater than the given value."""
  showExplaination_gt: String

  """All values greater than or equal the given value."""
  showExplaination_gte: String

  """All values containing the given string."""
  showExplaination_contains: String

  """All values not containing the given string."""
  showExplaination_not_contains: String

  """All values starting with the given string."""
  showExplaination_starts_with: String

  """All values not starting with the given string."""
  showExplaination_not_starts_with: String

  """All values ending with the given string."""
  showExplaination_ends_with: String

  """All values not ending with the given string."""
  showExplaination_not_ends_with: String
  showanswer: Boolean

  """All values that are not equal to given value."""
  showanswer_not: Boolean
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  allowedCorrection: Boolean

  """All values that are not equal to given value."""
  allowedCorrection_not: Boolean
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  commentFromTeacher: String

  """All values that are not equal to given value."""
  commentFromTeacher_not: String

  """All values that are contained in given list."""
  commentFromTeacher_in: [String!]

  """All values that are not contained in given list."""
  commentFromTeacher_not_in: [String!]

  """All values less than the given value."""
  commentFromTeacher_lt: String

  """All values less than or equal the given value."""
  commentFromTeacher_lte: String

  """All values greater than the given value."""
  commentFromTeacher_gt: String

  """All values greater than or equal the given value."""
  commentFromTeacher_gte: String

  """All values containing the given string."""
  commentFromTeacher_contains: String

  """All values not containing the given string."""
  commentFromTeacher_not_contains: String

  """All values starting with the given string."""
  commentFromTeacher_starts_with: String

  """All values not starting with the given string."""
  commentFromTeacher_not_starts_with: String

  """All values ending with the given string."""
  commentFromTeacher_ends_with: String

  """All values not ending with the given string."""
  commentFromTeacher_not_ends_with: String
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  isApproved: Boolean

  """All values that are not equal to given value."""
  isApproved_not: Boolean
  weightage: Float

  """All values that are not equal to given value."""
  weightage_not: Float

  """All values that are contained in given list."""
  weightage_in: [Float!]

  """All values that are not contained in given list."""
  weightage_not_in: [Float!]

  """All values less than the given value."""
  weightage_lt: Float

  """All values less than or equal the given value."""
  weightage_lte: Float

  """All values greater than the given value."""
  weightage_gt: Float

  """All values greater than or equal the given value."""
  weightage_gte: Float
  totalmarks: Float

  """All values that are not equal to given value."""
  totalmarks_not: Float

  """All values that are contained in given list."""
  totalmarks_in: [Float!]

  """All values that are not contained in given list."""
  totalmarks_not_in: [Float!]

  """All values less than the given value."""
  totalmarks_lt: Float

  """All values less than or equal the given value."""
  totalmarks_lte: Float

  """All values greater than the given value."""
  totalmarks_gt: Float

  """All values greater than or equal the given value."""
  totalmarks_gte: Float
  validFrom: DateTime

  """All values that are not equal to given value."""
  validFrom_not: DateTime

  """All values that are contained in given list."""
  validFrom_in: [DateTime!]

  """All values that are not contained in given list."""
  validFrom_not_in: [DateTime!]

  """All values less than the given value."""
  validFrom_lt: DateTime

  """All values less than or equal the given value."""
  validFrom_lte: DateTime

  """All values greater than the given value."""
  validFrom_gt: DateTime

  """All values greater than or equal the given value."""
  validFrom_gte: DateTime
  validTo: DateTime

  """All values that are not equal to given value."""
  validTo_not: DateTime

  """All values that are contained in given list."""
  validTo_in: [DateTime!]

  """All values that are not contained in given list."""
  validTo_not_in: [DateTime!]

  """All values less than the given value."""
  validTo_lt: DateTime

  """All values less than or equal the given value."""
  validTo_lte: DateTime

  """All values greater than the given value."""
  validTo_gt: DateTime

  """All values greater than or equal the given value."""
  validTo_gte: DateTime
  retryAllowed: Boolean

  """All values that are not equal to given value."""
  retryAllowed_not: Boolean
  subject: SubjectWhereInput
  unit: UnitWhereInput
  topic: TopicWhereInput
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  createdBy: UserWhereInput
  results_every: ResultWhereInput
  results_some: ResultWhereInput
  results_none: ResultWhereInput
  course: CourseWhereInput
}

input ExamWhereUniqueInput {
  id: ID
}

type Formula implements Node {
  id: ID!
  name: String
  subject: Subject
  unit: Unit
  topic: Topic
  level: Int
  type: String!
  fileInfo: Json
  url: String
  createdBy: User
  updateBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type FormulaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FormulaEdge]!
  aggregate: AggregateFormula!
}

input FormulaCreateInput {
  id: ID
  name: String
  level: Int
  type: String!
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutFormulasInput
  unit: UnitCreateOneWithoutFormulasInput
  topic: TopicCreateOneWithoutFormulasInput
  createdBy: UserCreateOneWithoutFormulaByMeInput
  updateBy: UserCreateManyWithoutFormulaUpdatedByMeInput
}

input FormulaCreateManyWithoutCreatedByInput {
  create: [FormulaCreateWithoutCreatedByInput!]
  connect: [FormulaWhereUniqueInput!]
}

input FormulaCreateManyWithoutSubjectInput {
  create: [FormulaCreateWithoutSubjectInput!]
  connect: [FormulaWhereUniqueInput!]
}

input FormulaCreateManyWithoutTopicInput {
  create: [FormulaCreateWithoutTopicInput!]
  connect: [FormulaWhereUniqueInput!]
}

input FormulaCreateManyWithoutUnitInput {
  create: [FormulaCreateWithoutUnitInput!]
  connect: [FormulaWhereUniqueInput!]
}

input FormulaCreateManyWithoutUpdateByInput {
  create: [FormulaCreateWithoutUpdateByInput!]
  connect: [FormulaWhereUniqueInput!]
}

input FormulaCreateWithoutCreatedByInput {
  id: ID
  name: String
  level: Int
  type: String!
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutFormulasInput
  unit: UnitCreateOneWithoutFormulasInput
  topic: TopicCreateOneWithoutFormulasInput
  updateBy: UserCreateManyWithoutFormulaUpdatedByMeInput
}

input FormulaCreateWithoutSubjectInput {
  id: ID
  name: String
  level: Int
  type: String!
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  unit: UnitCreateOneWithoutFormulasInput
  topic: TopicCreateOneWithoutFormulasInput
  createdBy: UserCreateOneWithoutFormulaByMeInput
  updateBy: UserCreateManyWithoutFormulaUpdatedByMeInput
}

input FormulaCreateWithoutTopicInput {
  id: ID
  name: String
  level: Int
  type: String!
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutFormulasInput
  unit: UnitCreateOneWithoutFormulasInput
  createdBy: UserCreateOneWithoutFormulaByMeInput
  updateBy: UserCreateManyWithoutFormulaUpdatedByMeInput
}

input FormulaCreateWithoutUnitInput {
  id: ID
  name: String
  level: Int
  type: String!
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutFormulasInput
  topic: TopicCreateOneWithoutFormulasInput
  createdBy: UserCreateOneWithoutFormulaByMeInput
  updateBy: UserCreateManyWithoutFormulaUpdatedByMeInput
}

input FormulaCreateWithoutUpdateByInput {
  id: ID
  name: String
  level: Int
  type: String!
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutFormulasInput
  unit: UnitCreateOneWithoutFormulasInput
  topic: TopicCreateOneWithoutFormulasInput
  createdBy: UserCreateOneWithoutFormulaByMeInput
}

"""An edge in a connection."""
type FormulaEdge {
  """The item at the end of the edge."""
  node: Formula!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FormulaOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  level_ASC
  level_DESC
  type_ASC
  type_DESC
  fileInfo_ASC
  fileInfo_DESC
  url_ASC
  url_DESC
  plantDate_ASC
  plantDate_DESC
  isPublished_ASC
  isPublished_DESC
  state_ASC
  state_DESC
  status_ASC
  status_DESC
  available_ASC
  available_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FormulaPreviousValues {
  id: ID!
  name: String
  level: Int
  type: String!
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input FormulaScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FormulaScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FormulaScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FormulaScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  level: Int

  """All values that are not equal to given value."""
  level_not: Int

  """All values that are contained in given list."""
  level_in: [Int!]

  """All values that are not contained in given list."""
  level_not_in: [Int!]

  """All values less than the given value."""
  level_lt: Int

  """All values less than or equal the given value."""
  level_lte: Int

  """All values greater than the given value."""
  level_gt: Int

  """All values greater than or equal the given value."""
  level_gte: Int
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  plantDate: DateTime

  """All values that are not equal to given value."""
  plantDate_not: DateTime

  """All values that are contained in given list."""
  plantDate_in: [DateTime!]

  """All values that are not contained in given list."""
  plantDate_not_in: [DateTime!]

  """All values less than the given value."""
  plantDate_lt: DateTime

  """All values less than or equal the given value."""
  plantDate_lte: DateTime

  """All values greater than the given value."""
  plantDate_gt: DateTime

  """All values greater than or equal the given value."""
  plantDate_gte: DateTime
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  available: String

  """All values that are not equal to given value."""
  available_not: String

  """All values that are contained in given list."""
  available_in: [String!]

  """All values that are not contained in given list."""
  available_not_in: [String!]

  """All values less than the given value."""
  available_lt: String

  """All values less than or equal the given value."""
  available_lte: String

  """All values greater than the given value."""
  available_gt: String

  """All values greater than or equal the given value."""
  available_gte: String

  """All values containing the given string."""
  available_contains: String

  """All values not containing the given string."""
  available_not_contains: String

  """All values starting with the given string."""
  available_starts_with: String

  """All values not starting with the given string."""
  available_not_starts_with: String

  """All values ending with the given string."""
  available_ends_with: String

  """All values not ending with the given string."""
  available_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type FormulaSubscriptionPayload {
  mutation: MutationType!
  node: Formula
  updatedFields: [String!]
  previousValues: FormulaPreviousValues
}

input FormulaSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FormulaSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FormulaSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FormulaSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FormulaWhereInput
}

input FormulaUpdateInput {
  name: String
  level: Int
  type: String
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutFormulasInput
  unit: UnitUpdateOneWithoutFormulasInput
  topic: TopicUpdateOneWithoutFormulasInput
  createdBy: UserUpdateOneWithoutFormulaByMeInput
  updateBy: UserUpdateManyWithoutFormulaUpdatedByMeInput
}

input FormulaUpdateManyDataInput {
  name: String
  level: Int
  type: String
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input FormulaUpdateManyMutationInput {
  name: String
  level: Int
  type: String
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input FormulaUpdateManyWithoutCreatedByInput {
  create: [FormulaCreateWithoutCreatedByInput!]
  connect: [FormulaWhereUniqueInput!]
  set: [FormulaWhereUniqueInput!]
  disconnect: [FormulaWhereUniqueInput!]
  delete: [FormulaWhereUniqueInput!]
  update: [FormulaUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [FormulaUpdateManyWithWhereNestedInput!]
  deleteMany: [FormulaScalarWhereInput!]
  upsert: [FormulaUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input FormulaUpdateManyWithoutSubjectInput {
  create: [FormulaCreateWithoutSubjectInput!]
  connect: [FormulaWhereUniqueInput!]
  set: [FormulaWhereUniqueInput!]
  disconnect: [FormulaWhereUniqueInput!]
  delete: [FormulaWhereUniqueInput!]
  update: [FormulaUpdateWithWhereUniqueWithoutSubjectInput!]
  updateMany: [FormulaUpdateManyWithWhereNestedInput!]
  deleteMany: [FormulaScalarWhereInput!]
  upsert: [FormulaUpsertWithWhereUniqueWithoutSubjectInput!]
}

input FormulaUpdateManyWithoutTopicInput {
  create: [FormulaCreateWithoutTopicInput!]
  connect: [FormulaWhereUniqueInput!]
  set: [FormulaWhereUniqueInput!]
  disconnect: [FormulaWhereUniqueInput!]
  delete: [FormulaWhereUniqueInput!]
  update: [FormulaUpdateWithWhereUniqueWithoutTopicInput!]
  updateMany: [FormulaUpdateManyWithWhereNestedInput!]
  deleteMany: [FormulaScalarWhereInput!]
  upsert: [FormulaUpsertWithWhereUniqueWithoutTopicInput!]
}

input FormulaUpdateManyWithoutUnitInput {
  create: [FormulaCreateWithoutUnitInput!]
  connect: [FormulaWhereUniqueInput!]
  set: [FormulaWhereUniqueInput!]
  disconnect: [FormulaWhereUniqueInput!]
  delete: [FormulaWhereUniqueInput!]
  update: [FormulaUpdateWithWhereUniqueWithoutUnitInput!]
  updateMany: [FormulaUpdateManyWithWhereNestedInput!]
  deleteMany: [FormulaScalarWhereInput!]
  upsert: [FormulaUpsertWithWhereUniqueWithoutUnitInput!]
}

input FormulaUpdateManyWithoutUpdateByInput {
  create: [FormulaCreateWithoutUpdateByInput!]
  connect: [FormulaWhereUniqueInput!]
  set: [FormulaWhereUniqueInput!]
  disconnect: [FormulaWhereUniqueInput!]
  delete: [FormulaWhereUniqueInput!]
  update: [FormulaUpdateWithWhereUniqueWithoutUpdateByInput!]
  updateMany: [FormulaUpdateManyWithWhereNestedInput!]
  deleteMany: [FormulaScalarWhereInput!]
  upsert: [FormulaUpsertWithWhereUniqueWithoutUpdateByInput!]
}

input FormulaUpdateManyWithWhereNestedInput {
  where: FormulaScalarWhereInput!
  data: FormulaUpdateManyDataInput!
}

input FormulaUpdateWithoutCreatedByDataInput {
  name: String
  level: Int
  type: String
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutFormulasInput
  unit: UnitUpdateOneWithoutFormulasInput
  topic: TopicUpdateOneWithoutFormulasInput
  updateBy: UserUpdateManyWithoutFormulaUpdatedByMeInput
}

input FormulaUpdateWithoutSubjectDataInput {
  name: String
  level: Int
  type: String
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  unit: UnitUpdateOneWithoutFormulasInput
  topic: TopicUpdateOneWithoutFormulasInput
  createdBy: UserUpdateOneWithoutFormulaByMeInput
  updateBy: UserUpdateManyWithoutFormulaUpdatedByMeInput
}

input FormulaUpdateWithoutTopicDataInput {
  name: String
  level: Int
  type: String
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutFormulasInput
  unit: UnitUpdateOneWithoutFormulasInput
  createdBy: UserUpdateOneWithoutFormulaByMeInput
  updateBy: UserUpdateManyWithoutFormulaUpdatedByMeInput
}

input FormulaUpdateWithoutUnitDataInput {
  name: String
  level: Int
  type: String
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutFormulasInput
  topic: TopicUpdateOneWithoutFormulasInput
  createdBy: UserUpdateOneWithoutFormulaByMeInput
  updateBy: UserUpdateManyWithoutFormulaUpdatedByMeInput
}

input FormulaUpdateWithoutUpdateByDataInput {
  name: String
  level: Int
  type: String
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutFormulasInput
  unit: UnitUpdateOneWithoutFormulasInput
  topic: TopicUpdateOneWithoutFormulasInput
  createdBy: UserUpdateOneWithoutFormulaByMeInput
}

input FormulaUpdateWithWhereUniqueWithoutCreatedByInput {
  where: FormulaWhereUniqueInput!
  data: FormulaUpdateWithoutCreatedByDataInput!
}

input FormulaUpdateWithWhereUniqueWithoutSubjectInput {
  where: FormulaWhereUniqueInput!
  data: FormulaUpdateWithoutSubjectDataInput!
}

input FormulaUpdateWithWhereUniqueWithoutTopicInput {
  where: FormulaWhereUniqueInput!
  data: FormulaUpdateWithoutTopicDataInput!
}

input FormulaUpdateWithWhereUniqueWithoutUnitInput {
  where: FormulaWhereUniqueInput!
  data: FormulaUpdateWithoutUnitDataInput!
}

input FormulaUpdateWithWhereUniqueWithoutUpdateByInput {
  where: FormulaWhereUniqueInput!
  data: FormulaUpdateWithoutUpdateByDataInput!
}

input FormulaUpsertWithWhereUniqueWithoutCreatedByInput {
  where: FormulaWhereUniqueInput!
  update: FormulaUpdateWithoutCreatedByDataInput!
  create: FormulaCreateWithoutCreatedByInput!
}

input FormulaUpsertWithWhereUniqueWithoutSubjectInput {
  where: FormulaWhereUniqueInput!
  update: FormulaUpdateWithoutSubjectDataInput!
  create: FormulaCreateWithoutSubjectInput!
}

input FormulaUpsertWithWhereUniqueWithoutTopicInput {
  where: FormulaWhereUniqueInput!
  update: FormulaUpdateWithoutTopicDataInput!
  create: FormulaCreateWithoutTopicInput!
}

input FormulaUpsertWithWhereUniqueWithoutUnitInput {
  where: FormulaWhereUniqueInput!
  update: FormulaUpdateWithoutUnitDataInput!
  create: FormulaCreateWithoutUnitInput!
}

input FormulaUpsertWithWhereUniqueWithoutUpdateByInput {
  where: FormulaWhereUniqueInput!
  update: FormulaUpdateWithoutUpdateByDataInput!
  create: FormulaCreateWithoutUpdateByInput!
}

input FormulaWhereInput {
  """Logical AND on all given filters."""
  AND: [FormulaWhereInput!]

  """Logical OR on all given filters."""
  OR: [FormulaWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FormulaWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  level: Int

  """All values that are not equal to given value."""
  level_not: Int

  """All values that are contained in given list."""
  level_in: [Int!]

  """All values that are not contained in given list."""
  level_not_in: [Int!]

  """All values less than the given value."""
  level_lt: Int

  """All values less than or equal the given value."""
  level_lte: Int

  """All values greater than the given value."""
  level_gt: Int

  """All values greater than or equal the given value."""
  level_gte: Int
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  plantDate: DateTime

  """All values that are not equal to given value."""
  plantDate_not: DateTime

  """All values that are contained in given list."""
  plantDate_in: [DateTime!]

  """All values that are not contained in given list."""
  plantDate_not_in: [DateTime!]

  """All values less than the given value."""
  plantDate_lt: DateTime

  """All values less than or equal the given value."""
  plantDate_lte: DateTime

  """All values greater than the given value."""
  plantDate_gt: DateTime

  """All values greater than or equal the given value."""
  plantDate_gte: DateTime
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  available: String

  """All values that are not equal to given value."""
  available_not: String

  """All values that are contained in given list."""
  available_in: [String!]

  """All values that are not contained in given list."""
  available_not_in: [String!]

  """All values less than the given value."""
  available_lt: String

  """All values less than or equal the given value."""
  available_lte: String

  """All values greater than the given value."""
  available_gt: String

  """All values greater than or equal the given value."""
  available_gte: String

  """All values containing the given string."""
  available_contains: String

  """All values not containing the given string."""
  available_not_contains: String

  """All values starting with the given string."""
  available_starts_with: String

  """All values not starting with the given string."""
  available_not_starts_with: String

  """All values ending with the given string."""
  available_ends_with: String

  """All values not ending with the given string."""
  available_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  subject: SubjectWhereInput
  unit: UnitWhereInput
  topic: TopicWhereInput
  createdBy: UserWhereInput
  updateBy_every: UserWhereInput
  updateBy_some: UserWhereInput
  updateBy_none: UserWhereInput
}

input FormulaWhereUniqueInput {
  id: ID
}

type Group implements Node {
  id: ID!
  name: String!
  description: String
  suborgid: Suborg!
  subgroups(where: SubGroupWhereInput, orderBy: SubGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubGroup!]
  groupRoles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type GroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  id: ID
  name: String!
  description: String
  suborgid: SuborgCreateOneWithoutUserGroupsInput!
  subgroups: SubGroupCreateManyWithoutGroupidInput
  groupRoles: RoleCreateManyWithoutGroupInput
  subjects: SubjectCreateManyWithoutGroupInput
}

input GroupCreateManyWithoutSuborgidInput {
  create: [GroupCreateWithoutSuborgidInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateOneWithoutGroupRolesInput {
  create: GroupCreateWithoutGroupRolesInput
  connect: GroupWhereUniqueInput
}

input GroupCreateOneWithoutSubgroupsInput {
  create: GroupCreateWithoutSubgroupsInput
  connect: GroupWhereUniqueInput
}

input GroupCreateOneWithoutSubjectsInput {
  create: GroupCreateWithoutSubjectsInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutGroupRolesInput {
  id: ID
  name: String!
  description: String
  suborgid: SuborgCreateOneWithoutUserGroupsInput!
  subgroups: SubGroupCreateManyWithoutGroupidInput
  subjects: SubjectCreateManyWithoutGroupInput
}

input GroupCreateWithoutSubgroupsInput {
  id: ID
  name: String!
  description: String
  suborgid: SuborgCreateOneWithoutUserGroupsInput!
  groupRoles: RoleCreateManyWithoutGroupInput
  subjects: SubjectCreateManyWithoutGroupInput
}

input GroupCreateWithoutSubjectsInput {
  id: ID
  name: String!
  description: String
  suborgid: SuborgCreateOneWithoutUserGroupsInput!
  subgroups: SubGroupCreateManyWithoutGroupidInput
  groupRoles: RoleCreateManyWithoutGroupInput
}

input GroupCreateWithoutSuborgidInput {
  id: ID
  name: String!
  description: String
  subgroups: SubGroupCreateManyWithoutGroupidInput
  groupRoles: RoleCreateManyWithoutGroupInput
  subjects: SubjectCreateManyWithoutGroupInput
}

"""An edge in a connection."""
type GroupEdge {
  """The item at the end of the edge."""
  node: Group!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GroupPreviousValues {
  id: ID!
  name: String!
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input GroupScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
}

input GroupUpdateInput {
  name: String
  description: String
  suborgid: SuborgUpdateOneRequiredWithoutUserGroupsInput
  subgroups: SubGroupUpdateManyWithoutGroupidInput
  groupRoles: RoleUpdateManyWithoutGroupInput
  subjects: SubjectUpdateManyWithoutGroupInput
}

input GroupUpdateManyDataInput {
  name: String
  description: String
}

input GroupUpdateManyMutationInput {
  name: String
  description: String
}

input GroupUpdateManyWithoutSuborgidInput {
  create: [GroupCreateWithoutSuborgidInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutSuborgidInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
  deleteMany: [GroupScalarWhereInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutSuborgidInput!]
}

input GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput!
  data: GroupUpdateManyDataInput!
}

input GroupUpdateOneRequiredWithoutSubgroupsInput {
  create: GroupCreateWithoutSubgroupsInput
  connect: GroupWhereUniqueInput
  update: GroupUpdateWithoutSubgroupsDataInput
  upsert: GroupUpsertWithoutSubgroupsInput
}

input GroupUpdateOneWithoutGroupRolesInput {
  create: GroupCreateWithoutGroupRolesInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GroupUpdateWithoutGroupRolesDataInput
  upsert: GroupUpsertWithoutGroupRolesInput
}

input GroupUpdateOneWithoutSubjectsInput {
  create: GroupCreateWithoutSubjectsInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GroupUpdateWithoutSubjectsDataInput
  upsert: GroupUpsertWithoutSubjectsInput
}

input GroupUpdateWithoutGroupRolesDataInput {
  name: String
  description: String
  suborgid: SuborgUpdateOneRequiredWithoutUserGroupsInput
  subgroups: SubGroupUpdateManyWithoutGroupidInput
  subjects: SubjectUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutSubgroupsDataInput {
  name: String
  description: String
  suborgid: SuborgUpdateOneRequiredWithoutUserGroupsInput
  groupRoles: RoleUpdateManyWithoutGroupInput
  subjects: SubjectUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutSubjectsDataInput {
  name: String
  description: String
  suborgid: SuborgUpdateOneRequiredWithoutUserGroupsInput
  subgroups: SubGroupUpdateManyWithoutGroupidInput
  groupRoles: RoleUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutSuborgidDataInput {
  name: String
  description: String
  subgroups: SubGroupUpdateManyWithoutGroupidInput
  groupRoles: RoleUpdateManyWithoutGroupInput
  subjects: SubjectUpdateManyWithoutGroupInput
}

input GroupUpdateWithWhereUniqueWithoutSuborgidInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutSuborgidDataInput!
}

input GroupUpsertWithoutGroupRolesInput {
  update: GroupUpdateWithoutGroupRolesDataInput!
  create: GroupCreateWithoutGroupRolesInput!
}

input GroupUpsertWithoutSubgroupsInput {
  update: GroupUpdateWithoutSubgroupsDataInput!
  create: GroupCreateWithoutSubgroupsInput!
}

input GroupUpsertWithoutSubjectsInput {
  update: GroupUpdateWithoutSubjectsDataInput!
  create: GroupCreateWithoutSubjectsInput!
}

input GroupUpsertWithWhereUniqueWithoutSuborgidInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutSuborgidDataInput!
  create: GroupCreateWithoutSuborgidInput!
}

input GroupWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  suborgid: SuborgWhereInput
  subgroups_every: SubGroupWhereInput
  subgroups_some: SubGroupWhereInput
  subgroups_none: SubGroupWhereInput
  groupRoles_every: RoleWhereInput
  groupRoles_some: RoleWhereInput
  groupRoles_none: RoleWhereInput
  subjects_every: SubjectWhereInput
  subjects_some: SubjectWhereInput
  subjects_none: SubjectWhereInput
}

input GroupWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Medium implements Node {
  id: ID!
  name: String!
  localname: String
  subgroup: SubGroup
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type MediumConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MediumEdge]!
  aggregate: AggregateMedium!
}

input MediumCreateInput {
  id: ID
  name: String!
  localname: String
  subgroup: SubGroupCreateOneWithoutMediumInput
  subjects: SubjectCreateManyWithoutMediumInput
}

input MediumCreateManyWithoutSubgroupInput {
  create: [MediumCreateWithoutSubgroupInput!]
  connect: [MediumWhereUniqueInput!]
}

input MediumCreateOneWithoutSubjectsInput {
  create: MediumCreateWithoutSubjectsInput
  connect: MediumWhereUniqueInput
}

input MediumCreateWithoutSubgroupInput {
  id: ID
  name: String!
  localname: String
  subjects: SubjectCreateManyWithoutMediumInput
}

input MediumCreateWithoutSubjectsInput {
  id: ID
  name: String!
  localname: String
  subgroup: SubGroupCreateOneWithoutMediumInput
}

"""An edge in a connection."""
type MediumEdge {
  """The item at the end of the edge."""
  node: Medium!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MediumOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  localname_ASC
  localname_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MediumPreviousValues {
  id: ID!
  name: String!
  localname: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input MediumScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [MediumScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [MediumScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MediumScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  localname: String

  """All values that are not equal to given value."""
  localname_not: String

  """All values that are contained in given list."""
  localname_in: [String!]

  """All values that are not contained in given list."""
  localname_not_in: [String!]

  """All values less than the given value."""
  localname_lt: String

  """All values less than or equal the given value."""
  localname_lte: String

  """All values greater than the given value."""
  localname_gt: String

  """All values greater than or equal the given value."""
  localname_gte: String

  """All values containing the given string."""
  localname_contains: String

  """All values not containing the given string."""
  localname_not_contains: String

  """All values starting with the given string."""
  localname_starts_with: String

  """All values not starting with the given string."""
  localname_not_starts_with: String

  """All values ending with the given string."""
  localname_ends_with: String

  """All values not ending with the given string."""
  localname_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type MediumSubscriptionPayload {
  mutation: MutationType!
  node: Medium
  updatedFields: [String!]
  previousValues: MediumPreviousValues
}

input MediumSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MediumSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MediumSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MediumSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MediumWhereInput
}

input MediumUpdateInput {
  name: String
  localname: String
  subgroup: SubGroupUpdateOneWithoutMediumInput
  subjects: SubjectUpdateManyWithoutMediumInput
}

input MediumUpdateManyDataInput {
  name: String
  localname: String
}

input MediumUpdateManyMutationInput {
  name: String
  localname: String
}

input MediumUpdateManyWithoutSubgroupInput {
  create: [MediumCreateWithoutSubgroupInput!]
  connect: [MediumWhereUniqueInput!]
  set: [MediumWhereUniqueInput!]
  disconnect: [MediumWhereUniqueInput!]
  delete: [MediumWhereUniqueInput!]
  update: [MediumUpdateWithWhereUniqueWithoutSubgroupInput!]
  updateMany: [MediumUpdateManyWithWhereNestedInput!]
  deleteMany: [MediumScalarWhereInput!]
  upsert: [MediumUpsertWithWhereUniqueWithoutSubgroupInput!]
}

input MediumUpdateManyWithWhereNestedInput {
  where: MediumScalarWhereInput!
  data: MediumUpdateManyDataInput!
}

input MediumUpdateOneWithoutSubjectsInput {
  create: MediumCreateWithoutSubjectsInput
  connect: MediumWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MediumUpdateWithoutSubjectsDataInput
  upsert: MediumUpsertWithoutSubjectsInput
}

input MediumUpdateWithoutSubgroupDataInput {
  name: String
  localname: String
  subjects: SubjectUpdateManyWithoutMediumInput
}

input MediumUpdateWithoutSubjectsDataInput {
  name: String
  localname: String
  subgroup: SubGroupUpdateOneWithoutMediumInput
}

input MediumUpdateWithWhereUniqueWithoutSubgroupInput {
  where: MediumWhereUniqueInput!
  data: MediumUpdateWithoutSubgroupDataInput!
}

input MediumUpsertWithoutSubjectsInput {
  update: MediumUpdateWithoutSubjectsDataInput!
  create: MediumCreateWithoutSubjectsInput!
}

input MediumUpsertWithWhereUniqueWithoutSubgroupInput {
  where: MediumWhereUniqueInput!
  update: MediumUpdateWithoutSubgroupDataInput!
  create: MediumCreateWithoutSubgroupInput!
}

input MediumWhereInput {
  """Logical AND on all given filters."""
  AND: [MediumWhereInput!]

  """Logical OR on all given filters."""
  OR: [MediumWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MediumWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  localname: String

  """All values that are not equal to given value."""
  localname_not: String

  """All values that are contained in given list."""
  localname_in: [String!]

  """All values that are not contained in given list."""
  localname_not_in: [String!]

  """All values less than the given value."""
  localname_lt: String

  """All values less than or equal the given value."""
  localname_lte: String

  """All values greater than the given value."""
  localname_gt: String

  """All values greater than or equal the given value."""
  localname_gte: String

  """All values containing the given string."""
  localname_contains: String

  """All values not containing the given string."""
  localname_not_contains: String

  """All values starting with the given string."""
  localname_starts_with: String

  """All values not starting with the given string."""
  localname_not_starts_with: String

  """All values ending with the given string."""
  localname_ends_with: String

  """All values not ending with the given string."""
  localname_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  subgroup: SubGroupWhereInput
  subjects_every: SubjectWhereInput
  subjects_some: SubjectWhereInput
  subjects_none: SubjectWhereInput
}

input MediumWhereUniqueInput {
  id: ID
}

type Mutation {
  createOrganization(data: OrganizationCreateInput!): Organization!
  createGroup(data: GroupCreateInput!): Group!
  createSubGroup(data: SubGroupCreateInput!): SubGroup!
  createUserRole(data: UserRoleCreateInput!): UserRole!
  createPost(data: PostCreateInput!): Post!
  createMedium(data: MediumCreateInput!): Medium!
  createComment(data: CommentCreateInput!): Comment!
  createSubjectSubscription(data: SubjectSubscriptionCreateInput!): SubjectSubscription!
  createProfile(data: ProfileCreateInput!): Profile!
  createPersonalProfile(data: PersonalProfileCreateInput!): PersonalProfile!
  createAddress(data: AddressCreateInput!): Address!
  createEducationProfile(data: EducationProfileCreateInput!): EducationProfile!
  createBookmark(data: BookmarkCreateInput!): Bookmark!
  createContent(data: ContentCreateInput!): Content!
  createExample(data: ExampleCreateInput!): Example!
  createFormula(data: FormulaCreateInput!): Formula!
  createNote(data: NoteCreateInput!): Note!
  createQuestion(data: QuestionCreateInput!): Question!
  createResult(data: ResultCreateInput!): Result!
  createStd(data: StdCreateInput!): Std!
  createTipsTrick(data: TipsTrickCreateInput!): TipsTrick!
  createPoll(data: PollCreateInput!): Poll!
  createOption(data: OptionCreateInput!): Option!
  createVote(data: VoteCreateInput!): Vote!
  createSuborg(data: SuborgCreateInput!): Suborg!
  createUser(data: UserCreateInput!): User!
  createCourse(data: CourseCreateInput!): Course!
  createRole(data: RoleCreateInput!): Role!
  createUnit(data: UnitCreateInput!): Unit!
  createSubject(data: SubjectCreateInput!): Subject!
  createExam(data: ExamCreateInput!): Exam!
  createTopic(data: TopicCreateInput!): Topic!
  updateOrganization(data: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateSubGroup(data: SubGroupUpdateInput!, where: SubGroupWhereUniqueInput!): SubGroup
  updateUserRole(data: UserRoleUpdateInput!, where: UserRoleWhereUniqueInput!): UserRole
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateMedium(data: MediumUpdateInput!, where: MediumWhereUniqueInput!): Medium
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateSubjectSubscription(data: SubjectSubscriptionUpdateInput!, where: SubjectSubscriptionWhereUniqueInput!): SubjectSubscription
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updatePersonalProfile(data: PersonalProfileUpdateInput!, where: PersonalProfileWhereUniqueInput!): PersonalProfile
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateEducationProfile(data: EducationProfileUpdateInput!, where: EducationProfileWhereUniqueInput!): EducationProfile
  updateBookmark(data: BookmarkUpdateInput!, where: BookmarkWhereUniqueInput!): Bookmark
  updateContent(data: ContentUpdateInput!, where: ContentWhereUniqueInput!): Content
  updateExample(data: ExampleUpdateInput!, where: ExampleWhereUniqueInput!): Example
  updateFormula(data: FormulaUpdateInput!, where: FormulaWhereUniqueInput!): Formula
  updateNote(data: NoteUpdateInput!, where: NoteWhereUniqueInput!): Note
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateResult(data: ResultUpdateInput!, where: ResultWhereUniqueInput!): Result
  updateStd(data: StdUpdateInput!, where: StdWhereUniqueInput!): Std
  updateTipsTrick(data: TipsTrickUpdateInput!, where: TipsTrickWhereUniqueInput!): TipsTrick
  updatePoll(data: PollUpdateInput!, where: PollWhereUniqueInput!): Poll
  updateOption(data: OptionUpdateInput!, where: OptionWhereUniqueInput!): Option
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  updateSuborg(data: SuborgUpdateInput!, where: SuborgWhereUniqueInput!): Suborg
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateUnit(data: UnitUpdateInput!, where: UnitWhereUniqueInput!): Unit
  updateSubject(data: SubjectUpdateInput!, where: SubjectWhereUniqueInput!): Subject
  updateExam(data: ExamUpdateInput!, where: ExamWhereUniqueInput!): Exam
  updateTopic(data: TopicUpdateInput!, where: TopicWhereUniqueInput!): Topic
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteSubGroup(where: SubGroupWhereUniqueInput!): SubGroup
  deleteUserRole(where: UserRoleWhereUniqueInput!): UserRole
  deletePost(where: PostWhereUniqueInput!): Post
  deleteMedium(where: MediumWhereUniqueInput!): Medium
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteSubjectSubscription(where: SubjectSubscriptionWhereUniqueInput!): SubjectSubscription
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deletePersonalProfile(where: PersonalProfileWhereUniqueInput!): PersonalProfile
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteEducationProfile(where: EducationProfileWhereUniqueInput!): EducationProfile
  deleteBookmark(where: BookmarkWhereUniqueInput!): Bookmark
  deleteContent(where: ContentWhereUniqueInput!): Content
  deleteExample(where: ExampleWhereUniqueInput!): Example
  deleteFormula(where: FormulaWhereUniqueInput!): Formula
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteResult(where: ResultWhereUniqueInput!): Result
  deleteStd(where: StdWhereUniqueInput!): Std
  deleteTipsTrick(where: TipsTrickWhereUniqueInput!): TipsTrick
  deletePoll(where: PollWhereUniqueInput!): Poll
  deleteOption(where: OptionWhereUniqueInput!): Option
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteSuborg(where: SuborgWhereUniqueInput!): Suborg
  deleteUser(where: UserWhereUniqueInput!): User
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteUnit(where: UnitWhereUniqueInput!): Unit
  deleteSubject(where: SubjectWhereUniqueInput!): Subject
  deleteExam(where: ExamWhereUniqueInput!): Exam
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  upsertOrganization(where: OrganizationWhereUniqueInput!, create: OrganizationCreateInput!, update: OrganizationUpdateInput!): Organization!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  upsertSubGroup(where: SubGroupWhereUniqueInput!, create: SubGroupCreateInput!, update: SubGroupUpdateInput!): SubGroup!
  upsertUserRole(where: UserRoleWhereUniqueInput!, create: UserRoleCreateInput!, update: UserRoleUpdateInput!): UserRole!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertMedium(where: MediumWhereUniqueInput!, create: MediumCreateInput!, update: MediumUpdateInput!): Medium!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  upsertSubjectSubscription(where: SubjectSubscriptionWhereUniqueInput!, create: SubjectSubscriptionCreateInput!, update: SubjectSubscriptionUpdateInput!): SubjectSubscription!
  upsertProfile(where: ProfileWhereUniqueInput!, create: ProfileCreateInput!, update: ProfileUpdateInput!): Profile!
  upsertPersonalProfile(where: PersonalProfileWhereUniqueInput!, create: PersonalProfileCreateInput!, update: PersonalProfileUpdateInput!): PersonalProfile!
  upsertAddress(where: AddressWhereUniqueInput!, create: AddressCreateInput!, update: AddressUpdateInput!): Address!
  upsertEducationProfile(where: EducationProfileWhereUniqueInput!, create: EducationProfileCreateInput!, update: EducationProfileUpdateInput!): EducationProfile!
  upsertBookmark(where: BookmarkWhereUniqueInput!, create: BookmarkCreateInput!, update: BookmarkUpdateInput!): Bookmark!
  upsertContent(where: ContentWhereUniqueInput!, create: ContentCreateInput!, update: ContentUpdateInput!): Content!
  upsertExample(where: ExampleWhereUniqueInput!, create: ExampleCreateInput!, update: ExampleUpdateInput!): Example!
  upsertFormula(where: FormulaWhereUniqueInput!, create: FormulaCreateInput!, update: FormulaUpdateInput!): Formula!
  upsertNote(where: NoteWhereUniqueInput!, create: NoteCreateInput!, update: NoteUpdateInput!): Note!
  upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  upsertResult(where: ResultWhereUniqueInput!, create: ResultCreateInput!, update: ResultUpdateInput!): Result!
  upsertStd(where: StdWhereUniqueInput!, create: StdCreateInput!, update: StdUpdateInput!): Std!
  upsertTipsTrick(where: TipsTrickWhereUniqueInput!, create: TipsTrickCreateInput!, update: TipsTrickUpdateInput!): TipsTrick!
  upsertPoll(where: PollWhereUniqueInput!, create: PollCreateInput!, update: PollUpdateInput!): Poll!
  upsertOption(where: OptionWhereUniqueInput!, create: OptionCreateInput!, update: OptionUpdateInput!): Option!
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  upsertSuborg(where: SuborgWhereUniqueInput!, create: SuborgCreateInput!, update: SuborgUpdateInput!): Suborg!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  upsertUnit(where: UnitWhereUniqueInput!, create: UnitCreateInput!, update: UnitUpdateInput!): Unit!
  upsertSubject(where: SubjectWhereUniqueInput!, create: SubjectCreateInput!, update: SubjectUpdateInput!): Subject!
  upsertExam(where: ExamWhereUniqueInput!, create: ExamCreateInput!, update: ExamUpdateInput!): Exam!
  upsertTopic(where: TopicWhereUniqueInput!, create: TopicCreateInput!, update: TopicUpdateInput!): Topic!
  updateManyOrganizations(data: OrganizationUpdateManyMutationInput!, where: OrganizationWhereInput): BatchPayload!
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  updateManySubGroups(data: SubGroupUpdateManyMutationInput!, where: SubGroupWhereInput): BatchPayload!
  updateManyUserRoles(data: UserRoleUpdateManyMutationInput!, where: UserRoleWhereInput): BatchPayload!
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyMediums(data: MediumUpdateManyMutationInput!, where: MediumWhereInput): BatchPayload!
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  updateManySubjectSubscriptions(data: SubjectSubscriptionUpdateManyMutationInput!, where: SubjectSubscriptionWhereInput): BatchPayload!
  updateManyProfiles(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): BatchPayload!
  updateManyPersonalProfiles(data: PersonalProfileUpdateManyMutationInput!, where: PersonalProfileWhereInput): BatchPayload!
  updateManyAddresses(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  updateManyEducationProfiles(data: EducationProfileUpdateManyMutationInput!, where: EducationProfileWhereInput): BatchPayload!
  updateManyBookmarks(data: BookmarkUpdateManyMutationInput!, where: BookmarkWhereInput): BatchPayload!
  updateManyContents(data: ContentUpdateManyMutationInput!, where: ContentWhereInput): BatchPayload!
  updateManyExamples(data: ExampleUpdateManyMutationInput!, where: ExampleWhereInput): BatchPayload!
  updateManyFormulas(data: FormulaUpdateManyMutationInput!, where: FormulaWhereInput): BatchPayload!
  updateManyNotes(data: NoteUpdateManyMutationInput!, where: NoteWhereInput): BatchPayload!
  updateManyQuestions(data: QuestionUpdateManyMutationInput!, where: QuestionWhereInput): BatchPayload!
  updateManyResults(data: ResultUpdateManyMutationInput!, where: ResultWhereInput): BatchPayload!
  updateManyStds(data: StdUpdateManyMutationInput!, where: StdWhereInput): BatchPayload!
  updateManyTipsTricks(data: TipsTrickUpdateManyMutationInput!, where: TipsTrickWhereInput): BatchPayload!
  updateManyPolls(data: PollUpdateManyMutationInput!, where: PollWhereInput): BatchPayload!
  updateManyOptions(data: OptionUpdateManyMutationInput!, where: OptionWhereInput): BatchPayload!
  updateManySuborgs(data: SuborgUpdateManyMutationInput!, where: SuborgWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  updateManyUnits(data: UnitUpdateManyMutationInput!, where: UnitWhereInput): BatchPayload!
  updateManySubjects(data: SubjectUpdateManyMutationInput!, where: SubjectWhereInput): BatchPayload!
  updateManyExams(data: ExamUpdateManyMutationInput!, where: ExamWhereInput): BatchPayload!
  updateManyTopics(data: TopicUpdateManyMutationInput!, where: TopicWhereInput): BatchPayload!
  deleteManyOrganizations(where: OrganizationWhereInput): BatchPayload!
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  deleteManySubGroups(where: SubGroupWhereInput): BatchPayload!
  deleteManyUserRoles(where: UserRoleWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyMediums(where: MediumWhereInput): BatchPayload!
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  deleteManySubjectSubscriptions(where: SubjectSubscriptionWhereInput): BatchPayload!
  deleteManyProfiles(where: ProfileWhereInput): BatchPayload!
  deleteManyPersonalProfiles(where: PersonalProfileWhereInput): BatchPayload!
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  deleteManyEducationProfiles(where: EducationProfileWhereInput): BatchPayload!
  deleteManyBookmarks(where: BookmarkWhereInput): BatchPayload!
  deleteManyContents(where: ContentWhereInput): BatchPayload!
  deleteManyExamples(where: ExampleWhereInput): BatchPayload!
  deleteManyFormulas(where: FormulaWhereInput): BatchPayload!
  deleteManyNotes(where: NoteWhereInput): BatchPayload!
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
  deleteManyResults(where: ResultWhereInput): BatchPayload!
  deleteManyStds(where: StdWhereInput): BatchPayload!
  deleteManyTipsTricks(where: TipsTrickWhereInput): BatchPayload!
  deleteManyPolls(where: PollWhereInput): BatchPayload!
  deleteManyOptions(where: OptionWhereInput): BatchPayload!
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
  deleteManySuborgs(where: SuborgWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  deleteManyUnits(where: UnitWhereInput): BatchPayload!
  deleteManySubjects(where: SubjectWhereInput): BatchPayload!
  deleteManyExams(where: ExamWhereInput): BatchPayload!
  deleteManyTopics(where: TopicWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Note implements Node {
  id: ID!
  name: String!
  userid: User!
  updatedAt: DateTime!
  createdAt: DateTime!
  subject: Subject
  unit: Unit
  topic: Topic
  notedata: Json
}

"""A connection to a list of items."""
type NoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NoteEdge]!
  aggregate: AggregateNote!
}

input NoteCreateInput {
  id: ID
  name: String!
  notedata: Json
  userid: UserCreateOneInput!
  subject: SubjectCreateOneInput
  unit: UnitCreateOneInput
  topic: TopicCreateOneInput
}

"""An edge in a connection."""
type NoteEdge {
  """The item at the end of the edge."""
  node: Note!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NoteOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  notedata_ASC
  notedata_DESC
}

type NotePreviousValues {
  id: ID!
  name: String!
  updatedAt: DateTime!
  createdAt: DateTime!
  notedata: Json
}

type NoteSubscriptionPayload {
  mutation: MutationType!
  node: Note
  updatedFields: [String!]
  previousValues: NotePreviousValues
}

input NoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NoteSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NoteWhereInput
}

input NoteUpdateInput {
  name: String
  notedata: Json
  userid: UserUpdateOneRequiredInput
  subject: SubjectUpdateOneInput
  unit: UnitUpdateOneInput
  topic: TopicUpdateOneInput
}

input NoteUpdateManyMutationInput {
  name: String
  notedata: Json
}

input NoteWhereInput {
  """Logical AND on all given filters."""
  AND: [NoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [NoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  userid: UserWhereInput
  subject: SubjectWhereInput
  unit: UnitWhereInput
  topic: TopicWhereInput
}

input NoteWhereUniqueInput {
  id: ID
}

type Option implements Node {
  id: ID!
  name: String!
  color: Color!
  createdAt: DateTime!
  updatedAt: DateTime!
  poll: Poll
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

"""A connection to a list of items."""
type OptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OptionEdge]!
  aggregate: AggregateOption!
}

input OptionCreateInput {
  id: ID
  name: String!
  color: Color!
  poll: PollCreateOneWithoutOptionsInput
  votes: VoteCreateManyWithoutOptionInput
}

input OptionCreateManyWithoutPollInput {
  create: [OptionCreateWithoutPollInput!]
  connect: [OptionWhereUniqueInput!]
}

input OptionCreateOneWithoutVotesInput {
  create: OptionCreateWithoutVotesInput
  connect: OptionWhereUniqueInput
}

input OptionCreateWithoutPollInput {
  id: ID
  name: String!
  color: Color!
  votes: VoteCreateManyWithoutOptionInput
}

input OptionCreateWithoutVotesInput {
  id: ID
  name: String!
  color: Color!
  poll: PollCreateOneWithoutOptionsInput
}

"""An edge in a connection."""
type OptionEdge {
  """The item at the end of the edge."""
  node: Option!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OptionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  color_ASC
  color_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OptionPreviousValues {
  id: ID!
  name: String!
  color: Color!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input OptionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [OptionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [OptionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OptionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  color: Color

  """All values that are not equal to given value."""
  color_not: Color

  """All values that are contained in given list."""
  color_in: [Color!]

  """All values that are not contained in given list."""
  color_not_in: [Color!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type OptionSubscriptionPayload {
  mutation: MutationType!
  node: Option
  updatedFields: [String!]
  previousValues: OptionPreviousValues
}

input OptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OptionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OptionWhereInput
}

input OptionUpdateInput {
  name: String
  color: Color
  poll: PollUpdateOneWithoutOptionsInput
  votes: VoteUpdateManyWithoutOptionInput
}

input OptionUpdateManyDataInput {
  name: String
  color: Color
}

input OptionUpdateManyMutationInput {
  name: String
  color: Color
}

input OptionUpdateManyWithoutPollInput {
  create: [OptionCreateWithoutPollInput!]
  connect: [OptionWhereUniqueInput!]
  set: [OptionWhereUniqueInput!]
  disconnect: [OptionWhereUniqueInput!]
  delete: [OptionWhereUniqueInput!]
  update: [OptionUpdateWithWhereUniqueWithoutPollInput!]
  updateMany: [OptionUpdateManyWithWhereNestedInput!]
  deleteMany: [OptionScalarWhereInput!]
  upsert: [OptionUpsertWithWhereUniqueWithoutPollInput!]
}

input OptionUpdateManyWithWhereNestedInput {
  where: OptionScalarWhereInput!
  data: OptionUpdateManyDataInput!
}

input OptionUpdateOneWithoutVotesInput {
  create: OptionCreateWithoutVotesInput
  connect: OptionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OptionUpdateWithoutVotesDataInput
  upsert: OptionUpsertWithoutVotesInput
}

input OptionUpdateWithoutPollDataInput {
  name: String
  color: Color
  votes: VoteUpdateManyWithoutOptionInput
}

input OptionUpdateWithoutVotesDataInput {
  name: String
  color: Color
  poll: PollUpdateOneWithoutOptionsInput
}

input OptionUpdateWithWhereUniqueWithoutPollInput {
  where: OptionWhereUniqueInput!
  data: OptionUpdateWithoutPollDataInput!
}

input OptionUpsertWithoutVotesInput {
  update: OptionUpdateWithoutVotesDataInput!
  create: OptionCreateWithoutVotesInput!
}

input OptionUpsertWithWhereUniqueWithoutPollInput {
  where: OptionWhereUniqueInput!
  update: OptionUpdateWithoutPollDataInput!
  create: OptionCreateWithoutPollInput!
}

input OptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  color: Color

  """All values that are not equal to given value."""
  color_not: Color

  """All values that are contained in given list."""
  color_in: [Color!]

  """All values that are not contained in given list."""
  color_not_in: [Color!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  poll: PollWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
}

input OptionWhereUniqueInput {
  id: ID
}

type Organization implements Node {
  id: ID!
  name: String!
  logo: String
  color: String
  description: String
  author(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  suborgs(where: SuborgWhereInput, orderBy: SuborgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Suborg!]
  orgRoles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type OrganizationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrganizationEdge]!
  aggregate: AggregateOrganization!
}

input OrganizationCreateInput {
  id: ID
  name: String!
  logo: String
  color: String
  description: String
  author: UserCreateManyWithoutOrgInput
  suborgs: SuborgCreateManyWithoutOrgInput
  orgRoles: RoleCreateManyWithoutOrgInput
}

input OrganizationCreateOneWithoutAuthorInput {
  create: OrganizationCreateWithoutAuthorInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateOneWithoutOrgRolesInput {
  create: OrganizationCreateWithoutOrgRolesInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateOneWithoutSuborgsInput {
  create: OrganizationCreateWithoutSuborgsInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateWithoutAuthorInput {
  id: ID
  name: String!
  logo: String
  color: String
  description: String
  suborgs: SuborgCreateManyWithoutOrgInput
  orgRoles: RoleCreateManyWithoutOrgInput
}

input OrganizationCreateWithoutOrgRolesInput {
  id: ID
  name: String!
  logo: String
  color: String
  description: String
  author: UserCreateManyWithoutOrgInput
  suborgs: SuborgCreateManyWithoutOrgInput
}

input OrganizationCreateWithoutSuborgsInput {
  id: ID
  name: String!
  logo: String
  color: String
  description: String
  author: UserCreateManyWithoutOrgInput
  orgRoles: RoleCreateManyWithoutOrgInput
}

"""An edge in a connection."""
type OrganizationEdge {
  """The item at the end of the edge."""
  node: Organization!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrganizationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  logo_ASC
  logo_DESC
  color_ASC
  color_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrganizationPreviousValues {
  id: ID!
  name: String!
  logo: String
  color: String
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type OrganizationSubscriptionPayload {
  mutation: MutationType!
  node: Organization
  updatedFields: [String!]
  previousValues: OrganizationPreviousValues
}

input OrganizationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrganizationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrganizationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrganizationSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrganizationWhereInput
}

input OrganizationUpdateInput {
  name: String
  logo: String
  color: String
  description: String
  author: UserUpdateManyWithoutOrgInput
  suborgs: SuborgUpdateManyWithoutOrgInput
  orgRoles: RoleUpdateManyWithoutOrgInput
}

input OrganizationUpdateManyMutationInput {
  name: String
  logo: String
  color: String
  description: String
}

input OrganizationUpdateOneRequiredWithoutSuborgsInput {
  create: OrganizationCreateWithoutSuborgsInput
  connect: OrganizationWhereUniqueInput
  update: OrganizationUpdateWithoutSuborgsDataInput
  upsert: OrganizationUpsertWithoutSuborgsInput
}

input OrganizationUpdateOneWithoutAuthorInput {
  create: OrganizationCreateWithoutAuthorInput
  connect: OrganizationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrganizationUpdateWithoutAuthorDataInput
  upsert: OrganizationUpsertWithoutAuthorInput
}

input OrganizationUpdateOneWithoutOrgRolesInput {
  create: OrganizationCreateWithoutOrgRolesInput
  connect: OrganizationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrganizationUpdateWithoutOrgRolesDataInput
  upsert: OrganizationUpsertWithoutOrgRolesInput
}

input OrganizationUpdateWithoutAuthorDataInput {
  name: String
  logo: String
  color: String
  description: String
  suborgs: SuborgUpdateManyWithoutOrgInput
  orgRoles: RoleUpdateManyWithoutOrgInput
}

input OrganizationUpdateWithoutOrgRolesDataInput {
  name: String
  logo: String
  color: String
  description: String
  author: UserUpdateManyWithoutOrgInput
  suborgs: SuborgUpdateManyWithoutOrgInput
}

input OrganizationUpdateWithoutSuborgsDataInput {
  name: String
  logo: String
  color: String
  description: String
  author: UserUpdateManyWithoutOrgInput
  orgRoles: RoleUpdateManyWithoutOrgInput
}

input OrganizationUpsertWithoutAuthorInput {
  update: OrganizationUpdateWithoutAuthorDataInput!
  create: OrganizationCreateWithoutAuthorInput!
}

input OrganizationUpsertWithoutOrgRolesInput {
  update: OrganizationUpdateWithoutOrgRolesDataInput!
  create: OrganizationCreateWithoutOrgRolesInput!
}

input OrganizationUpsertWithoutSuborgsInput {
  update: OrganizationUpdateWithoutSuborgsDataInput!
  create: OrganizationCreateWithoutSuborgsInput!
}

input OrganizationWhereInput {
  """Logical AND on all given filters."""
  AND: [OrganizationWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrganizationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrganizationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  logo: String

  """All values that are not equal to given value."""
  logo_not: String

  """All values that are contained in given list."""
  logo_in: [String!]

  """All values that are not contained in given list."""
  logo_not_in: [String!]

  """All values less than the given value."""
  logo_lt: String

  """All values less than or equal the given value."""
  logo_lte: String

  """All values greater than the given value."""
  logo_gt: String

  """All values greater than or equal the given value."""
  logo_gte: String

  """All values containing the given string."""
  logo_contains: String

  """All values not containing the given string."""
  logo_not_contains: String

  """All values starting with the given string."""
  logo_starts_with: String

  """All values not starting with the given string."""
  logo_not_starts_with: String

  """All values ending with the given string."""
  logo_ends_with: String

  """All values not ending with the given string."""
  logo_not_ends_with: String
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author_every: UserWhereInput
  author_some: UserWhereInput
  author_none: UserWhereInput
  suborgs_every: SuborgWhereInput
  suborgs_some: SuborgWhereInput
  suborgs_none: SuborgWhereInput
  orgRoles_every: RoleWhereInput
  orgRoles_some: RoleWhereInput
  orgRoles_none: RoleWhereInput
}

input OrganizationWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PersonalProfile implements Node {
  id: ID!
  name: String!
  avatar: String!
  mobile: String!
  isMobilePublished: Boolean
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address!]
  profileId: Profile!
}

"""A connection to a list of items."""
type PersonalProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PersonalProfileEdge]!
  aggregate: AggregatePersonalProfile!
}

input PersonalProfileCreateInput {
  id: ID
  name: String
  avatar: String!
  mobile: String!
  isMobilePublished: Boolean
  addresses: AddressCreateManyWithoutPersonalProfileInput
  profileId: ProfileCreateOneWithoutPersonalProfiileInput!
}

input PersonalProfileCreateManyWithoutProfileIdInput {
  create: [PersonalProfileCreateWithoutProfileIdInput!]
  connect: [PersonalProfileWhereUniqueInput!]
}

input PersonalProfileCreateOneWithoutAddressesInput {
  create: PersonalProfileCreateWithoutAddressesInput
  connect: PersonalProfileWhereUniqueInput
}

input PersonalProfileCreateWithoutAddressesInput {
  id: ID
  name: String
  avatar: String!
  mobile: String!
  isMobilePublished: Boolean
  profileId: ProfileCreateOneWithoutPersonalProfiileInput!
}

input PersonalProfileCreateWithoutProfileIdInput {
  id: ID
  name: String
  avatar: String!
  mobile: String!
  isMobilePublished: Boolean
  addresses: AddressCreateManyWithoutPersonalProfileInput
}

"""An edge in a connection."""
type PersonalProfileEdge {
  """The item at the end of the edge."""
  node: PersonalProfile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PersonalProfileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  avatar_ASC
  avatar_DESC
  mobile_ASC
  mobile_DESC
  isMobilePublished_ASC
  isMobilePublished_DESC
}

type PersonalProfilePreviousValues {
  id: ID!
  name: String!
  avatar: String!
  mobile: String!
  isMobilePublished: Boolean
}

input PersonalProfileScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonalProfileScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonalProfileScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonalProfileScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  avatar: String

  """All values that are not equal to given value."""
  avatar_not: String

  """All values that are contained in given list."""
  avatar_in: [String!]

  """All values that are not contained in given list."""
  avatar_not_in: [String!]

  """All values less than the given value."""
  avatar_lt: String

  """All values less than or equal the given value."""
  avatar_lte: String

  """All values greater than the given value."""
  avatar_gt: String

  """All values greater than or equal the given value."""
  avatar_gte: String

  """All values containing the given string."""
  avatar_contains: String

  """All values not containing the given string."""
  avatar_not_contains: String

  """All values starting with the given string."""
  avatar_starts_with: String

  """All values not starting with the given string."""
  avatar_not_starts_with: String

  """All values ending with the given string."""
  avatar_ends_with: String

  """All values not ending with the given string."""
  avatar_not_ends_with: String
  mobile: String

  """All values that are not equal to given value."""
  mobile_not: String

  """All values that are contained in given list."""
  mobile_in: [String!]

  """All values that are not contained in given list."""
  mobile_not_in: [String!]

  """All values less than the given value."""
  mobile_lt: String

  """All values less than or equal the given value."""
  mobile_lte: String

  """All values greater than the given value."""
  mobile_gt: String

  """All values greater than or equal the given value."""
  mobile_gte: String

  """All values containing the given string."""
  mobile_contains: String

  """All values not containing the given string."""
  mobile_not_contains: String

  """All values starting with the given string."""
  mobile_starts_with: String

  """All values not starting with the given string."""
  mobile_not_starts_with: String

  """All values ending with the given string."""
  mobile_ends_with: String

  """All values not ending with the given string."""
  mobile_not_ends_with: String
  isMobilePublished: Boolean

  """All values that are not equal to given value."""
  isMobilePublished_not: Boolean
}

type PersonalProfileSubscriptionPayload {
  mutation: MutationType!
  node: PersonalProfile
  updatedFields: [String!]
  previousValues: PersonalProfilePreviousValues
}

input PersonalProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonalProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonalProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonalProfileSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PersonalProfileWhereInput
}

input PersonalProfileUpdateInput {
  name: String
  avatar: String
  mobile: String
  isMobilePublished: Boolean
  addresses: AddressUpdateManyWithoutPersonalProfileInput
  profileId: ProfileUpdateOneRequiredWithoutPersonalProfiileInput
}

input PersonalProfileUpdateManyDataInput {
  name: String
  avatar: String
  mobile: String
  isMobilePublished: Boolean
}

input PersonalProfileUpdateManyMutationInput {
  name: String
  avatar: String
  mobile: String
  isMobilePublished: Boolean
}

input PersonalProfileUpdateManyWithoutProfileIdInput {
  create: [PersonalProfileCreateWithoutProfileIdInput!]
  connect: [PersonalProfileWhereUniqueInput!]
  set: [PersonalProfileWhereUniqueInput!]
  disconnect: [PersonalProfileWhereUniqueInput!]
  delete: [PersonalProfileWhereUniqueInput!]
  update: [PersonalProfileUpdateWithWhereUniqueWithoutProfileIdInput!]
  updateMany: [PersonalProfileUpdateManyWithWhereNestedInput!]
  deleteMany: [PersonalProfileScalarWhereInput!]
  upsert: [PersonalProfileUpsertWithWhereUniqueWithoutProfileIdInput!]
}

input PersonalProfileUpdateManyWithWhereNestedInput {
  where: PersonalProfileScalarWhereInput!
  data: PersonalProfileUpdateManyDataInput!
}

input PersonalProfileUpdateOneWithoutAddressesInput {
  create: PersonalProfileCreateWithoutAddressesInput
  connect: PersonalProfileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PersonalProfileUpdateWithoutAddressesDataInput
  upsert: PersonalProfileUpsertWithoutAddressesInput
}

input PersonalProfileUpdateWithoutAddressesDataInput {
  name: String
  avatar: String
  mobile: String
  isMobilePublished: Boolean
  profileId: ProfileUpdateOneRequiredWithoutPersonalProfiileInput
}

input PersonalProfileUpdateWithoutProfileIdDataInput {
  name: String
  avatar: String
  mobile: String
  isMobilePublished: Boolean
  addresses: AddressUpdateManyWithoutPersonalProfileInput
}

input PersonalProfileUpdateWithWhereUniqueWithoutProfileIdInput {
  where: PersonalProfileWhereUniqueInput!
  data: PersonalProfileUpdateWithoutProfileIdDataInput!
}

input PersonalProfileUpsertWithoutAddressesInput {
  update: PersonalProfileUpdateWithoutAddressesDataInput!
  create: PersonalProfileCreateWithoutAddressesInput!
}

input PersonalProfileUpsertWithWhereUniqueWithoutProfileIdInput {
  where: PersonalProfileWhereUniqueInput!
  update: PersonalProfileUpdateWithoutProfileIdDataInput!
  create: PersonalProfileCreateWithoutProfileIdInput!
}

input PersonalProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonalProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonalProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonalProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  avatar: String

  """All values that are not equal to given value."""
  avatar_not: String

  """All values that are contained in given list."""
  avatar_in: [String!]

  """All values that are not contained in given list."""
  avatar_not_in: [String!]

  """All values less than the given value."""
  avatar_lt: String

  """All values less than or equal the given value."""
  avatar_lte: String

  """All values greater than the given value."""
  avatar_gt: String

  """All values greater than or equal the given value."""
  avatar_gte: String

  """All values containing the given string."""
  avatar_contains: String

  """All values not containing the given string."""
  avatar_not_contains: String

  """All values starting with the given string."""
  avatar_starts_with: String

  """All values not starting with the given string."""
  avatar_not_starts_with: String

  """All values ending with the given string."""
  avatar_ends_with: String

  """All values not ending with the given string."""
  avatar_not_ends_with: String
  mobile: String

  """All values that are not equal to given value."""
  mobile_not: String

  """All values that are contained in given list."""
  mobile_in: [String!]

  """All values that are not contained in given list."""
  mobile_not_in: [String!]

  """All values less than the given value."""
  mobile_lt: String

  """All values less than or equal the given value."""
  mobile_lte: String

  """All values greater than the given value."""
  mobile_gt: String

  """All values greater than or equal the given value."""
  mobile_gte: String

  """All values containing the given string."""
  mobile_contains: String

  """All values not containing the given string."""
  mobile_not_contains: String

  """All values starting with the given string."""
  mobile_starts_with: String

  """All values not starting with the given string."""
  mobile_not_starts_with: String

  """All values ending with the given string."""
  mobile_ends_with: String

  """All values not ending with the given string."""
  mobile_not_ends_with: String
  isMobilePublished: Boolean

  """All values that are not equal to given value."""
  isMobilePublished_not: Boolean
  addresses_every: AddressWhereInput
  addresses_some: AddressWhereInput
  addresses_none: AddressWhereInput
  profileId: ProfileWhereInput
}

input PersonalProfileWhereUniqueInput {
  id: ID
}

type Poll implements Node {
  id: ID!
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  options(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Option!]
}

"""A connection to a list of items."""
type PollConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PollEdge]!
  aggregate: AggregatePoll!
}

input PollCreateInput {
  id: ID
  title: String!
  options: OptionCreateManyWithoutPollInput
}

input PollCreateOneWithoutOptionsInput {
  create: PollCreateWithoutOptionsInput
  connect: PollWhereUniqueInput
}

input PollCreateWithoutOptionsInput {
  id: ID
  title: String!
}

"""An edge in a connection."""
type PollEdge {
  """The item at the end of the edge."""
  node: Poll!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PollOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PollPreviousValues {
  id: ID!
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PollSubscriptionPayload {
  mutation: MutationType!
  node: Poll
  updatedFields: [String!]
  previousValues: PollPreviousValues
}

input PollSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PollSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PollSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PollSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PollWhereInput
}

input PollUpdateInput {
  title: String
  options: OptionUpdateManyWithoutPollInput
}

input PollUpdateManyMutationInput {
  title: String
}

input PollUpdateOneWithoutOptionsInput {
  create: PollCreateWithoutOptionsInput
  connect: PollWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PollUpdateWithoutOptionsDataInput
  upsert: PollUpsertWithoutOptionsInput
}

input PollUpdateWithoutOptionsDataInput {
  title: String
}

input PollUpsertWithoutOptionsInput {
  update: PollUpdateWithoutOptionsDataInput!
  create: PollCreateWithoutOptionsInput!
}

input PollWhereInput {
  """Logical AND on all given filters."""
  AND: [PollWhereInput!]

  """Logical OR on all given filters."""
  OR: [PollWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PollWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  options_every: OptionWhereInput
  options_some: OptionWhereInput
  options_none: OptionWhereInput
}

input PollWhereUniqueInput {
  id: ID
}

type Post implements Node {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  body: String!
  published: Boolean!
  author: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutAuthorInput {
  id: ID
  title: String!
  body: String!
  published: Boolean!
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateWithoutCommentsInput {
  id: ID
  title: String!
  body: String!
  published: Boolean!
  author: UserCreateOneWithoutPostsInput!
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  published_ASC
  published_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input PostScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PostScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  title: String
  body: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
  title: String
  body: String
  published: Boolean
}

input PostUpdateManyMutationInput {
  title: String
  body: String
  published: Boolean
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateWithoutAuthorDataInput {
  title: String
  body: String
  published: Boolean
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithoutCommentsDataInput {
  title: String
  body: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

enum PrismaDatabase {
  default
}

type Profile implements Node {
  id: ID!
  name: String!
  userId: User!
  EducationProfiles(where: EducationProfileWhereInput, orderBy: EducationProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EducationProfile!]
  personalProfiile(where: PersonalProfileWhereInput, orderBy: PersonalProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PersonalProfile!]
}

"""A connection to a list of items."""
type ProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProfileEdge]!
  aggregate: AggregateProfile!
}

input ProfileCreateInput {
  id: ID
  name: String!
  userId: UserCreateOneWithoutMyprofilesInput!
  EducationProfiles: EducationProfileCreateManyWithoutProfileIdInput
  personalProfiile: PersonalProfileCreateManyWithoutProfileIdInput
}

input ProfileCreateManyWithoutUserIdInput {
  create: [ProfileCreateWithoutUserIdInput!]
  connect: [ProfileWhereUniqueInput!]
}

input ProfileCreateOneWithoutEducationProfilesInput {
  create: ProfileCreateWithoutEducationProfilesInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateOneWithoutPersonalProfiileInput {
  create: ProfileCreateWithoutPersonalProfiileInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutEducationProfilesInput {
  id: ID
  name: String!
  userId: UserCreateOneWithoutMyprofilesInput!
  personalProfiile: PersonalProfileCreateManyWithoutProfileIdInput
}

input ProfileCreateWithoutPersonalProfiileInput {
  id: ID
  name: String!
  userId: UserCreateOneWithoutMyprofilesInput!
  EducationProfiles: EducationProfileCreateManyWithoutProfileIdInput
}

input ProfileCreateWithoutUserIdInput {
  id: ID
  name: String!
  EducationProfiles: EducationProfileCreateManyWithoutProfileIdInput
  personalProfiile: PersonalProfileCreateManyWithoutProfileIdInput
}

"""An edge in a connection."""
type ProfileEdge {
  """The item at the end of the edge."""
  node: Profile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProfileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type ProfilePreviousValues {
  id: ID!
  name: String!
}

input ProfileScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfileScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfileScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfileScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type ProfileSubscriptionPayload {
  mutation: MutationType!
  node: Profile
  updatedFields: [String!]
  previousValues: ProfilePreviousValues
}

input ProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfileSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProfileWhereInput
}

input ProfileUpdateInput {
  name: String
  userId: UserUpdateOneRequiredWithoutMyprofilesInput
  EducationProfiles: EducationProfileUpdateManyWithoutProfileIdInput
  personalProfiile: PersonalProfileUpdateManyWithoutProfileIdInput
}

input ProfileUpdateManyDataInput {
  name: String
}

input ProfileUpdateManyMutationInput {
  name: String
}

input ProfileUpdateManyWithoutUserIdInput {
  create: [ProfileCreateWithoutUserIdInput!]
  connect: [ProfileWhereUniqueInput!]
  set: [ProfileWhereUniqueInput!]
  disconnect: [ProfileWhereUniqueInput!]
  delete: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithWhereUniqueWithoutUserIdInput!]
  updateMany: [ProfileUpdateManyWithWhereNestedInput!]
  deleteMany: [ProfileScalarWhereInput!]
  upsert: [ProfileUpsertWithWhereUniqueWithoutUserIdInput!]
}

input ProfileUpdateManyWithWhereNestedInput {
  where: ProfileScalarWhereInput!
  data: ProfileUpdateManyDataInput!
}

input ProfileUpdateOneRequiredWithoutEducationProfilesInput {
  create: ProfileCreateWithoutEducationProfilesInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutEducationProfilesDataInput
  upsert: ProfileUpsertWithoutEducationProfilesInput
}

input ProfileUpdateOneRequiredWithoutPersonalProfiileInput {
  create: ProfileCreateWithoutPersonalProfiileInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutPersonalProfiileDataInput
  upsert: ProfileUpsertWithoutPersonalProfiileInput
}

input ProfileUpdateWithoutEducationProfilesDataInput {
  name: String
  userId: UserUpdateOneRequiredWithoutMyprofilesInput
  personalProfiile: PersonalProfileUpdateManyWithoutProfileIdInput
}

input ProfileUpdateWithoutPersonalProfiileDataInput {
  name: String
  userId: UserUpdateOneRequiredWithoutMyprofilesInput
  EducationProfiles: EducationProfileUpdateManyWithoutProfileIdInput
}

input ProfileUpdateWithoutUserIdDataInput {
  name: String
  EducationProfiles: EducationProfileUpdateManyWithoutProfileIdInput
  personalProfiile: PersonalProfileUpdateManyWithoutProfileIdInput
}

input ProfileUpdateWithWhereUniqueWithoutUserIdInput {
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateWithoutUserIdDataInput!
}

input ProfileUpsertWithoutEducationProfilesInput {
  update: ProfileUpdateWithoutEducationProfilesDataInput!
  create: ProfileCreateWithoutEducationProfilesInput!
}

input ProfileUpsertWithoutPersonalProfiileInput {
  update: ProfileUpdateWithoutPersonalProfiileDataInput!
  create: ProfileCreateWithoutPersonalProfiileInput!
}

input ProfileUpsertWithWhereUniqueWithoutUserIdInput {
  where: ProfileWhereUniqueInput!
  update: ProfileUpdateWithoutUserIdDataInput!
  create: ProfileCreateWithoutUserIdInput!
}

input ProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  userId: UserWhereInput
  EducationProfiles_every: EducationProfileWhereInput
  EducationProfiles_some: EducationProfileWhereInput
  EducationProfiles_none: EducationProfileWhereInput
  personalProfiile_every: PersonalProfileWhereInput
  personalProfiile_some: PersonalProfileWhereInput
  personalProfiile_none: PersonalProfileWhereInput
}

input ProfileWhereUniqueInput {
  id: ID
}

type Query {
  organizations(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Organization]!
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  subGroups(where: SubGroupWhereInput, orderBy: SubGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubGroup]!
  userRoles(where: UserRoleWhereInput, orderBy: UserRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserRole]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  mediums(where: MediumWhereInput, orderBy: MediumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Medium]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  subjectSubscriptions(where: SubjectSubscriptionWhereInput, orderBy: SubjectSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubjectSubscription]!
  profiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile]!
  personalProfiles(where: PersonalProfileWhereInput, orderBy: PersonalProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PersonalProfile]!
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address]!
  educationProfiles(where: EducationProfileWhereInput, orderBy: EducationProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EducationProfile]!
  bookmarks(where: BookmarkWhereInput, orderBy: BookmarkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bookmark]!
  contents(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content]!
  examples(where: ExampleWhereInput, orderBy: ExampleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Example]!
  formulas(where: FormulaWhereInput, orderBy: FormulaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Formula]!
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note]!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  results(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result]!
  stds(where: StdWhereInput, orderBy: StdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Std]!
  tipsTricks(where: TipsTrickWhereInput, orderBy: TipsTrickOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TipsTrick]!
  polls(where: PollWhereInput, orderBy: PollOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poll]!
  options(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Option]!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  suborgs(where: SuborgWhereInput, orderBy: SuborgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Suborg]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  units(where: UnitWhereInput, orderBy: UnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Unit]!
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject]!
  exams(where: ExamWhereInput, orderBy: ExamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exam]!
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic]!
  organization(where: OrganizationWhereUniqueInput!): Organization
  group(where: GroupWhereUniqueInput!): Group
  subGroup(where: SubGroupWhereUniqueInput!): SubGroup
  userRole(where: UserRoleWhereUniqueInput!): UserRole
  post(where: PostWhereUniqueInput!): Post
  medium(where: MediumWhereUniqueInput!): Medium
  comment(where: CommentWhereUniqueInput!): Comment
  subjectSubscription(where: SubjectSubscriptionWhereUniqueInput!): SubjectSubscription
  profile(where: ProfileWhereUniqueInput!): Profile
  personalProfile(where: PersonalProfileWhereUniqueInput!): PersonalProfile
  address(where: AddressWhereUniqueInput!): Address
  educationProfile(where: EducationProfileWhereUniqueInput!): EducationProfile
  bookmark(where: BookmarkWhereUniqueInput!): Bookmark
  content(where: ContentWhereUniqueInput!): Content
  example(where: ExampleWhereUniqueInput!): Example
  formula(where: FormulaWhereUniqueInput!): Formula
  note(where: NoteWhereUniqueInput!): Note
  question(where: QuestionWhereUniqueInput!): Question
  result(where: ResultWhereUniqueInput!): Result
  std(where: StdWhereUniqueInput!): Std
  tipsTrick(where: TipsTrickWhereUniqueInput!): TipsTrick
  poll(where: PollWhereUniqueInput!): Poll
  option(where: OptionWhereUniqueInput!): Option
  vote(where: VoteWhereUniqueInput!): Vote
  suborg(where: SuborgWhereUniqueInput!): Suborg
  user(where: UserWhereUniqueInput!): User
  course(where: CourseWhereUniqueInput!): Course
  role(where: RoleWhereUniqueInput!): Role
  unit(where: UnitWhereUniqueInput!): Unit
  subject(where: SubjectWhereUniqueInput!): Subject
  exam(where: ExamWhereUniqueInput!): Exam
  topic(where: TopicWhereUniqueInput!): Topic
  organizationsConnection(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrganizationConnection!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  subGroupsConnection(where: SubGroupWhereInput, orderBy: SubGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubGroupConnection!
  userRolesConnection(where: UserRoleWhereInput, orderBy: UserRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserRoleConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  mediumsConnection(where: MediumWhereInput, orderBy: MediumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MediumConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  subjectSubscriptionsConnection(where: SubjectSubscriptionWhereInput, orderBy: SubjectSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubjectSubscriptionConnection!
  profilesConnection(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileConnection!
  personalProfilesConnection(where: PersonalProfileWhereInput, orderBy: PersonalProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonalProfileConnection!
  addressesConnection(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AddressConnection!
  educationProfilesConnection(where: EducationProfileWhereInput, orderBy: EducationProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EducationProfileConnection!
  bookmarksConnection(where: BookmarkWhereInput, orderBy: BookmarkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookmarkConnection!
  contentsConnection(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContentConnection!
  examplesConnection(where: ExampleWhereInput, orderBy: ExampleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExampleConnection!
  formulasConnection(where: FormulaWhereInput, orderBy: FormulaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FormulaConnection!
  notesConnection(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NoteConnection!
  questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
  resultsConnection(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResultConnection!
  stdsConnection(where: StdWhereInput, orderBy: StdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StdConnection!
  tipsTricksConnection(where: TipsTrickWhereInput, orderBy: TipsTrickOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TipsTrickConnection!
  pollsConnection(where: PollWhereInput, orderBy: PollOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PollConnection!
  optionsConnection(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OptionConnection!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  suborgsConnection(where: SuborgWhereInput, orderBy: SuborgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SuborgConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  unitsConnection(where: UnitWhereInput, orderBy: UnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UnitConnection!
  subjectsConnection(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubjectConnection!
  examsConnection(where: ExamWhereInput, orderBy: ExamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExamConnection!
  topicsConnection(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TopicConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Question implements Node {
  id: ID!
  subject: Subject
  unit: Unit
  topic: Topic
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  createdBy: User
  level: Int!
  updatedBy: User
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  exam(where: ExamWhereInput, orderBy: ExamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exam!]
  explaination: Json
  descriptionfileInfo: Json
  updatedAt: DateTime!
  createdAt: DateTime!
  results(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result!]
  atemptedResult(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result!]
  notattempted(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result!]
  correct(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result!]
  wrong(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result!]
}

"""A connection to a list of items."""
type QuestionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  id: ID
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  level: Int!
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  exam: ExamCreateManyWithoutQuestionsInput
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateManyWithoutAtemptedResultInput {
  create: [QuestionCreateWithoutAtemptedResultInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutCorrectInput {
  create: [QuestionCreateWithoutCorrectInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutCreatedByInput {
  create: [QuestionCreateWithoutCreatedByInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutExamInput {
  create: [QuestionCreateWithoutExamInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutNotattemptedInput {
  create: [QuestionCreateWithoutNotattemptedInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutResultsInput {
  create: [QuestionCreateWithoutResultsInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutSubjectInput {
  create: [QuestionCreateWithoutSubjectInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutTopicInput {
  create: [QuestionCreateWithoutTopicInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutUnitInput {
  create: [QuestionCreateWithoutUnitInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutUpdatedByInput {
  create: [QuestionCreateWithoutUpdatedByInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutWrongInput {
  create: [QuestionCreateWithoutWrongInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateWithoutAtemptedResultInput {
  id: ID
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  level: Int!
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  exam: ExamCreateManyWithoutQuestionsInput
  results: ResultCreateManyWithoutQuestionsInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutCorrectInput {
  id: ID
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  level: Int!
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  exam: ExamCreateManyWithoutQuestionsInput
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutCreatedByInput {
  id: ID
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  level: Int!
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  exam: ExamCreateManyWithoutQuestionsInput
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutExamInput {
  id: ID
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  level: Int!
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutNotattemptedInput {
  id: ID
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  level: Int!
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  exam: ExamCreateManyWithoutQuestionsInput
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutResultsInput {
  id: ID
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  level: Int!
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  exam: ExamCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutSubjectInput {
  id: ID
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  level: Int!
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  exam: ExamCreateManyWithoutQuestionsInput
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutTopicInput {
  id: ID
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  level: Int!
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  exam: ExamCreateManyWithoutQuestionsInput
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutUnitInput {
  id: ID
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  level: Int!
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  exam: ExamCreateManyWithoutQuestionsInput
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutUpdatedByInput {
  id: ID
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  level: Int!
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  exam: ExamCreateManyWithoutQuestionsInput
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
  wrong: ResultCreateManyWithoutWrongInput
}

input QuestionCreateWithoutWrongInput {
  id: ID
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  level: Int!
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectCreateOneWithoutQuestionsInput
  unit: UnitCreateOneWithoutQuestionsInput
  topic: TopicCreateOneWithoutQuestionsInput
  createdBy: UserCreateOneWithoutQuestionCreatedByInput
  updatedBy: UserCreateOneWithoutQuestionUpdateddByInput
  exam: ExamCreateManyWithoutQuestionsInput
  results: ResultCreateManyWithoutQuestionsInput
  atemptedResult: ResultCreateManyWithoutAttemptedInput
  notattempted: ResultCreateManyWithoutNotattemptedInput
  correct: ResultCreateManyWithoutCorrectInput
}

"""An edge in a connection."""
type QuestionEdge {
  """The item at the end of the edge."""
  node: Question!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  quetype_ASC
  quetype_DESC
  categories_ASC
  categories_DESC
  title_ASC
  title_DESC
  descriptionType_ASC
  descriptionType_DESC
  descriptionurl_ASC
  descriptionurl_DESC
  options_ASC
  options_DESC
  level_ASC
  level_DESC
  plandate_ASC
  plandate_DESC
  isPublished_ASC
  isPublished_DESC
  state_ASC
  state_DESC
  status_ASC
  status_DESC
  available_ASC
  available_DESC
  isReviewed_ASC
  isReviewed_DESC
  explainationType_ASC
  explainationType_DESC
  explaination_ASC
  explaination_DESC
  descriptionfileInfo_ASC
  descriptionfileInfo_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionPreviousValues {
  id: ID!
  quetype: String!
  categories: String
  title: String
  descriptionType: String!
  descriptionurl: String
  options: Json!
  level: Int!
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  updatedAt: DateTime!
  createdAt: DateTime!
}

input QuestionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quetype: String

  """All values that are not equal to given value."""
  quetype_not: String

  """All values that are contained in given list."""
  quetype_in: [String!]

  """All values that are not contained in given list."""
  quetype_not_in: [String!]

  """All values less than the given value."""
  quetype_lt: String

  """All values less than or equal the given value."""
  quetype_lte: String

  """All values greater than the given value."""
  quetype_gt: String

  """All values greater than or equal the given value."""
  quetype_gte: String

  """All values containing the given string."""
  quetype_contains: String

  """All values not containing the given string."""
  quetype_not_contains: String

  """All values starting with the given string."""
  quetype_starts_with: String

  """All values not starting with the given string."""
  quetype_not_starts_with: String

  """All values ending with the given string."""
  quetype_ends_with: String

  """All values not ending with the given string."""
  quetype_not_ends_with: String
  categories: String

  """All values that are not equal to given value."""
  categories_not: String

  """All values that are contained in given list."""
  categories_in: [String!]

  """All values that are not contained in given list."""
  categories_not_in: [String!]

  """All values less than the given value."""
  categories_lt: String

  """All values less than or equal the given value."""
  categories_lte: String

  """All values greater than the given value."""
  categories_gt: String

  """All values greater than or equal the given value."""
  categories_gte: String

  """All values containing the given string."""
  categories_contains: String

  """All values not containing the given string."""
  categories_not_contains: String

  """All values starting with the given string."""
  categories_starts_with: String

  """All values not starting with the given string."""
  categories_not_starts_with: String

  """All values ending with the given string."""
  categories_ends_with: String

  """All values not ending with the given string."""
  categories_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  descriptionType: String

  """All values that are not equal to given value."""
  descriptionType_not: String

  """All values that are contained in given list."""
  descriptionType_in: [String!]

  """All values that are not contained in given list."""
  descriptionType_not_in: [String!]

  """All values less than the given value."""
  descriptionType_lt: String

  """All values less than or equal the given value."""
  descriptionType_lte: String

  """All values greater than the given value."""
  descriptionType_gt: String

  """All values greater than or equal the given value."""
  descriptionType_gte: String

  """All values containing the given string."""
  descriptionType_contains: String

  """All values not containing the given string."""
  descriptionType_not_contains: String

  """All values starting with the given string."""
  descriptionType_starts_with: String

  """All values not starting with the given string."""
  descriptionType_not_starts_with: String

  """All values ending with the given string."""
  descriptionType_ends_with: String

  """All values not ending with the given string."""
  descriptionType_not_ends_with: String
  descriptionurl: String

  """All values that are not equal to given value."""
  descriptionurl_not: String

  """All values that are contained in given list."""
  descriptionurl_in: [String!]

  """All values that are not contained in given list."""
  descriptionurl_not_in: [String!]

  """All values less than the given value."""
  descriptionurl_lt: String

  """All values less than or equal the given value."""
  descriptionurl_lte: String

  """All values greater than the given value."""
  descriptionurl_gt: String

  """All values greater than or equal the given value."""
  descriptionurl_gte: String

  """All values containing the given string."""
  descriptionurl_contains: String

  """All values not containing the given string."""
  descriptionurl_not_contains: String

  """All values starting with the given string."""
  descriptionurl_starts_with: String

  """All values not starting with the given string."""
  descriptionurl_not_starts_with: String

  """All values ending with the given string."""
  descriptionurl_ends_with: String

  """All values not ending with the given string."""
  descriptionurl_not_ends_with: String
  level: Int

  """All values that are not equal to given value."""
  level_not: Int

  """All values that are contained in given list."""
  level_in: [Int!]

  """All values that are not contained in given list."""
  level_not_in: [Int!]

  """All values less than the given value."""
  level_lt: Int

  """All values less than or equal the given value."""
  level_lte: Int

  """All values greater than the given value."""
  level_gt: Int

  """All values greater than or equal the given value."""
  level_gte: Int
  plandate: DateTime

  """All values that are not equal to given value."""
  plandate_not: DateTime

  """All values that are contained in given list."""
  plandate_in: [DateTime!]

  """All values that are not contained in given list."""
  plandate_not_in: [DateTime!]

  """All values less than the given value."""
  plandate_lt: DateTime

  """All values less than or equal the given value."""
  plandate_lte: DateTime

  """All values greater than the given value."""
  plandate_gt: DateTime

  """All values greater than or equal the given value."""
  plandate_gte: DateTime
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  available: String

  """All values that are not equal to given value."""
  available_not: String

  """All values that are contained in given list."""
  available_in: [String!]

  """All values that are not contained in given list."""
  available_not_in: [String!]

  """All values less than the given value."""
  available_lt: String

  """All values less than or equal the given value."""
  available_lte: String

  """All values greater than the given value."""
  available_gt: String

  """All values greater than or equal the given value."""
  available_gte: String

  """All values containing the given string."""
  available_contains: String

  """All values not containing the given string."""
  available_not_contains: String

  """All values starting with the given string."""
  available_starts_with: String

  """All values not starting with the given string."""
  available_not_starts_with: String

  """All values ending with the given string."""
  available_ends_with: String

  """All values not ending with the given string."""
  available_not_ends_with: String
  isReviewed: Boolean

  """All values that are not equal to given value."""
  isReviewed_not: Boolean
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
}

input QuestionUpdateInput {
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  level: Int
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  exam: ExamUpdateManyWithoutQuestionsInput
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateManyDataInput {
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  level: Int
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
}

input QuestionUpdateManyMutationInput {
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  level: Int
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
}

input QuestionUpdateManyWithoutAtemptedResultInput {
  create: [QuestionCreateWithoutAtemptedResultInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutAtemptedResultInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutAtemptedResultInput!]
}

input QuestionUpdateManyWithoutCorrectInput {
  create: [QuestionCreateWithoutCorrectInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutCorrectInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutCorrectInput!]
}

input QuestionUpdateManyWithoutCreatedByInput {
  create: [QuestionCreateWithoutCreatedByInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input QuestionUpdateManyWithoutExamInput {
  create: [QuestionCreateWithoutExamInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutExamInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutExamInput!]
}

input QuestionUpdateManyWithoutNotattemptedInput {
  create: [QuestionCreateWithoutNotattemptedInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutNotattemptedInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutNotattemptedInput!]
}

input QuestionUpdateManyWithoutResultsInput {
  create: [QuestionCreateWithoutResultsInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutResultsInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutResultsInput!]
}

input QuestionUpdateManyWithoutSubjectInput {
  create: [QuestionCreateWithoutSubjectInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutSubjectInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutSubjectInput!]
}

input QuestionUpdateManyWithoutTopicInput {
  create: [QuestionCreateWithoutTopicInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutTopicInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutTopicInput!]
}

input QuestionUpdateManyWithoutUnitInput {
  create: [QuestionCreateWithoutUnitInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutUnitInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutUnitInput!]
}

input QuestionUpdateManyWithoutUpdatedByInput {
  create: [QuestionCreateWithoutUpdatedByInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutUpdatedByInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input QuestionUpdateManyWithoutWrongInput {
  create: [QuestionCreateWithoutWrongInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutWrongInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutWrongInput!]
}

input QuestionUpdateManyWithWhereNestedInput {
  where: QuestionScalarWhereInput!
  data: QuestionUpdateManyDataInput!
}

input QuestionUpdateWithoutAtemptedResultDataInput {
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  level: Int
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  exam: ExamUpdateManyWithoutQuestionsInput
  results: ResultUpdateManyWithoutQuestionsInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutCorrectDataInput {
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  level: Int
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  exam: ExamUpdateManyWithoutQuestionsInput
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutCreatedByDataInput {
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  level: Int
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  exam: ExamUpdateManyWithoutQuestionsInput
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutExamDataInput {
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  level: Int
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutNotattemptedDataInput {
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  level: Int
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  exam: ExamUpdateManyWithoutQuestionsInput
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutResultsDataInput {
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  level: Int
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  exam: ExamUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutSubjectDataInput {
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  level: Int
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  exam: ExamUpdateManyWithoutQuestionsInput
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutTopicDataInput {
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  level: Int
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  exam: ExamUpdateManyWithoutQuestionsInput
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutUnitDataInput {
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  level: Int
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  exam: ExamUpdateManyWithoutQuestionsInput
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutUpdatedByDataInput {
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  level: Int
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  exam: ExamUpdateManyWithoutQuestionsInput
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
  wrong: ResultUpdateManyWithoutWrongInput
}

input QuestionUpdateWithoutWrongDataInput {
  quetype: String
  categories: String
  title: String
  descriptionType: String
  descriptionurl: String
  options: Json
  level: Int
  plandate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  isReviewed: Boolean
  explainationType: Json
  explaination: Json
  descriptionfileInfo: Json
  subject: SubjectUpdateOneWithoutQuestionsInput
  unit: UnitUpdateOneWithoutQuestionsInput
  topic: TopicUpdateOneWithoutQuestionsInput
  createdBy: UserUpdateOneWithoutQuestionCreatedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdateddByInput
  exam: ExamUpdateManyWithoutQuestionsInput
  results: ResultUpdateManyWithoutQuestionsInput
  atemptedResult: ResultUpdateManyWithoutAttemptedInput
  notattempted: ResultUpdateManyWithoutNotattemptedInput
  correct: ResultUpdateManyWithoutCorrectInput
}

input QuestionUpdateWithWhereUniqueWithoutAtemptedResultInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutAtemptedResultDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutCorrectInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutCorrectDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutCreatedByInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutCreatedByDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutExamInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutExamDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutNotattemptedInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutNotattemptedDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutResultsInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutResultsDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutSubjectInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutSubjectDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutTopicInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutTopicDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutUnitInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutUnitDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutUpdatedByDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutWrongInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutWrongDataInput!
}

input QuestionUpsertWithWhereUniqueWithoutAtemptedResultInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutAtemptedResultDataInput!
  create: QuestionCreateWithoutAtemptedResultInput!
}

input QuestionUpsertWithWhereUniqueWithoutCorrectInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutCorrectDataInput!
  create: QuestionCreateWithoutCorrectInput!
}

input QuestionUpsertWithWhereUniqueWithoutCreatedByInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutCreatedByDataInput!
  create: QuestionCreateWithoutCreatedByInput!
}

input QuestionUpsertWithWhereUniqueWithoutExamInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutExamDataInput!
  create: QuestionCreateWithoutExamInput!
}

input QuestionUpsertWithWhereUniqueWithoutNotattemptedInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutNotattemptedDataInput!
  create: QuestionCreateWithoutNotattemptedInput!
}

input QuestionUpsertWithWhereUniqueWithoutResultsInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutResultsDataInput!
  create: QuestionCreateWithoutResultsInput!
}

input QuestionUpsertWithWhereUniqueWithoutSubjectInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutSubjectDataInput!
  create: QuestionCreateWithoutSubjectInput!
}

input QuestionUpsertWithWhereUniqueWithoutTopicInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutTopicDataInput!
  create: QuestionCreateWithoutTopicInput!
}

input QuestionUpsertWithWhereUniqueWithoutUnitInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutUnitDataInput!
  create: QuestionCreateWithoutUnitInput!
}

input QuestionUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutUpdatedByDataInput!
  create: QuestionCreateWithoutUpdatedByInput!
}

input QuestionUpsertWithWhereUniqueWithoutWrongInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutWrongDataInput!
  create: QuestionCreateWithoutWrongInput!
}

input QuestionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quetype: String

  """All values that are not equal to given value."""
  quetype_not: String

  """All values that are contained in given list."""
  quetype_in: [String!]

  """All values that are not contained in given list."""
  quetype_not_in: [String!]

  """All values less than the given value."""
  quetype_lt: String

  """All values less than or equal the given value."""
  quetype_lte: String

  """All values greater than the given value."""
  quetype_gt: String

  """All values greater than or equal the given value."""
  quetype_gte: String

  """All values containing the given string."""
  quetype_contains: String

  """All values not containing the given string."""
  quetype_not_contains: String

  """All values starting with the given string."""
  quetype_starts_with: String

  """All values not starting with the given string."""
  quetype_not_starts_with: String

  """All values ending with the given string."""
  quetype_ends_with: String

  """All values not ending with the given string."""
  quetype_not_ends_with: String
  categories: String

  """All values that are not equal to given value."""
  categories_not: String

  """All values that are contained in given list."""
  categories_in: [String!]

  """All values that are not contained in given list."""
  categories_not_in: [String!]

  """All values less than the given value."""
  categories_lt: String

  """All values less than or equal the given value."""
  categories_lte: String

  """All values greater than the given value."""
  categories_gt: String

  """All values greater than or equal the given value."""
  categories_gte: String

  """All values containing the given string."""
  categories_contains: String

  """All values not containing the given string."""
  categories_not_contains: String

  """All values starting with the given string."""
  categories_starts_with: String

  """All values not starting with the given string."""
  categories_not_starts_with: String

  """All values ending with the given string."""
  categories_ends_with: String

  """All values not ending with the given string."""
  categories_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  descriptionType: String

  """All values that are not equal to given value."""
  descriptionType_not: String

  """All values that are contained in given list."""
  descriptionType_in: [String!]

  """All values that are not contained in given list."""
  descriptionType_not_in: [String!]

  """All values less than the given value."""
  descriptionType_lt: String

  """All values less than or equal the given value."""
  descriptionType_lte: String

  """All values greater than the given value."""
  descriptionType_gt: String

  """All values greater than or equal the given value."""
  descriptionType_gte: String

  """All values containing the given string."""
  descriptionType_contains: String

  """All values not containing the given string."""
  descriptionType_not_contains: String

  """All values starting with the given string."""
  descriptionType_starts_with: String

  """All values not starting with the given string."""
  descriptionType_not_starts_with: String

  """All values ending with the given string."""
  descriptionType_ends_with: String

  """All values not ending with the given string."""
  descriptionType_not_ends_with: String
  descriptionurl: String

  """All values that are not equal to given value."""
  descriptionurl_not: String

  """All values that are contained in given list."""
  descriptionurl_in: [String!]

  """All values that are not contained in given list."""
  descriptionurl_not_in: [String!]

  """All values less than the given value."""
  descriptionurl_lt: String

  """All values less than or equal the given value."""
  descriptionurl_lte: String

  """All values greater than the given value."""
  descriptionurl_gt: String

  """All values greater than or equal the given value."""
  descriptionurl_gte: String

  """All values containing the given string."""
  descriptionurl_contains: String

  """All values not containing the given string."""
  descriptionurl_not_contains: String

  """All values starting with the given string."""
  descriptionurl_starts_with: String

  """All values not starting with the given string."""
  descriptionurl_not_starts_with: String

  """All values ending with the given string."""
  descriptionurl_ends_with: String

  """All values not ending with the given string."""
  descriptionurl_not_ends_with: String
  level: Int

  """All values that are not equal to given value."""
  level_not: Int

  """All values that are contained in given list."""
  level_in: [Int!]

  """All values that are not contained in given list."""
  level_not_in: [Int!]

  """All values less than the given value."""
  level_lt: Int

  """All values less than or equal the given value."""
  level_lte: Int

  """All values greater than the given value."""
  level_gt: Int

  """All values greater than or equal the given value."""
  level_gte: Int
  plandate: DateTime

  """All values that are not equal to given value."""
  plandate_not: DateTime

  """All values that are contained in given list."""
  plandate_in: [DateTime!]

  """All values that are not contained in given list."""
  plandate_not_in: [DateTime!]

  """All values less than the given value."""
  plandate_lt: DateTime

  """All values less than or equal the given value."""
  plandate_lte: DateTime

  """All values greater than the given value."""
  plandate_gt: DateTime

  """All values greater than or equal the given value."""
  plandate_gte: DateTime
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  available: String

  """All values that are not equal to given value."""
  available_not: String

  """All values that are contained in given list."""
  available_in: [String!]

  """All values that are not contained in given list."""
  available_not_in: [String!]

  """All values less than the given value."""
  available_lt: String

  """All values less than or equal the given value."""
  available_lte: String

  """All values greater than the given value."""
  available_gt: String

  """All values greater than or equal the given value."""
  available_gte: String

  """All values containing the given string."""
  available_contains: String

  """All values not containing the given string."""
  available_not_contains: String

  """All values starting with the given string."""
  available_starts_with: String

  """All values not starting with the given string."""
  available_not_starts_with: String

  """All values ending with the given string."""
  available_ends_with: String

  """All values not ending with the given string."""
  available_not_ends_with: String
  isReviewed: Boolean

  """All values that are not equal to given value."""
  isReviewed_not: Boolean
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  subject: SubjectWhereInput
  unit: UnitWhereInput
  topic: TopicWhereInput
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
  exam_every: ExamWhereInput
  exam_some: ExamWhereInput
  exam_none: ExamWhereInput
  results_every: ResultWhereInput
  results_some: ResultWhereInput
  results_none: ResultWhereInput
  atemptedResult_every: ResultWhereInput
  atemptedResult_some: ResultWhereInput
  atemptedResult_none: ResultWhereInput
  notattempted_every: ResultWhereInput
  notattempted_some: ResultWhereInput
  notattempted_none: ResultWhereInput
  correct_every: ResultWhereInput
  correct_some: ResultWhereInput
  correct_none: ResultWhereInput
  wrong_every: ResultWhereInput
  wrong_some: ResultWhereInput
  wrong_none: ResultWhereInput
}

input QuestionWhereUniqueInput {
  id: ID
}

type Result implements Node {
  id: ID!
  exam: Exam!
  name: String!
  type: String!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  result: String!
  level: Int!
  score: Float
  attempted(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  notattempted(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  correct(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  wrong(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
  userId: User!
}

"""A connection to a list of items."""
type ResultConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResultEdge]!
  aggregate: AggregateResult!
}

input ResultCreateInput {
  id: ID
  name: String!
  type: String!
  result: String!
  level: Int!
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
  exam: ExamCreateOneWithoutResultsInput!
  questions: QuestionCreateManyWithoutResultsInput
  attempted: QuestionCreateManyWithoutAtemptedResultInput
  notattempted: QuestionCreateManyWithoutNotattemptedInput
  correct: QuestionCreateManyWithoutCorrectInput
  wrong: QuestionCreateManyWithoutWrongInput
  userId: UserCreateOneWithoutResultInput!
}

input ResultCreateManyWithoutAttemptedInput {
  create: [ResultCreateWithoutAttemptedInput!]
  connect: [ResultWhereUniqueInput!]
}

input ResultCreateManyWithoutCorrectInput {
  create: [ResultCreateWithoutCorrectInput!]
  connect: [ResultWhereUniqueInput!]
}

input ResultCreateManyWithoutExamInput {
  create: [ResultCreateWithoutExamInput!]
  connect: [ResultWhereUniqueInput!]
}

input ResultCreateManyWithoutNotattemptedInput {
  create: [ResultCreateWithoutNotattemptedInput!]
  connect: [ResultWhereUniqueInput!]
}

input ResultCreateManyWithoutQuestionsInput {
  create: [ResultCreateWithoutQuestionsInput!]
  connect: [ResultWhereUniqueInput!]
}

input ResultCreateManyWithoutUserIdInput {
  create: [ResultCreateWithoutUserIdInput!]
  connect: [ResultWhereUniqueInput!]
}

input ResultCreateManyWithoutWrongInput {
  create: [ResultCreateWithoutWrongInput!]
  connect: [ResultWhereUniqueInput!]
}

input ResultCreateWithoutAttemptedInput {
  id: ID
  name: String!
  type: String!
  result: String!
  level: Int!
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
  exam: ExamCreateOneWithoutResultsInput!
  questions: QuestionCreateManyWithoutResultsInput
  notattempted: QuestionCreateManyWithoutNotattemptedInput
  correct: QuestionCreateManyWithoutCorrectInput
  wrong: QuestionCreateManyWithoutWrongInput
  userId: UserCreateOneWithoutResultInput!
}

input ResultCreateWithoutCorrectInput {
  id: ID
  name: String!
  type: String!
  result: String!
  level: Int!
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
  exam: ExamCreateOneWithoutResultsInput!
  questions: QuestionCreateManyWithoutResultsInput
  attempted: QuestionCreateManyWithoutAtemptedResultInput
  notattempted: QuestionCreateManyWithoutNotattemptedInput
  wrong: QuestionCreateManyWithoutWrongInput
  userId: UserCreateOneWithoutResultInput!
}

input ResultCreateWithoutExamInput {
  id: ID
  name: String!
  type: String!
  result: String!
  level: Int!
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
  questions: QuestionCreateManyWithoutResultsInput
  attempted: QuestionCreateManyWithoutAtemptedResultInput
  notattempted: QuestionCreateManyWithoutNotattemptedInput
  correct: QuestionCreateManyWithoutCorrectInput
  wrong: QuestionCreateManyWithoutWrongInput
  userId: UserCreateOneWithoutResultInput!
}

input ResultCreateWithoutNotattemptedInput {
  id: ID
  name: String!
  type: String!
  result: String!
  level: Int!
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
  exam: ExamCreateOneWithoutResultsInput!
  questions: QuestionCreateManyWithoutResultsInput
  attempted: QuestionCreateManyWithoutAtemptedResultInput
  correct: QuestionCreateManyWithoutCorrectInput
  wrong: QuestionCreateManyWithoutWrongInput
  userId: UserCreateOneWithoutResultInput!
}

input ResultCreateWithoutQuestionsInput {
  id: ID
  name: String!
  type: String!
  result: String!
  level: Int!
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
  exam: ExamCreateOneWithoutResultsInput!
  attempted: QuestionCreateManyWithoutAtemptedResultInput
  notattempted: QuestionCreateManyWithoutNotattemptedInput
  correct: QuestionCreateManyWithoutCorrectInput
  wrong: QuestionCreateManyWithoutWrongInput
  userId: UserCreateOneWithoutResultInput!
}

input ResultCreateWithoutUserIdInput {
  id: ID
  name: String!
  type: String!
  result: String!
  level: Int!
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
  exam: ExamCreateOneWithoutResultsInput!
  questions: QuestionCreateManyWithoutResultsInput
  attempted: QuestionCreateManyWithoutAtemptedResultInput
  notattempted: QuestionCreateManyWithoutNotattemptedInput
  correct: QuestionCreateManyWithoutCorrectInput
  wrong: QuestionCreateManyWithoutWrongInput
}

input ResultCreateWithoutWrongInput {
  id: ID
  name: String!
  type: String!
  result: String!
  level: Int!
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
  exam: ExamCreateOneWithoutResultsInput!
  questions: QuestionCreateManyWithoutResultsInput
  attempted: QuestionCreateManyWithoutAtemptedResultInput
  notattempted: QuestionCreateManyWithoutNotattemptedInput
  correct: QuestionCreateManyWithoutCorrectInput
  userId: UserCreateOneWithoutResultInput!
}

"""An edge in a connection."""
type ResultEdge {
  """The item at the end of the edge."""
  node: Result!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ResultOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  result_ASC
  result_DESC
  level_ASC
  level_DESC
  score_ASC
  score_DESC
  achievement_ASC
  achievement_DESC
  duration_ASC
  duration_DESC
  attemptedDate_ASC
  attemptedDate_DESC
  commentFromTeacher_ASC
  commentFromTeacher_DESC
  rank_ASC
  rank_DESC
}

type ResultPreviousValues {
  id: ID!
  name: String!
  type: String!
  result: String!
  level: Int!
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime!
  commentFromTeacher: String
  rank: Int
}

input ResultScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ResultScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResultScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResultScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  result: String

  """All values that are not equal to given value."""
  result_not: String

  """All values that are contained in given list."""
  result_in: [String!]

  """All values that are not contained in given list."""
  result_not_in: [String!]

  """All values less than the given value."""
  result_lt: String

  """All values less than or equal the given value."""
  result_lte: String

  """All values greater than the given value."""
  result_gt: String

  """All values greater than or equal the given value."""
  result_gte: String

  """All values containing the given string."""
  result_contains: String

  """All values not containing the given string."""
  result_not_contains: String

  """All values starting with the given string."""
  result_starts_with: String

  """All values not starting with the given string."""
  result_not_starts_with: String

  """All values ending with the given string."""
  result_ends_with: String

  """All values not ending with the given string."""
  result_not_ends_with: String
  level: Int

  """All values that are not equal to given value."""
  level_not: Int

  """All values that are contained in given list."""
  level_in: [Int!]

  """All values that are not contained in given list."""
  level_not_in: [Int!]

  """All values less than the given value."""
  level_lt: Int

  """All values less than or equal the given value."""
  level_lte: Int

  """All values greater than the given value."""
  level_gt: Int

  """All values greater than or equal the given value."""
  level_gte: Int
  score: Float

  """All values that are not equal to given value."""
  score_not: Float

  """All values that are contained in given list."""
  score_in: [Float!]

  """All values that are not contained in given list."""
  score_not_in: [Float!]

  """All values less than the given value."""
  score_lt: Float

  """All values less than or equal the given value."""
  score_lte: Float

  """All values greater than the given value."""
  score_gt: Float

  """All values greater than or equal the given value."""
  score_gte: Float
  achievement: String

  """All values that are not equal to given value."""
  achievement_not: String

  """All values that are contained in given list."""
  achievement_in: [String!]

  """All values that are not contained in given list."""
  achievement_not_in: [String!]

  """All values less than the given value."""
  achievement_lt: String

  """All values less than or equal the given value."""
  achievement_lte: String

  """All values greater than the given value."""
  achievement_gt: String

  """All values greater than or equal the given value."""
  achievement_gte: String

  """All values containing the given string."""
  achievement_contains: String

  """All values not containing the given string."""
  achievement_not_contains: String

  """All values starting with the given string."""
  achievement_starts_with: String

  """All values not starting with the given string."""
  achievement_not_starts_with: String

  """All values ending with the given string."""
  achievement_ends_with: String

  """All values not ending with the given string."""
  achievement_not_ends_with: String
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  attemptedDate: DateTime

  """All values that are not equal to given value."""
  attemptedDate_not: DateTime

  """All values that are contained in given list."""
  attemptedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  attemptedDate_not_in: [DateTime!]

  """All values less than the given value."""
  attemptedDate_lt: DateTime

  """All values less than or equal the given value."""
  attemptedDate_lte: DateTime

  """All values greater than the given value."""
  attemptedDate_gt: DateTime

  """All values greater than or equal the given value."""
  attemptedDate_gte: DateTime
  commentFromTeacher: String

  """All values that are not equal to given value."""
  commentFromTeacher_not: String

  """All values that are contained in given list."""
  commentFromTeacher_in: [String!]

  """All values that are not contained in given list."""
  commentFromTeacher_not_in: [String!]

  """All values less than the given value."""
  commentFromTeacher_lt: String

  """All values less than or equal the given value."""
  commentFromTeacher_lte: String

  """All values greater than the given value."""
  commentFromTeacher_gt: String

  """All values greater than or equal the given value."""
  commentFromTeacher_gte: String

  """All values containing the given string."""
  commentFromTeacher_contains: String

  """All values not containing the given string."""
  commentFromTeacher_not_contains: String

  """All values starting with the given string."""
  commentFromTeacher_starts_with: String

  """All values not starting with the given string."""
  commentFromTeacher_not_starts_with: String

  """All values ending with the given string."""
  commentFromTeacher_ends_with: String

  """All values not ending with the given string."""
  commentFromTeacher_not_ends_with: String
  rank: Int

  """All values that are not equal to given value."""
  rank_not: Int

  """All values that are contained in given list."""
  rank_in: [Int!]

  """All values that are not contained in given list."""
  rank_not_in: [Int!]

  """All values less than the given value."""
  rank_lt: Int

  """All values less than or equal the given value."""
  rank_lte: Int

  """All values greater than the given value."""
  rank_gt: Int

  """All values greater than or equal the given value."""
  rank_gte: Int
}

type ResultSubscriptionPayload {
  mutation: MutationType!
  node: Result
  updatedFields: [String!]
  previousValues: ResultPreviousValues
}

input ResultSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ResultSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResultSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResultSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ResultWhereInput
}

input ResultUpdateInput {
  name: String
  type: String
  result: String
  level: Int
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
  exam: ExamUpdateOneRequiredWithoutResultsInput
  questions: QuestionUpdateManyWithoutResultsInput
  attempted: QuestionUpdateManyWithoutAtemptedResultInput
  notattempted: QuestionUpdateManyWithoutNotattemptedInput
  correct: QuestionUpdateManyWithoutCorrectInput
  wrong: QuestionUpdateManyWithoutWrongInput
  userId: UserUpdateOneRequiredWithoutResultInput
}

input ResultUpdateManyDataInput {
  name: String
  type: String
  result: String
  level: Int
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
}

input ResultUpdateManyMutationInput {
  name: String
  type: String
  result: String
  level: Int
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
}

input ResultUpdateManyWithoutAttemptedInput {
  create: [ResultCreateWithoutAttemptedInput!]
  connect: [ResultWhereUniqueInput!]
  set: [ResultWhereUniqueInput!]
  disconnect: [ResultWhereUniqueInput!]
  delete: [ResultWhereUniqueInput!]
  update: [ResultUpdateWithWhereUniqueWithoutAttemptedInput!]
  updateMany: [ResultUpdateManyWithWhereNestedInput!]
  deleteMany: [ResultScalarWhereInput!]
  upsert: [ResultUpsertWithWhereUniqueWithoutAttemptedInput!]
}

input ResultUpdateManyWithoutCorrectInput {
  create: [ResultCreateWithoutCorrectInput!]
  connect: [ResultWhereUniqueInput!]
  set: [ResultWhereUniqueInput!]
  disconnect: [ResultWhereUniqueInput!]
  delete: [ResultWhereUniqueInput!]
  update: [ResultUpdateWithWhereUniqueWithoutCorrectInput!]
  updateMany: [ResultUpdateManyWithWhereNestedInput!]
  deleteMany: [ResultScalarWhereInput!]
  upsert: [ResultUpsertWithWhereUniqueWithoutCorrectInput!]
}

input ResultUpdateManyWithoutExamInput {
  create: [ResultCreateWithoutExamInput!]
  connect: [ResultWhereUniqueInput!]
  set: [ResultWhereUniqueInput!]
  disconnect: [ResultWhereUniqueInput!]
  delete: [ResultWhereUniqueInput!]
  update: [ResultUpdateWithWhereUniqueWithoutExamInput!]
  updateMany: [ResultUpdateManyWithWhereNestedInput!]
  deleteMany: [ResultScalarWhereInput!]
  upsert: [ResultUpsertWithWhereUniqueWithoutExamInput!]
}

input ResultUpdateManyWithoutNotattemptedInput {
  create: [ResultCreateWithoutNotattemptedInput!]
  connect: [ResultWhereUniqueInput!]
  set: [ResultWhereUniqueInput!]
  disconnect: [ResultWhereUniqueInput!]
  delete: [ResultWhereUniqueInput!]
  update: [ResultUpdateWithWhereUniqueWithoutNotattemptedInput!]
  updateMany: [ResultUpdateManyWithWhereNestedInput!]
  deleteMany: [ResultScalarWhereInput!]
  upsert: [ResultUpsertWithWhereUniqueWithoutNotattemptedInput!]
}

input ResultUpdateManyWithoutQuestionsInput {
  create: [ResultCreateWithoutQuestionsInput!]
  connect: [ResultWhereUniqueInput!]
  set: [ResultWhereUniqueInput!]
  disconnect: [ResultWhereUniqueInput!]
  delete: [ResultWhereUniqueInput!]
  update: [ResultUpdateWithWhereUniqueWithoutQuestionsInput!]
  updateMany: [ResultUpdateManyWithWhereNestedInput!]
  deleteMany: [ResultScalarWhereInput!]
  upsert: [ResultUpsertWithWhereUniqueWithoutQuestionsInput!]
}

input ResultUpdateManyWithoutUserIdInput {
  create: [ResultCreateWithoutUserIdInput!]
  connect: [ResultWhereUniqueInput!]
  set: [ResultWhereUniqueInput!]
  disconnect: [ResultWhereUniqueInput!]
  delete: [ResultWhereUniqueInput!]
  update: [ResultUpdateWithWhereUniqueWithoutUserIdInput!]
  updateMany: [ResultUpdateManyWithWhereNestedInput!]
  deleteMany: [ResultScalarWhereInput!]
  upsert: [ResultUpsertWithWhereUniqueWithoutUserIdInput!]
}

input ResultUpdateManyWithoutWrongInput {
  create: [ResultCreateWithoutWrongInput!]
  connect: [ResultWhereUniqueInput!]
  set: [ResultWhereUniqueInput!]
  disconnect: [ResultWhereUniqueInput!]
  delete: [ResultWhereUniqueInput!]
  update: [ResultUpdateWithWhereUniqueWithoutWrongInput!]
  updateMany: [ResultUpdateManyWithWhereNestedInput!]
  deleteMany: [ResultScalarWhereInput!]
  upsert: [ResultUpsertWithWhereUniqueWithoutWrongInput!]
}

input ResultUpdateManyWithWhereNestedInput {
  where: ResultScalarWhereInput!
  data: ResultUpdateManyDataInput!
}

input ResultUpdateWithoutAttemptedDataInput {
  name: String
  type: String
  result: String
  level: Int
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
  exam: ExamUpdateOneRequiredWithoutResultsInput
  questions: QuestionUpdateManyWithoutResultsInput
  notattempted: QuestionUpdateManyWithoutNotattemptedInput
  correct: QuestionUpdateManyWithoutCorrectInput
  wrong: QuestionUpdateManyWithoutWrongInput
  userId: UserUpdateOneRequiredWithoutResultInput
}

input ResultUpdateWithoutCorrectDataInput {
  name: String
  type: String
  result: String
  level: Int
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
  exam: ExamUpdateOneRequiredWithoutResultsInput
  questions: QuestionUpdateManyWithoutResultsInput
  attempted: QuestionUpdateManyWithoutAtemptedResultInput
  notattempted: QuestionUpdateManyWithoutNotattemptedInput
  wrong: QuestionUpdateManyWithoutWrongInput
  userId: UserUpdateOneRequiredWithoutResultInput
}

input ResultUpdateWithoutExamDataInput {
  name: String
  type: String
  result: String
  level: Int
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
  questions: QuestionUpdateManyWithoutResultsInput
  attempted: QuestionUpdateManyWithoutAtemptedResultInput
  notattempted: QuestionUpdateManyWithoutNotattemptedInput
  correct: QuestionUpdateManyWithoutCorrectInput
  wrong: QuestionUpdateManyWithoutWrongInput
  userId: UserUpdateOneRequiredWithoutResultInput
}

input ResultUpdateWithoutNotattemptedDataInput {
  name: String
  type: String
  result: String
  level: Int
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
  exam: ExamUpdateOneRequiredWithoutResultsInput
  questions: QuestionUpdateManyWithoutResultsInput
  attempted: QuestionUpdateManyWithoutAtemptedResultInput
  correct: QuestionUpdateManyWithoutCorrectInput
  wrong: QuestionUpdateManyWithoutWrongInput
  userId: UserUpdateOneRequiredWithoutResultInput
}

input ResultUpdateWithoutQuestionsDataInput {
  name: String
  type: String
  result: String
  level: Int
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
  exam: ExamUpdateOneRequiredWithoutResultsInput
  attempted: QuestionUpdateManyWithoutAtemptedResultInput
  notattempted: QuestionUpdateManyWithoutNotattemptedInput
  correct: QuestionUpdateManyWithoutCorrectInput
  wrong: QuestionUpdateManyWithoutWrongInput
  userId: UserUpdateOneRequiredWithoutResultInput
}

input ResultUpdateWithoutUserIdDataInput {
  name: String
  type: String
  result: String
  level: Int
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
  exam: ExamUpdateOneRequiredWithoutResultsInput
  questions: QuestionUpdateManyWithoutResultsInput
  attempted: QuestionUpdateManyWithoutAtemptedResultInput
  notattempted: QuestionUpdateManyWithoutNotattemptedInput
  correct: QuestionUpdateManyWithoutCorrectInput
  wrong: QuestionUpdateManyWithoutWrongInput
}

input ResultUpdateWithoutWrongDataInput {
  name: String
  type: String
  result: String
  level: Int
  score: Float
  achievement: String
  duration: Int
  attemptedDate: DateTime
  commentFromTeacher: String
  rank: Int
  exam: ExamUpdateOneRequiredWithoutResultsInput
  questions: QuestionUpdateManyWithoutResultsInput
  attempted: QuestionUpdateManyWithoutAtemptedResultInput
  notattempted: QuestionUpdateManyWithoutNotattemptedInput
  correct: QuestionUpdateManyWithoutCorrectInput
  userId: UserUpdateOneRequiredWithoutResultInput
}

input ResultUpdateWithWhereUniqueWithoutAttemptedInput {
  where: ResultWhereUniqueInput!
  data: ResultUpdateWithoutAttemptedDataInput!
}

input ResultUpdateWithWhereUniqueWithoutCorrectInput {
  where: ResultWhereUniqueInput!
  data: ResultUpdateWithoutCorrectDataInput!
}

input ResultUpdateWithWhereUniqueWithoutExamInput {
  where: ResultWhereUniqueInput!
  data: ResultUpdateWithoutExamDataInput!
}

input ResultUpdateWithWhereUniqueWithoutNotattemptedInput {
  where: ResultWhereUniqueInput!
  data: ResultUpdateWithoutNotattemptedDataInput!
}

input ResultUpdateWithWhereUniqueWithoutQuestionsInput {
  where: ResultWhereUniqueInput!
  data: ResultUpdateWithoutQuestionsDataInput!
}

input ResultUpdateWithWhereUniqueWithoutUserIdInput {
  where: ResultWhereUniqueInput!
  data: ResultUpdateWithoutUserIdDataInput!
}

input ResultUpdateWithWhereUniqueWithoutWrongInput {
  where: ResultWhereUniqueInput!
  data: ResultUpdateWithoutWrongDataInput!
}

input ResultUpsertWithWhereUniqueWithoutAttemptedInput {
  where: ResultWhereUniqueInput!
  update: ResultUpdateWithoutAttemptedDataInput!
  create: ResultCreateWithoutAttemptedInput!
}

input ResultUpsertWithWhereUniqueWithoutCorrectInput {
  where: ResultWhereUniqueInput!
  update: ResultUpdateWithoutCorrectDataInput!
  create: ResultCreateWithoutCorrectInput!
}

input ResultUpsertWithWhereUniqueWithoutExamInput {
  where: ResultWhereUniqueInput!
  update: ResultUpdateWithoutExamDataInput!
  create: ResultCreateWithoutExamInput!
}

input ResultUpsertWithWhereUniqueWithoutNotattemptedInput {
  where: ResultWhereUniqueInput!
  update: ResultUpdateWithoutNotattemptedDataInput!
  create: ResultCreateWithoutNotattemptedInput!
}

input ResultUpsertWithWhereUniqueWithoutQuestionsInput {
  where: ResultWhereUniqueInput!
  update: ResultUpdateWithoutQuestionsDataInput!
  create: ResultCreateWithoutQuestionsInput!
}

input ResultUpsertWithWhereUniqueWithoutUserIdInput {
  where: ResultWhereUniqueInput!
  update: ResultUpdateWithoutUserIdDataInput!
  create: ResultCreateWithoutUserIdInput!
}

input ResultUpsertWithWhereUniqueWithoutWrongInput {
  where: ResultWhereUniqueInput!
  update: ResultUpdateWithoutWrongDataInput!
  create: ResultCreateWithoutWrongInput!
}

input ResultWhereInput {
  """Logical AND on all given filters."""
  AND: [ResultWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResultWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResultWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  result: String

  """All values that are not equal to given value."""
  result_not: String

  """All values that are contained in given list."""
  result_in: [String!]

  """All values that are not contained in given list."""
  result_not_in: [String!]

  """All values less than the given value."""
  result_lt: String

  """All values less than or equal the given value."""
  result_lte: String

  """All values greater than the given value."""
  result_gt: String

  """All values greater than or equal the given value."""
  result_gte: String

  """All values containing the given string."""
  result_contains: String

  """All values not containing the given string."""
  result_not_contains: String

  """All values starting with the given string."""
  result_starts_with: String

  """All values not starting with the given string."""
  result_not_starts_with: String

  """All values ending with the given string."""
  result_ends_with: String

  """All values not ending with the given string."""
  result_not_ends_with: String
  level: Int

  """All values that are not equal to given value."""
  level_not: Int

  """All values that are contained in given list."""
  level_in: [Int!]

  """All values that are not contained in given list."""
  level_not_in: [Int!]

  """All values less than the given value."""
  level_lt: Int

  """All values less than or equal the given value."""
  level_lte: Int

  """All values greater than the given value."""
  level_gt: Int

  """All values greater than or equal the given value."""
  level_gte: Int
  score: Float

  """All values that are not equal to given value."""
  score_not: Float

  """All values that are contained in given list."""
  score_in: [Float!]

  """All values that are not contained in given list."""
  score_not_in: [Float!]

  """All values less than the given value."""
  score_lt: Float

  """All values less than or equal the given value."""
  score_lte: Float

  """All values greater than the given value."""
  score_gt: Float

  """All values greater than or equal the given value."""
  score_gte: Float
  achievement: String

  """All values that are not equal to given value."""
  achievement_not: String

  """All values that are contained in given list."""
  achievement_in: [String!]

  """All values that are not contained in given list."""
  achievement_not_in: [String!]

  """All values less than the given value."""
  achievement_lt: String

  """All values less than or equal the given value."""
  achievement_lte: String

  """All values greater than the given value."""
  achievement_gt: String

  """All values greater than or equal the given value."""
  achievement_gte: String

  """All values containing the given string."""
  achievement_contains: String

  """All values not containing the given string."""
  achievement_not_contains: String

  """All values starting with the given string."""
  achievement_starts_with: String

  """All values not starting with the given string."""
  achievement_not_starts_with: String

  """All values ending with the given string."""
  achievement_ends_with: String

  """All values not ending with the given string."""
  achievement_not_ends_with: String
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  attemptedDate: DateTime

  """All values that are not equal to given value."""
  attemptedDate_not: DateTime

  """All values that are contained in given list."""
  attemptedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  attemptedDate_not_in: [DateTime!]

  """All values less than the given value."""
  attemptedDate_lt: DateTime

  """All values less than or equal the given value."""
  attemptedDate_lte: DateTime

  """All values greater than the given value."""
  attemptedDate_gt: DateTime

  """All values greater than or equal the given value."""
  attemptedDate_gte: DateTime
  commentFromTeacher: String

  """All values that are not equal to given value."""
  commentFromTeacher_not: String

  """All values that are contained in given list."""
  commentFromTeacher_in: [String!]

  """All values that are not contained in given list."""
  commentFromTeacher_not_in: [String!]

  """All values less than the given value."""
  commentFromTeacher_lt: String

  """All values less than or equal the given value."""
  commentFromTeacher_lte: String

  """All values greater than the given value."""
  commentFromTeacher_gt: String

  """All values greater than or equal the given value."""
  commentFromTeacher_gte: String

  """All values containing the given string."""
  commentFromTeacher_contains: String

  """All values not containing the given string."""
  commentFromTeacher_not_contains: String

  """All values starting with the given string."""
  commentFromTeacher_starts_with: String

  """All values not starting with the given string."""
  commentFromTeacher_not_starts_with: String

  """All values ending with the given string."""
  commentFromTeacher_ends_with: String

  """All values not ending with the given string."""
  commentFromTeacher_not_ends_with: String
  rank: Int

  """All values that are not equal to given value."""
  rank_not: Int

  """All values that are contained in given list."""
  rank_in: [Int!]

  """All values that are not contained in given list."""
  rank_not_in: [Int!]

  """All values less than the given value."""
  rank_lt: Int

  """All values less than or equal the given value."""
  rank_lte: Int

  """All values greater than the given value."""
  rank_gt: Int

  """All values greater than or equal the given value."""
  rank_gte: Int
  exam: ExamWhereInput
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  attempted_every: QuestionWhereInput
  attempted_some: QuestionWhereInput
  attempted_none: QuestionWhereInput
  notattempted_every: QuestionWhereInput
  notattempted_some: QuestionWhereInput
  notattempted_none: QuestionWhereInput
  correct_every: QuestionWhereInput
  correct_some: QuestionWhereInput
  correct_none: QuestionWhereInput
  wrong_every: QuestionWhereInput
  wrong_some: QuestionWhereInput
  wrong_none: QuestionWhereInput
  userId: UserWhereInput
}

input ResultWhereUniqueInput {
  id: ID
}

type Role implements Node {
  id: ID!
  name: ROLENAME!
  org: Organization
  suborg: Suborg
  group: Group
  subgroup: SubGroup
  userroles(where: UserRoleWhereInput, orderBy: UserRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserRole!]
  description: String
  status: String
  state: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type RoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  id: ID
  name: ROLENAME!
  description: String
  status: String
  state: String
  org: OrganizationCreateOneWithoutOrgRolesInput
  suborg: SuborgCreateOneInput
  group: GroupCreateOneWithoutGroupRolesInput
  subgroup: SubGroupCreateOneWithoutSubgroupRolesInput
  userroles: UserRoleCreateManyWithoutRoleidInput
}

input RoleCreateManyInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateManyWithoutGroupInput {
  create: [RoleCreateWithoutGroupInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateManyWithoutOrgInput {
  create: [RoleCreateWithoutOrgInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateManyWithoutSubgroupInput {
  create: [RoleCreateWithoutSubgroupInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateOneInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input RoleCreateOneWithoutUserrolesInput {
  create: RoleCreateWithoutUserrolesInput
  connect: RoleWhereUniqueInput
}

input RoleCreateWithoutGroupInput {
  id: ID
  name: ROLENAME!
  description: String
  status: String
  state: String
  org: OrganizationCreateOneWithoutOrgRolesInput
  suborg: SuborgCreateOneInput
  subgroup: SubGroupCreateOneWithoutSubgroupRolesInput
  userroles: UserRoleCreateManyWithoutRoleidInput
}

input RoleCreateWithoutOrgInput {
  id: ID
  name: ROLENAME!
  description: String
  status: String
  state: String
  suborg: SuborgCreateOneInput
  group: GroupCreateOneWithoutGroupRolesInput
  subgroup: SubGroupCreateOneWithoutSubgroupRolesInput
  userroles: UserRoleCreateManyWithoutRoleidInput
}

input RoleCreateWithoutSubgroupInput {
  id: ID
  name: ROLENAME!
  description: String
  status: String
  state: String
  org: OrganizationCreateOneWithoutOrgRolesInput
  suborg: SuborgCreateOneInput
  group: GroupCreateOneWithoutGroupRolesInput
  userroles: UserRoleCreateManyWithoutRoleidInput
}

input RoleCreateWithoutUserrolesInput {
  id: ID
  name: ROLENAME!
  description: String
  status: String
  state: String
  org: OrganizationCreateOneWithoutOrgRolesInput
  suborg: SuborgCreateOneInput
  group: GroupCreateOneWithoutGroupRolesInput
  subgroup: SubGroupCreateOneWithoutSubgroupRolesInput
}

"""An edge in a connection."""
type RoleEdge {
  """The item at the end of the edge."""
  node: Role!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ROLENAME {
  SUPERADMIN
  ORGADMIN
  SUBORGADMIN
  GROUPADMIN
  SUBGROUPADMIN
  PARENT
  TEACHER
  PRINCIPAL
  TUTOR
  CONTRIBUTOR
  STUDENT
  PLAYER
  CAPTAIN
  OWNER
  SERVENT
  SERVICE
  LEAD
  SOCIALWORKER
  DONNER
  COLLECTOR
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  status_ASC
  status_DESC
  state_ASC
  state_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RolePreviousValues {
  id: ID!
  name: ROLENAME!
  description: String
  status: String
  state: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input RoleScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: ROLENAME

  """All values that are not equal to given value."""
  name_not: ROLENAME

  """All values that are contained in given list."""
  name_in: [ROLENAME!]

  """All values that are not contained in given list."""
  name_not_in: [ROLENAME!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

enum RoleStatus {
  ACTIVE
  EXPIRED
  INACTIVE
  DORMANT
  RENEWED
  SPECIALGRANT
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
}

input RoleUpdateDataInput {
  name: ROLENAME
  description: String
  status: String
  state: String
  org: OrganizationUpdateOneWithoutOrgRolesInput
  suborg: SuborgUpdateOneInput
  group: GroupUpdateOneWithoutGroupRolesInput
  subgroup: SubGroupUpdateOneWithoutSubgroupRolesInput
  userroles: UserRoleUpdateManyWithoutRoleidInput
}

input RoleUpdateInput {
  name: ROLENAME
  description: String
  status: String
  state: String
  org: OrganizationUpdateOneWithoutOrgRolesInput
  suborg: SuborgUpdateOneInput
  group: GroupUpdateOneWithoutGroupRolesInput
  subgroup: SubGroupUpdateOneWithoutSubgroupRolesInput
  userroles: UserRoleUpdateManyWithoutRoleidInput
}

input RoleUpdateManyDataInput {
  name: ROLENAME
  description: String
  status: String
  state: String
}

input RoleUpdateManyInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueNestedInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
  deleteMany: [RoleScalarWhereInput!]
  upsert: [RoleUpsertWithWhereUniqueNestedInput!]
}

input RoleUpdateManyMutationInput {
  name: ROLENAME
  description: String
  status: String
  state: String
}

input RoleUpdateManyWithoutGroupInput {
  create: [RoleCreateWithoutGroupInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
  deleteMany: [RoleScalarWhereInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutGroupInput!]
}

input RoleUpdateManyWithoutOrgInput {
  create: [RoleCreateWithoutOrgInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutOrgInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
  deleteMany: [RoleScalarWhereInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutOrgInput!]
}

input RoleUpdateManyWithoutSubgroupInput {
  create: [RoleCreateWithoutSubgroupInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutSubgroupInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
  deleteMany: [RoleScalarWhereInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutSubgroupInput!]
}

input RoleUpdateManyWithWhereNestedInput {
  where: RoleScalarWhereInput!
  data: RoleUpdateManyDataInput!
}

input RoleUpdateOneRequiredInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  update: RoleUpdateDataInput
  upsert: RoleUpsertNestedInput
}

input RoleUpdateOneRequiredWithoutUserrolesInput {
  create: RoleCreateWithoutUserrolesInput
  connect: RoleWhereUniqueInput
  update: RoleUpdateWithoutUserrolesDataInput
  upsert: RoleUpsertWithoutUserrolesInput
}

input RoleUpdateWithoutGroupDataInput {
  name: ROLENAME
  description: String
  status: String
  state: String
  org: OrganizationUpdateOneWithoutOrgRolesInput
  suborg: SuborgUpdateOneInput
  subgroup: SubGroupUpdateOneWithoutSubgroupRolesInput
  userroles: UserRoleUpdateManyWithoutRoleidInput
}

input RoleUpdateWithoutOrgDataInput {
  name: ROLENAME
  description: String
  status: String
  state: String
  suborg: SuborgUpdateOneInput
  group: GroupUpdateOneWithoutGroupRolesInput
  subgroup: SubGroupUpdateOneWithoutSubgroupRolesInput
  userroles: UserRoleUpdateManyWithoutRoleidInput
}

input RoleUpdateWithoutSubgroupDataInput {
  name: ROLENAME
  description: String
  status: String
  state: String
  org: OrganizationUpdateOneWithoutOrgRolesInput
  suborg: SuborgUpdateOneInput
  group: GroupUpdateOneWithoutGroupRolesInput
  userroles: UserRoleUpdateManyWithoutRoleidInput
}

input RoleUpdateWithoutUserrolesDataInput {
  name: ROLENAME
  description: String
  status: String
  state: String
  org: OrganizationUpdateOneWithoutOrgRolesInput
  suborg: SuborgUpdateOneInput
  group: GroupUpdateOneWithoutGroupRolesInput
  subgroup: SubGroupUpdateOneWithoutSubgroupRolesInput
}

input RoleUpdateWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateDataInput!
}

input RoleUpdateWithWhereUniqueWithoutGroupInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutGroupDataInput!
}

input RoleUpdateWithWhereUniqueWithoutOrgInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutOrgDataInput!
}

input RoleUpdateWithWhereUniqueWithoutSubgroupInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutSubgroupDataInput!
}

input RoleUpsertNestedInput {
  update: RoleUpdateDataInput!
  create: RoleCreateInput!
}

input RoleUpsertWithoutUserrolesInput {
  update: RoleUpdateWithoutUserrolesDataInput!
  create: RoleCreateWithoutUserrolesInput!
}

input RoleUpsertWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateDataInput!
  create: RoleCreateInput!
}

input RoleUpsertWithWhereUniqueWithoutGroupInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutGroupDataInput!
  create: RoleCreateWithoutGroupInput!
}

input RoleUpsertWithWhereUniqueWithoutOrgInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutOrgDataInput!
  create: RoleCreateWithoutOrgInput!
}

input RoleUpsertWithWhereUniqueWithoutSubgroupInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutSubgroupDataInput!
  create: RoleCreateWithoutSubgroupInput!
}

input RoleWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: ROLENAME

  """All values that are not equal to given value."""
  name_not: ROLENAME

  """All values that are contained in given list."""
  name_in: [ROLENAME!]

  """All values that are not contained in given list."""
  name_not_in: [ROLENAME!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  org: OrganizationWhereInput
  suborg: SuborgWhereInput
  group: GroupWhereInput
  subgroup: SubGroupWhereInput
  userroles_every: UserRoleWhereInput
  userroles_some: UserRoleWhereInput
  userroles_none: UserRoleWhereInput
}

input RoleWhereUniqueInput {
  id: ID
}

type Std implements Node {
  id: ID!
  gradename: String!
  category: String!
  branch: String
  year: String
  semester: String
  specilize: String
  educationprofiles(where: EducationProfileWhereInput, orderBy: EducationProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EducationProfile!]
  isPublished: Boolean!
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type StdConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StdEdge]!
  aggregate: AggregateStd!
}

input StdCreateInput {
  id: ID
  gradename: String!
  category: String!
  branch: String
  year: String
  semester: String
  specilize: String
  isPublished: Boolean
  educationprofiles: EducationProfileCreateManyWithoutStdInput
  subjects: SubjectCreateManyWithoutStdInput
}

input StdCreateManyWithoutEducationprofilesInput {
  create: [StdCreateWithoutEducationprofilesInput!]
  connect: [StdWhereUniqueInput!]
}

input StdCreateOneWithoutSubjectsInput {
  create: StdCreateWithoutSubjectsInput
  connect: StdWhereUniqueInput
}

input StdCreateWithoutEducationprofilesInput {
  id: ID
  gradename: String!
  category: String!
  branch: String
  year: String
  semester: String
  specilize: String
  isPublished: Boolean
  subjects: SubjectCreateManyWithoutStdInput
}

input StdCreateWithoutSubjectsInput {
  id: ID
  gradename: String!
  category: String!
  branch: String
  year: String
  semester: String
  specilize: String
  isPublished: Boolean
  educationprofiles: EducationProfileCreateManyWithoutStdInput
}

"""An edge in a connection."""
type StdEdge {
  """The item at the end of the edge."""
  node: Std!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StdOrderByInput {
  id_ASC
  id_DESC
  gradename_ASC
  gradename_DESC
  category_ASC
  category_DESC
  branch_ASC
  branch_DESC
  year_ASC
  year_DESC
  semester_ASC
  semester_DESC
  specilize_ASC
  specilize_DESC
  isPublished_ASC
  isPublished_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StdPreviousValues {
  id: ID!
  gradename: String!
  category: String!
  branch: String
  year: String
  semester: String
  specilize: String
  isPublished: Boolean!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input StdScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StdScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StdScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StdScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  gradename: String

  """All values that are not equal to given value."""
  gradename_not: String

  """All values that are contained in given list."""
  gradename_in: [String!]

  """All values that are not contained in given list."""
  gradename_not_in: [String!]

  """All values less than the given value."""
  gradename_lt: String

  """All values less than or equal the given value."""
  gradename_lte: String

  """All values greater than the given value."""
  gradename_gt: String

  """All values greater than or equal the given value."""
  gradename_gte: String

  """All values containing the given string."""
  gradename_contains: String

  """All values not containing the given string."""
  gradename_not_contains: String

  """All values starting with the given string."""
  gradename_starts_with: String

  """All values not starting with the given string."""
  gradename_not_starts_with: String

  """All values ending with the given string."""
  gradename_ends_with: String

  """All values not ending with the given string."""
  gradename_not_ends_with: String
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  branch: String

  """All values that are not equal to given value."""
  branch_not: String

  """All values that are contained in given list."""
  branch_in: [String!]

  """All values that are not contained in given list."""
  branch_not_in: [String!]

  """All values less than the given value."""
  branch_lt: String

  """All values less than or equal the given value."""
  branch_lte: String

  """All values greater than the given value."""
  branch_gt: String

  """All values greater than or equal the given value."""
  branch_gte: String

  """All values containing the given string."""
  branch_contains: String

  """All values not containing the given string."""
  branch_not_contains: String

  """All values starting with the given string."""
  branch_starts_with: String

  """All values not starting with the given string."""
  branch_not_starts_with: String

  """All values ending with the given string."""
  branch_ends_with: String

  """All values not ending with the given string."""
  branch_not_ends_with: String
  year: String

  """All values that are not equal to given value."""
  year_not: String

  """All values that are contained in given list."""
  year_in: [String!]

  """All values that are not contained in given list."""
  year_not_in: [String!]

  """All values less than the given value."""
  year_lt: String

  """All values less than or equal the given value."""
  year_lte: String

  """All values greater than the given value."""
  year_gt: String

  """All values greater than or equal the given value."""
  year_gte: String

  """All values containing the given string."""
  year_contains: String

  """All values not containing the given string."""
  year_not_contains: String

  """All values starting with the given string."""
  year_starts_with: String

  """All values not starting with the given string."""
  year_not_starts_with: String

  """All values ending with the given string."""
  year_ends_with: String

  """All values not ending with the given string."""
  year_not_ends_with: String
  semester: String

  """All values that are not equal to given value."""
  semester_not: String

  """All values that are contained in given list."""
  semester_in: [String!]

  """All values that are not contained in given list."""
  semester_not_in: [String!]

  """All values less than the given value."""
  semester_lt: String

  """All values less than or equal the given value."""
  semester_lte: String

  """All values greater than the given value."""
  semester_gt: String

  """All values greater than or equal the given value."""
  semester_gte: String

  """All values containing the given string."""
  semester_contains: String

  """All values not containing the given string."""
  semester_not_contains: String

  """All values starting with the given string."""
  semester_starts_with: String

  """All values not starting with the given string."""
  semester_not_starts_with: String

  """All values ending with the given string."""
  semester_ends_with: String

  """All values not ending with the given string."""
  semester_not_ends_with: String
  specilize: String

  """All values that are not equal to given value."""
  specilize_not: String

  """All values that are contained in given list."""
  specilize_in: [String!]

  """All values that are not contained in given list."""
  specilize_not_in: [String!]

  """All values less than the given value."""
  specilize_lt: String

  """All values less than or equal the given value."""
  specilize_lte: String

  """All values greater than the given value."""
  specilize_gt: String

  """All values greater than or equal the given value."""
  specilize_gte: String

  """All values containing the given string."""
  specilize_contains: String

  """All values not containing the given string."""
  specilize_not_contains: String

  """All values starting with the given string."""
  specilize_starts_with: String

  """All values not starting with the given string."""
  specilize_not_starts_with: String

  """All values ending with the given string."""
  specilize_ends_with: String

  """All values not ending with the given string."""
  specilize_not_ends_with: String
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type StdSubscriptionPayload {
  mutation: MutationType!
  node: Std
  updatedFields: [String!]
  previousValues: StdPreviousValues
}

input StdSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StdSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StdSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StdSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StdWhereInput
}

input StdUpdateInput {
  gradename: String
  category: String
  branch: String
  year: String
  semester: String
  specilize: String
  isPublished: Boolean
  educationprofiles: EducationProfileUpdateManyWithoutStdInput
  subjects: SubjectUpdateManyWithoutStdInput
}

input StdUpdateManyDataInput {
  gradename: String
  category: String
  branch: String
  year: String
  semester: String
  specilize: String
  isPublished: Boolean
}

input StdUpdateManyMutationInput {
  gradename: String
  category: String
  branch: String
  year: String
  semester: String
  specilize: String
  isPublished: Boolean
}

input StdUpdateManyWithoutEducationprofilesInput {
  create: [StdCreateWithoutEducationprofilesInput!]
  connect: [StdWhereUniqueInput!]
  set: [StdWhereUniqueInput!]
  disconnect: [StdWhereUniqueInput!]
  delete: [StdWhereUniqueInput!]
  update: [StdUpdateWithWhereUniqueWithoutEducationprofilesInput!]
  updateMany: [StdUpdateManyWithWhereNestedInput!]
  deleteMany: [StdScalarWhereInput!]
  upsert: [StdUpsertWithWhereUniqueWithoutEducationprofilesInput!]
}

input StdUpdateManyWithWhereNestedInput {
  where: StdScalarWhereInput!
  data: StdUpdateManyDataInput!
}

input StdUpdateOneRequiredWithoutSubjectsInput {
  create: StdCreateWithoutSubjectsInput
  connect: StdWhereUniqueInput
  update: StdUpdateWithoutSubjectsDataInput
  upsert: StdUpsertWithoutSubjectsInput
}

input StdUpdateWithoutEducationprofilesDataInput {
  gradename: String
  category: String
  branch: String
  year: String
  semester: String
  specilize: String
  isPublished: Boolean
  subjects: SubjectUpdateManyWithoutStdInput
}

input StdUpdateWithoutSubjectsDataInput {
  gradename: String
  category: String
  branch: String
  year: String
  semester: String
  specilize: String
  isPublished: Boolean
  educationprofiles: EducationProfileUpdateManyWithoutStdInput
}

input StdUpdateWithWhereUniqueWithoutEducationprofilesInput {
  where: StdWhereUniqueInput!
  data: StdUpdateWithoutEducationprofilesDataInput!
}

input StdUpsertWithoutSubjectsInput {
  update: StdUpdateWithoutSubjectsDataInput!
  create: StdCreateWithoutSubjectsInput!
}

input StdUpsertWithWhereUniqueWithoutEducationprofilesInput {
  where: StdWhereUniqueInput!
  update: StdUpdateWithoutEducationprofilesDataInput!
  create: StdCreateWithoutEducationprofilesInput!
}

input StdWhereInput {
  """Logical AND on all given filters."""
  AND: [StdWhereInput!]

  """Logical OR on all given filters."""
  OR: [StdWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StdWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  gradename: String

  """All values that are not equal to given value."""
  gradename_not: String

  """All values that are contained in given list."""
  gradename_in: [String!]

  """All values that are not contained in given list."""
  gradename_not_in: [String!]

  """All values less than the given value."""
  gradename_lt: String

  """All values less than or equal the given value."""
  gradename_lte: String

  """All values greater than the given value."""
  gradename_gt: String

  """All values greater than or equal the given value."""
  gradename_gte: String

  """All values containing the given string."""
  gradename_contains: String

  """All values not containing the given string."""
  gradename_not_contains: String

  """All values starting with the given string."""
  gradename_starts_with: String

  """All values not starting with the given string."""
  gradename_not_starts_with: String

  """All values ending with the given string."""
  gradename_ends_with: String

  """All values not ending with the given string."""
  gradename_not_ends_with: String
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  branch: String

  """All values that are not equal to given value."""
  branch_not: String

  """All values that are contained in given list."""
  branch_in: [String!]

  """All values that are not contained in given list."""
  branch_not_in: [String!]

  """All values less than the given value."""
  branch_lt: String

  """All values less than or equal the given value."""
  branch_lte: String

  """All values greater than the given value."""
  branch_gt: String

  """All values greater than or equal the given value."""
  branch_gte: String

  """All values containing the given string."""
  branch_contains: String

  """All values not containing the given string."""
  branch_not_contains: String

  """All values starting with the given string."""
  branch_starts_with: String

  """All values not starting with the given string."""
  branch_not_starts_with: String

  """All values ending with the given string."""
  branch_ends_with: String

  """All values not ending with the given string."""
  branch_not_ends_with: String
  year: String

  """All values that are not equal to given value."""
  year_not: String

  """All values that are contained in given list."""
  year_in: [String!]

  """All values that are not contained in given list."""
  year_not_in: [String!]

  """All values less than the given value."""
  year_lt: String

  """All values less than or equal the given value."""
  year_lte: String

  """All values greater than the given value."""
  year_gt: String

  """All values greater than or equal the given value."""
  year_gte: String

  """All values containing the given string."""
  year_contains: String

  """All values not containing the given string."""
  year_not_contains: String

  """All values starting with the given string."""
  year_starts_with: String

  """All values not starting with the given string."""
  year_not_starts_with: String

  """All values ending with the given string."""
  year_ends_with: String

  """All values not ending with the given string."""
  year_not_ends_with: String
  semester: String

  """All values that are not equal to given value."""
  semester_not: String

  """All values that are contained in given list."""
  semester_in: [String!]

  """All values that are not contained in given list."""
  semester_not_in: [String!]

  """All values less than the given value."""
  semester_lt: String

  """All values less than or equal the given value."""
  semester_lte: String

  """All values greater than the given value."""
  semester_gt: String

  """All values greater than or equal the given value."""
  semester_gte: String

  """All values containing the given string."""
  semester_contains: String

  """All values not containing the given string."""
  semester_not_contains: String

  """All values starting with the given string."""
  semester_starts_with: String

  """All values not starting with the given string."""
  semester_not_starts_with: String

  """All values ending with the given string."""
  semester_ends_with: String

  """All values not ending with the given string."""
  semester_not_ends_with: String
  specilize: String

  """All values that are not equal to given value."""
  specilize_not: String

  """All values that are contained in given list."""
  specilize_in: [String!]

  """All values that are not contained in given list."""
  specilize_not_in: [String!]

  """All values less than the given value."""
  specilize_lt: String

  """All values less than or equal the given value."""
  specilize_lte: String

  """All values greater than the given value."""
  specilize_gt: String

  """All values greater than or equal the given value."""
  specilize_gte: String

  """All values containing the given string."""
  specilize_contains: String

  """All values not containing the given string."""
  specilize_not_contains: String

  """All values starting with the given string."""
  specilize_starts_with: String

  """All values not starting with the given string."""
  specilize_not_starts_with: String

  """All values ending with the given string."""
  specilize_ends_with: String

  """All values not ending with the given string."""
  specilize_not_ends_with: String
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  educationprofiles_every: EducationProfileWhereInput
  educationprofiles_some: EducationProfileWhereInput
  educationprofiles_none: EducationProfileWhereInput
  subjects_every: SubjectWhereInput
  subjects_some: SubjectWhereInput
  subjects_none: SubjectWhereInput
}

input StdWhereUniqueInput {
  id: ID
}

type SubGroup implements Node {
  id: ID!
  name: String!
  description: String
  groupid: Group!
  subgroupRoles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  medium(where: MediumWhereInput, orderBy: MediumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Medium!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type SubGroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubGroupEdge]!
  aggregate: AggregateSubGroup!
}

input SubGroupCreateInput {
  id: ID
  name: String!
  description: String
  groupid: GroupCreateOneWithoutSubgroupsInput!
  subgroupRoles: RoleCreateManyWithoutSubgroupInput
  subjects: SubjectCreateManyWithoutSubgroupInput
  medium: MediumCreateManyWithoutSubgroupInput
}

input SubGroupCreateManyWithoutGroupidInput {
  create: [SubGroupCreateWithoutGroupidInput!]
  connect: [SubGroupWhereUniqueInput!]
}

input SubGroupCreateOneWithoutMediumInput {
  create: SubGroupCreateWithoutMediumInput
  connect: SubGroupWhereUniqueInput
}

input SubGroupCreateOneWithoutSubgroupRolesInput {
  create: SubGroupCreateWithoutSubgroupRolesInput
  connect: SubGroupWhereUniqueInput
}

input SubGroupCreateOneWithoutSubjectsInput {
  create: SubGroupCreateWithoutSubjectsInput
  connect: SubGroupWhereUniqueInput
}

input SubGroupCreateWithoutGroupidInput {
  id: ID
  name: String!
  description: String
  subgroupRoles: RoleCreateManyWithoutSubgroupInput
  subjects: SubjectCreateManyWithoutSubgroupInput
  medium: MediumCreateManyWithoutSubgroupInput
}

input SubGroupCreateWithoutMediumInput {
  id: ID
  name: String!
  description: String
  groupid: GroupCreateOneWithoutSubgroupsInput!
  subgroupRoles: RoleCreateManyWithoutSubgroupInput
  subjects: SubjectCreateManyWithoutSubgroupInput
}

input SubGroupCreateWithoutSubgroupRolesInput {
  id: ID
  name: String!
  description: String
  groupid: GroupCreateOneWithoutSubgroupsInput!
  subjects: SubjectCreateManyWithoutSubgroupInput
  medium: MediumCreateManyWithoutSubgroupInput
}

input SubGroupCreateWithoutSubjectsInput {
  id: ID
  name: String!
  description: String
  groupid: GroupCreateOneWithoutSubgroupsInput!
  subgroupRoles: RoleCreateManyWithoutSubgroupInput
  medium: MediumCreateManyWithoutSubgroupInput
}

"""An edge in a connection."""
type SubGroupEdge {
  """The item at the end of the edge."""
  node: SubGroup!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubGroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SubGroupPreviousValues {
  id: ID!
  name: String!
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input SubGroupScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SubGroupScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubGroupScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubGroupScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type SubGroupSubscriptionPayload {
  mutation: MutationType!
  node: SubGroup
  updatedFields: [String!]
  previousValues: SubGroupPreviousValues
}

input SubGroupSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubGroupSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubGroupSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubGroupSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubGroupWhereInput
}

input SubGroupUpdateInput {
  name: String
  description: String
  groupid: GroupUpdateOneRequiredWithoutSubgroupsInput
  subgroupRoles: RoleUpdateManyWithoutSubgroupInput
  subjects: SubjectUpdateManyWithoutSubgroupInput
  medium: MediumUpdateManyWithoutSubgroupInput
}

input SubGroupUpdateManyDataInput {
  name: String
  description: String
}

input SubGroupUpdateManyMutationInput {
  name: String
  description: String
}

input SubGroupUpdateManyWithoutGroupidInput {
  create: [SubGroupCreateWithoutGroupidInput!]
  connect: [SubGroupWhereUniqueInput!]
  set: [SubGroupWhereUniqueInput!]
  disconnect: [SubGroupWhereUniqueInput!]
  delete: [SubGroupWhereUniqueInput!]
  update: [SubGroupUpdateWithWhereUniqueWithoutGroupidInput!]
  updateMany: [SubGroupUpdateManyWithWhereNestedInput!]
  deleteMany: [SubGroupScalarWhereInput!]
  upsert: [SubGroupUpsertWithWhereUniqueWithoutGroupidInput!]
}

input SubGroupUpdateManyWithWhereNestedInput {
  where: SubGroupScalarWhereInput!
  data: SubGroupUpdateManyDataInput!
}

input SubGroupUpdateOneWithoutMediumInput {
  create: SubGroupCreateWithoutMediumInput
  connect: SubGroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SubGroupUpdateWithoutMediumDataInput
  upsert: SubGroupUpsertWithoutMediumInput
}

input SubGroupUpdateOneWithoutSubgroupRolesInput {
  create: SubGroupCreateWithoutSubgroupRolesInput
  connect: SubGroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SubGroupUpdateWithoutSubgroupRolesDataInput
  upsert: SubGroupUpsertWithoutSubgroupRolesInput
}

input SubGroupUpdateOneWithoutSubjectsInput {
  create: SubGroupCreateWithoutSubjectsInput
  connect: SubGroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SubGroupUpdateWithoutSubjectsDataInput
  upsert: SubGroupUpsertWithoutSubjectsInput
}

input SubGroupUpdateWithoutGroupidDataInput {
  name: String
  description: String
  subgroupRoles: RoleUpdateManyWithoutSubgroupInput
  subjects: SubjectUpdateManyWithoutSubgroupInput
  medium: MediumUpdateManyWithoutSubgroupInput
}

input SubGroupUpdateWithoutMediumDataInput {
  name: String
  description: String
  groupid: GroupUpdateOneRequiredWithoutSubgroupsInput
  subgroupRoles: RoleUpdateManyWithoutSubgroupInput
  subjects: SubjectUpdateManyWithoutSubgroupInput
}

input SubGroupUpdateWithoutSubgroupRolesDataInput {
  name: String
  description: String
  groupid: GroupUpdateOneRequiredWithoutSubgroupsInput
  subjects: SubjectUpdateManyWithoutSubgroupInput
  medium: MediumUpdateManyWithoutSubgroupInput
}

input SubGroupUpdateWithoutSubjectsDataInput {
  name: String
  description: String
  groupid: GroupUpdateOneRequiredWithoutSubgroupsInput
  subgroupRoles: RoleUpdateManyWithoutSubgroupInput
  medium: MediumUpdateManyWithoutSubgroupInput
}

input SubGroupUpdateWithWhereUniqueWithoutGroupidInput {
  where: SubGroupWhereUniqueInput!
  data: SubGroupUpdateWithoutGroupidDataInput!
}

input SubGroupUpsertWithoutMediumInput {
  update: SubGroupUpdateWithoutMediumDataInput!
  create: SubGroupCreateWithoutMediumInput!
}

input SubGroupUpsertWithoutSubgroupRolesInput {
  update: SubGroupUpdateWithoutSubgroupRolesDataInput!
  create: SubGroupCreateWithoutSubgroupRolesInput!
}

input SubGroupUpsertWithoutSubjectsInput {
  update: SubGroupUpdateWithoutSubjectsDataInput!
  create: SubGroupCreateWithoutSubjectsInput!
}

input SubGroupUpsertWithWhereUniqueWithoutGroupidInput {
  where: SubGroupWhereUniqueInput!
  update: SubGroupUpdateWithoutGroupidDataInput!
  create: SubGroupCreateWithoutGroupidInput!
}

input SubGroupWhereInput {
  """Logical AND on all given filters."""
  AND: [SubGroupWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubGroupWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubGroupWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  groupid: GroupWhereInput
  subgroupRoles_every: RoleWhereInput
  subgroupRoles_some: RoleWhereInput
  subgroupRoles_none: RoleWhereInput
  subjects_every: SubjectWhereInput
  subjects_some: SubjectWhereInput
  subjects_none: SubjectWhereInput
  medium_every: MediumWhereInput
  medium_some: MediumWhereInput
  medium_none: MediumWhereInput
}

input SubGroupWhereUniqueInput {
  id: ID
}

type Subject implements Node {
  id: ID!
  name: String!
  picture: String
  medium: Medium
  std: Std!
  board: String
  category: String
  level: Int
  color: String
  group: Group
  subgroup: SubGroup
  syllabus: Json
  units(where: UnitWhereInput, orderBy: UnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Unit!]
  topic(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  contents(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  examples(where: ExampleWhereInput, orderBy: ExampleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Example!]
  tipstricks(where: TipsTrickWhereInput, orderBy: TipsTrickOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TipsTrick!]
  exams(where: ExamWhereInput, orderBy: ExamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exam!]
  formulas(where: FormulaWhereInput, orderBy: FormulaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Formula!]
  bookmarks(where: BookmarkWhereInput, orderBy: BookmarkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bookmark!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type SubjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubjectEdge]!
  aggregate: AggregateSubject!
}

input SubjectCreateInput {
  id: ID
  name: String!
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectsInput!
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  questions: QuestionCreateManyWithoutSubjectInput
  examples: ExampleCreateManyWithoutSubjectInput
  tipstricks: TipsTrickCreateManyWithoutSubjectInput
  exams: ExamCreateManyWithoutSubjectInput
  formulas: FormulaCreateManyWithoutSubjectInput
  bookmarks: BookmarkCreateManyWithoutSubjectInput
}

input SubjectCreateManyInput {
  create: [SubjectCreateInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateManyWithoutGroupInput {
  create: [SubjectCreateWithoutGroupInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateManyWithoutMediumInput {
  create: [SubjectCreateWithoutMediumInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateManyWithoutStdInput {
  create: [SubjectCreateWithoutStdInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateManyWithoutSubgroupInput {
  create: [SubjectCreateWithoutSubgroupInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateOneInput {
  create: SubjectCreateInput
  connect: SubjectWhereUniqueInput
}

input SubjectCreateOneWithoutBookmarksInput {
  create: SubjectCreateWithoutBookmarksInput
  connect: SubjectWhereUniqueInput
}

input SubjectCreateOneWithoutContentsInput {
  create: SubjectCreateWithoutContentsInput
  connect: SubjectWhereUniqueInput
}

input SubjectCreateOneWithoutExamplesInput {
  create: SubjectCreateWithoutExamplesInput
  connect: SubjectWhereUniqueInput
}

input SubjectCreateOneWithoutExamsInput {
  create: SubjectCreateWithoutExamsInput
  connect: SubjectWhereUniqueInput
}

input SubjectCreateOneWithoutFormulasInput {
  create: SubjectCreateWithoutFormulasInput
  connect: SubjectWhereUniqueInput
}

input SubjectCreateOneWithoutQuestionsInput {
  create: SubjectCreateWithoutQuestionsInput
  connect: SubjectWhereUniqueInput
}

input SubjectCreateOneWithoutTipstricksInput {
  create: SubjectCreateWithoutTipstricksInput
  connect: SubjectWhereUniqueInput
}

input SubjectCreateOneWithoutTopicInput {
  create: SubjectCreateWithoutTopicInput
  connect: SubjectWhereUniqueInput
}

input SubjectCreateOneWithoutUnitsInput {
  create: SubjectCreateWithoutUnitsInput
  connect: SubjectWhereUniqueInput
}

input SubjectCreateWithoutBookmarksInput {
  id: ID
  name: String!
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectsInput!
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  questions: QuestionCreateManyWithoutSubjectInput
  examples: ExampleCreateManyWithoutSubjectInput
  tipstricks: TipsTrickCreateManyWithoutSubjectInput
  exams: ExamCreateManyWithoutSubjectInput
  formulas: FormulaCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutContentsInput {
  id: ID
  name: String!
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectsInput!
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  questions: QuestionCreateManyWithoutSubjectInput
  examples: ExampleCreateManyWithoutSubjectInput
  tipstricks: TipsTrickCreateManyWithoutSubjectInput
  exams: ExamCreateManyWithoutSubjectInput
  formulas: FormulaCreateManyWithoutSubjectInput
  bookmarks: BookmarkCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutExamplesInput {
  id: ID
  name: String!
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectsInput!
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  questions: QuestionCreateManyWithoutSubjectInput
  tipstricks: TipsTrickCreateManyWithoutSubjectInput
  exams: ExamCreateManyWithoutSubjectInput
  formulas: FormulaCreateManyWithoutSubjectInput
  bookmarks: BookmarkCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutExamsInput {
  id: ID
  name: String!
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectsInput!
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  questions: QuestionCreateManyWithoutSubjectInput
  examples: ExampleCreateManyWithoutSubjectInput
  tipstricks: TipsTrickCreateManyWithoutSubjectInput
  formulas: FormulaCreateManyWithoutSubjectInput
  bookmarks: BookmarkCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutFormulasInput {
  id: ID
  name: String!
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectsInput!
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  questions: QuestionCreateManyWithoutSubjectInput
  examples: ExampleCreateManyWithoutSubjectInput
  tipstricks: TipsTrickCreateManyWithoutSubjectInput
  exams: ExamCreateManyWithoutSubjectInput
  bookmarks: BookmarkCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutGroupInput {
  id: ID
  name: String!
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectsInput!
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  questions: QuestionCreateManyWithoutSubjectInput
  examples: ExampleCreateManyWithoutSubjectInput
  tipstricks: TipsTrickCreateManyWithoutSubjectInput
  exams: ExamCreateManyWithoutSubjectInput
  formulas: FormulaCreateManyWithoutSubjectInput
  bookmarks: BookmarkCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutMediumInput {
  id: ID
  name: String!
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  std: StdCreateOneWithoutSubjectsInput!
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  questions: QuestionCreateManyWithoutSubjectInput
  examples: ExampleCreateManyWithoutSubjectInput
  tipstricks: TipsTrickCreateManyWithoutSubjectInput
  exams: ExamCreateManyWithoutSubjectInput
  formulas: FormulaCreateManyWithoutSubjectInput
  bookmarks: BookmarkCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutQuestionsInput {
  id: ID
  name: String!
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectsInput!
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  examples: ExampleCreateManyWithoutSubjectInput
  tipstricks: TipsTrickCreateManyWithoutSubjectInput
  exams: ExamCreateManyWithoutSubjectInput
  formulas: FormulaCreateManyWithoutSubjectInput
  bookmarks: BookmarkCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutStdInput {
  id: ID
  name: String!
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumCreateOneWithoutSubjectsInput
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  questions: QuestionCreateManyWithoutSubjectInput
  examples: ExampleCreateManyWithoutSubjectInput
  tipstricks: TipsTrickCreateManyWithoutSubjectInput
  exams: ExamCreateManyWithoutSubjectInput
  formulas: FormulaCreateManyWithoutSubjectInput
  bookmarks: BookmarkCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutSubgroupInput {
  id: ID
  name: String!
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectsInput!
  group: GroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  questions: QuestionCreateManyWithoutSubjectInput
  examples: ExampleCreateManyWithoutSubjectInput
  tipstricks: TipsTrickCreateManyWithoutSubjectInput
  exams: ExamCreateManyWithoutSubjectInput
  formulas: FormulaCreateManyWithoutSubjectInput
  bookmarks: BookmarkCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutTipstricksInput {
  id: ID
  name: String!
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectsInput!
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  questions: QuestionCreateManyWithoutSubjectInput
  examples: ExampleCreateManyWithoutSubjectInput
  exams: ExamCreateManyWithoutSubjectInput
  formulas: FormulaCreateManyWithoutSubjectInput
  bookmarks: BookmarkCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutTopicInput {
  id: ID
  name: String!
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectsInput!
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  units: UnitCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  questions: QuestionCreateManyWithoutSubjectInput
  examples: ExampleCreateManyWithoutSubjectInput
  tipstricks: TipsTrickCreateManyWithoutSubjectInput
  exams: ExamCreateManyWithoutSubjectInput
  formulas: FormulaCreateManyWithoutSubjectInput
  bookmarks: BookmarkCreateManyWithoutSubjectInput
}

input SubjectCreateWithoutUnitsInput {
  id: ID
  name: String!
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumCreateOneWithoutSubjectsInput
  std: StdCreateOneWithoutSubjectsInput!
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
  topic: TopicCreateManyWithoutSubjectInput
  contents: ContentCreateManyWithoutSubjectInput
  questions: QuestionCreateManyWithoutSubjectInput
  examples: ExampleCreateManyWithoutSubjectInput
  tipstricks: TipsTrickCreateManyWithoutSubjectInput
  exams: ExamCreateManyWithoutSubjectInput
  formulas: FormulaCreateManyWithoutSubjectInput
  bookmarks: BookmarkCreateManyWithoutSubjectInput
}

"""An edge in a connection."""
type SubjectEdge {
  """The item at the end of the edge."""
  node: Subject!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  picture_ASC
  picture_DESC
  board_ASC
  board_DESC
  category_ASC
  category_DESC
  level_ASC
  level_DESC
  color_ASC
  color_DESC
  syllabus_ASC
  syllabus_DESC
  plantDate_ASC
  plantDate_DESC
  isPublished_ASC
  isPublished_DESC
  state_ASC
  state_DESC
  status_ASC
  status_DESC
  available_ASC
  available_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SubjectPreviousValues {
  id: ID!
  name: String!
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input SubjectScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  picture: String

  """All values that are not equal to given value."""
  picture_not: String

  """All values that are contained in given list."""
  picture_in: [String!]

  """All values that are not contained in given list."""
  picture_not_in: [String!]

  """All values less than the given value."""
  picture_lt: String

  """All values less than or equal the given value."""
  picture_lte: String

  """All values greater than the given value."""
  picture_gt: String

  """All values greater than or equal the given value."""
  picture_gte: String

  """All values containing the given string."""
  picture_contains: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values starting with the given string."""
  picture_starts_with: String

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values not ending with the given string."""
  picture_not_ends_with: String
  board: String

  """All values that are not equal to given value."""
  board_not: String

  """All values that are contained in given list."""
  board_in: [String!]

  """All values that are not contained in given list."""
  board_not_in: [String!]

  """All values less than the given value."""
  board_lt: String

  """All values less than or equal the given value."""
  board_lte: String

  """All values greater than the given value."""
  board_gt: String

  """All values greater than or equal the given value."""
  board_gte: String

  """All values containing the given string."""
  board_contains: String

  """All values not containing the given string."""
  board_not_contains: String

  """All values starting with the given string."""
  board_starts_with: String

  """All values not starting with the given string."""
  board_not_starts_with: String

  """All values ending with the given string."""
  board_ends_with: String

  """All values not ending with the given string."""
  board_not_ends_with: String
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  level: Int

  """All values that are not equal to given value."""
  level_not: Int

  """All values that are contained in given list."""
  level_in: [Int!]

  """All values that are not contained in given list."""
  level_not_in: [Int!]

  """All values less than the given value."""
  level_lt: Int

  """All values less than or equal the given value."""
  level_lte: Int

  """All values greater than the given value."""
  level_gt: Int

  """All values greater than or equal the given value."""
  level_gte: Int
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
  plantDate: DateTime

  """All values that are not equal to given value."""
  plantDate_not: DateTime

  """All values that are contained in given list."""
  plantDate_in: [DateTime!]

  """All values that are not contained in given list."""
  plantDate_not_in: [DateTime!]

  """All values less than the given value."""
  plantDate_lt: DateTime

  """All values less than or equal the given value."""
  plantDate_lte: DateTime

  """All values greater than the given value."""
  plantDate_gt: DateTime

  """All values greater than or equal the given value."""
  plantDate_gte: DateTime
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  available: String

  """All values that are not equal to given value."""
  available_not: String

  """All values that are contained in given list."""
  available_in: [String!]

  """All values that are not contained in given list."""
  available_not_in: [String!]

  """All values less than the given value."""
  available_lt: String

  """All values less than or equal the given value."""
  available_lte: String

  """All values greater than the given value."""
  available_gt: String

  """All values greater than or equal the given value."""
  available_gte: String

  """All values containing the given string."""
  available_contains: String

  """All values not containing the given string."""
  available_not_contains: String

  """All values starting with the given string."""
  available_starts_with: String

  """All values not starting with the given string."""
  available_not_starts_with: String

  """All values ending with the given string."""
  available_ends_with: String

  """All values not ending with the given string."""
  available_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type SubjectSubscription implements Node {
  id: ID!
  subsType: String
  mySubjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  userid: User!
  subscribedAs: Role!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type SubjectSubscriptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubjectSubscriptionEdge]!
  aggregate: AggregateSubjectSubscription!
}

input SubjectSubscriptionCreateInput {
  id: ID
  subsType: String
  mySubjects: SubjectCreateManyInput
  userid: UserCreateOneWithoutSubjectSubscriptionInput!
  subscribedAs: RoleCreateOneInput!
}

input SubjectSubscriptionCreateManyWithoutUseridInput {
  create: [SubjectSubscriptionCreateWithoutUseridInput!]
  connect: [SubjectSubscriptionWhereUniqueInput!]
}

input SubjectSubscriptionCreateWithoutUseridInput {
  id: ID
  subsType: String
  mySubjects: SubjectCreateManyInput
  subscribedAs: RoleCreateOneInput!
}

"""An edge in a connection."""
type SubjectSubscriptionEdge {
  """The item at the end of the edge."""
  node: SubjectSubscription!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubjectSubscriptionOrderByInput {
  id_ASC
  id_DESC
  subsType_ASC
  subsType_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SubjectSubscriptionPayload {
  mutation: MutationType!
  node: Subject
  updatedFields: [String!]
  previousValues: SubjectPreviousValues
}

type SubjectSubscriptionPreviousValues {
  id: ID!
  subsType: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input SubjectSubscriptionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectSubscriptionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectSubscriptionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectSubscriptionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  subsType: String

  """All values that are not equal to given value."""
  subsType_not: String

  """All values that are contained in given list."""
  subsType_in: [String!]

  """All values that are not contained in given list."""
  subsType_not_in: [String!]

  """All values less than the given value."""
  subsType_lt: String

  """All values less than or equal the given value."""
  subsType_lte: String

  """All values greater than the given value."""
  subsType_gt: String

  """All values greater than or equal the given value."""
  subsType_gte: String

  """All values containing the given string."""
  subsType_contains: String

  """All values not containing the given string."""
  subsType_not_contains: String

  """All values starting with the given string."""
  subsType_starts_with: String

  """All values not starting with the given string."""
  subsType_not_starts_with: String

  """All values ending with the given string."""
  subsType_ends_with: String

  """All values not ending with the given string."""
  subsType_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type SubjectSubscriptionSubscriptionPayload {
  mutation: MutationType!
  node: SubjectSubscription
  updatedFields: [String!]
  previousValues: SubjectSubscriptionPreviousValues
}

input SubjectSubscriptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectSubscriptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectSubscriptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectSubscriptionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubjectSubscriptionWhereInput
}

input SubjectSubscriptionUpdateInput {
  subsType: String
  mySubjects: SubjectUpdateManyInput
  userid: UserUpdateOneRequiredWithoutSubjectSubscriptionInput
  subscribedAs: RoleUpdateOneRequiredInput
}

input SubjectSubscriptionUpdateManyDataInput {
  subsType: String
}

input SubjectSubscriptionUpdateManyMutationInput {
  subsType: String
}

input SubjectSubscriptionUpdateManyWithoutUseridInput {
  create: [SubjectSubscriptionCreateWithoutUseridInput!]
  connect: [SubjectSubscriptionWhereUniqueInput!]
  set: [SubjectSubscriptionWhereUniqueInput!]
  disconnect: [SubjectSubscriptionWhereUniqueInput!]
  delete: [SubjectSubscriptionWhereUniqueInput!]
  update: [SubjectSubscriptionUpdateWithWhereUniqueWithoutUseridInput!]
  updateMany: [SubjectSubscriptionUpdateManyWithWhereNestedInput!]
  deleteMany: [SubjectSubscriptionScalarWhereInput!]
  upsert: [SubjectSubscriptionUpsertWithWhereUniqueWithoutUseridInput!]
}

input SubjectSubscriptionUpdateManyWithWhereNestedInput {
  where: SubjectSubscriptionScalarWhereInput!
  data: SubjectSubscriptionUpdateManyDataInput!
}

input SubjectSubscriptionUpdateWithoutUseridDataInput {
  subsType: String
  mySubjects: SubjectUpdateManyInput
  subscribedAs: RoleUpdateOneRequiredInput
}

input SubjectSubscriptionUpdateWithWhereUniqueWithoutUseridInput {
  where: SubjectSubscriptionWhereUniqueInput!
  data: SubjectSubscriptionUpdateWithoutUseridDataInput!
}

input SubjectSubscriptionUpsertWithWhereUniqueWithoutUseridInput {
  where: SubjectSubscriptionWhereUniqueInput!
  update: SubjectSubscriptionUpdateWithoutUseridDataInput!
  create: SubjectSubscriptionCreateWithoutUseridInput!
}

input SubjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectSubscriptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  subsType: String

  """All values that are not equal to given value."""
  subsType_not: String

  """All values that are contained in given list."""
  subsType_in: [String!]

  """All values that are not contained in given list."""
  subsType_not_in: [String!]

  """All values less than the given value."""
  subsType_lt: String

  """All values less than or equal the given value."""
  subsType_lte: String

  """All values greater than the given value."""
  subsType_gt: String

  """All values greater than or equal the given value."""
  subsType_gte: String

  """All values containing the given string."""
  subsType_contains: String

  """All values not containing the given string."""
  subsType_not_contains: String

  """All values starting with the given string."""
  subsType_starts_with: String

  """All values not starting with the given string."""
  subsType_not_starts_with: String

  """All values ending with the given string."""
  subsType_ends_with: String

  """All values not ending with the given string."""
  subsType_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  mySubjects_every: SubjectWhereInput
  mySubjects_some: SubjectWhereInput
  mySubjects_none: SubjectWhereInput
  userid: UserWhereInput
  subscribedAs: RoleWhereInput
}

input SubjectSubscriptionWhereUniqueInput {
  id: ID
}

input SubjectUpdateDataInput {
  name: String
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectsInput
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  questions: QuestionUpdateManyWithoutSubjectInput
  examples: ExampleUpdateManyWithoutSubjectInput
  tipstricks: TipsTrickUpdateManyWithoutSubjectInput
  exams: ExamUpdateManyWithoutSubjectInput
  formulas: FormulaUpdateManyWithoutSubjectInput
  bookmarks: BookmarkUpdateManyWithoutSubjectInput
}

input SubjectUpdateInput {
  name: String
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectsInput
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  questions: QuestionUpdateManyWithoutSubjectInput
  examples: ExampleUpdateManyWithoutSubjectInput
  tipstricks: TipsTrickUpdateManyWithoutSubjectInput
  exams: ExamUpdateManyWithoutSubjectInput
  formulas: FormulaUpdateManyWithoutSubjectInput
  bookmarks: BookmarkUpdateManyWithoutSubjectInput
}

input SubjectUpdateManyDataInput {
  name: String
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
}

input SubjectUpdateManyInput {
  create: [SubjectCreateInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  delete: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueNestedInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
  deleteMany: [SubjectScalarWhereInput!]
  upsert: [SubjectUpsertWithWhereUniqueNestedInput!]
}

input SubjectUpdateManyMutationInput {
  name: String
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
}

input SubjectUpdateManyWithoutGroupInput {
  create: [SubjectCreateWithoutGroupInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  delete: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
  deleteMany: [SubjectScalarWhereInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutGroupInput!]
}

input SubjectUpdateManyWithoutMediumInput {
  create: [SubjectCreateWithoutMediumInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  delete: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutMediumInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
  deleteMany: [SubjectScalarWhereInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutMediumInput!]
}

input SubjectUpdateManyWithoutStdInput {
  create: [SubjectCreateWithoutStdInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  delete: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutStdInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
  deleteMany: [SubjectScalarWhereInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutStdInput!]
}

input SubjectUpdateManyWithoutSubgroupInput {
  create: [SubjectCreateWithoutSubgroupInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  delete: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutSubgroupInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
  deleteMany: [SubjectScalarWhereInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutSubgroupInput!]
}

input SubjectUpdateManyWithWhereNestedInput {
  where: SubjectScalarWhereInput!
  data: SubjectUpdateManyDataInput!
}

input SubjectUpdateOneInput {
  create: SubjectCreateInput
  connect: SubjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SubjectUpdateDataInput
  upsert: SubjectUpsertNestedInput
}

input SubjectUpdateOneRequiredWithoutUnitsInput {
  create: SubjectCreateWithoutUnitsInput
  connect: SubjectWhereUniqueInput
  update: SubjectUpdateWithoutUnitsDataInput
  upsert: SubjectUpsertWithoutUnitsInput
}

input SubjectUpdateOneWithoutBookmarksInput {
  create: SubjectCreateWithoutBookmarksInput
  connect: SubjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SubjectUpdateWithoutBookmarksDataInput
  upsert: SubjectUpsertWithoutBookmarksInput
}

input SubjectUpdateOneWithoutContentsInput {
  create: SubjectCreateWithoutContentsInput
  connect: SubjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SubjectUpdateWithoutContentsDataInput
  upsert: SubjectUpsertWithoutContentsInput
}

input SubjectUpdateOneWithoutExamplesInput {
  create: SubjectCreateWithoutExamplesInput
  connect: SubjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SubjectUpdateWithoutExamplesDataInput
  upsert: SubjectUpsertWithoutExamplesInput
}

input SubjectUpdateOneWithoutExamsInput {
  create: SubjectCreateWithoutExamsInput
  connect: SubjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SubjectUpdateWithoutExamsDataInput
  upsert: SubjectUpsertWithoutExamsInput
}

input SubjectUpdateOneWithoutFormulasInput {
  create: SubjectCreateWithoutFormulasInput
  connect: SubjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SubjectUpdateWithoutFormulasDataInput
  upsert: SubjectUpsertWithoutFormulasInput
}

input SubjectUpdateOneWithoutQuestionsInput {
  create: SubjectCreateWithoutQuestionsInput
  connect: SubjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SubjectUpdateWithoutQuestionsDataInput
  upsert: SubjectUpsertWithoutQuestionsInput
}

input SubjectUpdateOneWithoutTipstricksInput {
  create: SubjectCreateWithoutTipstricksInput
  connect: SubjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SubjectUpdateWithoutTipstricksDataInput
  upsert: SubjectUpsertWithoutTipstricksInput
}

input SubjectUpdateOneWithoutTopicInput {
  create: SubjectCreateWithoutTopicInput
  connect: SubjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SubjectUpdateWithoutTopicDataInput
  upsert: SubjectUpsertWithoutTopicInput
}

input SubjectUpdateWithoutBookmarksDataInput {
  name: String
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectsInput
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  questions: QuestionUpdateManyWithoutSubjectInput
  examples: ExampleUpdateManyWithoutSubjectInput
  tipstricks: TipsTrickUpdateManyWithoutSubjectInput
  exams: ExamUpdateManyWithoutSubjectInput
  formulas: FormulaUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutContentsDataInput {
  name: String
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectsInput
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  questions: QuestionUpdateManyWithoutSubjectInput
  examples: ExampleUpdateManyWithoutSubjectInput
  tipstricks: TipsTrickUpdateManyWithoutSubjectInput
  exams: ExamUpdateManyWithoutSubjectInput
  formulas: FormulaUpdateManyWithoutSubjectInput
  bookmarks: BookmarkUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutExamplesDataInput {
  name: String
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectsInput
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  questions: QuestionUpdateManyWithoutSubjectInput
  tipstricks: TipsTrickUpdateManyWithoutSubjectInput
  exams: ExamUpdateManyWithoutSubjectInput
  formulas: FormulaUpdateManyWithoutSubjectInput
  bookmarks: BookmarkUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutExamsDataInput {
  name: String
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectsInput
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  questions: QuestionUpdateManyWithoutSubjectInput
  examples: ExampleUpdateManyWithoutSubjectInput
  tipstricks: TipsTrickUpdateManyWithoutSubjectInput
  formulas: FormulaUpdateManyWithoutSubjectInput
  bookmarks: BookmarkUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutFormulasDataInput {
  name: String
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectsInput
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  questions: QuestionUpdateManyWithoutSubjectInput
  examples: ExampleUpdateManyWithoutSubjectInput
  tipstricks: TipsTrickUpdateManyWithoutSubjectInput
  exams: ExamUpdateManyWithoutSubjectInput
  bookmarks: BookmarkUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutGroupDataInput {
  name: String
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  questions: QuestionUpdateManyWithoutSubjectInput
  examples: ExampleUpdateManyWithoutSubjectInput
  tipstricks: TipsTrickUpdateManyWithoutSubjectInput
  exams: ExamUpdateManyWithoutSubjectInput
  formulas: FormulaUpdateManyWithoutSubjectInput
  bookmarks: BookmarkUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutMediumDataInput {
  name: String
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  std: StdUpdateOneRequiredWithoutSubjectsInput
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  questions: QuestionUpdateManyWithoutSubjectInput
  examples: ExampleUpdateManyWithoutSubjectInput
  tipstricks: TipsTrickUpdateManyWithoutSubjectInput
  exams: ExamUpdateManyWithoutSubjectInput
  formulas: FormulaUpdateManyWithoutSubjectInput
  bookmarks: BookmarkUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutQuestionsDataInput {
  name: String
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectsInput
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  examples: ExampleUpdateManyWithoutSubjectInput
  tipstricks: TipsTrickUpdateManyWithoutSubjectInput
  exams: ExamUpdateManyWithoutSubjectInput
  formulas: FormulaUpdateManyWithoutSubjectInput
  bookmarks: BookmarkUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutStdDataInput {
  name: String
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumUpdateOneWithoutSubjectsInput
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  questions: QuestionUpdateManyWithoutSubjectInput
  examples: ExampleUpdateManyWithoutSubjectInput
  tipstricks: TipsTrickUpdateManyWithoutSubjectInput
  exams: ExamUpdateManyWithoutSubjectInput
  formulas: FormulaUpdateManyWithoutSubjectInput
  bookmarks: BookmarkUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutSubgroupDataInput {
  name: String
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectsInput
  group: GroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  questions: QuestionUpdateManyWithoutSubjectInput
  examples: ExampleUpdateManyWithoutSubjectInput
  tipstricks: TipsTrickUpdateManyWithoutSubjectInput
  exams: ExamUpdateManyWithoutSubjectInput
  formulas: FormulaUpdateManyWithoutSubjectInput
  bookmarks: BookmarkUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutTipstricksDataInput {
  name: String
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectsInput
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  questions: QuestionUpdateManyWithoutSubjectInput
  examples: ExampleUpdateManyWithoutSubjectInput
  exams: ExamUpdateManyWithoutSubjectInput
  formulas: FormulaUpdateManyWithoutSubjectInput
  bookmarks: BookmarkUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutTopicDataInput {
  name: String
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectsInput
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  units: UnitUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  questions: QuestionUpdateManyWithoutSubjectInput
  examples: ExampleUpdateManyWithoutSubjectInput
  tipstricks: TipsTrickUpdateManyWithoutSubjectInput
  exams: ExamUpdateManyWithoutSubjectInput
  formulas: FormulaUpdateManyWithoutSubjectInput
  bookmarks: BookmarkUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithoutUnitsDataInput {
  name: String
  picture: String
  board: String
  category: String
  level: Int
  color: String
  syllabus: Json
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  description: String
  medium: MediumUpdateOneWithoutSubjectsInput
  std: StdUpdateOneRequiredWithoutSubjectsInput
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
  topic: TopicUpdateManyWithoutSubjectInput
  contents: ContentUpdateManyWithoutSubjectInput
  questions: QuestionUpdateManyWithoutSubjectInput
  examples: ExampleUpdateManyWithoutSubjectInput
  tipstricks: TipsTrickUpdateManyWithoutSubjectInput
  exams: ExamUpdateManyWithoutSubjectInput
  formulas: FormulaUpdateManyWithoutSubjectInput
  bookmarks: BookmarkUpdateManyWithoutSubjectInput
}

input SubjectUpdateWithWhereUniqueNestedInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateDataInput!
}

input SubjectUpdateWithWhereUniqueWithoutGroupInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutGroupDataInput!
}

input SubjectUpdateWithWhereUniqueWithoutMediumInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutMediumDataInput!
}

input SubjectUpdateWithWhereUniqueWithoutStdInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutStdDataInput!
}

input SubjectUpdateWithWhereUniqueWithoutSubgroupInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutSubgroupDataInput!
}

input SubjectUpsertNestedInput {
  update: SubjectUpdateDataInput!
  create: SubjectCreateInput!
}

input SubjectUpsertWithoutBookmarksInput {
  update: SubjectUpdateWithoutBookmarksDataInput!
  create: SubjectCreateWithoutBookmarksInput!
}

input SubjectUpsertWithoutContentsInput {
  update: SubjectUpdateWithoutContentsDataInput!
  create: SubjectCreateWithoutContentsInput!
}

input SubjectUpsertWithoutExamplesInput {
  update: SubjectUpdateWithoutExamplesDataInput!
  create: SubjectCreateWithoutExamplesInput!
}

input SubjectUpsertWithoutExamsInput {
  update: SubjectUpdateWithoutExamsDataInput!
  create: SubjectCreateWithoutExamsInput!
}

input SubjectUpsertWithoutFormulasInput {
  update: SubjectUpdateWithoutFormulasDataInput!
  create: SubjectCreateWithoutFormulasInput!
}

input SubjectUpsertWithoutQuestionsInput {
  update: SubjectUpdateWithoutQuestionsDataInput!
  create: SubjectCreateWithoutQuestionsInput!
}

input SubjectUpsertWithoutTipstricksInput {
  update: SubjectUpdateWithoutTipstricksDataInput!
  create: SubjectCreateWithoutTipstricksInput!
}

input SubjectUpsertWithoutTopicInput {
  update: SubjectUpdateWithoutTopicDataInput!
  create: SubjectCreateWithoutTopicInput!
}

input SubjectUpsertWithoutUnitsInput {
  update: SubjectUpdateWithoutUnitsDataInput!
  create: SubjectCreateWithoutUnitsInput!
}

input SubjectUpsertWithWhereUniqueNestedInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateDataInput!
  create: SubjectCreateInput!
}

input SubjectUpsertWithWhereUniqueWithoutGroupInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutGroupDataInput!
  create: SubjectCreateWithoutGroupInput!
}

input SubjectUpsertWithWhereUniqueWithoutMediumInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutMediumDataInput!
  create: SubjectCreateWithoutMediumInput!
}

input SubjectUpsertWithWhereUniqueWithoutStdInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutStdDataInput!
  create: SubjectCreateWithoutStdInput!
}

input SubjectUpsertWithWhereUniqueWithoutSubgroupInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutSubgroupDataInput!
  create: SubjectCreateWithoutSubgroupInput!
}

input SubjectWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  picture: String

  """All values that are not equal to given value."""
  picture_not: String

  """All values that are contained in given list."""
  picture_in: [String!]

  """All values that are not contained in given list."""
  picture_not_in: [String!]

  """All values less than the given value."""
  picture_lt: String

  """All values less than or equal the given value."""
  picture_lte: String

  """All values greater than the given value."""
  picture_gt: String

  """All values greater than or equal the given value."""
  picture_gte: String

  """All values containing the given string."""
  picture_contains: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values starting with the given string."""
  picture_starts_with: String

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values not ending with the given string."""
  picture_not_ends_with: String
  board: String

  """All values that are not equal to given value."""
  board_not: String

  """All values that are contained in given list."""
  board_in: [String!]

  """All values that are not contained in given list."""
  board_not_in: [String!]

  """All values less than the given value."""
  board_lt: String

  """All values less than or equal the given value."""
  board_lte: String

  """All values greater than the given value."""
  board_gt: String

  """All values greater than or equal the given value."""
  board_gte: String

  """All values containing the given string."""
  board_contains: String

  """All values not containing the given string."""
  board_not_contains: String

  """All values starting with the given string."""
  board_starts_with: String

  """All values not starting with the given string."""
  board_not_starts_with: String

  """All values ending with the given string."""
  board_ends_with: String

  """All values not ending with the given string."""
  board_not_ends_with: String
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  level: Int

  """All values that are not equal to given value."""
  level_not: Int

  """All values that are contained in given list."""
  level_in: [Int!]

  """All values that are not contained in given list."""
  level_not_in: [Int!]

  """All values less than the given value."""
  level_lt: Int

  """All values less than or equal the given value."""
  level_lte: Int

  """All values greater than the given value."""
  level_gt: Int

  """All values greater than or equal the given value."""
  level_gte: Int
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
  plantDate: DateTime

  """All values that are not equal to given value."""
  plantDate_not: DateTime

  """All values that are contained in given list."""
  plantDate_in: [DateTime!]

  """All values that are not contained in given list."""
  plantDate_not_in: [DateTime!]

  """All values less than the given value."""
  plantDate_lt: DateTime

  """All values less than or equal the given value."""
  plantDate_lte: DateTime

  """All values greater than the given value."""
  plantDate_gt: DateTime

  """All values greater than or equal the given value."""
  plantDate_gte: DateTime
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  available: String

  """All values that are not equal to given value."""
  available_not: String

  """All values that are contained in given list."""
  available_in: [String!]

  """All values that are not contained in given list."""
  available_not_in: [String!]

  """All values less than the given value."""
  available_lt: String

  """All values less than or equal the given value."""
  available_lte: String

  """All values greater than the given value."""
  available_gt: String

  """All values greater than or equal the given value."""
  available_gte: String

  """All values containing the given string."""
  available_contains: String

  """All values not containing the given string."""
  available_not_contains: String

  """All values starting with the given string."""
  available_starts_with: String

  """All values not starting with the given string."""
  available_not_starts_with: String

  """All values ending with the given string."""
  available_ends_with: String

  """All values not ending with the given string."""
  available_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  medium: MediumWhereInput
  std: StdWhereInput
  group: GroupWhereInput
  subgroup: SubGroupWhereInput
  units_every: UnitWhereInput
  units_some: UnitWhereInput
  units_none: UnitWhereInput
  topic_every: TopicWhereInput
  topic_some: TopicWhereInput
  topic_none: TopicWhereInput
  contents_every: ContentWhereInput
  contents_some: ContentWhereInput
  contents_none: ContentWhereInput
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  examples_every: ExampleWhereInput
  examples_some: ExampleWhereInput
  examples_none: ExampleWhereInput
  tipstricks_every: TipsTrickWhereInput
  tipstricks_some: TipsTrickWhereInput
  tipstricks_none: TipsTrickWhereInput
  exams_every: ExamWhereInput
  exams_some: ExamWhereInput
  exams_none: ExamWhereInput
  formulas_every: FormulaWhereInput
  formulas_some: FormulaWhereInput
  formulas_none: FormulaWhereInput
  bookmarks_every: BookmarkWhereInput
  bookmarks_some: BookmarkWhereInput
  bookmarks_none: BookmarkWhereInput
}

input SubjectWhereUniqueInput {
  id: ID
}

type Suborg implements Node {
  id: ID!
  name: String!
  description: String
  author(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  org: Organization!
  userGroups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  suborgRoles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type SuborgConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SuborgEdge]!
  aggregate: AggregateSuborg!
}

input SuborgCreateInput {
  id: ID
  name: String!
  description: String
  author: UserCreateManyWithoutSuborgInput
  org: OrganizationCreateOneWithoutSuborgsInput!
  userGroups: GroupCreateManyWithoutSuborgidInput
  suborgRoles: RoleCreateManyInput
}

input SuborgCreateManyWithoutAuthorInput {
  create: [SuborgCreateWithoutAuthorInput!]
  connect: [SuborgWhereUniqueInput!]
}

input SuborgCreateManyWithoutOrgInput {
  create: [SuborgCreateWithoutOrgInput!]
  connect: [SuborgWhereUniqueInput!]
}

input SuborgCreateOneInput {
  create: SuborgCreateInput
  connect: SuborgWhereUniqueInput
}

input SuborgCreateOneWithoutUserGroupsInput {
  create: SuborgCreateWithoutUserGroupsInput
  connect: SuborgWhereUniqueInput
}

input SuborgCreateWithoutAuthorInput {
  id: ID
  name: String!
  description: String
  org: OrganizationCreateOneWithoutSuborgsInput!
  userGroups: GroupCreateManyWithoutSuborgidInput
  suborgRoles: RoleCreateManyInput
}

input SuborgCreateWithoutOrgInput {
  id: ID
  name: String!
  description: String
  author: UserCreateManyWithoutSuborgInput
  userGroups: GroupCreateManyWithoutSuborgidInput
  suborgRoles: RoleCreateManyInput
}

input SuborgCreateWithoutUserGroupsInput {
  id: ID
  name: String!
  description: String
  author: UserCreateManyWithoutSuborgInput
  org: OrganizationCreateOneWithoutSuborgsInput!
  suborgRoles: RoleCreateManyInput
}

"""An edge in a connection."""
type SuborgEdge {
  """The item at the end of the edge."""
  node: Suborg!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SuborgOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SuborgPreviousValues {
  id: ID!
  name: String!
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input SuborgScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SuborgScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SuborgScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SuborgScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type SuborgSubscriptionPayload {
  mutation: MutationType!
  node: Suborg
  updatedFields: [String!]
  previousValues: SuborgPreviousValues
}

input SuborgSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SuborgSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SuborgSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SuborgSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SuborgWhereInput
}

input SuborgUpdateDataInput {
  name: String
  description: String
  author: UserUpdateManyWithoutSuborgInput
  org: OrganizationUpdateOneRequiredWithoutSuborgsInput
  userGroups: GroupUpdateManyWithoutSuborgidInput
  suborgRoles: RoleUpdateManyInput
}

input SuborgUpdateInput {
  name: String
  description: String
  author: UserUpdateManyWithoutSuborgInput
  org: OrganizationUpdateOneRequiredWithoutSuborgsInput
  userGroups: GroupUpdateManyWithoutSuborgidInput
  suborgRoles: RoleUpdateManyInput
}

input SuborgUpdateManyDataInput {
  name: String
  description: String
}

input SuborgUpdateManyMutationInput {
  name: String
  description: String
}

input SuborgUpdateManyWithoutAuthorInput {
  create: [SuborgCreateWithoutAuthorInput!]
  connect: [SuborgWhereUniqueInput!]
  set: [SuborgWhereUniqueInput!]
  disconnect: [SuborgWhereUniqueInput!]
  delete: [SuborgWhereUniqueInput!]
  update: [SuborgUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [SuborgUpdateManyWithWhereNestedInput!]
  deleteMany: [SuborgScalarWhereInput!]
  upsert: [SuborgUpsertWithWhereUniqueWithoutAuthorInput!]
}

input SuborgUpdateManyWithoutOrgInput {
  create: [SuborgCreateWithoutOrgInput!]
  connect: [SuborgWhereUniqueInput!]
  set: [SuborgWhereUniqueInput!]
  disconnect: [SuborgWhereUniqueInput!]
  delete: [SuborgWhereUniqueInput!]
  update: [SuborgUpdateWithWhereUniqueWithoutOrgInput!]
  updateMany: [SuborgUpdateManyWithWhereNestedInput!]
  deleteMany: [SuborgScalarWhereInput!]
  upsert: [SuborgUpsertWithWhereUniqueWithoutOrgInput!]
}

input SuborgUpdateManyWithWhereNestedInput {
  where: SuborgScalarWhereInput!
  data: SuborgUpdateManyDataInput!
}

input SuborgUpdateOneInput {
  create: SuborgCreateInput
  connect: SuborgWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SuborgUpdateDataInput
  upsert: SuborgUpsertNestedInput
}

input SuborgUpdateOneRequiredWithoutUserGroupsInput {
  create: SuborgCreateWithoutUserGroupsInput
  connect: SuborgWhereUniqueInput
  update: SuborgUpdateWithoutUserGroupsDataInput
  upsert: SuborgUpsertWithoutUserGroupsInput
}

input SuborgUpdateWithoutAuthorDataInput {
  name: String
  description: String
  org: OrganizationUpdateOneRequiredWithoutSuborgsInput
  userGroups: GroupUpdateManyWithoutSuborgidInput
  suborgRoles: RoleUpdateManyInput
}

input SuborgUpdateWithoutOrgDataInput {
  name: String
  description: String
  author: UserUpdateManyWithoutSuborgInput
  userGroups: GroupUpdateManyWithoutSuborgidInput
  suborgRoles: RoleUpdateManyInput
}

input SuborgUpdateWithoutUserGroupsDataInput {
  name: String
  description: String
  author: UserUpdateManyWithoutSuborgInput
  org: OrganizationUpdateOneRequiredWithoutSuborgsInput
  suborgRoles: RoleUpdateManyInput
}

input SuborgUpdateWithWhereUniqueWithoutAuthorInput {
  where: SuborgWhereUniqueInput!
  data: SuborgUpdateWithoutAuthorDataInput!
}

input SuborgUpdateWithWhereUniqueWithoutOrgInput {
  where: SuborgWhereUniqueInput!
  data: SuborgUpdateWithoutOrgDataInput!
}

input SuborgUpsertNestedInput {
  update: SuborgUpdateDataInput!
  create: SuborgCreateInput!
}

input SuborgUpsertWithoutUserGroupsInput {
  update: SuborgUpdateWithoutUserGroupsDataInput!
  create: SuborgCreateWithoutUserGroupsInput!
}

input SuborgUpsertWithWhereUniqueWithoutAuthorInput {
  where: SuborgWhereUniqueInput!
  update: SuborgUpdateWithoutAuthorDataInput!
  create: SuborgCreateWithoutAuthorInput!
}

input SuborgUpsertWithWhereUniqueWithoutOrgInput {
  where: SuborgWhereUniqueInput!
  update: SuborgUpdateWithoutOrgDataInput!
  create: SuborgCreateWithoutOrgInput!
}

input SuborgWhereInput {
  """Logical AND on all given filters."""
  AND: [SuborgWhereInput!]

  """Logical OR on all given filters."""
  OR: [SuborgWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SuborgWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author_every: UserWhereInput
  author_some: UserWhereInput
  author_none: UserWhereInput
  org: OrganizationWhereInput
  userGroups_every: GroupWhereInput
  userGroups_some: GroupWhereInput
  userGroups_none: GroupWhereInput
  suborgRoles_every: RoleWhereInput
  suborgRoles_some: RoleWhereInput
  suborgRoles_none: RoleWhereInput
}

input SuborgWhereUniqueInput {
  id: ID
}

type Subscription {
  organization(where: OrganizationSubscriptionWhereInput): OrganizationSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  subGroup(where: SubGroupSubscriptionWhereInput): SubGroupSubscriptionPayload
  userRole(where: UserRoleSubscriptionWhereInput): UserRoleSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  medium(where: MediumSubscriptionWhereInput): MediumSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  subjectSubscription(where: SubjectSubscriptionSubscriptionWhereInput): SubjectSubscriptionSubscriptionPayload
  profile(where: ProfileSubscriptionWhereInput): ProfileSubscriptionPayload
  personalProfile(where: PersonalProfileSubscriptionWhereInput): PersonalProfileSubscriptionPayload
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
  educationProfile(where: EducationProfileSubscriptionWhereInput): EducationProfileSubscriptionPayload
  bookmark(where: BookmarkSubscriptionWhereInput): BookmarkSubscriptionPayload
  content(where: ContentSubscriptionWhereInput): ContentSubscriptionPayload
  example(where: ExampleSubscriptionWhereInput): ExampleSubscriptionPayload
  formula(where: FormulaSubscriptionWhereInput): FormulaSubscriptionPayload
  note(where: NoteSubscriptionWhereInput): NoteSubscriptionPayload
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
  result(where: ResultSubscriptionWhereInput): ResultSubscriptionPayload
  std(where: StdSubscriptionWhereInput): StdSubscriptionPayload
  tipsTrick(where: TipsTrickSubscriptionWhereInput): TipsTrickSubscriptionPayload
  poll(where: PollSubscriptionWhereInput): PollSubscriptionPayload
  option(where: OptionSubscriptionWhereInput): OptionSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
  suborg(where: SuborgSubscriptionWhereInput): SuborgSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  unit(where: UnitSubscriptionWhereInput): UnitSubscriptionPayload
  subject(where: SubjectSubscriptionWhereInput): SubjectSubscriptionPayload
  exam(where: ExamSubscriptionWhereInput): ExamSubscriptionPayload
  topic(where: TopicSubscriptionWhereInput): TopicSubscriptionPayload
}

type TipsTrick implements Node {
  id: ID!
  name: String
  subject: Subject
  unit: Unit
  topic: Topic
  level: Int
  type: String!
  fileInfo: Json
  url: String
  createdBy: User
  updateBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type TipsTrickConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TipsTrickEdge]!
  aggregate: AggregateTipsTrick!
}

input TipsTrickCreateInput {
  id: ID
  name: String
  level: Int
  type: String!
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutTipstricksInput
  unit: UnitCreateOneWithoutTipstricksInput
  topic: TopicCreateOneWithoutTipstricksInput
  createdBy: UserCreateOneWithoutTipstricksByMeInput
  updateBy: UserCreateManyWithoutTipstricksUpdatedByMeInput
}

input TipsTrickCreateManyWithoutCreatedByInput {
  create: [TipsTrickCreateWithoutCreatedByInput!]
  connect: [TipsTrickWhereUniqueInput!]
}

input TipsTrickCreateManyWithoutSubjectInput {
  create: [TipsTrickCreateWithoutSubjectInput!]
  connect: [TipsTrickWhereUniqueInput!]
}

input TipsTrickCreateManyWithoutTopicInput {
  create: [TipsTrickCreateWithoutTopicInput!]
  connect: [TipsTrickWhereUniqueInput!]
}

input TipsTrickCreateManyWithoutUnitInput {
  create: [TipsTrickCreateWithoutUnitInput!]
  connect: [TipsTrickWhereUniqueInput!]
}

input TipsTrickCreateManyWithoutUpdateByInput {
  create: [TipsTrickCreateWithoutUpdateByInput!]
  connect: [TipsTrickWhereUniqueInput!]
}

input TipsTrickCreateWithoutCreatedByInput {
  id: ID
  name: String
  level: Int
  type: String!
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutTipstricksInput
  unit: UnitCreateOneWithoutTipstricksInput
  topic: TopicCreateOneWithoutTipstricksInput
  updateBy: UserCreateManyWithoutTipstricksUpdatedByMeInput
}

input TipsTrickCreateWithoutSubjectInput {
  id: ID
  name: String
  level: Int
  type: String!
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  unit: UnitCreateOneWithoutTipstricksInput
  topic: TopicCreateOneWithoutTipstricksInput
  createdBy: UserCreateOneWithoutTipstricksByMeInput
  updateBy: UserCreateManyWithoutTipstricksUpdatedByMeInput
}

input TipsTrickCreateWithoutTopicInput {
  id: ID
  name: String
  level: Int
  type: String!
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutTipstricksInput
  unit: UnitCreateOneWithoutTipstricksInput
  createdBy: UserCreateOneWithoutTipstricksByMeInput
  updateBy: UserCreateManyWithoutTipstricksUpdatedByMeInput
}

input TipsTrickCreateWithoutUnitInput {
  id: ID
  name: String
  level: Int
  type: String!
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutTipstricksInput
  topic: TopicCreateOneWithoutTipstricksInput
  createdBy: UserCreateOneWithoutTipstricksByMeInput
  updateBy: UserCreateManyWithoutTipstricksUpdatedByMeInput
}

input TipsTrickCreateWithoutUpdateByInput {
  id: ID
  name: String
  level: Int
  type: String!
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutTipstricksInput
  unit: UnitCreateOneWithoutTipstricksInput
  topic: TopicCreateOneWithoutTipstricksInput
  createdBy: UserCreateOneWithoutTipstricksByMeInput
}

"""An edge in a connection."""
type TipsTrickEdge {
  """The item at the end of the edge."""
  node: TipsTrick!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TipsTrickOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  level_ASC
  level_DESC
  type_ASC
  type_DESC
  fileInfo_ASC
  fileInfo_DESC
  url_ASC
  url_DESC
  plantDate_ASC
  plantDate_DESC
  isPublished_ASC
  isPublished_DESC
  state_ASC
  state_DESC
  status_ASC
  status_DESC
  available_ASC
  available_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TipsTrickPreviousValues {
  id: ID!
  name: String
  level: Int
  type: String!
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input TipsTrickScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TipsTrickScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TipsTrickScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TipsTrickScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  level: Int

  """All values that are not equal to given value."""
  level_not: Int

  """All values that are contained in given list."""
  level_in: [Int!]

  """All values that are not contained in given list."""
  level_not_in: [Int!]

  """All values less than the given value."""
  level_lt: Int

  """All values less than or equal the given value."""
  level_lte: Int

  """All values greater than the given value."""
  level_gt: Int

  """All values greater than or equal the given value."""
  level_gte: Int
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  plantDate: DateTime

  """All values that are not equal to given value."""
  plantDate_not: DateTime

  """All values that are contained in given list."""
  plantDate_in: [DateTime!]

  """All values that are not contained in given list."""
  plantDate_not_in: [DateTime!]

  """All values less than the given value."""
  plantDate_lt: DateTime

  """All values less than or equal the given value."""
  plantDate_lte: DateTime

  """All values greater than the given value."""
  plantDate_gt: DateTime

  """All values greater than or equal the given value."""
  plantDate_gte: DateTime
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  available: String

  """All values that are not equal to given value."""
  available_not: String

  """All values that are contained in given list."""
  available_in: [String!]

  """All values that are not contained in given list."""
  available_not_in: [String!]

  """All values less than the given value."""
  available_lt: String

  """All values less than or equal the given value."""
  available_lte: String

  """All values greater than the given value."""
  available_gt: String

  """All values greater than or equal the given value."""
  available_gte: String

  """All values containing the given string."""
  available_contains: String

  """All values not containing the given string."""
  available_not_contains: String

  """All values starting with the given string."""
  available_starts_with: String

  """All values not starting with the given string."""
  available_not_starts_with: String

  """All values ending with the given string."""
  available_ends_with: String

  """All values not ending with the given string."""
  available_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type TipsTrickSubscriptionPayload {
  mutation: MutationType!
  node: TipsTrick
  updatedFields: [String!]
  previousValues: TipsTrickPreviousValues
}

input TipsTrickSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TipsTrickSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TipsTrickSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TipsTrickSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TipsTrickWhereInput
}

input TipsTrickUpdateInput {
  name: String
  level: Int
  type: String
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutTipstricksInput
  unit: UnitUpdateOneWithoutTipstricksInput
  topic: TopicUpdateOneWithoutTipstricksInput
  createdBy: UserUpdateOneWithoutTipstricksByMeInput
  updateBy: UserUpdateManyWithoutTipstricksUpdatedByMeInput
}

input TipsTrickUpdateManyDataInput {
  name: String
  level: Int
  type: String
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input TipsTrickUpdateManyMutationInput {
  name: String
  level: Int
  type: String
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input TipsTrickUpdateManyWithoutCreatedByInput {
  create: [TipsTrickCreateWithoutCreatedByInput!]
  connect: [TipsTrickWhereUniqueInput!]
  set: [TipsTrickWhereUniqueInput!]
  disconnect: [TipsTrickWhereUniqueInput!]
  delete: [TipsTrickWhereUniqueInput!]
  update: [TipsTrickUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [TipsTrickUpdateManyWithWhereNestedInput!]
  deleteMany: [TipsTrickScalarWhereInput!]
  upsert: [TipsTrickUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input TipsTrickUpdateManyWithoutSubjectInput {
  create: [TipsTrickCreateWithoutSubjectInput!]
  connect: [TipsTrickWhereUniqueInput!]
  set: [TipsTrickWhereUniqueInput!]
  disconnect: [TipsTrickWhereUniqueInput!]
  delete: [TipsTrickWhereUniqueInput!]
  update: [TipsTrickUpdateWithWhereUniqueWithoutSubjectInput!]
  updateMany: [TipsTrickUpdateManyWithWhereNestedInput!]
  deleteMany: [TipsTrickScalarWhereInput!]
  upsert: [TipsTrickUpsertWithWhereUniqueWithoutSubjectInput!]
}

input TipsTrickUpdateManyWithoutTopicInput {
  create: [TipsTrickCreateWithoutTopicInput!]
  connect: [TipsTrickWhereUniqueInput!]
  set: [TipsTrickWhereUniqueInput!]
  disconnect: [TipsTrickWhereUniqueInput!]
  delete: [TipsTrickWhereUniqueInput!]
  update: [TipsTrickUpdateWithWhereUniqueWithoutTopicInput!]
  updateMany: [TipsTrickUpdateManyWithWhereNestedInput!]
  deleteMany: [TipsTrickScalarWhereInput!]
  upsert: [TipsTrickUpsertWithWhereUniqueWithoutTopicInput!]
}

input TipsTrickUpdateManyWithoutUnitInput {
  create: [TipsTrickCreateWithoutUnitInput!]
  connect: [TipsTrickWhereUniqueInput!]
  set: [TipsTrickWhereUniqueInput!]
  disconnect: [TipsTrickWhereUniqueInput!]
  delete: [TipsTrickWhereUniqueInput!]
  update: [TipsTrickUpdateWithWhereUniqueWithoutUnitInput!]
  updateMany: [TipsTrickUpdateManyWithWhereNestedInput!]
  deleteMany: [TipsTrickScalarWhereInput!]
  upsert: [TipsTrickUpsertWithWhereUniqueWithoutUnitInput!]
}

input TipsTrickUpdateManyWithoutUpdateByInput {
  create: [TipsTrickCreateWithoutUpdateByInput!]
  connect: [TipsTrickWhereUniqueInput!]
  set: [TipsTrickWhereUniqueInput!]
  disconnect: [TipsTrickWhereUniqueInput!]
  delete: [TipsTrickWhereUniqueInput!]
  update: [TipsTrickUpdateWithWhereUniqueWithoutUpdateByInput!]
  updateMany: [TipsTrickUpdateManyWithWhereNestedInput!]
  deleteMany: [TipsTrickScalarWhereInput!]
  upsert: [TipsTrickUpsertWithWhereUniqueWithoutUpdateByInput!]
}

input TipsTrickUpdateManyWithWhereNestedInput {
  where: TipsTrickScalarWhereInput!
  data: TipsTrickUpdateManyDataInput!
}

input TipsTrickUpdateWithoutCreatedByDataInput {
  name: String
  level: Int
  type: String
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutTipstricksInput
  unit: UnitUpdateOneWithoutTipstricksInput
  topic: TopicUpdateOneWithoutTipstricksInput
  updateBy: UserUpdateManyWithoutTipstricksUpdatedByMeInput
}

input TipsTrickUpdateWithoutSubjectDataInput {
  name: String
  level: Int
  type: String
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  unit: UnitUpdateOneWithoutTipstricksInput
  topic: TopicUpdateOneWithoutTipstricksInput
  createdBy: UserUpdateOneWithoutTipstricksByMeInput
  updateBy: UserUpdateManyWithoutTipstricksUpdatedByMeInput
}

input TipsTrickUpdateWithoutTopicDataInput {
  name: String
  level: Int
  type: String
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutTipstricksInput
  unit: UnitUpdateOneWithoutTipstricksInput
  createdBy: UserUpdateOneWithoutTipstricksByMeInput
  updateBy: UserUpdateManyWithoutTipstricksUpdatedByMeInput
}

input TipsTrickUpdateWithoutUnitDataInput {
  name: String
  level: Int
  type: String
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutTipstricksInput
  topic: TopicUpdateOneWithoutTipstricksInput
  createdBy: UserUpdateOneWithoutTipstricksByMeInput
  updateBy: UserUpdateManyWithoutTipstricksUpdatedByMeInput
}

input TipsTrickUpdateWithoutUpdateByDataInput {
  name: String
  level: Int
  type: String
  fileInfo: Json
  url: String
  plantDate: DateTime
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutTipstricksInput
  unit: UnitUpdateOneWithoutTipstricksInput
  topic: TopicUpdateOneWithoutTipstricksInput
  createdBy: UserUpdateOneWithoutTipstricksByMeInput
}

input TipsTrickUpdateWithWhereUniqueWithoutCreatedByInput {
  where: TipsTrickWhereUniqueInput!
  data: TipsTrickUpdateWithoutCreatedByDataInput!
}

input TipsTrickUpdateWithWhereUniqueWithoutSubjectInput {
  where: TipsTrickWhereUniqueInput!
  data: TipsTrickUpdateWithoutSubjectDataInput!
}

input TipsTrickUpdateWithWhereUniqueWithoutTopicInput {
  where: TipsTrickWhereUniqueInput!
  data: TipsTrickUpdateWithoutTopicDataInput!
}

input TipsTrickUpdateWithWhereUniqueWithoutUnitInput {
  where: TipsTrickWhereUniqueInput!
  data: TipsTrickUpdateWithoutUnitDataInput!
}

input TipsTrickUpdateWithWhereUniqueWithoutUpdateByInput {
  where: TipsTrickWhereUniqueInput!
  data: TipsTrickUpdateWithoutUpdateByDataInput!
}

input TipsTrickUpsertWithWhereUniqueWithoutCreatedByInput {
  where: TipsTrickWhereUniqueInput!
  update: TipsTrickUpdateWithoutCreatedByDataInput!
  create: TipsTrickCreateWithoutCreatedByInput!
}

input TipsTrickUpsertWithWhereUniqueWithoutSubjectInput {
  where: TipsTrickWhereUniqueInput!
  update: TipsTrickUpdateWithoutSubjectDataInput!
  create: TipsTrickCreateWithoutSubjectInput!
}

input TipsTrickUpsertWithWhereUniqueWithoutTopicInput {
  where: TipsTrickWhereUniqueInput!
  update: TipsTrickUpdateWithoutTopicDataInput!
  create: TipsTrickCreateWithoutTopicInput!
}

input TipsTrickUpsertWithWhereUniqueWithoutUnitInput {
  where: TipsTrickWhereUniqueInput!
  update: TipsTrickUpdateWithoutUnitDataInput!
  create: TipsTrickCreateWithoutUnitInput!
}

input TipsTrickUpsertWithWhereUniqueWithoutUpdateByInput {
  where: TipsTrickWhereUniqueInput!
  update: TipsTrickUpdateWithoutUpdateByDataInput!
  create: TipsTrickCreateWithoutUpdateByInput!
}

input TipsTrickWhereInput {
  """Logical AND on all given filters."""
  AND: [TipsTrickWhereInput!]

  """Logical OR on all given filters."""
  OR: [TipsTrickWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TipsTrickWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  level: Int

  """All values that are not equal to given value."""
  level_not: Int

  """All values that are contained in given list."""
  level_in: [Int!]

  """All values that are not contained in given list."""
  level_not_in: [Int!]

  """All values less than the given value."""
  level_lt: Int

  """All values less than or equal the given value."""
  level_lte: Int

  """All values greater than the given value."""
  level_gt: Int

  """All values greater than or equal the given value."""
  level_gte: Int
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  plantDate: DateTime

  """All values that are not equal to given value."""
  plantDate_not: DateTime

  """All values that are contained in given list."""
  plantDate_in: [DateTime!]

  """All values that are not contained in given list."""
  plantDate_not_in: [DateTime!]

  """All values less than the given value."""
  plantDate_lt: DateTime

  """All values less than or equal the given value."""
  plantDate_lte: DateTime

  """All values greater than the given value."""
  plantDate_gt: DateTime

  """All values greater than or equal the given value."""
  plantDate_gte: DateTime
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  available: String

  """All values that are not equal to given value."""
  available_not: String

  """All values that are contained in given list."""
  available_in: [String!]

  """All values that are not contained in given list."""
  available_not_in: [String!]

  """All values less than the given value."""
  available_lt: String

  """All values less than or equal the given value."""
  available_lte: String

  """All values greater than the given value."""
  available_gt: String

  """All values greater than or equal the given value."""
  available_gte: String

  """All values containing the given string."""
  available_contains: String

  """All values not containing the given string."""
  available_not_contains: String

  """All values starting with the given string."""
  available_starts_with: String

  """All values not starting with the given string."""
  available_not_starts_with: String

  """All values ending with the given string."""
  available_ends_with: String

  """All values not ending with the given string."""
  available_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  subject: SubjectWhereInput
  unit: UnitWhereInput
  topic: TopicWhereInput
  createdBy: UserWhereInput
  updateBy_every: UserWhereInput
  updateBy_some: UserWhereInput
  updateBy_none: UserWhereInput
}

input TipsTrickWhereUniqueInput {
  id: ID
}

type Topic implements Node {
  id: ID!
  name: String!
  subject: Subject
  unit: Unit
  contents(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
  createdBy: User
  updateBy: User
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  examples(where: ExampleWhereInput, orderBy: ExampleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Example!]
  tipstricks(where: TipsTrickWhereInput, orderBy: TipsTrickOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TipsTrick!]
  exams(where: ExamWhereInput, orderBy: ExamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exam!]
  formulas(where: FormulaWhereInput, orderBy: FormulaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Formula!]
  bookmarks(where: BookmarkWhereInput, orderBy: BookmarkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bookmark!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type TopicConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TopicEdge]!
  aggregate: AggregateTopic!
}

input TopicCreateInput {
  id: ID
  name: String!
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutTopicInput
  unit: UnitCreateOneWithoutTopicsInput
  contents: ContentCreateManyWithoutTopicInput
  createdBy: UserCreateOneWithoutTopicByMeInput
  updateBy: UserCreateOneWithoutTopicUpdateByMeInput
  questions: QuestionCreateManyWithoutTopicInput
  examples: ExampleCreateManyWithoutTopicInput
  tipstricks: TipsTrickCreateManyWithoutTopicInput
  exams: ExamCreateManyInput
  formulas: FormulaCreateManyWithoutTopicInput
  bookmarks: BookmarkCreateManyWithoutTopicInput
}

input TopicCreateManyWithoutCreatedByInput {
  create: [TopicCreateWithoutCreatedByInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateManyWithoutSubjectInput {
  create: [TopicCreateWithoutSubjectInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateManyWithoutUnitInput {
  create: [TopicCreateWithoutUnitInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateManyWithoutUpdateByInput {
  create: [TopicCreateWithoutUpdateByInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateOneInput {
  create: TopicCreateInput
  connect: TopicWhereUniqueInput
}

input TopicCreateOneWithoutBookmarksInput {
  create: TopicCreateWithoutBookmarksInput
  connect: TopicWhereUniqueInput
}

input TopicCreateOneWithoutContentsInput {
  create: TopicCreateWithoutContentsInput
  connect: TopicWhereUniqueInput
}

input TopicCreateOneWithoutExamplesInput {
  create: TopicCreateWithoutExamplesInput
  connect: TopicWhereUniqueInput
}

input TopicCreateOneWithoutFormulasInput {
  create: TopicCreateWithoutFormulasInput
  connect: TopicWhereUniqueInput
}

input TopicCreateOneWithoutQuestionsInput {
  create: TopicCreateWithoutQuestionsInput
  connect: TopicWhereUniqueInput
}

input TopicCreateOneWithoutTipstricksInput {
  create: TopicCreateWithoutTipstricksInput
  connect: TopicWhereUniqueInput
}

input TopicCreateWithoutBookmarksInput {
  id: ID
  name: String!
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutTopicInput
  unit: UnitCreateOneWithoutTopicsInput
  contents: ContentCreateManyWithoutTopicInput
  createdBy: UserCreateOneWithoutTopicByMeInput
  updateBy: UserCreateOneWithoutTopicUpdateByMeInput
  questions: QuestionCreateManyWithoutTopicInput
  examples: ExampleCreateManyWithoutTopicInput
  tipstricks: TipsTrickCreateManyWithoutTopicInput
  exams: ExamCreateManyInput
  formulas: FormulaCreateManyWithoutTopicInput
}

input TopicCreateWithoutContentsInput {
  id: ID
  name: String!
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutTopicInput
  unit: UnitCreateOneWithoutTopicsInput
  createdBy: UserCreateOneWithoutTopicByMeInput
  updateBy: UserCreateOneWithoutTopicUpdateByMeInput
  questions: QuestionCreateManyWithoutTopicInput
  examples: ExampleCreateManyWithoutTopicInput
  tipstricks: TipsTrickCreateManyWithoutTopicInput
  exams: ExamCreateManyInput
  formulas: FormulaCreateManyWithoutTopicInput
  bookmarks: BookmarkCreateManyWithoutTopicInput
}

input TopicCreateWithoutCreatedByInput {
  id: ID
  name: String!
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutTopicInput
  unit: UnitCreateOneWithoutTopicsInput
  contents: ContentCreateManyWithoutTopicInput
  updateBy: UserCreateOneWithoutTopicUpdateByMeInput
  questions: QuestionCreateManyWithoutTopicInput
  examples: ExampleCreateManyWithoutTopicInput
  tipstricks: TipsTrickCreateManyWithoutTopicInput
  exams: ExamCreateManyInput
  formulas: FormulaCreateManyWithoutTopicInput
  bookmarks: BookmarkCreateManyWithoutTopicInput
}

input TopicCreateWithoutExamplesInput {
  id: ID
  name: String!
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutTopicInput
  unit: UnitCreateOneWithoutTopicsInput
  contents: ContentCreateManyWithoutTopicInput
  createdBy: UserCreateOneWithoutTopicByMeInput
  updateBy: UserCreateOneWithoutTopicUpdateByMeInput
  questions: QuestionCreateManyWithoutTopicInput
  tipstricks: TipsTrickCreateManyWithoutTopicInput
  exams: ExamCreateManyInput
  formulas: FormulaCreateManyWithoutTopicInput
  bookmarks: BookmarkCreateManyWithoutTopicInput
}

input TopicCreateWithoutFormulasInput {
  id: ID
  name: String!
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutTopicInput
  unit: UnitCreateOneWithoutTopicsInput
  contents: ContentCreateManyWithoutTopicInput
  createdBy: UserCreateOneWithoutTopicByMeInput
  updateBy: UserCreateOneWithoutTopicUpdateByMeInput
  questions: QuestionCreateManyWithoutTopicInput
  examples: ExampleCreateManyWithoutTopicInput
  tipstricks: TipsTrickCreateManyWithoutTopicInput
  exams: ExamCreateManyInput
  bookmarks: BookmarkCreateManyWithoutTopicInput
}

input TopicCreateWithoutQuestionsInput {
  id: ID
  name: String!
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutTopicInput
  unit: UnitCreateOneWithoutTopicsInput
  contents: ContentCreateManyWithoutTopicInput
  createdBy: UserCreateOneWithoutTopicByMeInput
  updateBy: UserCreateOneWithoutTopicUpdateByMeInput
  examples: ExampleCreateManyWithoutTopicInput
  tipstricks: TipsTrickCreateManyWithoutTopicInput
  exams: ExamCreateManyInput
  formulas: FormulaCreateManyWithoutTopicInput
  bookmarks: BookmarkCreateManyWithoutTopicInput
}

input TopicCreateWithoutSubjectInput {
  id: ID
  name: String!
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  unit: UnitCreateOneWithoutTopicsInput
  contents: ContentCreateManyWithoutTopicInput
  createdBy: UserCreateOneWithoutTopicByMeInput
  updateBy: UserCreateOneWithoutTopicUpdateByMeInput
  questions: QuestionCreateManyWithoutTopicInput
  examples: ExampleCreateManyWithoutTopicInput
  tipstricks: TipsTrickCreateManyWithoutTopicInput
  exams: ExamCreateManyInput
  formulas: FormulaCreateManyWithoutTopicInput
  bookmarks: BookmarkCreateManyWithoutTopicInput
}

input TopicCreateWithoutTipstricksInput {
  id: ID
  name: String!
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutTopicInput
  unit: UnitCreateOneWithoutTopicsInput
  contents: ContentCreateManyWithoutTopicInput
  createdBy: UserCreateOneWithoutTopicByMeInput
  updateBy: UserCreateOneWithoutTopicUpdateByMeInput
  questions: QuestionCreateManyWithoutTopicInput
  examples: ExampleCreateManyWithoutTopicInput
  exams: ExamCreateManyInput
  formulas: FormulaCreateManyWithoutTopicInput
  bookmarks: BookmarkCreateManyWithoutTopicInput
}

input TopicCreateWithoutUnitInput {
  id: ID
  name: String!
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutTopicInput
  contents: ContentCreateManyWithoutTopicInput
  createdBy: UserCreateOneWithoutTopicByMeInput
  updateBy: UserCreateOneWithoutTopicUpdateByMeInput
  questions: QuestionCreateManyWithoutTopicInput
  examples: ExampleCreateManyWithoutTopicInput
  tipstricks: TipsTrickCreateManyWithoutTopicInput
  exams: ExamCreateManyInput
  formulas: FormulaCreateManyWithoutTopicInput
  bookmarks: BookmarkCreateManyWithoutTopicInput
}

input TopicCreateWithoutUpdateByInput {
  id: ID
  name: String!
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutTopicInput
  unit: UnitCreateOneWithoutTopicsInput
  contents: ContentCreateManyWithoutTopicInput
  createdBy: UserCreateOneWithoutTopicByMeInput
  questions: QuestionCreateManyWithoutTopicInput
  examples: ExampleCreateManyWithoutTopicInput
  tipstricks: TipsTrickCreateManyWithoutTopicInput
  exams: ExamCreateManyInput
  formulas: FormulaCreateManyWithoutTopicInput
  bookmarks: BookmarkCreateManyWithoutTopicInput
}

"""An edge in a connection."""
type TopicEdge {
  """The item at the end of the edge."""
  node: Topic!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TopicOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  plantDate_ASC
  plantDate_DESC
  isPublished_ASC
  isPublished_DESC
  picture_ASC
  picture_DESC
  description_ASC
  description_DESC
  state_ASC
  state_DESC
  status_ASC
  status_DESC
  available_ASC
  available_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TopicPreviousValues {
  id: ID!
  name: String!
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input TopicScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TopicScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TopicScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TopicScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  plantDate: DateTime

  """All values that are not equal to given value."""
  plantDate_not: DateTime

  """All values that are contained in given list."""
  plantDate_in: [DateTime!]

  """All values that are not contained in given list."""
  plantDate_not_in: [DateTime!]

  """All values less than the given value."""
  plantDate_lt: DateTime

  """All values less than or equal the given value."""
  plantDate_lte: DateTime

  """All values greater than the given value."""
  plantDate_gt: DateTime

  """All values greater than or equal the given value."""
  plantDate_gte: DateTime
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  picture: String

  """All values that are not equal to given value."""
  picture_not: String

  """All values that are contained in given list."""
  picture_in: [String!]

  """All values that are not contained in given list."""
  picture_not_in: [String!]

  """All values less than the given value."""
  picture_lt: String

  """All values less than or equal the given value."""
  picture_lte: String

  """All values greater than the given value."""
  picture_gt: String

  """All values greater than or equal the given value."""
  picture_gte: String

  """All values containing the given string."""
  picture_contains: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values starting with the given string."""
  picture_starts_with: String

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values not ending with the given string."""
  picture_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  available: String

  """All values that are not equal to given value."""
  available_not: String

  """All values that are contained in given list."""
  available_in: [String!]

  """All values that are not contained in given list."""
  available_not_in: [String!]

  """All values less than the given value."""
  available_lt: String

  """All values less than or equal the given value."""
  available_lte: String

  """All values greater than the given value."""
  available_gt: String

  """All values greater than or equal the given value."""
  available_gte: String

  """All values containing the given string."""
  available_contains: String

  """All values not containing the given string."""
  available_not_contains: String

  """All values starting with the given string."""
  available_starts_with: String

  """All values not starting with the given string."""
  available_not_starts_with: String

  """All values ending with the given string."""
  available_ends_with: String

  """All values not ending with the given string."""
  available_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type TopicSubscriptionPayload {
  mutation: MutationType!
  node: Topic
  updatedFields: [String!]
  previousValues: TopicPreviousValues
}

input TopicSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TopicSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TopicSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TopicSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TopicWhereInput
}

input TopicUpdateDataInput {
  name: String
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutTopicInput
  unit: UnitUpdateOneWithoutTopicsInput
  contents: ContentUpdateManyWithoutTopicInput
  createdBy: UserUpdateOneWithoutTopicByMeInput
  updateBy: UserUpdateOneWithoutTopicUpdateByMeInput
  questions: QuestionUpdateManyWithoutTopicInput
  examples: ExampleUpdateManyWithoutTopicInput
  tipstricks: TipsTrickUpdateManyWithoutTopicInput
  exams: ExamUpdateManyInput
  formulas: FormulaUpdateManyWithoutTopicInput
  bookmarks: BookmarkUpdateManyWithoutTopicInput
}

input TopicUpdateInput {
  name: String
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutTopicInput
  unit: UnitUpdateOneWithoutTopicsInput
  contents: ContentUpdateManyWithoutTopicInput
  createdBy: UserUpdateOneWithoutTopicByMeInput
  updateBy: UserUpdateOneWithoutTopicUpdateByMeInput
  questions: QuestionUpdateManyWithoutTopicInput
  examples: ExampleUpdateManyWithoutTopicInput
  tipstricks: TipsTrickUpdateManyWithoutTopicInput
  exams: ExamUpdateManyInput
  formulas: FormulaUpdateManyWithoutTopicInput
  bookmarks: BookmarkUpdateManyWithoutTopicInput
}

input TopicUpdateManyDataInput {
  name: String
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
}

input TopicUpdateManyMutationInput {
  name: String
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
}

input TopicUpdateManyWithoutCreatedByInput {
  create: [TopicCreateWithoutCreatedByInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  delete: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
  deleteMany: [TopicScalarWhereInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input TopicUpdateManyWithoutSubjectInput {
  create: [TopicCreateWithoutSubjectInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  delete: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutSubjectInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
  deleteMany: [TopicScalarWhereInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutSubjectInput!]
}

input TopicUpdateManyWithoutUnitInput {
  create: [TopicCreateWithoutUnitInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  delete: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutUnitInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
  deleteMany: [TopicScalarWhereInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutUnitInput!]
}

input TopicUpdateManyWithoutUpdateByInput {
  create: [TopicCreateWithoutUpdateByInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  delete: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutUpdateByInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
  deleteMany: [TopicScalarWhereInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutUpdateByInput!]
}

input TopicUpdateManyWithWhereNestedInput {
  where: TopicScalarWhereInput!
  data: TopicUpdateManyDataInput!
}

input TopicUpdateOneInput {
  create: TopicCreateInput
  connect: TopicWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TopicUpdateDataInput
  upsert: TopicUpsertNestedInput
}

input TopicUpdateOneWithoutBookmarksInput {
  create: TopicCreateWithoutBookmarksInput
  connect: TopicWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TopicUpdateWithoutBookmarksDataInput
  upsert: TopicUpsertWithoutBookmarksInput
}

input TopicUpdateOneWithoutContentsInput {
  create: TopicCreateWithoutContentsInput
  connect: TopicWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TopicUpdateWithoutContentsDataInput
  upsert: TopicUpsertWithoutContentsInput
}

input TopicUpdateOneWithoutExamplesInput {
  create: TopicCreateWithoutExamplesInput
  connect: TopicWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TopicUpdateWithoutExamplesDataInput
  upsert: TopicUpsertWithoutExamplesInput
}

input TopicUpdateOneWithoutFormulasInput {
  create: TopicCreateWithoutFormulasInput
  connect: TopicWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TopicUpdateWithoutFormulasDataInput
  upsert: TopicUpsertWithoutFormulasInput
}

input TopicUpdateOneWithoutQuestionsInput {
  create: TopicCreateWithoutQuestionsInput
  connect: TopicWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TopicUpdateWithoutQuestionsDataInput
  upsert: TopicUpsertWithoutQuestionsInput
}

input TopicUpdateOneWithoutTipstricksInput {
  create: TopicCreateWithoutTipstricksInput
  connect: TopicWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TopicUpdateWithoutTipstricksDataInput
  upsert: TopicUpsertWithoutTipstricksInput
}

input TopicUpdateWithoutBookmarksDataInput {
  name: String
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutTopicInput
  unit: UnitUpdateOneWithoutTopicsInput
  contents: ContentUpdateManyWithoutTopicInput
  createdBy: UserUpdateOneWithoutTopicByMeInput
  updateBy: UserUpdateOneWithoutTopicUpdateByMeInput
  questions: QuestionUpdateManyWithoutTopicInput
  examples: ExampleUpdateManyWithoutTopicInput
  tipstricks: TipsTrickUpdateManyWithoutTopicInput
  exams: ExamUpdateManyInput
  formulas: FormulaUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutContentsDataInput {
  name: String
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutTopicInput
  unit: UnitUpdateOneWithoutTopicsInput
  createdBy: UserUpdateOneWithoutTopicByMeInput
  updateBy: UserUpdateOneWithoutTopicUpdateByMeInput
  questions: QuestionUpdateManyWithoutTopicInput
  examples: ExampleUpdateManyWithoutTopicInput
  tipstricks: TipsTrickUpdateManyWithoutTopicInput
  exams: ExamUpdateManyInput
  formulas: FormulaUpdateManyWithoutTopicInput
  bookmarks: BookmarkUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutCreatedByDataInput {
  name: String
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutTopicInput
  unit: UnitUpdateOneWithoutTopicsInput
  contents: ContentUpdateManyWithoutTopicInput
  updateBy: UserUpdateOneWithoutTopicUpdateByMeInput
  questions: QuestionUpdateManyWithoutTopicInput
  examples: ExampleUpdateManyWithoutTopicInput
  tipstricks: TipsTrickUpdateManyWithoutTopicInput
  exams: ExamUpdateManyInput
  formulas: FormulaUpdateManyWithoutTopicInput
  bookmarks: BookmarkUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutExamplesDataInput {
  name: String
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutTopicInput
  unit: UnitUpdateOneWithoutTopicsInput
  contents: ContentUpdateManyWithoutTopicInput
  createdBy: UserUpdateOneWithoutTopicByMeInput
  updateBy: UserUpdateOneWithoutTopicUpdateByMeInput
  questions: QuestionUpdateManyWithoutTopicInput
  tipstricks: TipsTrickUpdateManyWithoutTopicInput
  exams: ExamUpdateManyInput
  formulas: FormulaUpdateManyWithoutTopicInput
  bookmarks: BookmarkUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutFormulasDataInput {
  name: String
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutTopicInput
  unit: UnitUpdateOneWithoutTopicsInput
  contents: ContentUpdateManyWithoutTopicInput
  createdBy: UserUpdateOneWithoutTopicByMeInput
  updateBy: UserUpdateOneWithoutTopicUpdateByMeInput
  questions: QuestionUpdateManyWithoutTopicInput
  examples: ExampleUpdateManyWithoutTopicInput
  tipstricks: TipsTrickUpdateManyWithoutTopicInput
  exams: ExamUpdateManyInput
  bookmarks: BookmarkUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutQuestionsDataInput {
  name: String
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutTopicInput
  unit: UnitUpdateOneWithoutTopicsInput
  contents: ContentUpdateManyWithoutTopicInput
  createdBy: UserUpdateOneWithoutTopicByMeInput
  updateBy: UserUpdateOneWithoutTopicUpdateByMeInput
  examples: ExampleUpdateManyWithoutTopicInput
  tipstricks: TipsTrickUpdateManyWithoutTopicInput
  exams: ExamUpdateManyInput
  formulas: FormulaUpdateManyWithoutTopicInput
  bookmarks: BookmarkUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutSubjectDataInput {
  name: String
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  unit: UnitUpdateOneWithoutTopicsInput
  contents: ContentUpdateManyWithoutTopicInput
  createdBy: UserUpdateOneWithoutTopicByMeInput
  updateBy: UserUpdateOneWithoutTopicUpdateByMeInput
  questions: QuestionUpdateManyWithoutTopicInput
  examples: ExampleUpdateManyWithoutTopicInput
  tipstricks: TipsTrickUpdateManyWithoutTopicInput
  exams: ExamUpdateManyInput
  formulas: FormulaUpdateManyWithoutTopicInput
  bookmarks: BookmarkUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutTipstricksDataInput {
  name: String
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutTopicInput
  unit: UnitUpdateOneWithoutTopicsInput
  contents: ContentUpdateManyWithoutTopicInput
  createdBy: UserUpdateOneWithoutTopicByMeInput
  updateBy: UserUpdateOneWithoutTopicUpdateByMeInput
  questions: QuestionUpdateManyWithoutTopicInput
  examples: ExampleUpdateManyWithoutTopicInput
  exams: ExamUpdateManyInput
  formulas: FormulaUpdateManyWithoutTopicInput
  bookmarks: BookmarkUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutUnitDataInput {
  name: String
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutTopicInput
  contents: ContentUpdateManyWithoutTopicInput
  createdBy: UserUpdateOneWithoutTopicByMeInput
  updateBy: UserUpdateOneWithoutTopicUpdateByMeInput
  questions: QuestionUpdateManyWithoutTopicInput
  examples: ExampleUpdateManyWithoutTopicInput
  tipstricks: TipsTrickUpdateManyWithoutTopicInput
  exams: ExamUpdateManyInput
  formulas: FormulaUpdateManyWithoutTopicInput
  bookmarks: BookmarkUpdateManyWithoutTopicInput
}

input TopicUpdateWithoutUpdateByDataInput {
  name: String
  plantDate: DateTime
  isPublished: Boolean
  picture: String
  description: String
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneWithoutTopicInput
  unit: UnitUpdateOneWithoutTopicsInput
  contents: ContentUpdateManyWithoutTopicInput
  createdBy: UserUpdateOneWithoutTopicByMeInput
  questions: QuestionUpdateManyWithoutTopicInput
  examples: ExampleUpdateManyWithoutTopicInput
  tipstricks: TipsTrickUpdateManyWithoutTopicInput
  exams: ExamUpdateManyInput
  formulas: FormulaUpdateManyWithoutTopicInput
  bookmarks: BookmarkUpdateManyWithoutTopicInput
}

input TopicUpdateWithWhereUniqueWithoutCreatedByInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutCreatedByDataInput!
}

input TopicUpdateWithWhereUniqueWithoutSubjectInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutSubjectDataInput!
}

input TopicUpdateWithWhereUniqueWithoutUnitInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutUnitDataInput!
}

input TopicUpdateWithWhereUniqueWithoutUpdateByInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutUpdateByDataInput!
}

input TopicUpsertNestedInput {
  update: TopicUpdateDataInput!
  create: TopicCreateInput!
}

input TopicUpsertWithoutBookmarksInput {
  update: TopicUpdateWithoutBookmarksDataInput!
  create: TopicCreateWithoutBookmarksInput!
}

input TopicUpsertWithoutContentsInput {
  update: TopicUpdateWithoutContentsDataInput!
  create: TopicCreateWithoutContentsInput!
}

input TopicUpsertWithoutExamplesInput {
  update: TopicUpdateWithoutExamplesDataInput!
  create: TopicCreateWithoutExamplesInput!
}

input TopicUpsertWithoutFormulasInput {
  update: TopicUpdateWithoutFormulasDataInput!
  create: TopicCreateWithoutFormulasInput!
}

input TopicUpsertWithoutQuestionsInput {
  update: TopicUpdateWithoutQuestionsDataInput!
  create: TopicCreateWithoutQuestionsInput!
}

input TopicUpsertWithoutTipstricksInput {
  update: TopicUpdateWithoutTipstricksDataInput!
  create: TopicCreateWithoutTipstricksInput!
}

input TopicUpsertWithWhereUniqueWithoutCreatedByInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutCreatedByDataInput!
  create: TopicCreateWithoutCreatedByInput!
}

input TopicUpsertWithWhereUniqueWithoutSubjectInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutSubjectDataInput!
  create: TopicCreateWithoutSubjectInput!
}

input TopicUpsertWithWhereUniqueWithoutUnitInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutUnitDataInput!
  create: TopicCreateWithoutUnitInput!
}

input TopicUpsertWithWhereUniqueWithoutUpdateByInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutUpdateByDataInput!
  create: TopicCreateWithoutUpdateByInput!
}

input TopicWhereInput {
  """Logical AND on all given filters."""
  AND: [TopicWhereInput!]

  """Logical OR on all given filters."""
  OR: [TopicWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TopicWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  plantDate: DateTime

  """All values that are not equal to given value."""
  plantDate_not: DateTime

  """All values that are contained in given list."""
  plantDate_in: [DateTime!]

  """All values that are not contained in given list."""
  plantDate_not_in: [DateTime!]

  """All values less than the given value."""
  plantDate_lt: DateTime

  """All values less than or equal the given value."""
  plantDate_lte: DateTime

  """All values greater than the given value."""
  plantDate_gt: DateTime

  """All values greater than or equal the given value."""
  plantDate_gte: DateTime
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  picture: String

  """All values that are not equal to given value."""
  picture_not: String

  """All values that are contained in given list."""
  picture_in: [String!]

  """All values that are not contained in given list."""
  picture_not_in: [String!]

  """All values less than the given value."""
  picture_lt: String

  """All values less than or equal the given value."""
  picture_lte: String

  """All values greater than the given value."""
  picture_gt: String

  """All values greater than or equal the given value."""
  picture_gte: String

  """All values containing the given string."""
  picture_contains: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values starting with the given string."""
  picture_starts_with: String

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values not ending with the given string."""
  picture_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  available: String

  """All values that are not equal to given value."""
  available_not: String

  """All values that are contained in given list."""
  available_in: [String!]

  """All values that are not contained in given list."""
  available_not_in: [String!]

  """All values less than the given value."""
  available_lt: String

  """All values less than or equal the given value."""
  available_lte: String

  """All values greater than the given value."""
  available_gt: String

  """All values greater than or equal the given value."""
  available_gte: String

  """All values containing the given string."""
  available_contains: String

  """All values not containing the given string."""
  available_not_contains: String

  """All values starting with the given string."""
  available_starts_with: String

  """All values not starting with the given string."""
  available_not_starts_with: String

  """All values ending with the given string."""
  available_ends_with: String

  """All values not ending with the given string."""
  available_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  subject: SubjectWhereInput
  unit: UnitWhereInput
  contents_every: ContentWhereInput
  contents_some: ContentWhereInput
  contents_none: ContentWhereInput
  createdBy: UserWhereInput
  updateBy: UserWhereInput
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  examples_every: ExampleWhereInput
  examples_some: ExampleWhereInput
  examples_none: ExampleWhereInput
  tipstricks_every: TipsTrickWhereInput
  tipstricks_some: TipsTrickWhereInput
  tipstricks_none: TipsTrickWhereInput
  exams_every: ExamWhereInput
  exams_some: ExamWhereInput
  exams_none: ExamWhereInput
  formulas_every: FormulaWhereInput
  formulas_some: FormulaWhereInput
  formulas_none: FormulaWhereInput
  bookmarks_every: BookmarkWhereInput
  bookmarks_some: BookmarkWhereInput
  bookmarks_none: BookmarkWhereInput
}

input TopicWhereUniqueInput {
  id: ID
}

type Unit implements Node {
  id: ID!
  name: String!
  subject: Subject!
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  contents(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
  picture: String
  description: String
  createdBy: User
  updateBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  isPublished: Boolean
  state: String
  status: String
  available: String
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  updatedAt: DateTime!
  createdAt: DateTime!
  examples(where: ExampleWhereInput, orderBy: ExampleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Example!]
  tipstricks(where: TipsTrickWhereInput, orderBy: TipsTrickOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TipsTrick!]
  exams(where: ExamWhereInput, orderBy: ExamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exam!]
  formulas(where: FormulaWhereInput, orderBy: FormulaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Formula!]
  bookmarks(where: BookmarkWhereInput, orderBy: BookmarkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bookmark!]
}

"""A connection to a list of items."""
type UnitConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UnitEdge]!
  aggregate: AggregateUnit!
}

input UnitCreateInput {
  id: ID
  name: String!
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutUnitsInput!
  topics: TopicCreateManyWithoutUnitInput
  contents: ContentCreateManyWithoutUnitInput
  createdBy: UserCreateOneWithoutUnitByMeInput
  updateBy: UserCreateManyWithoutUnitUpdatedByMeInput
  questions: QuestionCreateManyWithoutUnitInput
  examples: ExampleCreateManyWithoutUnitInput
  tipstricks: TipsTrickCreateManyWithoutUnitInput
  exams: ExamCreateManyWithoutUnitInput
  formulas: FormulaCreateManyWithoutUnitInput
  bookmarks: BookmarkCreateManyWithoutUnitInput
}

input UnitCreateManyWithoutCreatedByInput {
  create: [UnitCreateWithoutCreatedByInput!]
  connect: [UnitWhereUniqueInput!]
}

input UnitCreateManyWithoutSubjectInput {
  create: [UnitCreateWithoutSubjectInput!]
  connect: [UnitWhereUniqueInput!]
}

input UnitCreateManyWithoutUpdateByInput {
  create: [UnitCreateWithoutUpdateByInput!]
  connect: [UnitWhereUniqueInput!]
}

input UnitCreateOneInput {
  create: UnitCreateInput
  connect: UnitWhereUniqueInput
}

input UnitCreateOneWithoutBookmarksInput {
  create: UnitCreateWithoutBookmarksInput
  connect: UnitWhereUniqueInput
}

input UnitCreateOneWithoutContentsInput {
  create: UnitCreateWithoutContentsInput
  connect: UnitWhereUniqueInput
}

input UnitCreateOneWithoutExamplesInput {
  create: UnitCreateWithoutExamplesInput
  connect: UnitWhereUniqueInput
}

input UnitCreateOneWithoutExamsInput {
  create: UnitCreateWithoutExamsInput
  connect: UnitWhereUniqueInput
}

input UnitCreateOneWithoutFormulasInput {
  create: UnitCreateWithoutFormulasInput
  connect: UnitWhereUniqueInput
}

input UnitCreateOneWithoutQuestionsInput {
  create: UnitCreateWithoutQuestionsInput
  connect: UnitWhereUniqueInput
}

input UnitCreateOneWithoutTipstricksInput {
  create: UnitCreateWithoutTipstricksInput
  connect: UnitWhereUniqueInput
}

input UnitCreateOneWithoutTopicsInput {
  create: UnitCreateWithoutTopicsInput
  connect: UnitWhereUniqueInput
}

input UnitCreateWithoutBookmarksInput {
  id: ID
  name: String!
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutUnitsInput!
  topics: TopicCreateManyWithoutUnitInput
  contents: ContentCreateManyWithoutUnitInput
  createdBy: UserCreateOneWithoutUnitByMeInput
  updateBy: UserCreateManyWithoutUnitUpdatedByMeInput
  questions: QuestionCreateManyWithoutUnitInput
  examples: ExampleCreateManyWithoutUnitInput
  tipstricks: TipsTrickCreateManyWithoutUnitInput
  exams: ExamCreateManyWithoutUnitInput
  formulas: FormulaCreateManyWithoutUnitInput
}

input UnitCreateWithoutContentsInput {
  id: ID
  name: String!
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutUnitsInput!
  topics: TopicCreateManyWithoutUnitInput
  createdBy: UserCreateOneWithoutUnitByMeInput
  updateBy: UserCreateManyWithoutUnitUpdatedByMeInput
  questions: QuestionCreateManyWithoutUnitInput
  examples: ExampleCreateManyWithoutUnitInput
  tipstricks: TipsTrickCreateManyWithoutUnitInput
  exams: ExamCreateManyWithoutUnitInput
  formulas: FormulaCreateManyWithoutUnitInput
  bookmarks: BookmarkCreateManyWithoutUnitInput
}

input UnitCreateWithoutCreatedByInput {
  id: ID
  name: String!
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutUnitsInput!
  topics: TopicCreateManyWithoutUnitInput
  contents: ContentCreateManyWithoutUnitInput
  updateBy: UserCreateManyWithoutUnitUpdatedByMeInput
  questions: QuestionCreateManyWithoutUnitInput
  examples: ExampleCreateManyWithoutUnitInput
  tipstricks: TipsTrickCreateManyWithoutUnitInput
  exams: ExamCreateManyWithoutUnitInput
  formulas: FormulaCreateManyWithoutUnitInput
  bookmarks: BookmarkCreateManyWithoutUnitInput
}

input UnitCreateWithoutExamplesInput {
  id: ID
  name: String!
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutUnitsInput!
  topics: TopicCreateManyWithoutUnitInput
  contents: ContentCreateManyWithoutUnitInput
  createdBy: UserCreateOneWithoutUnitByMeInput
  updateBy: UserCreateManyWithoutUnitUpdatedByMeInput
  questions: QuestionCreateManyWithoutUnitInput
  tipstricks: TipsTrickCreateManyWithoutUnitInput
  exams: ExamCreateManyWithoutUnitInput
  formulas: FormulaCreateManyWithoutUnitInput
  bookmarks: BookmarkCreateManyWithoutUnitInput
}

input UnitCreateWithoutExamsInput {
  id: ID
  name: String!
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutUnitsInput!
  topics: TopicCreateManyWithoutUnitInput
  contents: ContentCreateManyWithoutUnitInput
  createdBy: UserCreateOneWithoutUnitByMeInput
  updateBy: UserCreateManyWithoutUnitUpdatedByMeInput
  questions: QuestionCreateManyWithoutUnitInput
  examples: ExampleCreateManyWithoutUnitInput
  tipstricks: TipsTrickCreateManyWithoutUnitInput
  formulas: FormulaCreateManyWithoutUnitInput
  bookmarks: BookmarkCreateManyWithoutUnitInput
}

input UnitCreateWithoutFormulasInput {
  id: ID
  name: String!
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutUnitsInput!
  topics: TopicCreateManyWithoutUnitInput
  contents: ContentCreateManyWithoutUnitInput
  createdBy: UserCreateOneWithoutUnitByMeInput
  updateBy: UserCreateManyWithoutUnitUpdatedByMeInput
  questions: QuestionCreateManyWithoutUnitInput
  examples: ExampleCreateManyWithoutUnitInput
  tipstricks: TipsTrickCreateManyWithoutUnitInput
  exams: ExamCreateManyWithoutUnitInput
  bookmarks: BookmarkCreateManyWithoutUnitInput
}

input UnitCreateWithoutQuestionsInput {
  id: ID
  name: String!
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutUnitsInput!
  topics: TopicCreateManyWithoutUnitInput
  contents: ContentCreateManyWithoutUnitInput
  createdBy: UserCreateOneWithoutUnitByMeInput
  updateBy: UserCreateManyWithoutUnitUpdatedByMeInput
  examples: ExampleCreateManyWithoutUnitInput
  tipstricks: TipsTrickCreateManyWithoutUnitInput
  exams: ExamCreateManyWithoutUnitInput
  formulas: FormulaCreateManyWithoutUnitInput
  bookmarks: BookmarkCreateManyWithoutUnitInput
}

input UnitCreateWithoutSubjectInput {
  id: ID
  name: String!
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  topics: TopicCreateManyWithoutUnitInput
  contents: ContentCreateManyWithoutUnitInput
  createdBy: UserCreateOneWithoutUnitByMeInput
  updateBy: UserCreateManyWithoutUnitUpdatedByMeInput
  questions: QuestionCreateManyWithoutUnitInput
  examples: ExampleCreateManyWithoutUnitInput
  tipstricks: TipsTrickCreateManyWithoutUnitInput
  exams: ExamCreateManyWithoutUnitInput
  formulas: FormulaCreateManyWithoutUnitInput
  bookmarks: BookmarkCreateManyWithoutUnitInput
}

input UnitCreateWithoutTipstricksInput {
  id: ID
  name: String!
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutUnitsInput!
  topics: TopicCreateManyWithoutUnitInput
  contents: ContentCreateManyWithoutUnitInput
  createdBy: UserCreateOneWithoutUnitByMeInput
  updateBy: UserCreateManyWithoutUnitUpdatedByMeInput
  questions: QuestionCreateManyWithoutUnitInput
  examples: ExampleCreateManyWithoutUnitInput
  exams: ExamCreateManyWithoutUnitInput
  formulas: FormulaCreateManyWithoutUnitInput
  bookmarks: BookmarkCreateManyWithoutUnitInput
}

input UnitCreateWithoutTopicsInput {
  id: ID
  name: String!
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutUnitsInput!
  contents: ContentCreateManyWithoutUnitInput
  createdBy: UserCreateOneWithoutUnitByMeInput
  updateBy: UserCreateManyWithoutUnitUpdatedByMeInput
  questions: QuestionCreateManyWithoutUnitInput
  examples: ExampleCreateManyWithoutUnitInput
  tipstricks: TipsTrickCreateManyWithoutUnitInput
  exams: ExamCreateManyWithoutUnitInput
  formulas: FormulaCreateManyWithoutUnitInput
  bookmarks: BookmarkCreateManyWithoutUnitInput
}

input UnitCreateWithoutUpdateByInput {
  id: ID
  name: String!
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectCreateOneWithoutUnitsInput!
  topics: TopicCreateManyWithoutUnitInput
  contents: ContentCreateManyWithoutUnitInput
  createdBy: UserCreateOneWithoutUnitByMeInput
  questions: QuestionCreateManyWithoutUnitInput
  examples: ExampleCreateManyWithoutUnitInput
  tipstricks: TipsTrickCreateManyWithoutUnitInput
  exams: ExamCreateManyWithoutUnitInput
  formulas: FormulaCreateManyWithoutUnitInput
  bookmarks: BookmarkCreateManyWithoutUnitInput
}

"""An edge in a connection."""
type UnitEdge {
  """The item at the end of the edge."""
  node: Unit!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UnitOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  picture_ASC
  picture_DESC
  description_ASC
  description_DESC
  isPublished_ASC
  isPublished_DESC
  state_ASC
  state_DESC
  status_ASC
  status_DESC
  available_ASC
  available_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UnitPreviousValues {
  id: ID!
  name: String!
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input UnitScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UnitScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UnitScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UnitScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  picture: String

  """All values that are not equal to given value."""
  picture_not: String

  """All values that are contained in given list."""
  picture_in: [String!]

  """All values that are not contained in given list."""
  picture_not_in: [String!]

  """All values less than the given value."""
  picture_lt: String

  """All values less than or equal the given value."""
  picture_lte: String

  """All values greater than the given value."""
  picture_gt: String

  """All values greater than or equal the given value."""
  picture_gte: String

  """All values containing the given string."""
  picture_contains: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values starting with the given string."""
  picture_starts_with: String

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values not ending with the given string."""
  picture_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  available: String

  """All values that are not equal to given value."""
  available_not: String

  """All values that are contained in given list."""
  available_in: [String!]

  """All values that are not contained in given list."""
  available_not_in: [String!]

  """All values less than the given value."""
  available_lt: String

  """All values less than or equal the given value."""
  available_lte: String

  """All values greater than the given value."""
  available_gt: String

  """All values greater than or equal the given value."""
  available_gte: String

  """All values containing the given string."""
  available_contains: String

  """All values not containing the given string."""
  available_not_contains: String

  """All values starting with the given string."""
  available_starts_with: String

  """All values not starting with the given string."""
  available_not_starts_with: String

  """All values ending with the given string."""
  available_ends_with: String

  """All values not ending with the given string."""
  available_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type UnitSubscriptionPayload {
  mutation: MutationType!
  node: Unit
  updatedFields: [String!]
  previousValues: UnitPreviousValues
}

input UnitSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UnitSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UnitSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UnitSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UnitWhereInput
}

input UnitUpdateDataInput {
  name: String
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  topics: TopicUpdateManyWithoutUnitInput
  contents: ContentUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  questions: QuestionUpdateManyWithoutUnitInput
  examples: ExampleUpdateManyWithoutUnitInput
  tipstricks: TipsTrickUpdateManyWithoutUnitInput
  exams: ExamUpdateManyWithoutUnitInput
  formulas: FormulaUpdateManyWithoutUnitInput
  bookmarks: BookmarkUpdateManyWithoutUnitInput
}

input UnitUpdateInput {
  name: String
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  topics: TopicUpdateManyWithoutUnitInput
  contents: ContentUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  questions: QuestionUpdateManyWithoutUnitInput
  examples: ExampleUpdateManyWithoutUnitInput
  tipstricks: TipsTrickUpdateManyWithoutUnitInput
  exams: ExamUpdateManyWithoutUnitInput
  formulas: FormulaUpdateManyWithoutUnitInput
  bookmarks: BookmarkUpdateManyWithoutUnitInput
}

input UnitUpdateManyDataInput {
  name: String
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input UnitUpdateManyMutationInput {
  name: String
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
}

input UnitUpdateManyWithoutCreatedByInput {
  create: [UnitCreateWithoutCreatedByInput!]
  connect: [UnitWhereUniqueInput!]
  set: [UnitWhereUniqueInput!]
  disconnect: [UnitWhereUniqueInput!]
  delete: [UnitWhereUniqueInput!]
  update: [UnitUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [UnitUpdateManyWithWhereNestedInput!]
  deleteMany: [UnitScalarWhereInput!]
  upsert: [UnitUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input UnitUpdateManyWithoutSubjectInput {
  create: [UnitCreateWithoutSubjectInput!]
  connect: [UnitWhereUniqueInput!]
  set: [UnitWhereUniqueInput!]
  disconnect: [UnitWhereUniqueInput!]
  delete: [UnitWhereUniqueInput!]
  update: [UnitUpdateWithWhereUniqueWithoutSubjectInput!]
  updateMany: [UnitUpdateManyWithWhereNestedInput!]
  deleteMany: [UnitScalarWhereInput!]
  upsert: [UnitUpsertWithWhereUniqueWithoutSubjectInput!]
}

input UnitUpdateManyWithoutUpdateByInput {
  create: [UnitCreateWithoutUpdateByInput!]
  connect: [UnitWhereUniqueInput!]
  set: [UnitWhereUniqueInput!]
  disconnect: [UnitWhereUniqueInput!]
  delete: [UnitWhereUniqueInput!]
  update: [UnitUpdateWithWhereUniqueWithoutUpdateByInput!]
  updateMany: [UnitUpdateManyWithWhereNestedInput!]
  deleteMany: [UnitScalarWhereInput!]
  upsert: [UnitUpsertWithWhereUniqueWithoutUpdateByInput!]
}

input UnitUpdateManyWithWhereNestedInput {
  where: UnitScalarWhereInput!
  data: UnitUpdateManyDataInput!
}

input UnitUpdateOneInput {
  create: UnitCreateInput
  connect: UnitWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UnitUpdateDataInput
  upsert: UnitUpsertNestedInput
}

input UnitUpdateOneWithoutBookmarksInput {
  create: UnitCreateWithoutBookmarksInput
  connect: UnitWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UnitUpdateWithoutBookmarksDataInput
  upsert: UnitUpsertWithoutBookmarksInput
}

input UnitUpdateOneWithoutContentsInput {
  create: UnitCreateWithoutContentsInput
  connect: UnitWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UnitUpdateWithoutContentsDataInput
  upsert: UnitUpsertWithoutContentsInput
}

input UnitUpdateOneWithoutExamplesInput {
  create: UnitCreateWithoutExamplesInput
  connect: UnitWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UnitUpdateWithoutExamplesDataInput
  upsert: UnitUpsertWithoutExamplesInput
}

input UnitUpdateOneWithoutExamsInput {
  create: UnitCreateWithoutExamsInput
  connect: UnitWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UnitUpdateWithoutExamsDataInput
  upsert: UnitUpsertWithoutExamsInput
}

input UnitUpdateOneWithoutFormulasInput {
  create: UnitCreateWithoutFormulasInput
  connect: UnitWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UnitUpdateWithoutFormulasDataInput
  upsert: UnitUpsertWithoutFormulasInput
}

input UnitUpdateOneWithoutQuestionsInput {
  create: UnitCreateWithoutQuestionsInput
  connect: UnitWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UnitUpdateWithoutQuestionsDataInput
  upsert: UnitUpsertWithoutQuestionsInput
}

input UnitUpdateOneWithoutTipstricksInput {
  create: UnitCreateWithoutTipstricksInput
  connect: UnitWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UnitUpdateWithoutTipstricksDataInput
  upsert: UnitUpsertWithoutTipstricksInput
}

input UnitUpdateOneWithoutTopicsInput {
  create: UnitCreateWithoutTopicsInput
  connect: UnitWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UnitUpdateWithoutTopicsDataInput
  upsert: UnitUpsertWithoutTopicsInput
}

input UnitUpdateWithoutBookmarksDataInput {
  name: String
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  topics: TopicUpdateManyWithoutUnitInput
  contents: ContentUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  questions: QuestionUpdateManyWithoutUnitInput
  examples: ExampleUpdateManyWithoutUnitInput
  tipstricks: TipsTrickUpdateManyWithoutUnitInput
  exams: ExamUpdateManyWithoutUnitInput
  formulas: FormulaUpdateManyWithoutUnitInput
}

input UnitUpdateWithoutContentsDataInput {
  name: String
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  topics: TopicUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  questions: QuestionUpdateManyWithoutUnitInput
  examples: ExampleUpdateManyWithoutUnitInput
  tipstricks: TipsTrickUpdateManyWithoutUnitInput
  exams: ExamUpdateManyWithoutUnitInput
  formulas: FormulaUpdateManyWithoutUnitInput
  bookmarks: BookmarkUpdateManyWithoutUnitInput
}

input UnitUpdateWithoutCreatedByDataInput {
  name: String
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  topics: TopicUpdateManyWithoutUnitInput
  contents: ContentUpdateManyWithoutUnitInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  questions: QuestionUpdateManyWithoutUnitInput
  examples: ExampleUpdateManyWithoutUnitInput
  tipstricks: TipsTrickUpdateManyWithoutUnitInput
  exams: ExamUpdateManyWithoutUnitInput
  formulas: FormulaUpdateManyWithoutUnitInput
  bookmarks: BookmarkUpdateManyWithoutUnitInput
}

input UnitUpdateWithoutExamplesDataInput {
  name: String
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  topics: TopicUpdateManyWithoutUnitInput
  contents: ContentUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  questions: QuestionUpdateManyWithoutUnitInput
  tipstricks: TipsTrickUpdateManyWithoutUnitInput
  exams: ExamUpdateManyWithoutUnitInput
  formulas: FormulaUpdateManyWithoutUnitInput
  bookmarks: BookmarkUpdateManyWithoutUnitInput
}

input UnitUpdateWithoutExamsDataInput {
  name: String
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  topics: TopicUpdateManyWithoutUnitInput
  contents: ContentUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  questions: QuestionUpdateManyWithoutUnitInput
  examples: ExampleUpdateManyWithoutUnitInput
  tipstricks: TipsTrickUpdateManyWithoutUnitInput
  formulas: FormulaUpdateManyWithoutUnitInput
  bookmarks: BookmarkUpdateManyWithoutUnitInput
}

input UnitUpdateWithoutFormulasDataInput {
  name: String
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  topics: TopicUpdateManyWithoutUnitInput
  contents: ContentUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  questions: QuestionUpdateManyWithoutUnitInput
  examples: ExampleUpdateManyWithoutUnitInput
  tipstricks: TipsTrickUpdateManyWithoutUnitInput
  exams: ExamUpdateManyWithoutUnitInput
  bookmarks: BookmarkUpdateManyWithoutUnitInput
}

input UnitUpdateWithoutQuestionsDataInput {
  name: String
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  topics: TopicUpdateManyWithoutUnitInput
  contents: ContentUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  examples: ExampleUpdateManyWithoutUnitInput
  tipstricks: TipsTrickUpdateManyWithoutUnitInput
  exams: ExamUpdateManyWithoutUnitInput
  formulas: FormulaUpdateManyWithoutUnitInput
  bookmarks: BookmarkUpdateManyWithoutUnitInput
}

input UnitUpdateWithoutSubjectDataInput {
  name: String
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  topics: TopicUpdateManyWithoutUnitInput
  contents: ContentUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  questions: QuestionUpdateManyWithoutUnitInput
  examples: ExampleUpdateManyWithoutUnitInput
  tipstricks: TipsTrickUpdateManyWithoutUnitInput
  exams: ExamUpdateManyWithoutUnitInput
  formulas: FormulaUpdateManyWithoutUnitInput
  bookmarks: BookmarkUpdateManyWithoutUnitInput
}

input UnitUpdateWithoutTipstricksDataInput {
  name: String
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  topics: TopicUpdateManyWithoutUnitInput
  contents: ContentUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  questions: QuestionUpdateManyWithoutUnitInput
  examples: ExampleUpdateManyWithoutUnitInput
  exams: ExamUpdateManyWithoutUnitInput
  formulas: FormulaUpdateManyWithoutUnitInput
  bookmarks: BookmarkUpdateManyWithoutUnitInput
}

input UnitUpdateWithoutTopicsDataInput {
  name: String
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  contents: ContentUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  updateBy: UserUpdateManyWithoutUnitUpdatedByMeInput
  questions: QuestionUpdateManyWithoutUnitInput
  examples: ExampleUpdateManyWithoutUnitInput
  tipstricks: TipsTrickUpdateManyWithoutUnitInput
  exams: ExamUpdateManyWithoutUnitInput
  formulas: FormulaUpdateManyWithoutUnitInput
  bookmarks: BookmarkUpdateManyWithoutUnitInput
}

input UnitUpdateWithoutUpdateByDataInput {
  name: String
  picture: String
  description: String
  isPublished: Boolean
  state: String
  status: String
  available: String
  subject: SubjectUpdateOneRequiredWithoutUnitsInput
  topics: TopicUpdateManyWithoutUnitInput
  contents: ContentUpdateManyWithoutUnitInput
  createdBy: UserUpdateOneWithoutUnitByMeInput
  questions: QuestionUpdateManyWithoutUnitInput
  examples: ExampleUpdateManyWithoutUnitInput
  tipstricks: TipsTrickUpdateManyWithoutUnitInput
  exams: ExamUpdateManyWithoutUnitInput
  formulas: FormulaUpdateManyWithoutUnitInput
  bookmarks: BookmarkUpdateManyWithoutUnitInput
}

input UnitUpdateWithWhereUniqueWithoutCreatedByInput {
  where: UnitWhereUniqueInput!
  data: UnitUpdateWithoutCreatedByDataInput!
}

input UnitUpdateWithWhereUniqueWithoutSubjectInput {
  where: UnitWhereUniqueInput!
  data: UnitUpdateWithoutSubjectDataInput!
}

input UnitUpdateWithWhereUniqueWithoutUpdateByInput {
  where: UnitWhereUniqueInput!
  data: UnitUpdateWithoutUpdateByDataInput!
}

input UnitUpsertNestedInput {
  update: UnitUpdateDataInput!
  create: UnitCreateInput!
}

input UnitUpsertWithoutBookmarksInput {
  update: UnitUpdateWithoutBookmarksDataInput!
  create: UnitCreateWithoutBookmarksInput!
}

input UnitUpsertWithoutContentsInput {
  update: UnitUpdateWithoutContentsDataInput!
  create: UnitCreateWithoutContentsInput!
}

input UnitUpsertWithoutExamplesInput {
  update: UnitUpdateWithoutExamplesDataInput!
  create: UnitCreateWithoutExamplesInput!
}

input UnitUpsertWithoutExamsInput {
  update: UnitUpdateWithoutExamsDataInput!
  create: UnitCreateWithoutExamsInput!
}

input UnitUpsertWithoutFormulasInput {
  update: UnitUpdateWithoutFormulasDataInput!
  create: UnitCreateWithoutFormulasInput!
}

input UnitUpsertWithoutQuestionsInput {
  update: UnitUpdateWithoutQuestionsDataInput!
  create: UnitCreateWithoutQuestionsInput!
}

input UnitUpsertWithoutTipstricksInput {
  update: UnitUpdateWithoutTipstricksDataInput!
  create: UnitCreateWithoutTipstricksInput!
}

input UnitUpsertWithoutTopicsInput {
  update: UnitUpdateWithoutTopicsDataInput!
  create: UnitCreateWithoutTopicsInput!
}

input UnitUpsertWithWhereUniqueWithoutCreatedByInput {
  where: UnitWhereUniqueInput!
  update: UnitUpdateWithoutCreatedByDataInput!
  create: UnitCreateWithoutCreatedByInput!
}

input UnitUpsertWithWhereUniqueWithoutSubjectInput {
  where: UnitWhereUniqueInput!
  update: UnitUpdateWithoutSubjectDataInput!
  create: UnitCreateWithoutSubjectInput!
}

input UnitUpsertWithWhereUniqueWithoutUpdateByInput {
  where: UnitWhereUniqueInput!
  update: UnitUpdateWithoutUpdateByDataInput!
  create: UnitCreateWithoutUpdateByInput!
}

input UnitWhereInput {
  """Logical AND on all given filters."""
  AND: [UnitWhereInput!]

  """Logical OR on all given filters."""
  OR: [UnitWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UnitWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  picture: String

  """All values that are not equal to given value."""
  picture_not: String

  """All values that are contained in given list."""
  picture_in: [String!]

  """All values that are not contained in given list."""
  picture_not_in: [String!]

  """All values less than the given value."""
  picture_lt: String

  """All values less than or equal the given value."""
  picture_lte: String

  """All values greater than the given value."""
  picture_gt: String

  """All values greater than or equal the given value."""
  picture_gte: String

  """All values containing the given string."""
  picture_contains: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values starting with the given string."""
  picture_starts_with: String

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values not ending with the given string."""
  picture_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  available: String

  """All values that are not equal to given value."""
  available_not: String

  """All values that are contained in given list."""
  available_in: [String!]

  """All values that are not contained in given list."""
  available_not_in: [String!]

  """All values less than the given value."""
  available_lt: String

  """All values less than or equal the given value."""
  available_lte: String

  """All values greater than the given value."""
  available_gt: String

  """All values greater than or equal the given value."""
  available_gte: String

  """All values containing the given string."""
  available_contains: String

  """All values not containing the given string."""
  available_not_contains: String

  """All values starting with the given string."""
  available_starts_with: String

  """All values not starting with the given string."""
  available_not_starts_with: String

  """All values ending with the given string."""
  available_ends_with: String

  """All values not ending with the given string."""
  available_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  subject: SubjectWhereInput
  topics_every: TopicWhereInput
  topics_some: TopicWhereInput
  topics_none: TopicWhereInput
  contents_every: ContentWhereInput
  contents_some: ContentWhereInput
  contents_none: ContentWhereInput
  createdBy: UserWhereInput
  updateBy_every: UserWhereInput
  updateBy_some: UserWhereInput
  updateBy_none: UserWhereInput
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  examples_every: ExampleWhereInput
  examples_some: ExampleWhereInput
  examples_none: ExampleWhereInput
  tipstricks_every: TipsTrickWhereInput
  tipstricks_some: TipsTrickWhereInput
  tipstricks_none: TipsTrickWhereInput
  exams_every: ExamWhereInput
  exams_some: ExamWhereInput
  exams_none: ExamWhereInput
  formulas_every: FormulaWhereInput
  formulas_some: FormulaWhereInput
  formulas_none: FormulaWhereInput
  bookmarks_every: BookmarkWhereInput
  bookmarks_some: BookmarkWhereInput
  bookmarks_none: BookmarkWhereInput
}

input UnitWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: Organization
  suborg(where: SuborgWhereInput, orderBy: SuborgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Suborg!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  userroles(where: UserRoleWhereInput, orderBy: UserRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserRole!]
  myprofiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile!]
  subjectSubscription(where: SubjectSubscriptionWhereInput, orderBy: SubjectSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubjectSubscription!]
  createdBy: String
  unitByMe(where: UnitWhereInput, orderBy: UnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Unit!]
  unitUpdatedByMe(where: UnitWhereInput, orderBy: UnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Unit!]
  topicByMe(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  topicUpdateByMe(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  contentByMe(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
  contentUpdateByMe(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
  questionCreatedBy(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  questionUpdateddBy(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  updatedAt: DateTime!
  createdAt: DateTime!
  result(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result!]
  examCreatedBy(where: ExamWhereInput, orderBy: ExamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exam!]
  tipstricksByMe(where: TipsTrickWhereInput, orderBy: TipsTrickOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TipsTrick!]
  tipstricksUpdatedByMe(where: TipsTrickWhereInput, orderBy: TipsTrickOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TipsTrick!]
  formulaByMe(where: FormulaWhereInput, orderBy: FormulaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Formula!]
  formulaUpdatedByMe(where: FormulaWhereInput, orderBy: FormulaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Formula!]
  bookmarks(where: BookmarkWhereInput, orderBy: BookmarkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bookmark!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateManyWithoutContentUpdateByMeInput {
  create: [UserCreateWithoutContentUpdateByMeInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFormulaUpdatedByMeInput {
  create: [UserCreateWithoutFormulaUpdatedByMeInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutOrgInput {
  create: [UserCreateWithoutOrgInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutSuborgInput {
  create: [UserCreateWithoutSuborgInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTipstricksUpdatedByMeInput {
  create: [UserCreateWithoutTipstricksUpdatedByMeInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutUnitUpdatedByMeInput {
  create: [UserCreateWithoutUnitUpdatedByMeInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutBookmarksInput {
  create: UserCreateWithoutBookmarksInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutContentByMeInput {
  create: UserCreateWithoutContentByMeInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutExamCreatedByInput {
  create: UserCreateWithoutExamCreatedByInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFormulaByMeInput {
  create: UserCreateWithoutFormulaByMeInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMyprofilesInput {
  create: UserCreateWithoutMyprofilesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuestionCreatedByInput {
  create: UserCreateWithoutQuestionCreatedByInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuestionUpdateddByInput {
  create: UserCreateWithoutQuestionUpdateddByInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutResultInput {
  create: UserCreateWithoutResultInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSubjectSubscriptionInput {
  create: UserCreateWithoutSubjectSubscriptionInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTipstricksByMeInput {
  create: UserCreateWithoutTipstricksByMeInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTopicByMeInput {
  create: UserCreateWithoutTopicByMeInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTopicUpdateByMeInput {
  create: UserCreateWithoutTopicUpdateByMeInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUnitByMeInput {
  create: UserCreateWithoutUnitByMeInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUserrolesInput {
  create: UserCreateWithoutUserrolesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBookmarksInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutContentByMeInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutContentUpdateByMeInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutExamCreatedByInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutFormulaByMeInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutFormulaUpdatedByMeInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutMyprofilesInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutOrgInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutPostsInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutQuestionCreatedByInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutQuestionUpdateddByInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutResultInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutSubjectSubscriptionInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutSuborgInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutTipstricksByMeInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutTipstricksUpdatedByMeInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutTopicByMeInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutTopicUpdateByMeInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutUnitByMeInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutUnitUpdatedByMeInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutUserrolesInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  votes: VoteCreateManyWithoutUserInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

input UserCreateWithoutVotesInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  userroles: UserRoleCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
  unitByMe: UnitCreateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitCreateManyWithoutUpdateByInput
  topicByMe: TopicCreateManyWithoutCreatedByInput
  topicUpdateByMe: TopicCreateManyWithoutUpdateByInput
  contentByMe: ContentCreateManyWithoutCreatedByInput
  contentUpdateByMe: ContentCreateManyWithoutUpdateByInput
  questionCreatedBy: QuestionCreateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionCreateManyWithoutUpdatedByInput
  result: ResultCreateManyWithoutUserIdInput
  examCreatedBy: ExamCreateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickCreateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickCreateManyWithoutUpdateByInput
  formulaByMe: FormulaCreateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaCreateManyWithoutUpdateByInput
  bookmarks: BookmarkCreateManyWithoutUseridInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdBy_ASC
  createdBy_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserRole implements Node {
  id: ID!
  userid: User!
  roleid: Role!
  status: RoleStatus
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type UserRoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserRoleEdge]!
  aggregate: AggregateUserRole!
}

input UserRoleCreateInput {
  id: ID
  status: RoleStatus
  description: String
  userid: UserCreateOneWithoutUserrolesInput!
  roleid: RoleCreateOneWithoutUserrolesInput!
}

input UserRoleCreateManyWithoutRoleidInput {
  create: [UserRoleCreateWithoutRoleidInput!]
  connect: [UserRoleWhereUniqueInput!]
}

input UserRoleCreateManyWithoutUseridInput {
  create: [UserRoleCreateWithoutUseridInput!]
  connect: [UserRoleWhereUniqueInput!]
}

input UserRoleCreateWithoutRoleidInput {
  id: ID
  status: RoleStatus
  description: String
  userid: UserCreateOneWithoutUserrolesInput!
}

input UserRoleCreateWithoutUseridInput {
  id: ID
  status: RoleStatus
  description: String
  roleid: RoleCreateOneWithoutUserrolesInput!
}

"""An edge in a connection."""
type UserRoleEdge {
  """The item at the end of the edge."""
  node: UserRole!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserRoleOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserRolePreviousValues {
  id: ID!
  status: RoleStatus
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input UserRoleScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserRoleScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserRoleScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserRoleScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: RoleStatus

  """All values that are not equal to given value."""
  status_not: RoleStatus

  """All values that are contained in given list."""
  status_in: [RoleStatus!]

  """All values that are not contained in given list."""
  status_not_in: [RoleStatus!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type UserRoleSubscriptionPayload {
  mutation: MutationType!
  node: UserRole
  updatedFields: [String!]
  previousValues: UserRolePreviousValues
}

input UserRoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserRoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserRoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserRoleSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserRoleWhereInput
}

input UserRoleUpdateInput {
  status: RoleStatus
  description: String
  userid: UserUpdateOneRequiredWithoutUserrolesInput
  roleid: RoleUpdateOneRequiredWithoutUserrolesInput
}

input UserRoleUpdateManyDataInput {
  status: RoleStatus
  description: String
}

input UserRoleUpdateManyMutationInput {
  status: RoleStatus
  description: String
}

input UserRoleUpdateManyWithoutRoleidInput {
  create: [UserRoleCreateWithoutRoleidInput!]
  connect: [UserRoleWhereUniqueInput!]
  set: [UserRoleWhereUniqueInput!]
  disconnect: [UserRoleWhereUniqueInput!]
  delete: [UserRoleWhereUniqueInput!]
  update: [UserRoleUpdateWithWhereUniqueWithoutRoleidInput!]
  updateMany: [UserRoleUpdateManyWithWhereNestedInput!]
  deleteMany: [UserRoleScalarWhereInput!]
  upsert: [UserRoleUpsertWithWhereUniqueWithoutRoleidInput!]
}

input UserRoleUpdateManyWithoutUseridInput {
  create: [UserRoleCreateWithoutUseridInput!]
  connect: [UserRoleWhereUniqueInput!]
  set: [UserRoleWhereUniqueInput!]
  disconnect: [UserRoleWhereUniqueInput!]
  delete: [UserRoleWhereUniqueInput!]
  update: [UserRoleUpdateWithWhereUniqueWithoutUseridInput!]
  updateMany: [UserRoleUpdateManyWithWhereNestedInput!]
  deleteMany: [UserRoleScalarWhereInput!]
  upsert: [UserRoleUpsertWithWhereUniqueWithoutUseridInput!]
}

input UserRoleUpdateManyWithWhereNestedInput {
  where: UserRoleScalarWhereInput!
  data: UserRoleUpdateManyDataInput!
}

input UserRoleUpdateWithoutRoleidDataInput {
  status: RoleStatus
  description: String
  userid: UserUpdateOneRequiredWithoutUserrolesInput
}

input UserRoleUpdateWithoutUseridDataInput {
  status: RoleStatus
  description: String
  roleid: RoleUpdateOneRequiredWithoutUserrolesInput
}

input UserRoleUpdateWithWhereUniqueWithoutRoleidInput {
  where: UserRoleWhereUniqueInput!
  data: UserRoleUpdateWithoutRoleidDataInput!
}

input UserRoleUpdateWithWhereUniqueWithoutUseridInput {
  where: UserRoleWhereUniqueInput!
  data: UserRoleUpdateWithoutUseridDataInput!
}

input UserRoleUpsertWithWhereUniqueWithoutRoleidInput {
  where: UserRoleWhereUniqueInput!
  update: UserRoleUpdateWithoutRoleidDataInput!
  create: UserRoleCreateWithoutRoleidInput!
}

input UserRoleUpsertWithWhereUniqueWithoutUseridInput {
  where: UserRoleWhereUniqueInput!
  update: UserRoleUpdateWithoutUseridDataInput!
  create: UserRoleCreateWithoutUseridInput!
}

input UserRoleWhereInput {
  """Logical AND on all given filters."""
  AND: [UserRoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserRoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserRoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: RoleStatus

  """All values that are not equal to given value."""
  status_not: RoleStatus

  """All values that are contained in given list."""
  status_in: [RoleStatus!]

  """All values that are not contained in given list."""
  status_not_in: [RoleStatus!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  userid: UserWhereInput
  roleid: RoleWhereInput
}

input UserRoleWhereUniqueInput {
  id: ID
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstname: String

  """All values that are not equal to given value."""
  firstname_not: String

  """All values that are contained in given list."""
  firstname_in: [String!]

  """All values that are not contained in given list."""
  firstname_not_in: [String!]

  """All values less than the given value."""
  firstname_lt: String

  """All values less than or equal the given value."""
  firstname_lte: String

  """All values greater than the given value."""
  firstname_gt: String

  """All values greater than or equal the given value."""
  firstname_gte: String

  """All values containing the given string."""
  firstname_contains: String

  """All values not containing the given string."""
  firstname_not_contains: String

  """All values starting with the given string."""
  firstname_starts_with: String

  """All values not starting with the given string."""
  firstname_not_starts_with: String

  """All values ending with the given string."""
  firstname_ends_with: String

  """All values not ending with the given string."""
  firstname_not_ends_with: String
  lastname: String

  """All values that are not equal to given value."""
  lastname_not: String

  """All values that are contained in given list."""
  lastname_in: [String!]

  """All values that are not contained in given list."""
  lastname_not_in: [String!]

  """All values less than the given value."""
  lastname_lt: String

  """All values less than or equal the given value."""
  lastname_lte: String

  """All values greater than the given value."""
  lastname_gt: String

  """All values greater than or equal the given value."""
  lastname_gte: String

  """All values containing the given string."""
  lastname_contains: String

  """All values not containing the given string."""
  lastname_not_contains: String

  """All values starting with the given string."""
  lastname_starts_with: String

  """All values not starting with the given string."""
  lastname_not_starts_with: String

  """All values ending with the given string."""
  lastname_ends_with: String

  """All values not ending with the given string."""
  lastname_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  createdBy: String

  """All values that are not equal to given value."""
  createdBy_not: String

  """All values that are contained in given list."""
  createdBy_in: [String!]

  """All values that are not contained in given list."""
  createdBy_not_in: [String!]

  """All values less than the given value."""
  createdBy_lt: String

  """All values less than or equal the given value."""
  createdBy_lte: String

  """All values greater than the given value."""
  createdBy_gt: String

  """All values greater than or equal the given value."""
  createdBy_gte: String

  """All values containing the given string."""
  createdBy_contains: String

  """All values not containing the given string."""
  createdBy_not_contains: String

  """All values starting with the given string."""
  createdBy_starts_with: String

  """All values not starting with the given string."""
  createdBy_not_starts_with: String

  """All values ending with the given string."""
  createdBy_ends_with: String

  """All values not ending with the given string."""
  createdBy_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateManyDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
}

input UserUpdateManyMutationInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
}

input UserUpdateManyWithoutContentUpdateByMeInput {
  create: [UserCreateWithoutContentUpdateByMeInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutContentUpdateByMeInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutContentUpdateByMeInput!]
}

input UserUpdateManyWithoutFormulaUpdatedByMeInput {
  create: [UserCreateWithoutFormulaUpdatedByMeInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFormulaUpdatedByMeInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFormulaUpdatedByMeInput!]
}

input UserUpdateManyWithoutOrgInput {
  create: [UserCreateWithoutOrgInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutOrgInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutOrgInput!]
}

input UserUpdateManyWithoutSuborgInput {
  create: [UserCreateWithoutSuborgInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSuborgInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSuborgInput!]
}

input UserUpdateManyWithoutTipstricksUpdatedByMeInput {
  create: [UserCreateWithoutTipstricksUpdatedByMeInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTipstricksUpdatedByMeInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTipstricksUpdatedByMeInput!]
}

input UserUpdateManyWithoutUnitUpdatedByMeInput {
  create: [UserCreateWithoutUnitUpdatedByMeInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutUnitUpdatedByMeInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutUnitUpdatedByMeInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutBookmarksInput {
  create: UserCreateWithoutBookmarksInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutBookmarksDataInput
  upsert: UserUpsertWithoutBookmarksInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutExamCreatedByInput {
  create: UserCreateWithoutExamCreatedByInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutExamCreatedByDataInput
  upsert: UserUpsertWithoutExamCreatedByInput
}

input UserUpdateOneRequiredWithoutMyprofilesInput {
  create: UserCreateWithoutMyprofilesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutMyprofilesDataInput
  upsert: UserUpsertWithoutMyprofilesInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneRequiredWithoutResultInput {
  create: UserCreateWithoutResultInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutResultDataInput
  upsert: UserUpsertWithoutResultInput
}

input UserUpdateOneRequiredWithoutSubjectSubscriptionInput {
  create: UserCreateWithoutSubjectSubscriptionInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutSubjectSubscriptionDataInput
  upsert: UserUpsertWithoutSubjectSubscriptionInput
}

input UserUpdateOneRequiredWithoutUserrolesInput {
  create: UserCreateWithoutUserrolesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutUserrolesDataInput
  upsert: UserUpsertWithoutUserrolesInput
}

input UserUpdateOneWithoutContentByMeInput {
  create: UserCreateWithoutContentByMeInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutContentByMeDataInput
  upsert: UserUpsertWithoutContentByMeInput
}

input UserUpdateOneWithoutFormulaByMeInput {
  create: UserCreateWithoutFormulaByMeInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutFormulaByMeDataInput
  upsert: UserUpsertWithoutFormulaByMeInput
}

input UserUpdateOneWithoutQuestionCreatedByInput {
  create: UserCreateWithoutQuestionCreatedByInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutQuestionCreatedByDataInput
  upsert: UserUpsertWithoutQuestionCreatedByInput
}

input UserUpdateOneWithoutQuestionUpdateddByInput {
  create: UserCreateWithoutQuestionUpdateddByInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutQuestionUpdateddByDataInput
  upsert: UserUpsertWithoutQuestionUpdateddByInput
}

input UserUpdateOneWithoutTipstricksByMeInput {
  create: UserCreateWithoutTipstricksByMeInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutTipstricksByMeDataInput
  upsert: UserUpsertWithoutTipstricksByMeInput
}

input UserUpdateOneWithoutTopicByMeInput {
  create: UserCreateWithoutTopicByMeInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutTopicByMeDataInput
  upsert: UserUpsertWithoutTopicByMeInput
}

input UserUpdateOneWithoutTopicUpdateByMeInput {
  create: UserCreateWithoutTopicUpdateByMeInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutTopicUpdateByMeDataInput
  upsert: UserUpsertWithoutTopicUpdateByMeInput
}

input UserUpdateOneWithoutUnitByMeInput {
  create: UserCreateWithoutUnitByMeInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutUnitByMeDataInput
  upsert: UserUpsertWithoutUnitByMeInput
}

input UserUpdateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutVotesDataInput
  upsert: UserUpsertWithoutVotesInput
}

input UserUpdateWithoutBookmarksDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
}

input UserUpdateWithoutCommentsDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutContentByMeDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutContentUpdateByMeDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutExamCreatedByDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutFormulaByMeDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutFormulaUpdatedByMeDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutMyprofilesDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutOrgDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutPostsDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutQuestionCreatedByDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutQuestionUpdateddByDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutResultDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutSubjectSubscriptionDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutSuborgDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutTipstricksByMeDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutTipstricksUpdatedByMeDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutTopicByMeDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutTopicUpdateByMeDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutUnitByMeDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutUnitUpdatedByMeDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutUserrolesDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  votes: VoteUpdateManyWithoutUserInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithoutVotesDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  userroles: UserRoleUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
  unitByMe: UnitUpdateManyWithoutCreatedByInput
  unitUpdatedByMe: UnitUpdateManyWithoutUpdateByInput
  topicByMe: TopicUpdateManyWithoutCreatedByInput
  topicUpdateByMe: TopicUpdateManyWithoutUpdateByInput
  contentByMe: ContentUpdateManyWithoutCreatedByInput
  contentUpdateByMe: ContentUpdateManyWithoutUpdateByInput
  questionCreatedBy: QuestionUpdateManyWithoutCreatedByInput
  questionUpdateddBy: QuestionUpdateManyWithoutUpdatedByInput
  result: ResultUpdateManyWithoutUserIdInput
  examCreatedBy: ExamUpdateManyWithoutCreatedByInput
  tipstricksByMe: TipsTrickUpdateManyWithoutCreatedByInput
  tipstricksUpdatedByMe: TipsTrickUpdateManyWithoutUpdateByInput
  formulaByMe: FormulaUpdateManyWithoutCreatedByInput
  formulaUpdatedByMe: FormulaUpdateManyWithoutUpdateByInput
  bookmarks: BookmarkUpdateManyWithoutUseridInput
}

input UserUpdateWithWhereUniqueWithoutContentUpdateByMeInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutContentUpdateByMeDataInput!
}

input UserUpdateWithWhereUniqueWithoutFormulaUpdatedByMeInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFormulaUpdatedByMeDataInput!
}

input UserUpdateWithWhereUniqueWithoutOrgInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutOrgDataInput!
}

input UserUpdateWithWhereUniqueWithoutSuborgInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSuborgDataInput!
}

input UserUpdateWithWhereUniqueWithoutTipstricksUpdatedByMeInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTipstricksUpdatedByMeDataInput!
}

input UserUpdateWithWhereUniqueWithoutUnitUpdatedByMeInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutUnitUpdatedByMeDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutBookmarksInput {
  update: UserUpdateWithoutBookmarksDataInput!
  create: UserCreateWithoutBookmarksInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutContentByMeInput {
  update: UserUpdateWithoutContentByMeDataInput!
  create: UserCreateWithoutContentByMeInput!
}

input UserUpsertWithoutExamCreatedByInput {
  update: UserUpdateWithoutExamCreatedByDataInput!
  create: UserCreateWithoutExamCreatedByInput!
}

input UserUpsertWithoutFormulaByMeInput {
  update: UserUpdateWithoutFormulaByMeDataInput!
  create: UserCreateWithoutFormulaByMeInput!
}

input UserUpsertWithoutMyprofilesInput {
  update: UserUpdateWithoutMyprofilesDataInput!
  create: UserCreateWithoutMyprofilesInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithoutQuestionCreatedByInput {
  update: UserUpdateWithoutQuestionCreatedByDataInput!
  create: UserCreateWithoutQuestionCreatedByInput!
}

input UserUpsertWithoutQuestionUpdateddByInput {
  update: UserUpdateWithoutQuestionUpdateddByDataInput!
  create: UserCreateWithoutQuestionUpdateddByInput!
}

input UserUpsertWithoutResultInput {
  update: UserUpdateWithoutResultDataInput!
  create: UserCreateWithoutResultInput!
}

input UserUpsertWithoutSubjectSubscriptionInput {
  update: UserUpdateWithoutSubjectSubscriptionDataInput!
  create: UserCreateWithoutSubjectSubscriptionInput!
}

input UserUpsertWithoutTipstricksByMeInput {
  update: UserUpdateWithoutTipstricksByMeDataInput!
  create: UserCreateWithoutTipstricksByMeInput!
}

input UserUpsertWithoutTopicByMeInput {
  update: UserUpdateWithoutTopicByMeDataInput!
  create: UserCreateWithoutTopicByMeInput!
}

input UserUpsertWithoutTopicUpdateByMeInput {
  update: UserUpdateWithoutTopicUpdateByMeDataInput!
  create: UserCreateWithoutTopicUpdateByMeInput!
}

input UserUpsertWithoutUnitByMeInput {
  update: UserUpdateWithoutUnitByMeDataInput!
  create: UserCreateWithoutUnitByMeInput!
}

input UserUpsertWithoutUserrolesInput {
  update: UserUpdateWithoutUserrolesDataInput!
  create: UserCreateWithoutUserrolesInput!
}

input UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput!
  create: UserCreateWithoutVotesInput!
}

input UserUpsertWithWhereUniqueWithoutContentUpdateByMeInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutContentUpdateByMeDataInput!
  create: UserCreateWithoutContentUpdateByMeInput!
}

input UserUpsertWithWhereUniqueWithoutFormulaUpdatedByMeInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFormulaUpdatedByMeDataInput!
  create: UserCreateWithoutFormulaUpdatedByMeInput!
}

input UserUpsertWithWhereUniqueWithoutOrgInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutOrgDataInput!
  create: UserCreateWithoutOrgInput!
}

input UserUpsertWithWhereUniqueWithoutSuborgInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSuborgDataInput!
  create: UserCreateWithoutSuborgInput!
}

input UserUpsertWithWhereUniqueWithoutTipstricksUpdatedByMeInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTipstricksUpdatedByMeDataInput!
  create: UserCreateWithoutTipstricksUpdatedByMeInput!
}

input UserUpsertWithWhereUniqueWithoutUnitUpdatedByMeInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutUnitUpdatedByMeDataInput!
  create: UserCreateWithoutUnitUpdatedByMeInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstname: String

  """All values that are not equal to given value."""
  firstname_not: String

  """All values that are contained in given list."""
  firstname_in: [String!]

  """All values that are not contained in given list."""
  firstname_not_in: [String!]

  """All values less than the given value."""
  firstname_lt: String

  """All values less than or equal the given value."""
  firstname_lte: String

  """All values greater than the given value."""
  firstname_gt: String

  """All values greater than or equal the given value."""
  firstname_gte: String

  """All values containing the given string."""
  firstname_contains: String

  """All values not containing the given string."""
  firstname_not_contains: String

  """All values starting with the given string."""
  firstname_starts_with: String

  """All values not starting with the given string."""
  firstname_not_starts_with: String

  """All values ending with the given string."""
  firstname_ends_with: String

  """All values not ending with the given string."""
  firstname_not_ends_with: String
  lastname: String

  """All values that are not equal to given value."""
  lastname_not: String

  """All values that are contained in given list."""
  lastname_in: [String!]

  """All values that are not contained in given list."""
  lastname_not_in: [String!]

  """All values less than the given value."""
  lastname_lt: String

  """All values less than or equal the given value."""
  lastname_lte: String

  """All values greater than the given value."""
  lastname_gt: String

  """All values greater than or equal the given value."""
  lastname_gte: String

  """All values containing the given string."""
  lastname_contains: String

  """All values not containing the given string."""
  lastname_not_contains: String

  """All values starting with the given string."""
  lastname_starts_with: String

  """All values not starting with the given string."""
  lastname_not_starts_with: String

  """All values ending with the given string."""
  lastname_ends_with: String

  """All values not ending with the given string."""
  lastname_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  createdBy: String

  """All values that are not equal to given value."""
  createdBy_not: String

  """All values that are contained in given list."""
  createdBy_in: [String!]

  """All values that are not contained in given list."""
  createdBy_not_in: [String!]

  """All values less than the given value."""
  createdBy_lt: String

  """All values less than or equal the given value."""
  createdBy_lte: String

  """All values greater than the given value."""
  createdBy_gt: String

  """All values greater than or equal the given value."""
  createdBy_gte: String

  """All values containing the given string."""
  createdBy_contains: String

  """All values not containing the given string."""
  createdBy_not_contains: String

  """All values starting with the given string."""
  createdBy_starts_with: String

  """All values not starting with the given string."""
  createdBy_not_starts_with: String

  """All values ending with the given string."""
  createdBy_ends_with: String

  """All values not ending with the given string."""
  createdBy_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  org: OrganizationWhereInput
  suborg_every: SuborgWhereInput
  suborg_some: SuborgWhereInput
  suborg_none: SuborgWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  userroles_every: UserRoleWhereInput
  userroles_some: UserRoleWhereInput
  userroles_none: UserRoleWhereInput
  myprofiles_every: ProfileWhereInput
  myprofiles_some: ProfileWhereInput
  myprofiles_none: ProfileWhereInput
  subjectSubscription_every: SubjectSubscriptionWhereInput
  subjectSubscription_some: SubjectSubscriptionWhereInput
  subjectSubscription_none: SubjectSubscriptionWhereInput
  unitByMe_every: UnitWhereInput
  unitByMe_some: UnitWhereInput
  unitByMe_none: UnitWhereInput
  unitUpdatedByMe_every: UnitWhereInput
  unitUpdatedByMe_some: UnitWhereInput
  unitUpdatedByMe_none: UnitWhereInput
  topicByMe_every: TopicWhereInput
  topicByMe_some: TopicWhereInput
  topicByMe_none: TopicWhereInput
  topicUpdateByMe_every: TopicWhereInput
  topicUpdateByMe_some: TopicWhereInput
  topicUpdateByMe_none: TopicWhereInput
  contentByMe_every: ContentWhereInput
  contentByMe_some: ContentWhereInput
  contentByMe_none: ContentWhereInput
  contentUpdateByMe_every: ContentWhereInput
  contentUpdateByMe_some: ContentWhereInput
  contentUpdateByMe_none: ContentWhereInput
  questionCreatedBy_every: QuestionWhereInput
  questionCreatedBy_some: QuestionWhereInput
  questionCreatedBy_none: QuestionWhereInput
  questionUpdateddBy_every: QuestionWhereInput
  questionUpdateddBy_some: QuestionWhereInput
  questionUpdateddBy_none: QuestionWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  result_every: ResultWhereInput
  result_some: ResultWhereInput
  result_none: ResultWhereInput
  examCreatedBy_every: ExamWhereInput
  examCreatedBy_some: ExamWhereInput
  examCreatedBy_none: ExamWhereInput
  tipstricksByMe_every: TipsTrickWhereInput
  tipstricksByMe_some: TipsTrickWhereInput
  tipstricksByMe_none: TipsTrickWhereInput
  tipstricksUpdatedByMe_every: TipsTrickWhereInput
  tipstricksUpdatedByMe_some: TipsTrickWhereInput
  tipstricksUpdatedByMe_none: TipsTrickWhereInput
  formulaByMe_every: FormulaWhereInput
  formulaByMe_some: FormulaWhereInput
  formulaByMe_none: FormulaWhereInput
  formulaUpdatedByMe_every: FormulaWhereInput
  formulaUpdatedByMe_some: FormulaWhereInput
  formulaUpdatedByMe_none: FormulaWhereInput
  bookmarks_every: BookmarkWhereInput
  bookmarks_some: BookmarkWhereInput
  bookmarks_none: BookmarkWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Vote implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  option: Option
  user: User
}

"""A connection to a list of items."""
type VoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  id: ID
  option: OptionCreateOneWithoutVotesInput
  user: UserCreateOneWithoutVotesInput
}

input VoteCreateManyWithoutOptionInput {
  create: [VoteCreateWithoutOptionInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutOptionInput {
  id: ID
  user: UserCreateOneWithoutVotesInput
}

input VoteCreateWithoutUserInput {
  id: ID
  option: OptionCreateOneWithoutVotesInput
}

"""An edge in a connection."""
type VoteEdge {
  """The item at the end of the edge."""
  node: Vote!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VotePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input VoteScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
}

input VoteUpdateInput {
  option: OptionUpdateOneWithoutVotesInput
  user: UserUpdateOneWithoutVotesInput
}

input VoteUpdateManyWithoutOptionInput {
  create: [VoteCreateWithoutOptionInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutOptionInput!]
  deleteMany: [VoteScalarWhereInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutOptionInput!]
}

input VoteUpdateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutUserInput!]
  deleteMany: [VoteScalarWhereInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutUserInput!]
}

input VoteUpdateWithoutOptionDataInput {
  user: UserUpdateOneWithoutVotesInput
}

input VoteUpdateWithoutUserDataInput {
  option: OptionUpdateOneWithoutVotesInput
}

input VoteUpdateWithWhereUniqueWithoutOptionInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutOptionDataInput!
}

input VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutUserDataInput!
}

input VoteUpsertWithWhereUniqueWithoutOptionInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutOptionDataInput!
  create: VoteCreateWithoutOptionInput!
}

input VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutUserDataInput!
  create: VoteCreateWithoutUserInput!
}

input VoteWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  option: OptionWhereInput
  user: UserWhereInput
}

input VoteWhereUniqueInput {
  id: ID
}

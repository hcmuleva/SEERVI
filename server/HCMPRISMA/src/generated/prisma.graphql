# source: http://localhost:4466
# timestamp: Wed Mar 04 2020 10:23:31 GMT+0530 (India Standard Time)

type AggregateComment {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateGroupMember {
  count: Int!
}

type AggregateMedium {
  count: Int!
}

type AggregateOrganization {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateProfile {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateRoleMember {
  count: Int!
}

type AggregateStudentProfile {
  count: Int!
}

type AggregateSubGroup {
  count: Int!
}

type AggregateSubGroupMember {
  count: Int!
}

type AggregateSubject {
  count: Int!
}

type AggregateSubjectSubscription {
  count: Int!
}

type AggregateSuborg {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Comment implements Node {
  id: ID!
  text: String!
  author: User!
  post: Post!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  text: String!
  author: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutAuthorInput {
  id: ID
  text: String!
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutPostInput {
  id: ID
  text: String!
  author: UserCreateOneWithoutCommentsInput!
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input CommentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  text: String
}

input CommentUpdateManyMutationInput {
  text: String
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutAuthorDataInput {
  text: String
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutPostDataInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author: UserWhereInput
  post: PostWhereInput
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type Group implements Node {
  id: ID!
  name: String!
  description: String
  suborgid: Suborg!
  subgroups(where: SubGroupWhereInput, orderBy: SubGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubGroup!]
  members(where: GroupMemberWhereInput, orderBy: GroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupMember!]
  groupRoles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type GroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  id: ID
  name: String!
  description: String
  suborgid: SuborgCreateOneWithoutUserGroupsInput!
  subgroups: SubGroupCreateManyWithoutGroupidInput
  members: GroupMemberCreateManyWithoutMemberInput
  groupRoles: RoleCreateManyWithoutGroupInput
  subjects: SubjectCreateManyWithoutGroupInput
}

input GroupCreateManyWithoutSuborgidInput {
  create: [GroupCreateWithoutSuborgidInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateOneWithoutGroupRolesInput {
  create: GroupCreateWithoutGroupRolesInput
  connect: GroupWhereUniqueInput
}

input GroupCreateOneWithoutMembersInput {
  create: GroupCreateWithoutMembersInput
  connect: GroupWhereUniqueInput
}

input GroupCreateOneWithoutSubgroupsInput {
  create: GroupCreateWithoutSubgroupsInput
  connect: GroupWhereUniqueInput
}

input GroupCreateOneWithoutSubjectsInput {
  create: GroupCreateWithoutSubjectsInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutGroupRolesInput {
  id: ID
  name: String!
  description: String
  suborgid: SuborgCreateOneWithoutUserGroupsInput!
  subgroups: SubGroupCreateManyWithoutGroupidInput
  members: GroupMemberCreateManyWithoutMemberInput
  subjects: SubjectCreateManyWithoutGroupInput
}

input GroupCreateWithoutMembersInput {
  id: ID
  name: String!
  description: String
  suborgid: SuborgCreateOneWithoutUserGroupsInput!
  subgroups: SubGroupCreateManyWithoutGroupidInput
  groupRoles: RoleCreateManyWithoutGroupInput
  subjects: SubjectCreateManyWithoutGroupInput
}

input GroupCreateWithoutSubgroupsInput {
  id: ID
  name: String!
  description: String
  suborgid: SuborgCreateOneWithoutUserGroupsInput!
  members: GroupMemberCreateManyWithoutMemberInput
  groupRoles: RoleCreateManyWithoutGroupInput
  subjects: SubjectCreateManyWithoutGroupInput
}

input GroupCreateWithoutSubjectsInput {
  id: ID
  name: String!
  description: String
  suborgid: SuborgCreateOneWithoutUserGroupsInput!
  subgroups: SubGroupCreateManyWithoutGroupidInput
  members: GroupMemberCreateManyWithoutMemberInput
  groupRoles: RoleCreateManyWithoutGroupInput
}

input GroupCreateWithoutSuborgidInput {
  id: ID
  name: String!
  description: String
  subgroups: SubGroupCreateManyWithoutGroupidInput
  members: GroupMemberCreateManyWithoutMemberInput
  groupRoles: RoleCreateManyWithoutGroupInput
  subjects: SubjectCreateManyWithoutGroupInput
}

"""An edge in a connection."""
type GroupEdge {
  """The item at the end of the edge."""
  node: Group!

  """A cursor for use in pagination."""
  cursor: String!
}

type GroupMember implements Node {
  id: ID!
  userid: User!
  member: Group!
  status: MemberStatus
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type GroupMemberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GroupMemberEdge]!
  aggregate: AggregateGroupMember!
}

input GroupMemberCreateInput {
  id: ID
  status: MemberStatus
  description: String
  userid: UserCreateOneWithoutGroupmembersInput!
  member: GroupCreateOneWithoutMembersInput!
}

input GroupMemberCreateManyWithoutMemberInput {
  create: [GroupMemberCreateWithoutMemberInput!]
  connect: [GroupMemberWhereUniqueInput!]
}

input GroupMemberCreateManyWithoutUseridInput {
  create: [GroupMemberCreateWithoutUseridInput!]
  connect: [GroupMemberWhereUniqueInput!]
}

input GroupMemberCreateWithoutMemberInput {
  id: ID
  status: MemberStatus
  description: String
  userid: UserCreateOneWithoutGroupmembersInput!
}

input GroupMemberCreateWithoutUseridInput {
  id: ID
  status: MemberStatus
  description: String
  member: GroupCreateOneWithoutMembersInput!
}

"""An edge in a connection."""
type GroupMemberEdge {
  """The item at the end of the edge."""
  node: GroupMember!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GroupMemberOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GroupMemberPreviousValues {
  id: ID!
  status: MemberStatus
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input GroupMemberScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupMemberScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupMemberScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupMemberScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: MemberStatus

  """All values that are not equal to given value."""
  status_not: MemberStatus

  """All values that are contained in given list."""
  status_in: [MemberStatus!]

  """All values that are not contained in given list."""
  status_not_in: [MemberStatus!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type GroupMemberSubscriptionPayload {
  mutation: MutationType!
  node: GroupMember
  updatedFields: [String!]
  previousValues: GroupMemberPreviousValues
}

input GroupMemberSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupMemberSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupMemberSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupMemberSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GroupMemberWhereInput
}

input GroupMemberUpdateInput {
  status: MemberStatus
  description: String
  userid: UserUpdateOneRequiredWithoutGroupmembersInput
  member: GroupUpdateOneRequiredWithoutMembersInput
}

input GroupMemberUpdateManyDataInput {
  status: MemberStatus
  description: String
}

input GroupMemberUpdateManyMutationInput {
  status: MemberStatus
  description: String
}

input GroupMemberUpdateManyWithoutMemberInput {
  create: [GroupMemberCreateWithoutMemberInput!]
  connect: [GroupMemberWhereUniqueInput!]
  set: [GroupMemberWhereUniqueInput!]
  disconnect: [GroupMemberWhereUniqueInput!]
  delete: [GroupMemberWhereUniqueInput!]
  update: [GroupMemberUpdateWithWhereUniqueWithoutMemberInput!]
  updateMany: [GroupMemberUpdateManyWithWhereNestedInput!]
  deleteMany: [GroupMemberScalarWhereInput!]
  upsert: [GroupMemberUpsertWithWhereUniqueWithoutMemberInput!]
}

input GroupMemberUpdateManyWithoutUseridInput {
  create: [GroupMemberCreateWithoutUseridInput!]
  connect: [GroupMemberWhereUniqueInput!]
  set: [GroupMemberWhereUniqueInput!]
  disconnect: [GroupMemberWhereUniqueInput!]
  delete: [GroupMemberWhereUniqueInput!]
  update: [GroupMemberUpdateWithWhereUniqueWithoutUseridInput!]
  updateMany: [GroupMemberUpdateManyWithWhereNestedInput!]
  deleteMany: [GroupMemberScalarWhereInput!]
  upsert: [GroupMemberUpsertWithWhereUniqueWithoutUseridInput!]
}

input GroupMemberUpdateManyWithWhereNestedInput {
  where: GroupMemberScalarWhereInput!
  data: GroupMemberUpdateManyDataInput!
}

input GroupMemberUpdateWithoutMemberDataInput {
  status: MemberStatus
  description: String
  userid: UserUpdateOneRequiredWithoutGroupmembersInput
}

input GroupMemberUpdateWithoutUseridDataInput {
  status: MemberStatus
  description: String
  member: GroupUpdateOneRequiredWithoutMembersInput
}

input GroupMemberUpdateWithWhereUniqueWithoutMemberInput {
  where: GroupMemberWhereUniqueInput!
  data: GroupMemberUpdateWithoutMemberDataInput!
}

input GroupMemberUpdateWithWhereUniqueWithoutUseridInput {
  where: GroupMemberWhereUniqueInput!
  data: GroupMemberUpdateWithoutUseridDataInput!
}

input GroupMemberUpsertWithWhereUniqueWithoutMemberInput {
  where: GroupMemberWhereUniqueInput!
  update: GroupMemberUpdateWithoutMemberDataInput!
  create: GroupMemberCreateWithoutMemberInput!
}

input GroupMemberUpsertWithWhereUniqueWithoutUseridInput {
  where: GroupMemberWhereUniqueInput!
  update: GroupMemberUpdateWithoutUseridDataInput!
  create: GroupMemberCreateWithoutUseridInput!
}

input GroupMemberWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupMemberWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupMemberWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupMemberWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: MemberStatus

  """All values that are not equal to given value."""
  status_not: MemberStatus

  """All values that are contained in given list."""
  status_in: [MemberStatus!]

  """All values that are not contained in given list."""
  status_not_in: [MemberStatus!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  userid: UserWhereInput
  member: GroupWhereInput
}

input GroupMemberWhereUniqueInput {
  id: ID
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GroupPreviousValues {
  id: ID!
  name: String!
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input GroupScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
}

input GroupUpdateInput {
  name: String
  description: String
  suborgid: SuborgUpdateOneRequiredWithoutUserGroupsInput
  subgroups: SubGroupUpdateManyWithoutGroupidInput
  members: GroupMemberUpdateManyWithoutMemberInput
  groupRoles: RoleUpdateManyWithoutGroupInput
  subjects: SubjectUpdateManyWithoutGroupInput
}

input GroupUpdateManyDataInput {
  name: String
  description: String
}

input GroupUpdateManyMutationInput {
  name: String
  description: String
}

input GroupUpdateManyWithoutSuborgidInput {
  create: [GroupCreateWithoutSuborgidInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutSuborgidInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
  deleteMany: [GroupScalarWhereInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutSuborgidInput!]
}

input GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput!
  data: GroupUpdateManyDataInput!
}

input GroupUpdateOneRequiredWithoutMembersInput {
  create: GroupCreateWithoutMembersInput
  connect: GroupWhereUniqueInput
  update: GroupUpdateWithoutMembersDataInput
  upsert: GroupUpsertWithoutMembersInput
}

input GroupUpdateOneRequiredWithoutSubgroupsInput {
  create: GroupCreateWithoutSubgroupsInput
  connect: GroupWhereUniqueInput
  update: GroupUpdateWithoutSubgroupsDataInput
  upsert: GroupUpsertWithoutSubgroupsInput
}

input GroupUpdateOneWithoutGroupRolesInput {
  create: GroupCreateWithoutGroupRolesInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GroupUpdateWithoutGroupRolesDataInput
  upsert: GroupUpsertWithoutGroupRolesInput
}

input GroupUpdateOneWithoutSubjectsInput {
  create: GroupCreateWithoutSubjectsInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GroupUpdateWithoutSubjectsDataInput
  upsert: GroupUpsertWithoutSubjectsInput
}

input GroupUpdateWithoutGroupRolesDataInput {
  name: String
  description: String
  suborgid: SuborgUpdateOneRequiredWithoutUserGroupsInput
  subgroups: SubGroupUpdateManyWithoutGroupidInput
  members: GroupMemberUpdateManyWithoutMemberInput
  subjects: SubjectUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutMembersDataInput {
  name: String
  description: String
  suborgid: SuborgUpdateOneRequiredWithoutUserGroupsInput
  subgroups: SubGroupUpdateManyWithoutGroupidInput
  groupRoles: RoleUpdateManyWithoutGroupInput
  subjects: SubjectUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutSubgroupsDataInput {
  name: String
  description: String
  suborgid: SuborgUpdateOneRequiredWithoutUserGroupsInput
  members: GroupMemberUpdateManyWithoutMemberInput
  groupRoles: RoleUpdateManyWithoutGroupInput
  subjects: SubjectUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutSubjectsDataInput {
  name: String
  description: String
  suborgid: SuborgUpdateOneRequiredWithoutUserGroupsInput
  subgroups: SubGroupUpdateManyWithoutGroupidInput
  members: GroupMemberUpdateManyWithoutMemberInput
  groupRoles: RoleUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutSuborgidDataInput {
  name: String
  description: String
  subgroups: SubGroupUpdateManyWithoutGroupidInput
  members: GroupMemberUpdateManyWithoutMemberInput
  groupRoles: RoleUpdateManyWithoutGroupInput
  subjects: SubjectUpdateManyWithoutGroupInput
}

input GroupUpdateWithWhereUniqueWithoutSuborgidInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutSuborgidDataInput!
}

input GroupUpsertWithoutGroupRolesInput {
  update: GroupUpdateWithoutGroupRolesDataInput!
  create: GroupCreateWithoutGroupRolesInput!
}

input GroupUpsertWithoutMembersInput {
  update: GroupUpdateWithoutMembersDataInput!
  create: GroupCreateWithoutMembersInput!
}

input GroupUpsertWithoutSubgroupsInput {
  update: GroupUpdateWithoutSubgroupsDataInput!
  create: GroupCreateWithoutSubgroupsInput!
}

input GroupUpsertWithoutSubjectsInput {
  update: GroupUpdateWithoutSubjectsDataInput!
  create: GroupCreateWithoutSubjectsInput!
}

input GroupUpsertWithWhereUniqueWithoutSuborgidInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutSuborgidDataInput!
  create: GroupCreateWithoutSuborgidInput!
}

input GroupWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  suborgid: SuborgWhereInput
  subgroups_every: SubGroupWhereInput
  subgroups_some: SubGroupWhereInput
  subgroups_none: SubGroupWhereInput
  members_every: GroupMemberWhereInput
  members_some: GroupMemberWhereInput
  members_none: GroupMemberWhereInput
  groupRoles_every: RoleWhereInput
  groupRoles_some: RoleWhereInput
  groupRoles_none: RoleWhereInput
  subjects_every: SubjectWhereInput
  subjects_some: SubjectWhereInput
  subjects_none: SubjectWhereInput
}

input GroupWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Medium implements Node {
  id: ID!
  name: String!
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
}

"""A connection to a list of items."""
type MediumConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MediumEdge]!
  aggregate: AggregateMedium!
}

input MediumCreateInput {
  id: ID
  name: String!
  subjects: SubjectCreateManyWithoutMediumInput
}

input MediumCreateOneWithoutSubjectsInput {
  create: MediumCreateWithoutSubjectsInput
  connect: MediumWhereUniqueInput
}

input MediumCreateWithoutSubjectsInput {
  id: ID
  name: String!
}

"""An edge in a connection."""
type MediumEdge {
  """The item at the end of the edge."""
  node: Medium!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MediumOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type MediumPreviousValues {
  id: ID!
  name: String!
}

type MediumSubscriptionPayload {
  mutation: MutationType!
  node: Medium
  updatedFields: [String!]
  previousValues: MediumPreviousValues
}

input MediumSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MediumSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MediumSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MediumSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MediumWhereInput
}

input MediumUpdateInput {
  name: String
  subjects: SubjectUpdateManyWithoutMediumInput
}

input MediumUpdateManyMutationInput {
  name: String
}

input MediumUpdateOneWithoutSubjectsInput {
  create: MediumCreateWithoutSubjectsInput
  connect: MediumWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MediumUpdateWithoutSubjectsDataInput
  upsert: MediumUpsertWithoutSubjectsInput
}

input MediumUpdateWithoutSubjectsDataInput {
  name: String
}

input MediumUpsertWithoutSubjectsInput {
  update: MediumUpdateWithoutSubjectsDataInput!
  create: MediumCreateWithoutSubjectsInput!
}

input MediumWhereInput {
  """Logical AND on all given filters."""
  AND: [MediumWhereInput!]

  """Logical OR on all given filters."""
  OR: [MediumWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MediumWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  subjects_every: SubjectWhereInput
  subjects_some: SubjectWhereInput
  subjects_none: SubjectWhereInput
}

input MediumWhereUniqueInput {
  id: ID
}

enum MemberStatus {
  ACTIVE
  EXPIRED
  INACTIVE
  DORMANT
  RENEWED
  SPECIALGRANT
}

type Mutation {
  createOrganization(data: OrganizationCreateInput!): Organization!
  createGroup(data: GroupCreateInput!): Group!
  createGroupMember(data: GroupMemberCreateInput!): GroupMember!
  createSubGroup(data: SubGroupCreateInput!): SubGroup!
  createSubGroupMember(data: SubGroupMemberCreateInput!): SubGroupMember!
  createRoleMember(data: RoleMemberCreateInput!): RoleMember!
  createUser(data: UserCreateInput!): User!
  createMedium(data: MediumCreateInput!): Medium!
  createPost(data: PostCreateInput!): Post!
  createComment(data: CommentCreateInput!): Comment!
  createSubjectSubscription(data: SubjectSubscriptionCreateInput!): SubjectSubscription!
  createProfile(data: ProfileCreateInput!): Profile!
  createStudentProfile(data: StudentProfileCreateInput!): StudentProfile!
  createSuborg(data: SuborgCreateInput!): Suborg!
  createSubject(data: SubjectCreateInput!): Subject!
  createRole(data: RoleCreateInput!): Role!
  updateOrganization(data: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateGroupMember(data: GroupMemberUpdateInput!, where: GroupMemberWhereUniqueInput!): GroupMember
  updateSubGroup(data: SubGroupUpdateInput!, where: SubGroupWhereUniqueInput!): SubGroup
  updateSubGroupMember(data: SubGroupMemberUpdateInput!, where: SubGroupMemberWhereUniqueInput!): SubGroupMember
  updateRoleMember(data: RoleMemberUpdateInput!, where: RoleMemberWhereUniqueInput!): RoleMember
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateMedium(data: MediumUpdateInput!, where: MediumWhereUniqueInput!): Medium
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateSubjectSubscription(data: SubjectSubscriptionUpdateInput!, where: SubjectSubscriptionWhereUniqueInput!): SubjectSubscription
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateStudentProfile(data: StudentProfileUpdateInput!, where: StudentProfileWhereUniqueInput!): StudentProfile
  updateSuborg(data: SuborgUpdateInput!, where: SuborgWhereUniqueInput!): Suborg
  updateSubject(data: SubjectUpdateInput!, where: SubjectWhereUniqueInput!): Subject
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteGroupMember(where: GroupMemberWhereUniqueInput!): GroupMember
  deleteSubGroup(where: SubGroupWhereUniqueInput!): SubGroup
  deleteSubGroupMember(where: SubGroupMemberWhereUniqueInput!): SubGroupMember
  deleteRoleMember(where: RoleMemberWhereUniqueInput!): RoleMember
  deleteUser(where: UserWhereUniqueInput!): User
  deleteMedium(where: MediumWhereUniqueInput!): Medium
  deletePost(where: PostWhereUniqueInput!): Post
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteSubjectSubscription(where: SubjectSubscriptionWhereUniqueInput!): SubjectSubscription
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteStudentProfile(where: StudentProfileWhereUniqueInput!): StudentProfile
  deleteSuborg(where: SuborgWhereUniqueInput!): Suborg
  deleteSubject(where: SubjectWhereUniqueInput!): Subject
  deleteRole(where: RoleWhereUniqueInput!): Role
  upsertOrganization(where: OrganizationWhereUniqueInput!, create: OrganizationCreateInput!, update: OrganizationUpdateInput!): Organization!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  upsertGroupMember(where: GroupMemberWhereUniqueInput!, create: GroupMemberCreateInput!, update: GroupMemberUpdateInput!): GroupMember!
  upsertSubGroup(where: SubGroupWhereUniqueInput!, create: SubGroupCreateInput!, update: SubGroupUpdateInput!): SubGroup!
  upsertSubGroupMember(where: SubGroupMemberWhereUniqueInput!, create: SubGroupMemberCreateInput!, update: SubGroupMemberUpdateInput!): SubGroupMember!
  upsertRoleMember(where: RoleMemberWhereUniqueInput!, create: RoleMemberCreateInput!, update: RoleMemberUpdateInput!): RoleMember!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertMedium(where: MediumWhereUniqueInput!, create: MediumCreateInput!, update: MediumUpdateInput!): Medium!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  upsertSubjectSubscription(where: SubjectSubscriptionWhereUniqueInput!, create: SubjectSubscriptionCreateInput!, update: SubjectSubscriptionUpdateInput!): SubjectSubscription!
  upsertProfile(where: ProfileWhereUniqueInput!, create: ProfileCreateInput!, update: ProfileUpdateInput!): Profile!
  upsertStudentProfile(where: StudentProfileWhereUniqueInput!, create: StudentProfileCreateInput!, update: StudentProfileUpdateInput!): StudentProfile!
  upsertSuborg(where: SuborgWhereUniqueInput!, create: SuborgCreateInput!, update: SuborgUpdateInput!): Suborg!
  upsertSubject(where: SubjectWhereUniqueInput!, create: SubjectCreateInput!, update: SubjectUpdateInput!): Subject!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  updateManyOrganizations(data: OrganizationUpdateManyMutationInput!, where: OrganizationWhereInput): BatchPayload!
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  updateManyGroupMembers(data: GroupMemberUpdateManyMutationInput!, where: GroupMemberWhereInput): BatchPayload!
  updateManySubGroups(data: SubGroupUpdateManyMutationInput!, where: SubGroupWhereInput): BatchPayload!
  updateManySubGroupMembers(data: SubGroupMemberUpdateManyMutationInput!, where: SubGroupMemberWhereInput): BatchPayload!
  updateManyRoleMembers(data: RoleMemberUpdateManyMutationInput!, where: RoleMemberWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyMediums(data: MediumUpdateManyMutationInput!, where: MediumWhereInput): BatchPayload!
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  updateManySubjectSubscriptions(data: SubjectSubscriptionUpdateManyMutationInput!, where: SubjectSubscriptionWhereInput): BatchPayload!
  updateManyProfiles(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): BatchPayload!
  updateManyStudentProfiles(data: StudentProfileUpdateManyMutationInput!, where: StudentProfileWhereInput): BatchPayload!
  updateManySuborgs(data: SuborgUpdateManyMutationInput!, where: SuborgWhereInput): BatchPayload!
  updateManySubjects(data: SubjectUpdateManyMutationInput!, where: SubjectWhereInput): BatchPayload!
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  deleteManyOrganizations(where: OrganizationWhereInput): BatchPayload!
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  deleteManyGroupMembers(where: GroupMemberWhereInput): BatchPayload!
  deleteManySubGroups(where: SubGroupWhereInput): BatchPayload!
  deleteManySubGroupMembers(where: SubGroupMemberWhereInput): BatchPayload!
  deleteManyRoleMembers(where: RoleMemberWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyMediums(where: MediumWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  deleteManySubjectSubscriptions(where: SubjectSubscriptionWhereInput): BatchPayload!
  deleteManyProfiles(where: ProfileWhereInput): BatchPayload!
  deleteManyStudentProfiles(where: StudentProfileWhereInput): BatchPayload!
  deleteManySuborgs(where: SuborgWhereInput): BatchPayload!
  deleteManySubjects(where: SubjectWhereInput): BatchPayload!
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Organization implements Node {
  id: ID!
  name: String!
  description: String
  author(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  suborgs(where: SuborgWhereInput, orderBy: SuborgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Suborg!]
  orgRoles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type OrganizationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrganizationEdge]!
  aggregate: AggregateOrganization!
}

input OrganizationCreateInput {
  id: ID
  name: String!
  description: String
  author: UserCreateManyWithoutOrgInput
  suborgs: SuborgCreateManyWithoutOrgInput
  orgRoles: RoleCreateManyWithoutOrgInput
}

input OrganizationCreateOneWithoutAuthorInput {
  create: OrganizationCreateWithoutAuthorInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateOneWithoutOrgRolesInput {
  create: OrganizationCreateWithoutOrgRolesInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateOneWithoutSuborgsInput {
  create: OrganizationCreateWithoutSuborgsInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateWithoutAuthorInput {
  id: ID
  name: String!
  description: String
  suborgs: SuborgCreateManyWithoutOrgInput
  orgRoles: RoleCreateManyWithoutOrgInput
}

input OrganizationCreateWithoutOrgRolesInput {
  id: ID
  name: String!
  description: String
  author: UserCreateManyWithoutOrgInput
  suborgs: SuborgCreateManyWithoutOrgInput
}

input OrganizationCreateWithoutSuborgsInput {
  id: ID
  name: String!
  description: String
  author: UserCreateManyWithoutOrgInput
  orgRoles: RoleCreateManyWithoutOrgInput
}

"""An edge in a connection."""
type OrganizationEdge {
  """The item at the end of the edge."""
  node: Organization!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrganizationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrganizationPreviousValues {
  id: ID!
  name: String!
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type OrganizationSubscriptionPayload {
  mutation: MutationType!
  node: Organization
  updatedFields: [String!]
  previousValues: OrganizationPreviousValues
}

input OrganizationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrganizationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrganizationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrganizationSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrganizationWhereInput
}

input OrganizationUpdateInput {
  name: String
  description: String
  author: UserUpdateManyWithoutOrgInput
  suborgs: SuborgUpdateManyWithoutOrgInput
  orgRoles: RoleUpdateManyWithoutOrgInput
}

input OrganizationUpdateManyMutationInput {
  name: String
  description: String
}

input OrganizationUpdateOneRequiredWithoutSuborgsInput {
  create: OrganizationCreateWithoutSuborgsInput
  connect: OrganizationWhereUniqueInput
  update: OrganizationUpdateWithoutSuborgsDataInput
  upsert: OrganizationUpsertWithoutSuborgsInput
}

input OrganizationUpdateOneWithoutAuthorInput {
  create: OrganizationCreateWithoutAuthorInput
  connect: OrganizationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrganizationUpdateWithoutAuthorDataInput
  upsert: OrganizationUpsertWithoutAuthorInput
}

input OrganizationUpdateOneWithoutOrgRolesInput {
  create: OrganizationCreateWithoutOrgRolesInput
  connect: OrganizationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrganizationUpdateWithoutOrgRolesDataInput
  upsert: OrganizationUpsertWithoutOrgRolesInput
}

input OrganizationUpdateWithoutAuthorDataInput {
  name: String
  description: String
  suborgs: SuborgUpdateManyWithoutOrgInput
  orgRoles: RoleUpdateManyWithoutOrgInput
}

input OrganizationUpdateWithoutOrgRolesDataInput {
  name: String
  description: String
  author: UserUpdateManyWithoutOrgInput
  suborgs: SuborgUpdateManyWithoutOrgInput
}

input OrganizationUpdateWithoutSuborgsDataInput {
  name: String
  description: String
  author: UserUpdateManyWithoutOrgInput
  orgRoles: RoleUpdateManyWithoutOrgInput
}

input OrganizationUpsertWithoutAuthorInput {
  update: OrganizationUpdateWithoutAuthorDataInput!
  create: OrganizationCreateWithoutAuthorInput!
}

input OrganizationUpsertWithoutOrgRolesInput {
  update: OrganizationUpdateWithoutOrgRolesDataInput!
  create: OrganizationCreateWithoutOrgRolesInput!
}

input OrganizationUpsertWithoutSuborgsInput {
  update: OrganizationUpdateWithoutSuborgsDataInput!
  create: OrganizationCreateWithoutSuborgsInput!
}

input OrganizationWhereInput {
  """Logical AND on all given filters."""
  AND: [OrganizationWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrganizationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrganizationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author_every: UserWhereInput
  author_some: UserWhereInput
  author_none: UserWhereInput
  suborgs_every: SuborgWhereInput
  suborgs_some: SuborgWhereInput
  suborgs_none: SuborgWhereInput
  orgRoles_every: RoleWhereInput
  orgRoles_some: RoleWhereInput
  orgRoles_none: RoleWhereInput
}

input OrganizationWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  body: String!
  published: Boolean!
  author: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutAuthorInput {
  id: ID
  title: String!
  body: String!
  published: Boolean!
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateWithoutCommentsInput {
  id: ID
  title: String!
  body: String!
  published: Boolean!
  author: UserCreateOneWithoutPostsInput!
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  published_ASC
  published_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input PostScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PostScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  title: String
  body: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
  title: String
  body: String
  published: Boolean
}

input PostUpdateManyMutationInput {
  title: String
  body: String
  published: Boolean
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateWithoutAuthorDataInput {
  title: String
  body: String
  published: Boolean
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithoutCommentsDataInput {
  title: String
  body: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

enum PrismaDatabase {
  default
}

type Profile implements Node {
  id: ID!
  name: String!
  userId: User!
  studentProfile(where: StudentProfileWhereInput, orderBy: StudentProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StudentProfile!]
}

"""A connection to a list of items."""
type ProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProfileEdge]!
  aggregate: AggregateProfile!
}

input ProfileCreateInput {
  id: ID
  name: String!
  userId: UserCreateOneWithoutMyprofilesInput!
  studentProfile: StudentProfileCreateManyWithoutProfileIdInput
}

input ProfileCreateManyWithoutUserIdInput {
  create: [ProfileCreateWithoutUserIdInput!]
  connect: [ProfileWhereUniqueInput!]
}

input ProfileCreateOneWithoutStudentProfileInput {
  create: ProfileCreateWithoutStudentProfileInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutStudentProfileInput {
  id: ID
  name: String!
  userId: UserCreateOneWithoutMyprofilesInput!
}

input ProfileCreateWithoutUserIdInput {
  id: ID
  name: String!
  studentProfile: StudentProfileCreateManyWithoutProfileIdInput
}

"""An edge in a connection."""
type ProfileEdge {
  """The item at the end of the edge."""
  node: Profile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProfileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type ProfilePreviousValues {
  id: ID!
  name: String!
}

input ProfileScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfileScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfileScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfileScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type ProfileSubscriptionPayload {
  mutation: MutationType!
  node: Profile
  updatedFields: [String!]
  previousValues: ProfilePreviousValues
}

input ProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfileSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProfileWhereInput
}

input ProfileUpdateInput {
  name: String
  userId: UserUpdateOneRequiredWithoutMyprofilesInput
  studentProfile: StudentProfileUpdateManyWithoutProfileIdInput
}

input ProfileUpdateManyDataInput {
  name: String
}

input ProfileUpdateManyMutationInput {
  name: String
}

input ProfileUpdateManyWithoutUserIdInput {
  create: [ProfileCreateWithoutUserIdInput!]
  connect: [ProfileWhereUniqueInput!]
  set: [ProfileWhereUniqueInput!]
  disconnect: [ProfileWhereUniqueInput!]
  delete: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithWhereUniqueWithoutUserIdInput!]
  updateMany: [ProfileUpdateManyWithWhereNestedInput!]
  deleteMany: [ProfileScalarWhereInput!]
  upsert: [ProfileUpsertWithWhereUniqueWithoutUserIdInput!]
}

input ProfileUpdateManyWithWhereNestedInput {
  where: ProfileScalarWhereInput!
  data: ProfileUpdateManyDataInput!
}

input ProfileUpdateOneRequiredWithoutStudentProfileInput {
  create: ProfileCreateWithoutStudentProfileInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutStudentProfileDataInput
  upsert: ProfileUpsertWithoutStudentProfileInput
}

input ProfileUpdateWithoutStudentProfileDataInput {
  name: String
  userId: UserUpdateOneRequiredWithoutMyprofilesInput
}

input ProfileUpdateWithoutUserIdDataInput {
  name: String
  studentProfile: StudentProfileUpdateManyWithoutProfileIdInput
}

input ProfileUpdateWithWhereUniqueWithoutUserIdInput {
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateWithoutUserIdDataInput!
}

input ProfileUpsertWithoutStudentProfileInput {
  update: ProfileUpdateWithoutStudentProfileDataInput!
  create: ProfileCreateWithoutStudentProfileInput!
}

input ProfileUpsertWithWhereUniqueWithoutUserIdInput {
  where: ProfileWhereUniqueInput!
  update: ProfileUpdateWithoutUserIdDataInput!
  create: ProfileCreateWithoutUserIdInput!
}

input ProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  userId: UserWhereInput
  studentProfile_every: StudentProfileWhereInput
  studentProfile_some: StudentProfileWhereInput
  studentProfile_none: StudentProfileWhereInput
}

input ProfileWhereUniqueInput {
  id: ID
}

type Query {
  organizations(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Organization]!
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  groupMembers(where: GroupMemberWhereInput, orderBy: GroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupMember]!
  subGroups(where: SubGroupWhereInput, orderBy: SubGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubGroup]!
  subGroupMembers(where: SubGroupMemberWhereInput, orderBy: SubGroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubGroupMember]!
  roleMembers(where: RoleMemberWhereInput, orderBy: RoleMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RoleMember]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  mediums(where: MediumWhereInput, orderBy: MediumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Medium]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  subjectSubscriptions(where: SubjectSubscriptionWhereInput, orderBy: SubjectSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubjectSubscription]!
  profiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile]!
  studentProfiles(where: StudentProfileWhereInput, orderBy: StudentProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StudentProfile]!
  suborgs(where: SuborgWhereInput, orderBy: SuborgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Suborg]!
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject]!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  organization(where: OrganizationWhereUniqueInput!): Organization
  group(where: GroupWhereUniqueInput!): Group
  groupMember(where: GroupMemberWhereUniqueInput!): GroupMember
  subGroup(where: SubGroupWhereUniqueInput!): SubGroup
  subGroupMember(where: SubGroupMemberWhereUniqueInput!): SubGroupMember
  roleMember(where: RoleMemberWhereUniqueInput!): RoleMember
  user(where: UserWhereUniqueInput!): User
  medium(where: MediumWhereUniqueInput!): Medium
  post(where: PostWhereUniqueInput!): Post
  comment(where: CommentWhereUniqueInput!): Comment
  subjectSubscription(where: SubjectSubscriptionWhereUniqueInput!): SubjectSubscription
  profile(where: ProfileWhereUniqueInput!): Profile
  studentProfile(where: StudentProfileWhereUniqueInput!): StudentProfile
  suborg(where: SuborgWhereUniqueInput!): Suborg
  subject(where: SubjectWhereUniqueInput!): Subject
  role(where: RoleWhereUniqueInput!): Role
  organizationsConnection(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrganizationConnection!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  groupMembersConnection(where: GroupMemberWhereInput, orderBy: GroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupMemberConnection!
  subGroupsConnection(where: SubGroupWhereInput, orderBy: SubGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubGroupConnection!
  subGroupMembersConnection(where: SubGroupMemberWhereInput, orderBy: SubGroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubGroupMemberConnection!
  roleMembersConnection(where: RoleMemberWhereInput, orderBy: RoleMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleMemberConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  mediumsConnection(where: MediumWhereInput, orderBy: MediumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MediumConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  subjectSubscriptionsConnection(where: SubjectSubscriptionWhereInput, orderBy: SubjectSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubjectSubscriptionConnection!
  profilesConnection(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileConnection!
  studentProfilesConnection(where: StudentProfileWhereInput, orderBy: StudentProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StudentProfileConnection!
  suborgsConnection(where: SuborgWhereInput, orderBy: SuborgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SuborgConnection!
  subjectsConnection(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubjectConnection!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Role implements Node {
  id: ID!
  name: String!
  org: Organization
  suborg: Suborg
  group: Group
  subgroup: SubGroup
  members(where: RoleMemberWhereInput, orderBy: RoleMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RoleMember!]
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type RoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  id: ID
  name: String!
  description: String
  org: OrganizationCreateOneWithoutOrgRolesInput
  suborg: SuborgCreateOneInput
  group: GroupCreateOneWithoutGroupRolesInput
  subgroup: SubGroupCreateOneWithoutSubgroupRolesInput
  members: RoleMemberCreateManyWithoutRoleInput
}

input RoleCreateManyInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateManyWithoutGroupInput {
  create: [RoleCreateWithoutGroupInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateManyWithoutOrgInput {
  create: [RoleCreateWithoutOrgInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateManyWithoutSubgroupInput {
  create: [RoleCreateWithoutSubgroupInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateOneWithoutMembersInput {
  create: RoleCreateWithoutMembersInput
  connect: RoleWhereUniqueInput
}

input RoleCreateWithoutGroupInput {
  id: ID
  name: String!
  description: String
  org: OrganizationCreateOneWithoutOrgRolesInput
  suborg: SuborgCreateOneInput
  subgroup: SubGroupCreateOneWithoutSubgroupRolesInput
  members: RoleMemberCreateManyWithoutRoleInput
}

input RoleCreateWithoutMembersInput {
  id: ID
  name: String!
  description: String
  org: OrganizationCreateOneWithoutOrgRolesInput
  suborg: SuborgCreateOneInput
  group: GroupCreateOneWithoutGroupRolesInput
  subgroup: SubGroupCreateOneWithoutSubgroupRolesInput
}

input RoleCreateWithoutOrgInput {
  id: ID
  name: String!
  description: String
  suborg: SuborgCreateOneInput
  group: GroupCreateOneWithoutGroupRolesInput
  subgroup: SubGroupCreateOneWithoutSubgroupRolesInput
  members: RoleMemberCreateManyWithoutRoleInput
}

input RoleCreateWithoutSubgroupInput {
  id: ID
  name: String!
  description: String
  org: OrganizationCreateOneWithoutOrgRolesInput
  suborg: SuborgCreateOneInput
  group: GroupCreateOneWithoutGroupRolesInput
  members: RoleMemberCreateManyWithoutRoleInput
}

"""An edge in a connection."""
type RoleEdge {
  """The item at the end of the edge."""
  node: Role!

  """A cursor for use in pagination."""
  cursor: String!
}

type RoleMember implements Node {
  id: ID!
  userid: User!
  role: Role!
  status: RoleStatus
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type RoleMemberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleMemberEdge]!
  aggregate: AggregateRoleMember!
}

input RoleMemberCreateInput {
  id: ID
  status: RoleStatus
  description: String
  userid: UserCreateOneWithoutMyRolesInput!
  role: RoleCreateOneWithoutMembersInput!
}

input RoleMemberCreateManyWithoutRoleInput {
  create: [RoleMemberCreateWithoutRoleInput!]
  connect: [RoleMemberWhereUniqueInput!]
}

input RoleMemberCreateManyWithoutUseridInput {
  create: [RoleMemberCreateWithoutUseridInput!]
  connect: [RoleMemberWhereUniqueInput!]
}

input RoleMemberCreateWithoutRoleInput {
  id: ID
  status: RoleStatus
  description: String
  userid: UserCreateOneWithoutMyRolesInput!
}

input RoleMemberCreateWithoutUseridInput {
  id: ID
  status: RoleStatus
  description: String
  role: RoleCreateOneWithoutMembersInput!
}

"""An edge in a connection."""
type RoleMemberEdge {
  """The item at the end of the edge."""
  node: RoleMember!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoleMemberOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RoleMemberPreviousValues {
  id: ID!
  status: RoleStatus
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input RoleMemberScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleMemberScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleMemberScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleMemberScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: RoleStatus

  """All values that are not equal to given value."""
  status_not: RoleStatus

  """All values that are contained in given list."""
  status_in: [RoleStatus!]

  """All values that are not contained in given list."""
  status_not_in: [RoleStatus!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type RoleMemberSubscriptionPayload {
  mutation: MutationType!
  node: RoleMember
  updatedFields: [String!]
  previousValues: RoleMemberPreviousValues
}

input RoleMemberSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleMemberSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleMemberSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleMemberSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleMemberWhereInput
}

input RoleMemberUpdateInput {
  status: RoleStatus
  description: String
  userid: UserUpdateOneRequiredWithoutMyRolesInput
  role: RoleUpdateOneRequiredWithoutMembersInput
}

input RoleMemberUpdateManyDataInput {
  status: RoleStatus
  description: String
}

input RoleMemberUpdateManyMutationInput {
  status: RoleStatus
  description: String
}

input RoleMemberUpdateManyWithoutRoleInput {
  create: [RoleMemberCreateWithoutRoleInput!]
  connect: [RoleMemberWhereUniqueInput!]
  set: [RoleMemberWhereUniqueInput!]
  disconnect: [RoleMemberWhereUniqueInput!]
  delete: [RoleMemberWhereUniqueInput!]
  update: [RoleMemberUpdateWithWhereUniqueWithoutRoleInput!]
  updateMany: [RoleMemberUpdateManyWithWhereNestedInput!]
  deleteMany: [RoleMemberScalarWhereInput!]
  upsert: [RoleMemberUpsertWithWhereUniqueWithoutRoleInput!]
}

input RoleMemberUpdateManyWithoutUseridInput {
  create: [RoleMemberCreateWithoutUseridInput!]
  connect: [RoleMemberWhereUniqueInput!]
  set: [RoleMemberWhereUniqueInput!]
  disconnect: [RoleMemberWhereUniqueInput!]
  delete: [RoleMemberWhereUniqueInput!]
  update: [RoleMemberUpdateWithWhereUniqueWithoutUseridInput!]
  updateMany: [RoleMemberUpdateManyWithWhereNestedInput!]
  deleteMany: [RoleMemberScalarWhereInput!]
  upsert: [RoleMemberUpsertWithWhereUniqueWithoutUseridInput!]
}

input RoleMemberUpdateManyWithWhereNestedInput {
  where: RoleMemberScalarWhereInput!
  data: RoleMemberUpdateManyDataInput!
}

input RoleMemberUpdateWithoutRoleDataInput {
  status: RoleStatus
  description: String
  userid: UserUpdateOneRequiredWithoutMyRolesInput
}

input RoleMemberUpdateWithoutUseridDataInput {
  status: RoleStatus
  description: String
  role: RoleUpdateOneRequiredWithoutMembersInput
}

input RoleMemberUpdateWithWhereUniqueWithoutRoleInput {
  where: RoleMemberWhereUniqueInput!
  data: RoleMemberUpdateWithoutRoleDataInput!
}

input RoleMemberUpdateWithWhereUniqueWithoutUseridInput {
  where: RoleMemberWhereUniqueInput!
  data: RoleMemberUpdateWithoutUseridDataInput!
}

input RoleMemberUpsertWithWhereUniqueWithoutRoleInput {
  where: RoleMemberWhereUniqueInput!
  update: RoleMemberUpdateWithoutRoleDataInput!
  create: RoleMemberCreateWithoutRoleInput!
}

input RoleMemberUpsertWithWhereUniqueWithoutUseridInput {
  where: RoleMemberWhereUniqueInput!
  update: RoleMemberUpdateWithoutUseridDataInput!
  create: RoleMemberCreateWithoutUseridInput!
}

input RoleMemberWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleMemberWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleMemberWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleMemberWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: RoleStatus

  """All values that are not equal to given value."""
  status_not: RoleStatus

  """All values that are contained in given list."""
  status_in: [RoleStatus!]

  """All values that are not contained in given list."""
  status_not_in: [RoleStatus!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  userid: UserWhereInput
  role: RoleWhereInput
}

input RoleMemberWhereUniqueInput {
  id: ID
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RolePreviousValues {
  id: ID!
  name: String!
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input RoleScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

enum RoleStatus {
  ACTIVE
  EXPIRED
  INACTIVE
  DORMANT
  RENEWED
  SPECIALGRANT
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
}

input RoleUpdateDataInput {
  name: String
  description: String
  org: OrganizationUpdateOneWithoutOrgRolesInput
  suborg: SuborgUpdateOneInput
  group: GroupUpdateOneWithoutGroupRolesInput
  subgroup: SubGroupUpdateOneWithoutSubgroupRolesInput
  members: RoleMemberUpdateManyWithoutRoleInput
}

input RoleUpdateInput {
  name: String
  description: String
  org: OrganizationUpdateOneWithoutOrgRolesInput
  suborg: SuborgUpdateOneInput
  group: GroupUpdateOneWithoutGroupRolesInput
  subgroup: SubGroupUpdateOneWithoutSubgroupRolesInput
  members: RoleMemberUpdateManyWithoutRoleInput
}

input RoleUpdateManyDataInput {
  name: String
  description: String
}

input RoleUpdateManyInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueNestedInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
  deleteMany: [RoleScalarWhereInput!]
  upsert: [RoleUpsertWithWhereUniqueNestedInput!]
}

input RoleUpdateManyMutationInput {
  name: String
  description: String
}

input RoleUpdateManyWithoutGroupInput {
  create: [RoleCreateWithoutGroupInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
  deleteMany: [RoleScalarWhereInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutGroupInput!]
}

input RoleUpdateManyWithoutOrgInput {
  create: [RoleCreateWithoutOrgInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutOrgInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
  deleteMany: [RoleScalarWhereInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutOrgInput!]
}

input RoleUpdateManyWithoutSubgroupInput {
  create: [RoleCreateWithoutSubgroupInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutSubgroupInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
  deleteMany: [RoleScalarWhereInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutSubgroupInput!]
}

input RoleUpdateManyWithWhereNestedInput {
  where: RoleScalarWhereInput!
  data: RoleUpdateManyDataInput!
}

input RoleUpdateOneRequiredWithoutMembersInput {
  create: RoleCreateWithoutMembersInput
  connect: RoleWhereUniqueInput
  update: RoleUpdateWithoutMembersDataInput
  upsert: RoleUpsertWithoutMembersInput
}

input RoleUpdateWithoutGroupDataInput {
  name: String
  description: String
  org: OrganizationUpdateOneWithoutOrgRolesInput
  suborg: SuborgUpdateOneInput
  subgroup: SubGroupUpdateOneWithoutSubgroupRolesInput
  members: RoleMemberUpdateManyWithoutRoleInput
}

input RoleUpdateWithoutMembersDataInput {
  name: String
  description: String
  org: OrganizationUpdateOneWithoutOrgRolesInput
  suborg: SuborgUpdateOneInput
  group: GroupUpdateOneWithoutGroupRolesInput
  subgroup: SubGroupUpdateOneWithoutSubgroupRolesInput
}

input RoleUpdateWithoutOrgDataInput {
  name: String
  description: String
  suborg: SuborgUpdateOneInput
  group: GroupUpdateOneWithoutGroupRolesInput
  subgroup: SubGroupUpdateOneWithoutSubgroupRolesInput
  members: RoleMemberUpdateManyWithoutRoleInput
}

input RoleUpdateWithoutSubgroupDataInput {
  name: String
  description: String
  org: OrganizationUpdateOneWithoutOrgRolesInput
  suborg: SuborgUpdateOneInput
  group: GroupUpdateOneWithoutGroupRolesInput
  members: RoleMemberUpdateManyWithoutRoleInput
}

input RoleUpdateWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateDataInput!
}

input RoleUpdateWithWhereUniqueWithoutGroupInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutGroupDataInput!
}

input RoleUpdateWithWhereUniqueWithoutOrgInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutOrgDataInput!
}

input RoleUpdateWithWhereUniqueWithoutSubgroupInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutSubgroupDataInput!
}

input RoleUpsertWithoutMembersInput {
  update: RoleUpdateWithoutMembersDataInput!
  create: RoleCreateWithoutMembersInput!
}

input RoleUpsertWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateDataInput!
  create: RoleCreateInput!
}

input RoleUpsertWithWhereUniqueWithoutGroupInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutGroupDataInput!
  create: RoleCreateWithoutGroupInput!
}

input RoleUpsertWithWhereUniqueWithoutOrgInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutOrgDataInput!
  create: RoleCreateWithoutOrgInput!
}

input RoleUpsertWithWhereUniqueWithoutSubgroupInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutSubgroupDataInput!
  create: RoleCreateWithoutSubgroupInput!
}

input RoleWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  org: OrganizationWhereInput
  suborg: SuborgWhereInput
  group: GroupWhereInput
  subgroup: SubGroupWhereInput
  members_every: RoleMemberWhereInput
  members_some: RoleMemberWhereInput
  members_none: RoleMemberWhereInput
}

input RoleWhereUniqueInput {
  id: ID
}

type StudentProfile implements Node {
  id: ID!
  name: String!
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  std: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
  profileId: Profile!
}

"""A connection to a list of items."""
type StudentProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StudentProfileEdge]!
  aggregate: AggregateStudentProfile!
}

input StudentProfileCreateInput {
  id: ID
  name: String!
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  std: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
  profileId: ProfileCreateOneWithoutStudentProfileInput!
}

input StudentProfileCreateManyWithoutProfileIdInput {
  create: [StudentProfileCreateWithoutProfileIdInput!]
  connect: [StudentProfileWhereUniqueInput!]
}

input StudentProfileCreateWithoutProfileIdInput {
  id: ID
  name: String!
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  std: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
}

"""An edge in a connection."""
type StudentProfileEdge {
  """The item at the end of the edge."""
  node: StudentProfile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StudentProfileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  profiileType_ASC
  profiileType_DESC
  educationLevel_ASC
  educationLevel_DESC
  educationType_ASC
  educationType_DESC
  specialization_ASC
  specialization_DESC
  std_ASC
  std_DESC
  startedYear_ASC
  startedYear_DESC
  completedYear_ASC
  completedYear_DESC
  result_ASC
  result_DESC
  status_ASC
  status_DESC
  remark_ASC
  remark_DESC
}

type StudentProfilePreviousValues {
  id: ID!
  name: String!
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  std: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
}

input StudentProfileScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StudentProfileScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StudentProfileScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StudentProfileScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  profiileType: String

  """All values that are not equal to given value."""
  profiileType_not: String

  """All values that are contained in given list."""
  profiileType_in: [String!]

  """All values that are not contained in given list."""
  profiileType_not_in: [String!]

  """All values less than the given value."""
  profiileType_lt: String

  """All values less than or equal the given value."""
  profiileType_lte: String

  """All values greater than the given value."""
  profiileType_gt: String

  """All values greater than or equal the given value."""
  profiileType_gte: String

  """All values containing the given string."""
  profiileType_contains: String

  """All values not containing the given string."""
  profiileType_not_contains: String

  """All values starting with the given string."""
  profiileType_starts_with: String

  """All values not starting with the given string."""
  profiileType_not_starts_with: String

  """All values ending with the given string."""
  profiileType_ends_with: String

  """All values not ending with the given string."""
  profiileType_not_ends_with: String
  educationLevel: String

  """All values that are not equal to given value."""
  educationLevel_not: String

  """All values that are contained in given list."""
  educationLevel_in: [String!]

  """All values that are not contained in given list."""
  educationLevel_not_in: [String!]

  """All values less than the given value."""
  educationLevel_lt: String

  """All values less than or equal the given value."""
  educationLevel_lte: String

  """All values greater than the given value."""
  educationLevel_gt: String

  """All values greater than or equal the given value."""
  educationLevel_gte: String

  """All values containing the given string."""
  educationLevel_contains: String

  """All values not containing the given string."""
  educationLevel_not_contains: String

  """All values starting with the given string."""
  educationLevel_starts_with: String

  """All values not starting with the given string."""
  educationLevel_not_starts_with: String

  """All values ending with the given string."""
  educationLevel_ends_with: String

  """All values not ending with the given string."""
  educationLevel_not_ends_with: String
  educationType: String

  """All values that are not equal to given value."""
  educationType_not: String

  """All values that are contained in given list."""
  educationType_in: [String!]

  """All values that are not contained in given list."""
  educationType_not_in: [String!]

  """All values less than the given value."""
  educationType_lt: String

  """All values less than or equal the given value."""
  educationType_lte: String

  """All values greater than the given value."""
  educationType_gt: String

  """All values greater than or equal the given value."""
  educationType_gte: String

  """All values containing the given string."""
  educationType_contains: String

  """All values not containing the given string."""
  educationType_not_contains: String

  """All values starting with the given string."""
  educationType_starts_with: String

  """All values not starting with the given string."""
  educationType_not_starts_with: String

  """All values ending with the given string."""
  educationType_ends_with: String

  """All values not ending with the given string."""
  educationType_not_ends_with: String
  specialization: String

  """All values that are not equal to given value."""
  specialization_not: String

  """All values that are contained in given list."""
  specialization_in: [String!]

  """All values that are not contained in given list."""
  specialization_not_in: [String!]

  """All values less than the given value."""
  specialization_lt: String

  """All values less than or equal the given value."""
  specialization_lte: String

  """All values greater than the given value."""
  specialization_gt: String

  """All values greater than or equal the given value."""
  specialization_gte: String

  """All values containing the given string."""
  specialization_contains: String

  """All values not containing the given string."""
  specialization_not_contains: String

  """All values starting with the given string."""
  specialization_starts_with: String

  """All values not starting with the given string."""
  specialization_not_starts_with: String

  """All values ending with the given string."""
  specialization_ends_with: String

  """All values not ending with the given string."""
  specialization_not_ends_with: String
  std: String

  """All values that are not equal to given value."""
  std_not: String

  """All values that are contained in given list."""
  std_in: [String!]

  """All values that are not contained in given list."""
  std_not_in: [String!]

  """All values less than the given value."""
  std_lt: String

  """All values less than or equal the given value."""
  std_lte: String

  """All values greater than the given value."""
  std_gt: String

  """All values greater than or equal the given value."""
  std_gte: String

  """All values containing the given string."""
  std_contains: String

  """All values not containing the given string."""
  std_not_contains: String

  """All values starting with the given string."""
  std_starts_with: String

  """All values not starting with the given string."""
  std_not_starts_with: String

  """All values ending with the given string."""
  std_ends_with: String

  """All values not ending with the given string."""
  std_not_ends_with: String
  startedYear: DateTime

  """All values that are not equal to given value."""
  startedYear_not: DateTime

  """All values that are contained in given list."""
  startedYear_in: [DateTime!]

  """All values that are not contained in given list."""
  startedYear_not_in: [DateTime!]

  """All values less than the given value."""
  startedYear_lt: DateTime

  """All values less than or equal the given value."""
  startedYear_lte: DateTime

  """All values greater than the given value."""
  startedYear_gt: DateTime

  """All values greater than or equal the given value."""
  startedYear_gte: DateTime
  completedYear: DateTime

  """All values that are not equal to given value."""
  completedYear_not: DateTime

  """All values that are contained in given list."""
  completedYear_in: [DateTime!]

  """All values that are not contained in given list."""
  completedYear_not_in: [DateTime!]

  """All values less than the given value."""
  completedYear_lt: DateTime

  """All values less than or equal the given value."""
  completedYear_lte: DateTime

  """All values greater than the given value."""
  completedYear_gt: DateTime

  """All values greater than or equal the given value."""
  completedYear_gte: DateTime
  result: String

  """All values that are not equal to given value."""
  result_not: String

  """All values that are contained in given list."""
  result_in: [String!]

  """All values that are not contained in given list."""
  result_not_in: [String!]

  """All values less than the given value."""
  result_lt: String

  """All values less than or equal the given value."""
  result_lte: String

  """All values greater than the given value."""
  result_gt: String

  """All values greater than or equal the given value."""
  result_gte: String

  """All values containing the given string."""
  result_contains: String

  """All values not containing the given string."""
  result_not_contains: String

  """All values starting with the given string."""
  result_starts_with: String

  """All values not starting with the given string."""
  result_not_starts_with: String

  """All values ending with the given string."""
  result_ends_with: String

  """All values not ending with the given string."""
  result_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  remark: String

  """All values that are not equal to given value."""
  remark_not: String

  """All values that are contained in given list."""
  remark_in: [String!]

  """All values that are not contained in given list."""
  remark_not_in: [String!]

  """All values less than the given value."""
  remark_lt: String

  """All values less than or equal the given value."""
  remark_lte: String

  """All values greater than the given value."""
  remark_gt: String

  """All values greater than or equal the given value."""
  remark_gte: String

  """All values containing the given string."""
  remark_contains: String

  """All values not containing the given string."""
  remark_not_contains: String

  """All values starting with the given string."""
  remark_starts_with: String

  """All values not starting with the given string."""
  remark_not_starts_with: String

  """All values ending with the given string."""
  remark_ends_with: String

  """All values not ending with the given string."""
  remark_not_ends_with: String
}

type StudentProfileSubscriptionPayload {
  mutation: MutationType!
  node: StudentProfile
  updatedFields: [String!]
  previousValues: StudentProfilePreviousValues
}

input StudentProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StudentProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StudentProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StudentProfileSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StudentProfileWhereInput
}

input StudentProfileUpdateInput {
  name: String
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  std: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
  profileId: ProfileUpdateOneRequiredWithoutStudentProfileInput
}

input StudentProfileUpdateManyDataInput {
  name: String
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  std: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
}

input StudentProfileUpdateManyMutationInput {
  name: String
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  std: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
}

input StudentProfileUpdateManyWithoutProfileIdInput {
  create: [StudentProfileCreateWithoutProfileIdInput!]
  connect: [StudentProfileWhereUniqueInput!]
  set: [StudentProfileWhereUniqueInput!]
  disconnect: [StudentProfileWhereUniqueInput!]
  delete: [StudentProfileWhereUniqueInput!]
  update: [StudentProfileUpdateWithWhereUniqueWithoutProfileIdInput!]
  updateMany: [StudentProfileUpdateManyWithWhereNestedInput!]
  deleteMany: [StudentProfileScalarWhereInput!]
  upsert: [StudentProfileUpsertWithWhereUniqueWithoutProfileIdInput!]
}

input StudentProfileUpdateManyWithWhereNestedInput {
  where: StudentProfileScalarWhereInput!
  data: StudentProfileUpdateManyDataInput!
}

input StudentProfileUpdateWithoutProfileIdDataInput {
  name: String
  profiileType: String
  educationLevel: String
  educationType: String
  specialization: String
  std: String
  startedYear: DateTime
  completedYear: DateTime
  result: String
  status: String
  remark: String
}

input StudentProfileUpdateWithWhereUniqueWithoutProfileIdInput {
  where: StudentProfileWhereUniqueInput!
  data: StudentProfileUpdateWithoutProfileIdDataInput!
}

input StudentProfileUpsertWithWhereUniqueWithoutProfileIdInput {
  where: StudentProfileWhereUniqueInput!
  update: StudentProfileUpdateWithoutProfileIdDataInput!
  create: StudentProfileCreateWithoutProfileIdInput!
}

input StudentProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [StudentProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [StudentProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StudentProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  profiileType: String

  """All values that are not equal to given value."""
  profiileType_not: String

  """All values that are contained in given list."""
  profiileType_in: [String!]

  """All values that are not contained in given list."""
  profiileType_not_in: [String!]

  """All values less than the given value."""
  profiileType_lt: String

  """All values less than or equal the given value."""
  profiileType_lte: String

  """All values greater than the given value."""
  profiileType_gt: String

  """All values greater than or equal the given value."""
  profiileType_gte: String

  """All values containing the given string."""
  profiileType_contains: String

  """All values not containing the given string."""
  profiileType_not_contains: String

  """All values starting with the given string."""
  profiileType_starts_with: String

  """All values not starting with the given string."""
  profiileType_not_starts_with: String

  """All values ending with the given string."""
  profiileType_ends_with: String

  """All values not ending with the given string."""
  profiileType_not_ends_with: String
  educationLevel: String

  """All values that are not equal to given value."""
  educationLevel_not: String

  """All values that are contained in given list."""
  educationLevel_in: [String!]

  """All values that are not contained in given list."""
  educationLevel_not_in: [String!]

  """All values less than the given value."""
  educationLevel_lt: String

  """All values less than or equal the given value."""
  educationLevel_lte: String

  """All values greater than the given value."""
  educationLevel_gt: String

  """All values greater than or equal the given value."""
  educationLevel_gte: String

  """All values containing the given string."""
  educationLevel_contains: String

  """All values not containing the given string."""
  educationLevel_not_contains: String

  """All values starting with the given string."""
  educationLevel_starts_with: String

  """All values not starting with the given string."""
  educationLevel_not_starts_with: String

  """All values ending with the given string."""
  educationLevel_ends_with: String

  """All values not ending with the given string."""
  educationLevel_not_ends_with: String
  educationType: String

  """All values that are not equal to given value."""
  educationType_not: String

  """All values that are contained in given list."""
  educationType_in: [String!]

  """All values that are not contained in given list."""
  educationType_not_in: [String!]

  """All values less than the given value."""
  educationType_lt: String

  """All values less than or equal the given value."""
  educationType_lte: String

  """All values greater than the given value."""
  educationType_gt: String

  """All values greater than or equal the given value."""
  educationType_gte: String

  """All values containing the given string."""
  educationType_contains: String

  """All values not containing the given string."""
  educationType_not_contains: String

  """All values starting with the given string."""
  educationType_starts_with: String

  """All values not starting with the given string."""
  educationType_not_starts_with: String

  """All values ending with the given string."""
  educationType_ends_with: String

  """All values not ending with the given string."""
  educationType_not_ends_with: String
  specialization: String

  """All values that are not equal to given value."""
  specialization_not: String

  """All values that are contained in given list."""
  specialization_in: [String!]

  """All values that are not contained in given list."""
  specialization_not_in: [String!]

  """All values less than the given value."""
  specialization_lt: String

  """All values less than or equal the given value."""
  specialization_lte: String

  """All values greater than the given value."""
  specialization_gt: String

  """All values greater than or equal the given value."""
  specialization_gte: String

  """All values containing the given string."""
  specialization_contains: String

  """All values not containing the given string."""
  specialization_not_contains: String

  """All values starting with the given string."""
  specialization_starts_with: String

  """All values not starting with the given string."""
  specialization_not_starts_with: String

  """All values ending with the given string."""
  specialization_ends_with: String

  """All values not ending with the given string."""
  specialization_not_ends_with: String
  std: String

  """All values that are not equal to given value."""
  std_not: String

  """All values that are contained in given list."""
  std_in: [String!]

  """All values that are not contained in given list."""
  std_not_in: [String!]

  """All values less than the given value."""
  std_lt: String

  """All values less than or equal the given value."""
  std_lte: String

  """All values greater than the given value."""
  std_gt: String

  """All values greater than or equal the given value."""
  std_gte: String

  """All values containing the given string."""
  std_contains: String

  """All values not containing the given string."""
  std_not_contains: String

  """All values starting with the given string."""
  std_starts_with: String

  """All values not starting with the given string."""
  std_not_starts_with: String

  """All values ending with the given string."""
  std_ends_with: String

  """All values not ending with the given string."""
  std_not_ends_with: String
  startedYear: DateTime

  """All values that are not equal to given value."""
  startedYear_not: DateTime

  """All values that are contained in given list."""
  startedYear_in: [DateTime!]

  """All values that are not contained in given list."""
  startedYear_not_in: [DateTime!]

  """All values less than the given value."""
  startedYear_lt: DateTime

  """All values less than or equal the given value."""
  startedYear_lte: DateTime

  """All values greater than the given value."""
  startedYear_gt: DateTime

  """All values greater than or equal the given value."""
  startedYear_gte: DateTime
  completedYear: DateTime

  """All values that are not equal to given value."""
  completedYear_not: DateTime

  """All values that are contained in given list."""
  completedYear_in: [DateTime!]

  """All values that are not contained in given list."""
  completedYear_not_in: [DateTime!]

  """All values less than the given value."""
  completedYear_lt: DateTime

  """All values less than or equal the given value."""
  completedYear_lte: DateTime

  """All values greater than the given value."""
  completedYear_gt: DateTime

  """All values greater than or equal the given value."""
  completedYear_gte: DateTime
  result: String

  """All values that are not equal to given value."""
  result_not: String

  """All values that are contained in given list."""
  result_in: [String!]

  """All values that are not contained in given list."""
  result_not_in: [String!]

  """All values less than the given value."""
  result_lt: String

  """All values less than or equal the given value."""
  result_lte: String

  """All values greater than the given value."""
  result_gt: String

  """All values greater than or equal the given value."""
  result_gte: String

  """All values containing the given string."""
  result_contains: String

  """All values not containing the given string."""
  result_not_contains: String

  """All values starting with the given string."""
  result_starts_with: String

  """All values not starting with the given string."""
  result_not_starts_with: String

  """All values ending with the given string."""
  result_ends_with: String

  """All values not ending with the given string."""
  result_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  remark: String

  """All values that are not equal to given value."""
  remark_not: String

  """All values that are contained in given list."""
  remark_in: [String!]

  """All values that are not contained in given list."""
  remark_not_in: [String!]

  """All values less than the given value."""
  remark_lt: String

  """All values less than or equal the given value."""
  remark_lte: String

  """All values greater than the given value."""
  remark_gt: String

  """All values greater than or equal the given value."""
  remark_gte: String

  """All values containing the given string."""
  remark_contains: String

  """All values not containing the given string."""
  remark_not_contains: String

  """All values starting with the given string."""
  remark_starts_with: String

  """All values not starting with the given string."""
  remark_not_starts_with: String

  """All values ending with the given string."""
  remark_ends_with: String

  """All values not ending with the given string."""
  remark_not_ends_with: String
  profileId: ProfileWhereInput
}

input StudentProfileWhereUniqueInput {
  id: ID
}

type SubGroup implements Node {
  id: ID!
  name: String!
  description: String
  groupid: Group!
  members(where: SubGroupMemberWhereInput, orderBy: SubGroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubGroupMember!]
  subgroupRoles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type SubGroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubGroupEdge]!
  aggregate: AggregateSubGroup!
}

input SubGroupCreateInput {
  id: ID
  name: String!
  description: String
  groupid: GroupCreateOneWithoutSubgroupsInput!
  members: SubGroupMemberCreateManyWithoutMemberInput
  subgroupRoles: RoleCreateManyWithoutSubgroupInput
  subjects: SubjectCreateManyWithoutSubgroupInput
}

input SubGroupCreateManyWithoutGroupidInput {
  create: [SubGroupCreateWithoutGroupidInput!]
  connect: [SubGroupWhereUniqueInput!]
}

input SubGroupCreateOneWithoutMembersInput {
  create: SubGroupCreateWithoutMembersInput
  connect: SubGroupWhereUniqueInput
}

input SubGroupCreateOneWithoutSubgroupRolesInput {
  create: SubGroupCreateWithoutSubgroupRolesInput
  connect: SubGroupWhereUniqueInput
}

input SubGroupCreateOneWithoutSubjectsInput {
  create: SubGroupCreateWithoutSubjectsInput
  connect: SubGroupWhereUniqueInput
}

input SubGroupCreateWithoutGroupidInput {
  id: ID
  name: String!
  description: String
  members: SubGroupMemberCreateManyWithoutMemberInput
  subgroupRoles: RoleCreateManyWithoutSubgroupInput
  subjects: SubjectCreateManyWithoutSubgroupInput
}

input SubGroupCreateWithoutMembersInput {
  id: ID
  name: String!
  description: String
  groupid: GroupCreateOneWithoutSubgroupsInput!
  subgroupRoles: RoleCreateManyWithoutSubgroupInput
  subjects: SubjectCreateManyWithoutSubgroupInput
}

input SubGroupCreateWithoutSubgroupRolesInput {
  id: ID
  name: String!
  description: String
  groupid: GroupCreateOneWithoutSubgroupsInput!
  members: SubGroupMemberCreateManyWithoutMemberInput
  subjects: SubjectCreateManyWithoutSubgroupInput
}

input SubGroupCreateWithoutSubjectsInput {
  id: ID
  name: String!
  description: String
  groupid: GroupCreateOneWithoutSubgroupsInput!
  members: SubGroupMemberCreateManyWithoutMemberInput
  subgroupRoles: RoleCreateManyWithoutSubgroupInput
}

"""An edge in a connection."""
type SubGroupEdge {
  """The item at the end of the edge."""
  node: SubGroup!

  """A cursor for use in pagination."""
  cursor: String!
}

type SubGroupMember implements Node {
  id: ID!
  userid: User!
  member: SubGroup!
  status: MemberStatus
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type SubGroupMemberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubGroupMemberEdge]!
  aggregate: AggregateSubGroupMember!
}

input SubGroupMemberCreateInput {
  id: ID
  status: MemberStatus
  description: String
  userid: UserCreateOneWithoutSubgroupmembersInput!
  member: SubGroupCreateOneWithoutMembersInput!
}

input SubGroupMemberCreateManyWithoutMemberInput {
  create: [SubGroupMemberCreateWithoutMemberInput!]
  connect: [SubGroupMemberWhereUniqueInput!]
}

input SubGroupMemberCreateManyWithoutUseridInput {
  create: [SubGroupMemberCreateWithoutUseridInput!]
  connect: [SubGroupMemberWhereUniqueInput!]
}

input SubGroupMemberCreateWithoutMemberInput {
  id: ID
  status: MemberStatus
  description: String
  userid: UserCreateOneWithoutSubgroupmembersInput!
}

input SubGroupMemberCreateWithoutUseridInput {
  id: ID
  status: MemberStatus
  description: String
  member: SubGroupCreateOneWithoutMembersInput!
}

"""An edge in a connection."""
type SubGroupMemberEdge {
  """The item at the end of the edge."""
  node: SubGroupMember!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubGroupMemberOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SubGroupMemberPreviousValues {
  id: ID!
  status: MemberStatus
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input SubGroupMemberScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SubGroupMemberScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubGroupMemberScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubGroupMemberScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: MemberStatus

  """All values that are not equal to given value."""
  status_not: MemberStatus

  """All values that are contained in given list."""
  status_in: [MemberStatus!]

  """All values that are not contained in given list."""
  status_not_in: [MemberStatus!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type SubGroupMemberSubscriptionPayload {
  mutation: MutationType!
  node: SubGroupMember
  updatedFields: [String!]
  previousValues: SubGroupMemberPreviousValues
}

input SubGroupMemberSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubGroupMemberSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubGroupMemberSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubGroupMemberSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubGroupMemberWhereInput
}

input SubGroupMemberUpdateInput {
  status: MemberStatus
  description: String
  userid: UserUpdateOneRequiredWithoutSubgroupmembersInput
  member: SubGroupUpdateOneRequiredWithoutMembersInput
}

input SubGroupMemberUpdateManyDataInput {
  status: MemberStatus
  description: String
}

input SubGroupMemberUpdateManyMutationInput {
  status: MemberStatus
  description: String
}

input SubGroupMemberUpdateManyWithoutMemberInput {
  create: [SubGroupMemberCreateWithoutMemberInput!]
  connect: [SubGroupMemberWhereUniqueInput!]
  set: [SubGroupMemberWhereUniqueInput!]
  disconnect: [SubGroupMemberWhereUniqueInput!]
  delete: [SubGroupMemberWhereUniqueInput!]
  update: [SubGroupMemberUpdateWithWhereUniqueWithoutMemberInput!]
  updateMany: [SubGroupMemberUpdateManyWithWhereNestedInput!]
  deleteMany: [SubGroupMemberScalarWhereInput!]
  upsert: [SubGroupMemberUpsertWithWhereUniqueWithoutMemberInput!]
}

input SubGroupMemberUpdateManyWithoutUseridInput {
  create: [SubGroupMemberCreateWithoutUseridInput!]
  connect: [SubGroupMemberWhereUniqueInput!]
  set: [SubGroupMemberWhereUniqueInput!]
  disconnect: [SubGroupMemberWhereUniqueInput!]
  delete: [SubGroupMemberWhereUniqueInput!]
  update: [SubGroupMemberUpdateWithWhereUniqueWithoutUseridInput!]
  updateMany: [SubGroupMemberUpdateManyWithWhereNestedInput!]
  deleteMany: [SubGroupMemberScalarWhereInput!]
  upsert: [SubGroupMemberUpsertWithWhereUniqueWithoutUseridInput!]
}

input SubGroupMemberUpdateManyWithWhereNestedInput {
  where: SubGroupMemberScalarWhereInput!
  data: SubGroupMemberUpdateManyDataInput!
}

input SubGroupMemberUpdateWithoutMemberDataInput {
  status: MemberStatus
  description: String
  userid: UserUpdateOneRequiredWithoutSubgroupmembersInput
}

input SubGroupMemberUpdateWithoutUseridDataInput {
  status: MemberStatus
  description: String
  member: SubGroupUpdateOneRequiredWithoutMembersInput
}

input SubGroupMemberUpdateWithWhereUniqueWithoutMemberInput {
  where: SubGroupMemberWhereUniqueInput!
  data: SubGroupMemberUpdateWithoutMemberDataInput!
}

input SubGroupMemberUpdateWithWhereUniqueWithoutUseridInput {
  where: SubGroupMemberWhereUniqueInput!
  data: SubGroupMemberUpdateWithoutUseridDataInput!
}

input SubGroupMemberUpsertWithWhereUniqueWithoutMemberInput {
  where: SubGroupMemberWhereUniqueInput!
  update: SubGroupMemberUpdateWithoutMemberDataInput!
  create: SubGroupMemberCreateWithoutMemberInput!
}

input SubGroupMemberUpsertWithWhereUniqueWithoutUseridInput {
  where: SubGroupMemberWhereUniqueInput!
  update: SubGroupMemberUpdateWithoutUseridDataInput!
  create: SubGroupMemberCreateWithoutUseridInput!
}

input SubGroupMemberWhereInput {
  """Logical AND on all given filters."""
  AND: [SubGroupMemberWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubGroupMemberWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubGroupMemberWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: MemberStatus

  """All values that are not equal to given value."""
  status_not: MemberStatus

  """All values that are contained in given list."""
  status_in: [MemberStatus!]

  """All values that are not contained in given list."""
  status_not_in: [MemberStatus!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  userid: UserWhereInput
  member: SubGroupWhereInput
}

input SubGroupMemberWhereUniqueInput {
  id: ID
}

enum SubGroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SubGroupPreviousValues {
  id: ID!
  name: String!
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input SubGroupScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SubGroupScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubGroupScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubGroupScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type SubGroupSubscriptionPayload {
  mutation: MutationType!
  node: SubGroup
  updatedFields: [String!]
  previousValues: SubGroupPreviousValues
}

input SubGroupSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubGroupSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubGroupSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubGroupSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubGroupWhereInput
}

input SubGroupUpdateInput {
  name: String
  description: String
  groupid: GroupUpdateOneRequiredWithoutSubgroupsInput
  members: SubGroupMemberUpdateManyWithoutMemberInput
  subgroupRoles: RoleUpdateManyWithoutSubgroupInput
  subjects: SubjectUpdateManyWithoutSubgroupInput
}

input SubGroupUpdateManyDataInput {
  name: String
  description: String
}

input SubGroupUpdateManyMutationInput {
  name: String
  description: String
}

input SubGroupUpdateManyWithoutGroupidInput {
  create: [SubGroupCreateWithoutGroupidInput!]
  connect: [SubGroupWhereUniqueInput!]
  set: [SubGroupWhereUniqueInput!]
  disconnect: [SubGroupWhereUniqueInput!]
  delete: [SubGroupWhereUniqueInput!]
  update: [SubGroupUpdateWithWhereUniqueWithoutGroupidInput!]
  updateMany: [SubGroupUpdateManyWithWhereNestedInput!]
  deleteMany: [SubGroupScalarWhereInput!]
  upsert: [SubGroupUpsertWithWhereUniqueWithoutGroupidInput!]
}

input SubGroupUpdateManyWithWhereNestedInput {
  where: SubGroupScalarWhereInput!
  data: SubGroupUpdateManyDataInput!
}

input SubGroupUpdateOneRequiredWithoutMembersInput {
  create: SubGroupCreateWithoutMembersInput
  connect: SubGroupWhereUniqueInput
  update: SubGroupUpdateWithoutMembersDataInput
  upsert: SubGroupUpsertWithoutMembersInput
}

input SubGroupUpdateOneWithoutSubgroupRolesInput {
  create: SubGroupCreateWithoutSubgroupRolesInput
  connect: SubGroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SubGroupUpdateWithoutSubgroupRolesDataInput
  upsert: SubGroupUpsertWithoutSubgroupRolesInput
}

input SubGroupUpdateOneWithoutSubjectsInput {
  create: SubGroupCreateWithoutSubjectsInput
  connect: SubGroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SubGroupUpdateWithoutSubjectsDataInput
  upsert: SubGroupUpsertWithoutSubjectsInput
}

input SubGroupUpdateWithoutGroupidDataInput {
  name: String
  description: String
  members: SubGroupMemberUpdateManyWithoutMemberInput
  subgroupRoles: RoleUpdateManyWithoutSubgroupInput
  subjects: SubjectUpdateManyWithoutSubgroupInput
}

input SubGroupUpdateWithoutMembersDataInput {
  name: String
  description: String
  groupid: GroupUpdateOneRequiredWithoutSubgroupsInput
  subgroupRoles: RoleUpdateManyWithoutSubgroupInput
  subjects: SubjectUpdateManyWithoutSubgroupInput
}

input SubGroupUpdateWithoutSubgroupRolesDataInput {
  name: String
  description: String
  groupid: GroupUpdateOneRequiredWithoutSubgroupsInput
  members: SubGroupMemberUpdateManyWithoutMemberInput
  subjects: SubjectUpdateManyWithoutSubgroupInput
}

input SubGroupUpdateWithoutSubjectsDataInput {
  name: String
  description: String
  groupid: GroupUpdateOneRequiredWithoutSubgroupsInput
  members: SubGroupMemberUpdateManyWithoutMemberInput
  subgroupRoles: RoleUpdateManyWithoutSubgroupInput
}

input SubGroupUpdateWithWhereUniqueWithoutGroupidInput {
  where: SubGroupWhereUniqueInput!
  data: SubGroupUpdateWithoutGroupidDataInput!
}

input SubGroupUpsertWithoutMembersInput {
  update: SubGroupUpdateWithoutMembersDataInput!
  create: SubGroupCreateWithoutMembersInput!
}

input SubGroupUpsertWithoutSubgroupRolesInput {
  update: SubGroupUpdateWithoutSubgroupRolesDataInput!
  create: SubGroupCreateWithoutSubgroupRolesInput!
}

input SubGroupUpsertWithoutSubjectsInput {
  update: SubGroupUpdateWithoutSubjectsDataInput!
  create: SubGroupCreateWithoutSubjectsInput!
}

input SubGroupUpsertWithWhereUniqueWithoutGroupidInput {
  where: SubGroupWhereUniqueInput!
  update: SubGroupUpdateWithoutGroupidDataInput!
  create: SubGroupCreateWithoutGroupidInput!
}

input SubGroupWhereInput {
  """Logical AND on all given filters."""
  AND: [SubGroupWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubGroupWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubGroupWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  groupid: GroupWhereInput
  members_every: SubGroupMemberWhereInput
  members_some: SubGroupMemberWhereInput
  members_none: SubGroupMemberWhereInput
  subgroupRoles_every: RoleWhereInput
  subgroupRoles_some: RoleWhereInput
  subgroupRoles_none: RoleWhereInput
  subjects_every: SubjectWhereInput
  subjects_some: SubjectWhereInput
  subjects_none: SubjectWhereInput
}

input SubGroupWhereUniqueInput {
  id: ID
}

type Subject implements Node {
  id: ID!
  name: String!
  medium: Medium
  std: String!
  board: String
  group: Group
  subgroup: SubGroup
}

"""A connection to a list of items."""
type SubjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubjectEdge]!
  aggregate: AggregateSubject!
}

input SubjectCreateInput {
  id: ID
  name: String!
  std: String!
  board: String
  medium: MediumCreateOneWithoutSubjectsInput
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
}

input SubjectCreateManyInput {
  create: [SubjectCreateInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateManyWithoutGroupInput {
  create: [SubjectCreateWithoutGroupInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateManyWithoutMediumInput {
  create: [SubjectCreateWithoutMediumInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateManyWithoutSubgroupInput {
  create: [SubjectCreateWithoutSubgroupInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateWithoutGroupInput {
  id: ID
  name: String!
  std: String!
  board: String
  medium: MediumCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
}

input SubjectCreateWithoutMediumInput {
  id: ID
  name: String!
  std: String!
  board: String
  group: GroupCreateOneWithoutSubjectsInput
  subgroup: SubGroupCreateOneWithoutSubjectsInput
}

input SubjectCreateWithoutSubgroupInput {
  id: ID
  name: String!
  std: String!
  board: String
  medium: MediumCreateOneWithoutSubjectsInput
  group: GroupCreateOneWithoutSubjectsInput
}

"""An edge in a connection."""
type SubjectEdge {
  """The item at the end of the edge."""
  node: Subject!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  std_ASC
  std_DESC
  board_ASC
  board_DESC
}

type SubjectPreviousValues {
  id: ID!
  name: String!
  std: String!
  board: String
}

input SubjectScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  std: String

  """All values that are not equal to given value."""
  std_not: String

  """All values that are contained in given list."""
  std_in: [String!]

  """All values that are not contained in given list."""
  std_not_in: [String!]

  """All values less than the given value."""
  std_lt: String

  """All values less than or equal the given value."""
  std_lte: String

  """All values greater than the given value."""
  std_gt: String

  """All values greater than or equal the given value."""
  std_gte: String

  """All values containing the given string."""
  std_contains: String

  """All values not containing the given string."""
  std_not_contains: String

  """All values starting with the given string."""
  std_starts_with: String

  """All values not starting with the given string."""
  std_not_starts_with: String

  """All values ending with the given string."""
  std_ends_with: String

  """All values not ending with the given string."""
  std_not_ends_with: String
  board: String

  """All values that are not equal to given value."""
  board_not: String

  """All values that are contained in given list."""
  board_in: [String!]

  """All values that are not contained in given list."""
  board_not_in: [String!]

  """All values less than the given value."""
  board_lt: String

  """All values less than or equal the given value."""
  board_lte: String

  """All values greater than the given value."""
  board_gt: String

  """All values greater than or equal the given value."""
  board_gte: String

  """All values containing the given string."""
  board_contains: String

  """All values not containing the given string."""
  board_not_contains: String

  """All values starting with the given string."""
  board_starts_with: String

  """All values not starting with the given string."""
  board_not_starts_with: String

  """All values ending with the given string."""
  board_ends_with: String

  """All values not ending with the given string."""
  board_not_ends_with: String
}

type SubjectSubscription implements Node {
  id: ID!
  subsType: String
  mySubjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  userid: User!
  subscribedAs: String
}

"""A connection to a list of items."""
type SubjectSubscriptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubjectSubscriptionEdge]!
  aggregate: AggregateSubjectSubscription!
}

input SubjectSubscriptionCreateInput {
  id: ID
  subsType: String
  subscribedAs: String
  mySubjects: SubjectCreateManyInput
  userid: UserCreateOneWithoutSubjectSubscriptionInput!
}

input SubjectSubscriptionCreateManyWithoutUseridInput {
  create: [SubjectSubscriptionCreateWithoutUseridInput!]
  connect: [SubjectSubscriptionWhereUniqueInput!]
}

input SubjectSubscriptionCreateWithoutUseridInput {
  id: ID
  subsType: String
  subscribedAs: String
  mySubjects: SubjectCreateManyInput
}

"""An edge in a connection."""
type SubjectSubscriptionEdge {
  """The item at the end of the edge."""
  node: SubjectSubscription!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubjectSubscriptionOrderByInput {
  id_ASC
  id_DESC
  subsType_ASC
  subsType_DESC
  subscribedAs_ASC
  subscribedAs_DESC
}

type SubjectSubscriptionPayload {
  mutation: MutationType!
  node: Subject
  updatedFields: [String!]
  previousValues: SubjectPreviousValues
}

type SubjectSubscriptionPreviousValues {
  id: ID!
  subsType: String
  subscribedAs: String
}

input SubjectSubscriptionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectSubscriptionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectSubscriptionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectSubscriptionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  subsType: String

  """All values that are not equal to given value."""
  subsType_not: String

  """All values that are contained in given list."""
  subsType_in: [String!]

  """All values that are not contained in given list."""
  subsType_not_in: [String!]

  """All values less than the given value."""
  subsType_lt: String

  """All values less than or equal the given value."""
  subsType_lte: String

  """All values greater than the given value."""
  subsType_gt: String

  """All values greater than or equal the given value."""
  subsType_gte: String

  """All values containing the given string."""
  subsType_contains: String

  """All values not containing the given string."""
  subsType_not_contains: String

  """All values starting with the given string."""
  subsType_starts_with: String

  """All values not starting with the given string."""
  subsType_not_starts_with: String

  """All values ending with the given string."""
  subsType_ends_with: String

  """All values not ending with the given string."""
  subsType_not_ends_with: String
  subscribedAs: String

  """All values that are not equal to given value."""
  subscribedAs_not: String

  """All values that are contained in given list."""
  subscribedAs_in: [String!]

  """All values that are not contained in given list."""
  subscribedAs_not_in: [String!]

  """All values less than the given value."""
  subscribedAs_lt: String

  """All values less than or equal the given value."""
  subscribedAs_lte: String

  """All values greater than the given value."""
  subscribedAs_gt: String

  """All values greater than or equal the given value."""
  subscribedAs_gte: String

  """All values containing the given string."""
  subscribedAs_contains: String

  """All values not containing the given string."""
  subscribedAs_not_contains: String

  """All values starting with the given string."""
  subscribedAs_starts_with: String

  """All values not starting with the given string."""
  subscribedAs_not_starts_with: String

  """All values ending with the given string."""
  subscribedAs_ends_with: String

  """All values not ending with the given string."""
  subscribedAs_not_ends_with: String
}

type SubjectSubscriptionSubscriptionPayload {
  mutation: MutationType!
  node: SubjectSubscription
  updatedFields: [String!]
  previousValues: SubjectSubscriptionPreviousValues
}

input SubjectSubscriptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectSubscriptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectSubscriptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectSubscriptionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubjectSubscriptionWhereInput
}

input SubjectSubscriptionUpdateInput {
  subsType: String
  subscribedAs: String
  mySubjects: SubjectUpdateManyInput
  userid: UserUpdateOneRequiredWithoutSubjectSubscriptionInput
}

input SubjectSubscriptionUpdateManyDataInput {
  subsType: String
  subscribedAs: String
}

input SubjectSubscriptionUpdateManyMutationInput {
  subsType: String
  subscribedAs: String
}

input SubjectSubscriptionUpdateManyWithoutUseridInput {
  create: [SubjectSubscriptionCreateWithoutUseridInput!]
  connect: [SubjectSubscriptionWhereUniqueInput!]
  set: [SubjectSubscriptionWhereUniqueInput!]
  disconnect: [SubjectSubscriptionWhereUniqueInput!]
  delete: [SubjectSubscriptionWhereUniqueInput!]
  update: [SubjectSubscriptionUpdateWithWhereUniqueWithoutUseridInput!]
  updateMany: [SubjectSubscriptionUpdateManyWithWhereNestedInput!]
  deleteMany: [SubjectSubscriptionScalarWhereInput!]
  upsert: [SubjectSubscriptionUpsertWithWhereUniqueWithoutUseridInput!]
}

input SubjectSubscriptionUpdateManyWithWhereNestedInput {
  where: SubjectSubscriptionScalarWhereInput!
  data: SubjectSubscriptionUpdateManyDataInput!
}

input SubjectSubscriptionUpdateWithoutUseridDataInput {
  subsType: String
  subscribedAs: String
  mySubjects: SubjectUpdateManyInput
}

input SubjectSubscriptionUpdateWithWhereUniqueWithoutUseridInput {
  where: SubjectSubscriptionWhereUniqueInput!
  data: SubjectSubscriptionUpdateWithoutUseridDataInput!
}

input SubjectSubscriptionUpsertWithWhereUniqueWithoutUseridInput {
  where: SubjectSubscriptionWhereUniqueInput!
  update: SubjectSubscriptionUpdateWithoutUseridDataInput!
  create: SubjectSubscriptionCreateWithoutUseridInput!
}

input SubjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectSubscriptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  subsType: String

  """All values that are not equal to given value."""
  subsType_not: String

  """All values that are contained in given list."""
  subsType_in: [String!]

  """All values that are not contained in given list."""
  subsType_not_in: [String!]

  """All values less than the given value."""
  subsType_lt: String

  """All values less than or equal the given value."""
  subsType_lte: String

  """All values greater than the given value."""
  subsType_gt: String

  """All values greater than or equal the given value."""
  subsType_gte: String

  """All values containing the given string."""
  subsType_contains: String

  """All values not containing the given string."""
  subsType_not_contains: String

  """All values starting with the given string."""
  subsType_starts_with: String

  """All values not starting with the given string."""
  subsType_not_starts_with: String

  """All values ending with the given string."""
  subsType_ends_with: String

  """All values not ending with the given string."""
  subsType_not_ends_with: String
  subscribedAs: String

  """All values that are not equal to given value."""
  subscribedAs_not: String

  """All values that are contained in given list."""
  subscribedAs_in: [String!]

  """All values that are not contained in given list."""
  subscribedAs_not_in: [String!]

  """All values less than the given value."""
  subscribedAs_lt: String

  """All values less than or equal the given value."""
  subscribedAs_lte: String

  """All values greater than the given value."""
  subscribedAs_gt: String

  """All values greater than or equal the given value."""
  subscribedAs_gte: String

  """All values containing the given string."""
  subscribedAs_contains: String

  """All values not containing the given string."""
  subscribedAs_not_contains: String

  """All values starting with the given string."""
  subscribedAs_starts_with: String

  """All values not starting with the given string."""
  subscribedAs_not_starts_with: String

  """All values ending with the given string."""
  subscribedAs_ends_with: String

  """All values not ending with the given string."""
  subscribedAs_not_ends_with: String
  mySubjects_every: SubjectWhereInput
  mySubjects_some: SubjectWhereInput
  mySubjects_none: SubjectWhereInput
  userid: UserWhereInput
}

input SubjectSubscriptionWhereUniqueInput {
  id: ID
}

input SubjectUpdateDataInput {
  name: String
  std: String
  board: String
  medium: MediumUpdateOneWithoutSubjectsInput
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
}

input SubjectUpdateInput {
  name: String
  std: String
  board: String
  medium: MediumUpdateOneWithoutSubjectsInput
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
}

input SubjectUpdateManyDataInput {
  name: String
  std: String
  board: String
}

input SubjectUpdateManyInput {
  create: [SubjectCreateInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  delete: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueNestedInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
  deleteMany: [SubjectScalarWhereInput!]
  upsert: [SubjectUpsertWithWhereUniqueNestedInput!]
}

input SubjectUpdateManyMutationInput {
  name: String
  std: String
  board: String
}

input SubjectUpdateManyWithoutGroupInput {
  create: [SubjectCreateWithoutGroupInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  delete: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
  deleteMany: [SubjectScalarWhereInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutGroupInput!]
}

input SubjectUpdateManyWithoutMediumInput {
  create: [SubjectCreateWithoutMediumInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  delete: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutMediumInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
  deleteMany: [SubjectScalarWhereInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutMediumInput!]
}

input SubjectUpdateManyWithoutSubgroupInput {
  create: [SubjectCreateWithoutSubgroupInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  delete: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutSubgroupInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
  deleteMany: [SubjectScalarWhereInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutSubgroupInput!]
}

input SubjectUpdateManyWithWhereNestedInput {
  where: SubjectScalarWhereInput!
  data: SubjectUpdateManyDataInput!
}

input SubjectUpdateWithoutGroupDataInput {
  name: String
  std: String
  board: String
  medium: MediumUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
}

input SubjectUpdateWithoutMediumDataInput {
  name: String
  std: String
  board: String
  group: GroupUpdateOneWithoutSubjectsInput
  subgroup: SubGroupUpdateOneWithoutSubjectsInput
}

input SubjectUpdateWithoutSubgroupDataInput {
  name: String
  std: String
  board: String
  medium: MediumUpdateOneWithoutSubjectsInput
  group: GroupUpdateOneWithoutSubjectsInput
}

input SubjectUpdateWithWhereUniqueNestedInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateDataInput!
}

input SubjectUpdateWithWhereUniqueWithoutGroupInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutGroupDataInput!
}

input SubjectUpdateWithWhereUniqueWithoutMediumInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutMediumDataInput!
}

input SubjectUpdateWithWhereUniqueWithoutSubgroupInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutSubgroupDataInput!
}

input SubjectUpsertWithWhereUniqueNestedInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateDataInput!
  create: SubjectCreateInput!
}

input SubjectUpsertWithWhereUniqueWithoutGroupInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutGroupDataInput!
  create: SubjectCreateWithoutGroupInput!
}

input SubjectUpsertWithWhereUniqueWithoutMediumInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutMediumDataInput!
  create: SubjectCreateWithoutMediumInput!
}

input SubjectUpsertWithWhereUniqueWithoutSubgroupInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutSubgroupDataInput!
  create: SubjectCreateWithoutSubgroupInput!
}

input SubjectWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  std: String

  """All values that are not equal to given value."""
  std_not: String

  """All values that are contained in given list."""
  std_in: [String!]

  """All values that are not contained in given list."""
  std_not_in: [String!]

  """All values less than the given value."""
  std_lt: String

  """All values less than or equal the given value."""
  std_lte: String

  """All values greater than the given value."""
  std_gt: String

  """All values greater than or equal the given value."""
  std_gte: String

  """All values containing the given string."""
  std_contains: String

  """All values not containing the given string."""
  std_not_contains: String

  """All values starting with the given string."""
  std_starts_with: String

  """All values not starting with the given string."""
  std_not_starts_with: String

  """All values ending with the given string."""
  std_ends_with: String

  """All values not ending with the given string."""
  std_not_ends_with: String
  board: String

  """All values that are not equal to given value."""
  board_not: String

  """All values that are contained in given list."""
  board_in: [String!]

  """All values that are not contained in given list."""
  board_not_in: [String!]

  """All values less than the given value."""
  board_lt: String

  """All values less than or equal the given value."""
  board_lte: String

  """All values greater than the given value."""
  board_gt: String

  """All values greater than or equal the given value."""
  board_gte: String

  """All values containing the given string."""
  board_contains: String

  """All values not containing the given string."""
  board_not_contains: String

  """All values starting with the given string."""
  board_starts_with: String

  """All values not starting with the given string."""
  board_not_starts_with: String

  """All values ending with the given string."""
  board_ends_with: String

  """All values not ending with the given string."""
  board_not_ends_with: String
  medium: MediumWhereInput
  group: GroupWhereInput
  subgroup: SubGroupWhereInput
}

input SubjectWhereUniqueInput {
  id: ID
}

type Suborg implements Node {
  id: ID!
  name: String!
  description: String
  author(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  org: Organization!
  userGroups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  suborgRoles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type SuborgConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SuborgEdge]!
  aggregate: AggregateSuborg!
}

input SuborgCreateInput {
  id: ID
  name: String!
  description: String
  author: UserCreateManyWithoutSuborgInput
  org: OrganizationCreateOneWithoutSuborgsInput!
  userGroups: GroupCreateManyWithoutSuborgidInput
  suborgRoles: RoleCreateManyInput
}

input SuborgCreateManyWithoutAuthorInput {
  create: [SuborgCreateWithoutAuthorInput!]
  connect: [SuborgWhereUniqueInput!]
}

input SuborgCreateManyWithoutOrgInput {
  create: [SuborgCreateWithoutOrgInput!]
  connect: [SuborgWhereUniqueInput!]
}

input SuborgCreateOneInput {
  create: SuborgCreateInput
  connect: SuborgWhereUniqueInput
}

input SuborgCreateOneWithoutUserGroupsInput {
  create: SuborgCreateWithoutUserGroupsInput
  connect: SuborgWhereUniqueInput
}

input SuborgCreateWithoutAuthorInput {
  id: ID
  name: String!
  description: String
  org: OrganizationCreateOneWithoutSuborgsInput!
  userGroups: GroupCreateManyWithoutSuborgidInput
  suborgRoles: RoleCreateManyInput
}

input SuborgCreateWithoutOrgInput {
  id: ID
  name: String!
  description: String
  author: UserCreateManyWithoutSuborgInput
  userGroups: GroupCreateManyWithoutSuborgidInput
  suborgRoles: RoleCreateManyInput
}

input SuborgCreateWithoutUserGroupsInput {
  id: ID
  name: String!
  description: String
  author: UserCreateManyWithoutSuborgInput
  org: OrganizationCreateOneWithoutSuborgsInput!
  suborgRoles: RoleCreateManyInput
}

"""An edge in a connection."""
type SuborgEdge {
  """The item at the end of the edge."""
  node: Suborg!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SuborgOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SuborgPreviousValues {
  id: ID!
  name: String!
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input SuborgScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SuborgScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SuborgScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SuborgScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type SuborgSubscriptionPayload {
  mutation: MutationType!
  node: Suborg
  updatedFields: [String!]
  previousValues: SuborgPreviousValues
}

input SuborgSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SuborgSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SuborgSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SuborgSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SuborgWhereInput
}

input SuborgUpdateDataInput {
  name: String
  description: String
  author: UserUpdateManyWithoutSuborgInput
  org: OrganizationUpdateOneRequiredWithoutSuborgsInput
  userGroups: GroupUpdateManyWithoutSuborgidInput
  suborgRoles: RoleUpdateManyInput
}

input SuborgUpdateInput {
  name: String
  description: String
  author: UserUpdateManyWithoutSuborgInput
  org: OrganizationUpdateOneRequiredWithoutSuborgsInput
  userGroups: GroupUpdateManyWithoutSuborgidInput
  suborgRoles: RoleUpdateManyInput
}

input SuborgUpdateManyDataInput {
  name: String
  description: String
}

input SuborgUpdateManyMutationInput {
  name: String
  description: String
}

input SuborgUpdateManyWithoutAuthorInput {
  create: [SuborgCreateWithoutAuthorInput!]
  connect: [SuborgWhereUniqueInput!]
  set: [SuborgWhereUniqueInput!]
  disconnect: [SuborgWhereUniqueInput!]
  delete: [SuborgWhereUniqueInput!]
  update: [SuborgUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [SuborgUpdateManyWithWhereNestedInput!]
  deleteMany: [SuborgScalarWhereInput!]
  upsert: [SuborgUpsertWithWhereUniqueWithoutAuthorInput!]
}

input SuborgUpdateManyWithoutOrgInput {
  create: [SuborgCreateWithoutOrgInput!]
  connect: [SuborgWhereUniqueInput!]
  set: [SuborgWhereUniqueInput!]
  disconnect: [SuborgWhereUniqueInput!]
  delete: [SuborgWhereUniqueInput!]
  update: [SuborgUpdateWithWhereUniqueWithoutOrgInput!]
  updateMany: [SuborgUpdateManyWithWhereNestedInput!]
  deleteMany: [SuborgScalarWhereInput!]
  upsert: [SuborgUpsertWithWhereUniqueWithoutOrgInput!]
}

input SuborgUpdateManyWithWhereNestedInput {
  where: SuborgScalarWhereInput!
  data: SuborgUpdateManyDataInput!
}

input SuborgUpdateOneInput {
  create: SuborgCreateInput
  connect: SuborgWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SuborgUpdateDataInput
  upsert: SuborgUpsertNestedInput
}

input SuborgUpdateOneRequiredWithoutUserGroupsInput {
  create: SuborgCreateWithoutUserGroupsInput
  connect: SuborgWhereUniqueInput
  update: SuborgUpdateWithoutUserGroupsDataInput
  upsert: SuborgUpsertWithoutUserGroupsInput
}

input SuborgUpdateWithoutAuthorDataInput {
  name: String
  description: String
  org: OrganizationUpdateOneRequiredWithoutSuborgsInput
  userGroups: GroupUpdateManyWithoutSuborgidInput
  suborgRoles: RoleUpdateManyInput
}

input SuborgUpdateWithoutOrgDataInput {
  name: String
  description: String
  author: UserUpdateManyWithoutSuborgInput
  userGroups: GroupUpdateManyWithoutSuborgidInput
  suborgRoles: RoleUpdateManyInput
}

input SuborgUpdateWithoutUserGroupsDataInput {
  name: String
  description: String
  author: UserUpdateManyWithoutSuborgInput
  org: OrganizationUpdateOneRequiredWithoutSuborgsInput
  suborgRoles: RoleUpdateManyInput
}

input SuborgUpdateWithWhereUniqueWithoutAuthorInput {
  where: SuborgWhereUniqueInput!
  data: SuborgUpdateWithoutAuthorDataInput!
}

input SuborgUpdateWithWhereUniqueWithoutOrgInput {
  where: SuborgWhereUniqueInput!
  data: SuborgUpdateWithoutOrgDataInput!
}

input SuborgUpsertNestedInput {
  update: SuborgUpdateDataInput!
  create: SuborgCreateInput!
}

input SuborgUpsertWithoutUserGroupsInput {
  update: SuborgUpdateWithoutUserGroupsDataInput!
  create: SuborgCreateWithoutUserGroupsInput!
}

input SuborgUpsertWithWhereUniqueWithoutAuthorInput {
  where: SuborgWhereUniqueInput!
  update: SuborgUpdateWithoutAuthorDataInput!
  create: SuborgCreateWithoutAuthorInput!
}

input SuborgUpsertWithWhereUniqueWithoutOrgInput {
  where: SuborgWhereUniqueInput!
  update: SuborgUpdateWithoutOrgDataInput!
  create: SuborgCreateWithoutOrgInput!
}

input SuborgWhereInput {
  """Logical AND on all given filters."""
  AND: [SuborgWhereInput!]

  """Logical OR on all given filters."""
  OR: [SuborgWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SuborgWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author_every: UserWhereInput
  author_some: UserWhereInput
  author_none: UserWhereInput
  org: OrganizationWhereInput
  userGroups_every: GroupWhereInput
  userGroups_some: GroupWhereInput
  userGroups_none: GroupWhereInput
  suborgRoles_every: RoleWhereInput
  suborgRoles_some: RoleWhereInput
  suborgRoles_none: RoleWhereInput
}

input SuborgWhereUniqueInput {
  id: ID
}

type Subscription {
  organization(where: OrganizationSubscriptionWhereInput): OrganizationSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  groupMember(where: GroupMemberSubscriptionWhereInput): GroupMemberSubscriptionPayload
  subGroup(where: SubGroupSubscriptionWhereInput): SubGroupSubscriptionPayload
  subGroupMember(where: SubGroupMemberSubscriptionWhereInput): SubGroupMemberSubscriptionPayload
  roleMember(where: RoleMemberSubscriptionWhereInput): RoleMemberSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  medium(where: MediumSubscriptionWhereInput): MediumSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  subjectSubscription(where: SubjectSubscriptionSubscriptionWhereInput): SubjectSubscriptionSubscriptionPayload
  profile(where: ProfileSubscriptionWhereInput): ProfileSubscriptionPayload
  studentProfile(where: StudentProfileSubscriptionWhereInput): StudentProfileSubscriptionPayload
  suborg(where: SuborgSubscriptionWhereInput): SuborgSubscriptionPayload
  subject(where: SubjectSubscriptionWhereInput): SubjectSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
}

type User implements Node {
  id: ID!
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  org: Organization
  suborg(where: SuborgWhereInput, orderBy: SuborgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Suborg!]
  groupmembers(where: GroupMemberWhereInput, orderBy: GroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupMember!]
  subgroupmembers(where: SubGroupMemberWhereInput, orderBy: SubGroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubGroupMember!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  myRoles(where: RoleMemberWhereInput, orderBy: RoleMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RoleMember!]
  myprofiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile!]
  subjectSubscription(where: SubjectSubscriptionWhereInput, orderBy: SubjectSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubjectSubscription!]
  createdBy: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  myRoles: RoleMemberCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
}

input UserCreateManyWithoutOrgInput {
  create: [UserCreateWithoutOrgInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutSuborgInput {
  create: [UserCreateWithoutSuborgInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutGroupmembersInput {
  create: UserCreateWithoutGroupmembersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMyprofilesInput {
  create: UserCreateWithoutMyprofilesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMyRolesInput {
  create: UserCreateWithoutMyRolesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSubgroupmembersInput {
  create: UserCreateWithoutSubgroupmembersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSubjectSubscriptionInput {
  create: UserCreateWithoutSubjectSubscriptionInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  myRoles: RoleMemberCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
}

input UserCreateWithoutGroupmembersInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  myRoles: RoleMemberCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
}

input UserCreateWithoutMyprofilesInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  myRoles: RoleMemberCreateManyWithoutUseridInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
}

input UserCreateWithoutMyRolesInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
}

input UserCreateWithoutOrgInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  myRoles: RoleMemberCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
}

input UserCreateWithoutPostsInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  comments: CommentCreateManyWithoutAuthorInput
  myRoles: RoleMemberCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
}

input UserCreateWithoutSubgroupmembersInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  myRoles: RoleMemberCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
}

input UserCreateWithoutSubjectSubscriptionInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  suborg: SuborgCreateManyWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  myRoles: RoleMemberCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
}

input UserCreateWithoutSuborgInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  org: OrganizationCreateOneWithoutAuthorInput
  groupmembers: GroupMemberCreateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberCreateManyWithoutUseridInput
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  myRoles: RoleMemberCreateManyWithoutUseridInput
  myprofiles: ProfileCreateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionCreateManyWithoutUseridInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdBy_ASC
  createdBy_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  createdBy: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstname: String

  """All values that are not equal to given value."""
  firstname_not: String

  """All values that are contained in given list."""
  firstname_in: [String!]

  """All values that are not contained in given list."""
  firstname_not_in: [String!]

  """All values less than the given value."""
  firstname_lt: String

  """All values less than or equal the given value."""
  firstname_lte: String

  """All values greater than the given value."""
  firstname_gt: String

  """All values greater than or equal the given value."""
  firstname_gte: String

  """All values containing the given string."""
  firstname_contains: String

  """All values not containing the given string."""
  firstname_not_contains: String

  """All values starting with the given string."""
  firstname_starts_with: String

  """All values not starting with the given string."""
  firstname_not_starts_with: String

  """All values ending with the given string."""
  firstname_ends_with: String

  """All values not ending with the given string."""
  firstname_not_ends_with: String
  lastname: String

  """All values that are not equal to given value."""
  lastname_not: String

  """All values that are contained in given list."""
  lastname_in: [String!]

  """All values that are not contained in given list."""
  lastname_not_in: [String!]

  """All values less than the given value."""
  lastname_lt: String

  """All values less than or equal the given value."""
  lastname_lte: String

  """All values greater than the given value."""
  lastname_gt: String

  """All values greater than or equal the given value."""
  lastname_gte: String

  """All values containing the given string."""
  lastname_contains: String

  """All values not containing the given string."""
  lastname_not_contains: String

  """All values starting with the given string."""
  lastname_starts_with: String

  """All values not starting with the given string."""
  lastname_not_starts_with: String

  """All values ending with the given string."""
  lastname_ends_with: String

  """All values not ending with the given string."""
  lastname_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  createdBy: String

  """All values that are not equal to given value."""
  createdBy_not: String

  """All values that are contained in given list."""
  createdBy_in: [String!]

  """All values that are not contained in given list."""
  createdBy_not_in: [String!]

  """All values less than the given value."""
  createdBy_lt: String

  """All values less than or equal the given value."""
  createdBy_lte: String

  """All values greater than the given value."""
  createdBy_gt: String

  """All values greater than or equal the given value."""
  createdBy_gte: String

  """All values containing the given string."""
  createdBy_contains: String

  """All values not containing the given string."""
  createdBy_not_contains: String

  """All values starting with the given string."""
  createdBy_starts_with: String

  """All values not starting with the given string."""
  createdBy_not_starts_with: String

  """All values ending with the given string."""
  createdBy_ends_with: String

  """All values not ending with the given string."""
  createdBy_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  myRoles: RoleMemberUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
}

input UserUpdateManyDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
}

input UserUpdateManyMutationInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
}

input UserUpdateManyWithoutOrgInput {
  create: [UserCreateWithoutOrgInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutOrgInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutOrgInput!]
}

input UserUpdateManyWithoutSuborgInput {
  create: [UserCreateWithoutSuborgInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSuborgInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSuborgInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutGroupmembersInput {
  create: UserCreateWithoutGroupmembersInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutGroupmembersDataInput
  upsert: UserUpsertWithoutGroupmembersInput
}

input UserUpdateOneRequiredWithoutMyprofilesInput {
  create: UserCreateWithoutMyprofilesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutMyprofilesDataInput
  upsert: UserUpsertWithoutMyprofilesInput
}

input UserUpdateOneRequiredWithoutMyRolesInput {
  create: UserCreateWithoutMyRolesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutMyRolesDataInput
  upsert: UserUpsertWithoutMyRolesInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneRequiredWithoutSubgroupmembersInput {
  create: UserCreateWithoutSubgroupmembersInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutSubgroupmembersDataInput
  upsert: UserUpsertWithoutSubgroupmembersInput
}

input UserUpdateOneRequiredWithoutSubjectSubscriptionInput {
  create: UserCreateWithoutSubjectSubscriptionInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutSubjectSubscriptionDataInput
  upsert: UserUpsertWithoutSubjectSubscriptionInput
}

input UserUpdateWithoutCommentsDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  myRoles: RoleMemberUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
}

input UserUpdateWithoutGroupmembersDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  myRoles: RoleMemberUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
}

input UserUpdateWithoutMyprofilesDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  myRoles: RoleMemberUpdateManyWithoutUseridInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
}

input UserUpdateWithoutMyRolesDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
}

input UserUpdateWithoutOrgDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  myRoles: RoleMemberUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
}

input UserUpdateWithoutPostsDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  comments: CommentUpdateManyWithoutAuthorInput
  myRoles: RoleMemberUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
}

input UserUpdateWithoutSubgroupmembersDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  myRoles: RoleMemberUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
}

input UserUpdateWithoutSubjectSubscriptionDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  suborg: SuborgUpdateManyWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  myRoles: RoleMemberUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutSuborgDataInput {
  firstname: String
  lastname: String
  email: String
  password: String
  createdBy: String
  org: OrganizationUpdateOneWithoutAuthorInput
  groupmembers: GroupMemberUpdateManyWithoutUseridInput
  subgroupmembers: SubGroupMemberUpdateManyWithoutUseridInput
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  myRoles: RoleMemberUpdateManyWithoutUseridInput
  myprofiles: ProfileUpdateManyWithoutUserIdInput
  subjectSubscription: SubjectSubscriptionUpdateManyWithoutUseridInput
}

input UserUpdateWithWhereUniqueWithoutOrgInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutOrgDataInput!
}

input UserUpdateWithWhereUniqueWithoutSuborgInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSuborgDataInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutGroupmembersInput {
  update: UserUpdateWithoutGroupmembersDataInput!
  create: UserCreateWithoutGroupmembersInput!
}

input UserUpsertWithoutMyprofilesInput {
  update: UserUpdateWithoutMyprofilesDataInput!
  create: UserCreateWithoutMyprofilesInput!
}

input UserUpsertWithoutMyRolesInput {
  update: UserUpdateWithoutMyRolesDataInput!
  create: UserCreateWithoutMyRolesInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithoutSubgroupmembersInput {
  update: UserUpdateWithoutSubgroupmembersDataInput!
  create: UserCreateWithoutSubgroupmembersInput!
}

input UserUpsertWithoutSubjectSubscriptionInput {
  update: UserUpdateWithoutSubjectSubscriptionDataInput!
  create: UserCreateWithoutSubjectSubscriptionInput!
}

input UserUpsertWithWhereUniqueWithoutOrgInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutOrgDataInput!
  create: UserCreateWithoutOrgInput!
}

input UserUpsertWithWhereUniqueWithoutSuborgInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSuborgDataInput!
  create: UserCreateWithoutSuborgInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstname: String

  """All values that are not equal to given value."""
  firstname_not: String

  """All values that are contained in given list."""
  firstname_in: [String!]

  """All values that are not contained in given list."""
  firstname_not_in: [String!]

  """All values less than the given value."""
  firstname_lt: String

  """All values less than or equal the given value."""
  firstname_lte: String

  """All values greater than the given value."""
  firstname_gt: String

  """All values greater than or equal the given value."""
  firstname_gte: String

  """All values containing the given string."""
  firstname_contains: String

  """All values not containing the given string."""
  firstname_not_contains: String

  """All values starting with the given string."""
  firstname_starts_with: String

  """All values not starting with the given string."""
  firstname_not_starts_with: String

  """All values ending with the given string."""
  firstname_ends_with: String

  """All values not ending with the given string."""
  firstname_not_ends_with: String
  lastname: String

  """All values that are not equal to given value."""
  lastname_not: String

  """All values that are contained in given list."""
  lastname_in: [String!]

  """All values that are not contained in given list."""
  lastname_not_in: [String!]

  """All values less than the given value."""
  lastname_lt: String

  """All values less than or equal the given value."""
  lastname_lte: String

  """All values greater than the given value."""
  lastname_gt: String

  """All values greater than or equal the given value."""
  lastname_gte: String

  """All values containing the given string."""
  lastname_contains: String

  """All values not containing the given string."""
  lastname_not_contains: String

  """All values starting with the given string."""
  lastname_starts_with: String

  """All values not starting with the given string."""
  lastname_not_starts_with: String

  """All values ending with the given string."""
  lastname_ends_with: String

  """All values not ending with the given string."""
  lastname_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  createdBy: String

  """All values that are not equal to given value."""
  createdBy_not: String

  """All values that are contained in given list."""
  createdBy_in: [String!]

  """All values that are not contained in given list."""
  createdBy_not_in: [String!]

  """All values less than the given value."""
  createdBy_lt: String

  """All values less than or equal the given value."""
  createdBy_lte: String

  """All values greater than the given value."""
  createdBy_gt: String

  """All values greater than or equal the given value."""
  createdBy_gte: String

  """All values containing the given string."""
  createdBy_contains: String

  """All values not containing the given string."""
  createdBy_not_contains: String

  """All values starting with the given string."""
  createdBy_starts_with: String

  """All values not starting with the given string."""
  createdBy_not_starts_with: String

  """All values ending with the given string."""
  createdBy_ends_with: String

  """All values not ending with the given string."""
  createdBy_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  org: OrganizationWhereInput
  suborg_every: SuborgWhereInput
  suborg_some: SuborgWhereInput
  suborg_none: SuborgWhereInput
  groupmembers_every: GroupMemberWhereInput
  groupmembers_some: GroupMemberWhereInput
  groupmembers_none: GroupMemberWhereInput
  subgroupmembers_every: SubGroupMemberWhereInput
  subgroupmembers_some: SubGroupMemberWhereInput
  subgroupmembers_none: SubGroupMemberWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  myRoles_every: RoleMemberWhereInput
  myRoles_some: RoleMemberWhereInput
  myRoles_none: RoleMemberWhereInput
  myprofiles_every: ProfileWhereInput
  myprofiles_some: ProfileWhereInput
  myprofiles_none: ProfileWhereInput
  subjectSubscription_every: SubjectSubscriptionWhereInput
  subjectSubscription_some: SubjectSubscriptionWhereInput
  subjectSubscription_none: SubjectSubscriptionWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

# source: http://localhost:4466
# timestamp: Sat Dec 07 2019 14:33:22 GMT+0530 (India Standard Time)

type Address implements Node {
  id: ID!
  house: String
  published: Boolean!
  updatedAt: DateTime!
  createdAt: DateTime!
  author: User!
}

"""A connection to a list of items."""
type AddressConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AddressEdge]!
  aggregate: AggregateAddress!
}

input AddressCreateInput {
  id: ID
  house: String
  published: Boolean!
  author: UserCreateOneWithoutAddressesInput!
}

input AddressCreateManyWithoutAuthorInput {
  create: [AddressCreateWithoutAuthorInput!]
  connect: [AddressWhereUniqueInput!]
}

input AddressCreateWithoutAuthorInput {
  id: ID
  house: String
  published: Boolean!
}

"""An edge in a connection."""
type AddressEdge {
  """The item at the end of the edge."""
  node: Address!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AddressOrderByInput {
  id_ASC
  id_DESC
  house_ASC
  house_DESC
  published_ASC
  published_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AddressPreviousValues {
  id: ID!
  house: String
  published: Boolean!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input AddressScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  house: String

  """All values that are not equal to given value."""
  house_not: String

  """All values that are contained in given list."""
  house_in: [String!]

  """All values that are not contained in given list."""
  house_not_in: [String!]

  """All values less than the given value."""
  house_lt: String

  """All values less than or equal the given value."""
  house_lte: String

  """All values greater than the given value."""
  house_gt: String

  """All values greater than or equal the given value."""
  house_gte: String

  """All values containing the given string."""
  house_contains: String

  """All values not containing the given string."""
  house_not_contains: String

  """All values starting with the given string."""
  house_starts_with: String

  """All values not starting with the given string."""
  house_not_starts_with: String

  """All values ending with the given string."""
  house_ends_with: String

  """All values not ending with the given string."""
  house_not_ends_with: String
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type AddressSubscriptionPayload {
  mutation: MutationType!
  node: Address
  updatedFields: [String!]
  previousValues: AddressPreviousValues
}

input AddressSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AddressWhereInput
}

input AddressUpdateInput {
  house: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutAddressesInput
}

input AddressUpdateManyDataInput {
  house: String
  published: Boolean
}

input AddressUpdateManyMutationInput {
  house: String
  published: Boolean
}

input AddressUpdateManyWithoutAuthorInput {
  create: [AddressCreateWithoutAuthorInput!]
  connect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  disconnect: [AddressWhereUniqueInput!]
  delete: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
  deleteMany: [AddressScalarWhereInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutAuthorInput!]
}

input AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput!
  data: AddressUpdateManyDataInput!
}

input AddressUpdateWithoutAuthorDataInput {
  house: String
  published: Boolean
}

input AddressUpdateWithWhereUniqueWithoutAuthorInput {
  where: AddressWhereUniqueInput!
  data: AddressUpdateWithoutAuthorDataInput!
}

input AddressUpsertWithWhereUniqueWithoutAuthorInput {
  where: AddressWhereUniqueInput!
  update: AddressUpdateWithoutAuthorDataInput!
  create: AddressCreateWithoutAuthorInput!
}

input AddressWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  house: String

  """All values that are not equal to given value."""
  house_not: String

  """All values that are contained in given list."""
  house_in: [String!]

  """All values that are not contained in given list."""
  house_not_in: [String!]

  """All values less than the given value."""
  house_lt: String

  """All values less than or equal the given value."""
  house_lte: String

  """All values greater than the given value."""
  house_gt: String

  """All values greater than or equal the given value."""
  house_gte: String

  """All values containing the given string."""
  house_contains: String

  """All values not containing the given string."""
  house_not_contains: String

  """All values starting with the given string."""
  house_starts_with: String

  """All values not starting with the given string."""
  house_not_starts_with: String

  """All values ending with the given string."""
  house_ends_with: String

  """All values not ending with the given string."""
  house_not_ends_with: String
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author: UserWhereInput
}

input AddressWhereUniqueInput {
  id: ID
}

type AggregateAddress {
  count: Int!
}

type AggregateBaseAddress {
  count: Int!
}

type AggregateBoard {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateCompetition {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateSpecialization {
  count: Int!
}

type AggregateStudyCatelog {
  count: Int!
}

type AggregateSubject {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BaseAddress implements Node {
  id: ID!
  officename: String
  pincode: String
  officeType: String
  Deliverystatus: String
  divisionname: String
  regionname: String
  circlename: String
  taluk: String
  districtname: String
  statename: String
  telephone: String
  relatedSuboffice: String
  relatedHeadoffice: String
  longitude: String
  latitude: String
}

"""A connection to a list of items."""
type BaseAddressConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BaseAddressEdge]!
  aggregate: AggregateBaseAddress!
}

input BaseAddressCreateInput {
  id: ID
  officename: String
  pincode: String
  officeType: String
  Deliverystatus: String
  divisionname: String
  regionname: String
  circlename: String
  taluk: String
  districtname: String
  statename: String
  telephone: String
  relatedSuboffice: String
  relatedHeadoffice: String
  longitude: String
  latitude: String
}

"""An edge in a connection."""
type BaseAddressEdge {
  """The item at the end of the edge."""
  node: BaseAddress!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BaseAddressOrderByInput {
  id_ASC
  id_DESC
  officename_ASC
  officename_DESC
  pincode_ASC
  pincode_DESC
  officeType_ASC
  officeType_DESC
  Deliverystatus_ASC
  Deliverystatus_DESC
  divisionname_ASC
  divisionname_DESC
  regionname_ASC
  regionname_DESC
  circlename_ASC
  circlename_DESC
  taluk_ASC
  taluk_DESC
  districtname_ASC
  districtname_DESC
  statename_ASC
  statename_DESC
  telephone_ASC
  telephone_DESC
  relatedSuboffice_ASC
  relatedSuboffice_DESC
  relatedHeadoffice_ASC
  relatedHeadoffice_DESC
  longitude_ASC
  longitude_DESC
  latitude_ASC
  latitude_DESC
}

type BaseAddressPreviousValues {
  id: ID!
  officename: String
  pincode: String
  officeType: String
  Deliverystatus: String
  divisionname: String
  regionname: String
  circlename: String
  taluk: String
  districtname: String
  statename: String
  telephone: String
  relatedSuboffice: String
  relatedHeadoffice: String
  longitude: String
  latitude: String
}

type BaseAddressSubscriptionPayload {
  mutation: MutationType!
  node: BaseAddress
  updatedFields: [String!]
  previousValues: BaseAddressPreviousValues
}

input BaseAddressSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BaseAddressSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BaseAddressSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BaseAddressSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BaseAddressWhereInput
}

input BaseAddressUpdateInput {
  officename: String
  pincode: String
  officeType: String
  Deliverystatus: String
  divisionname: String
  regionname: String
  circlename: String
  taluk: String
  districtname: String
  statename: String
  telephone: String
  relatedSuboffice: String
  relatedHeadoffice: String
  longitude: String
  latitude: String
}

input BaseAddressUpdateManyMutationInput {
  officename: String
  pincode: String
  officeType: String
  Deliverystatus: String
  divisionname: String
  regionname: String
  circlename: String
  taluk: String
  districtname: String
  statename: String
  telephone: String
  relatedSuboffice: String
  relatedHeadoffice: String
  longitude: String
  latitude: String
}

input BaseAddressWhereInput {
  """Logical AND on all given filters."""
  AND: [BaseAddressWhereInput!]

  """Logical OR on all given filters."""
  OR: [BaseAddressWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BaseAddressWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  officename: String

  """All values that are not equal to given value."""
  officename_not: String

  """All values that are contained in given list."""
  officename_in: [String!]

  """All values that are not contained in given list."""
  officename_not_in: [String!]

  """All values less than the given value."""
  officename_lt: String

  """All values less than or equal the given value."""
  officename_lte: String

  """All values greater than the given value."""
  officename_gt: String

  """All values greater than or equal the given value."""
  officename_gte: String

  """All values containing the given string."""
  officename_contains: String

  """All values not containing the given string."""
  officename_not_contains: String

  """All values starting with the given string."""
  officename_starts_with: String

  """All values not starting with the given string."""
  officename_not_starts_with: String

  """All values ending with the given string."""
  officename_ends_with: String

  """All values not ending with the given string."""
  officename_not_ends_with: String
  pincode: String

  """All values that are not equal to given value."""
  pincode_not: String

  """All values that are contained in given list."""
  pincode_in: [String!]

  """All values that are not contained in given list."""
  pincode_not_in: [String!]

  """All values less than the given value."""
  pincode_lt: String

  """All values less than or equal the given value."""
  pincode_lte: String

  """All values greater than the given value."""
  pincode_gt: String

  """All values greater than or equal the given value."""
  pincode_gte: String

  """All values containing the given string."""
  pincode_contains: String

  """All values not containing the given string."""
  pincode_not_contains: String

  """All values starting with the given string."""
  pincode_starts_with: String

  """All values not starting with the given string."""
  pincode_not_starts_with: String

  """All values ending with the given string."""
  pincode_ends_with: String

  """All values not ending with the given string."""
  pincode_not_ends_with: String
  officeType: String

  """All values that are not equal to given value."""
  officeType_not: String

  """All values that are contained in given list."""
  officeType_in: [String!]

  """All values that are not contained in given list."""
  officeType_not_in: [String!]

  """All values less than the given value."""
  officeType_lt: String

  """All values less than or equal the given value."""
  officeType_lte: String

  """All values greater than the given value."""
  officeType_gt: String

  """All values greater than or equal the given value."""
  officeType_gte: String

  """All values containing the given string."""
  officeType_contains: String

  """All values not containing the given string."""
  officeType_not_contains: String

  """All values starting with the given string."""
  officeType_starts_with: String

  """All values not starting with the given string."""
  officeType_not_starts_with: String

  """All values ending with the given string."""
  officeType_ends_with: String

  """All values not ending with the given string."""
  officeType_not_ends_with: String
  Deliverystatus: String

  """All values that are not equal to given value."""
  Deliverystatus_not: String

  """All values that are contained in given list."""
  Deliverystatus_in: [String!]

  """All values that are not contained in given list."""
  Deliverystatus_not_in: [String!]

  """All values less than the given value."""
  Deliverystatus_lt: String

  """All values less than or equal the given value."""
  Deliverystatus_lte: String

  """All values greater than the given value."""
  Deliverystatus_gt: String

  """All values greater than or equal the given value."""
  Deliverystatus_gte: String

  """All values containing the given string."""
  Deliverystatus_contains: String

  """All values not containing the given string."""
  Deliverystatus_not_contains: String

  """All values starting with the given string."""
  Deliverystatus_starts_with: String

  """All values not starting with the given string."""
  Deliverystatus_not_starts_with: String

  """All values ending with the given string."""
  Deliverystatus_ends_with: String

  """All values not ending with the given string."""
  Deliverystatus_not_ends_with: String
  divisionname: String

  """All values that are not equal to given value."""
  divisionname_not: String

  """All values that are contained in given list."""
  divisionname_in: [String!]

  """All values that are not contained in given list."""
  divisionname_not_in: [String!]

  """All values less than the given value."""
  divisionname_lt: String

  """All values less than or equal the given value."""
  divisionname_lte: String

  """All values greater than the given value."""
  divisionname_gt: String

  """All values greater than or equal the given value."""
  divisionname_gte: String

  """All values containing the given string."""
  divisionname_contains: String

  """All values not containing the given string."""
  divisionname_not_contains: String

  """All values starting with the given string."""
  divisionname_starts_with: String

  """All values not starting with the given string."""
  divisionname_not_starts_with: String

  """All values ending with the given string."""
  divisionname_ends_with: String

  """All values not ending with the given string."""
  divisionname_not_ends_with: String
  regionname: String

  """All values that are not equal to given value."""
  regionname_not: String

  """All values that are contained in given list."""
  regionname_in: [String!]

  """All values that are not contained in given list."""
  regionname_not_in: [String!]

  """All values less than the given value."""
  regionname_lt: String

  """All values less than or equal the given value."""
  regionname_lte: String

  """All values greater than the given value."""
  regionname_gt: String

  """All values greater than or equal the given value."""
  regionname_gte: String

  """All values containing the given string."""
  regionname_contains: String

  """All values not containing the given string."""
  regionname_not_contains: String

  """All values starting with the given string."""
  regionname_starts_with: String

  """All values not starting with the given string."""
  regionname_not_starts_with: String

  """All values ending with the given string."""
  regionname_ends_with: String

  """All values not ending with the given string."""
  regionname_not_ends_with: String
  circlename: String

  """All values that are not equal to given value."""
  circlename_not: String

  """All values that are contained in given list."""
  circlename_in: [String!]

  """All values that are not contained in given list."""
  circlename_not_in: [String!]

  """All values less than the given value."""
  circlename_lt: String

  """All values less than or equal the given value."""
  circlename_lte: String

  """All values greater than the given value."""
  circlename_gt: String

  """All values greater than or equal the given value."""
  circlename_gte: String

  """All values containing the given string."""
  circlename_contains: String

  """All values not containing the given string."""
  circlename_not_contains: String

  """All values starting with the given string."""
  circlename_starts_with: String

  """All values not starting with the given string."""
  circlename_not_starts_with: String

  """All values ending with the given string."""
  circlename_ends_with: String

  """All values not ending with the given string."""
  circlename_not_ends_with: String
  taluk: String

  """All values that are not equal to given value."""
  taluk_not: String

  """All values that are contained in given list."""
  taluk_in: [String!]

  """All values that are not contained in given list."""
  taluk_not_in: [String!]

  """All values less than the given value."""
  taluk_lt: String

  """All values less than or equal the given value."""
  taluk_lte: String

  """All values greater than the given value."""
  taluk_gt: String

  """All values greater than or equal the given value."""
  taluk_gte: String

  """All values containing the given string."""
  taluk_contains: String

  """All values not containing the given string."""
  taluk_not_contains: String

  """All values starting with the given string."""
  taluk_starts_with: String

  """All values not starting with the given string."""
  taluk_not_starts_with: String

  """All values ending with the given string."""
  taluk_ends_with: String

  """All values not ending with the given string."""
  taluk_not_ends_with: String
  districtname: String

  """All values that are not equal to given value."""
  districtname_not: String

  """All values that are contained in given list."""
  districtname_in: [String!]

  """All values that are not contained in given list."""
  districtname_not_in: [String!]

  """All values less than the given value."""
  districtname_lt: String

  """All values less than or equal the given value."""
  districtname_lte: String

  """All values greater than the given value."""
  districtname_gt: String

  """All values greater than or equal the given value."""
  districtname_gte: String

  """All values containing the given string."""
  districtname_contains: String

  """All values not containing the given string."""
  districtname_not_contains: String

  """All values starting with the given string."""
  districtname_starts_with: String

  """All values not starting with the given string."""
  districtname_not_starts_with: String

  """All values ending with the given string."""
  districtname_ends_with: String

  """All values not ending with the given string."""
  districtname_not_ends_with: String
  statename: String

  """All values that are not equal to given value."""
  statename_not: String

  """All values that are contained in given list."""
  statename_in: [String!]

  """All values that are not contained in given list."""
  statename_not_in: [String!]

  """All values less than the given value."""
  statename_lt: String

  """All values less than or equal the given value."""
  statename_lte: String

  """All values greater than the given value."""
  statename_gt: String

  """All values greater than or equal the given value."""
  statename_gte: String

  """All values containing the given string."""
  statename_contains: String

  """All values not containing the given string."""
  statename_not_contains: String

  """All values starting with the given string."""
  statename_starts_with: String

  """All values not starting with the given string."""
  statename_not_starts_with: String

  """All values ending with the given string."""
  statename_ends_with: String

  """All values not ending with the given string."""
  statename_not_ends_with: String
  telephone: String

  """All values that are not equal to given value."""
  telephone_not: String

  """All values that are contained in given list."""
  telephone_in: [String!]

  """All values that are not contained in given list."""
  telephone_not_in: [String!]

  """All values less than the given value."""
  telephone_lt: String

  """All values less than or equal the given value."""
  telephone_lte: String

  """All values greater than the given value."""
  telephone_gt: String

  """All values greater than or equal the given value."""
  telephone_gte: String

  """All values containing the given string."""
  telephone_contains: String

  """All values not containing the given string."""
  telephone_not_contains: String

  """All values starting with the given string."""
  telephone_starts_with: String

  """All values not starting with the given string."""
  telephone_not_starts_with: String

  """All values ending with the given string."""
  telephone_ends_with: String

  """All values not ending with the given string."""
  telephone_not_ends_with: String
  relatedSuboffice: String

  """All values that are not equal to given value."""
  relatedSuboffice_not: String

  """All values that are contained in given list."""
  relatedSuboffice_in: [String!]

  """All values that are not contained in given list."""
  relatedSuboffice_not_in: [String!]

  """All values less than the given value."""
  relatedSuboffice_lt: String

  """All values less than or equal the given value."""
  relatedSuboffice_lte: String

  """All values greater than the given value."""
  relatedSuboffice_gt: String

  """All values greater than or equal the given value."""
  relatedSuboffice_gte: String

  """All values containing the given string."""
  relatedSuboffice_contains: String

  """All values not containing the given string."""
  relatedSuboffice_not_contains: String

  """All values starting with the given string."""
  relatedSuboffice_starts_with: String

  """All values not starting with the given string."""
  relatedSuboffice_not_starts_with: String

  """All values ending with the given string."""
  relatedSuboffice_ends_with: String

  """All values not ending with the given string."""
  relatedSuboffice_not_ends_with: String
  relatedHeadoffice: String

  """All values that are not equal to given value."""
  relatedHeadoffice_not: String

  """All values that are contained in given list."""
  relatedHeadoffice_in: [String!]

  """All values that are not contained in given list."""
  relatedHeadoffice_not_in: [String!]

  """All values less than the given value."""
  relatedHeadoffice_lt: String

  """All values less than or equal the given value."""
  relatedHeadoffice_lte: String

  """All values greater than the given value."""
  relatedHeadoffice_gt: String

  """All values greater than or equal the given value."""
  relatedHeadoffice_gte: String

  """All values containing the given string."""
  relatedHeadoffice_contains: String

  """All values not containing the given string."""
  relatedHeadoffice_not_contains: String

  """All values starting with the given string."""
  relatedHeadoffice_starts_with: String

  """All values not starting with the given string."""
  relatedHeadoffice_not_starts_with: String

  """All values ending with the given string."""
  relatedHeadoffice_ends_with: String

  """All values not ending with the given string."""
  relatedHeadoffice_not_ends_with: String
  longitude: String

  """All values that are not equal to given value."""
  longitude_not: String

  """All values that are contained in given list."""
  longitude_in: [String!]

  """All values that are not contained in given list."""
  longitude_not_in: [String!]

  """All values less than the given value."""
  longitude_lt: String

  """All values less than or equal the given value."""
  longitude_lte: String

  """All values greater than the given value."""
  longitude_gt: String

  """All values greater than or equal the given value."""
  longitude_gte: String

  """All values containing the given string."""
  longitude_contains: String

  """All values not containing the given string."""
  longitude_not_contains: String

  """All values starting with the given string."""
  longitude_starts_with: String

  """All values not starting with the given string."""
  longitude_not_starts_with: String

  """All values ending with the given string."""
  longitude_ends_with: String

  """All values not ending with the given string."""
  longitude_not_ends_with: String
  latitude: String

  """All values that are not equal to given value."""
  latitude_not: String

  """All values that are contained in given list."""
  latitude_in: [String!]

  """All values that are not contained in given list."""
  latitude_not_in: [String!]

  """All values less than the given value."""
  latitude_lt: String

  """All values less than or equal the given value."""
  latitude_lte: String

  """All values greater than the given value."""
  latitude_gt: String

  """All values greater than or equal the given value."""
  latitude_gte: String

  """All values containing the given string."""
  latitude_contains: String

  """All values not containing the given string."""
  latitude_not_contains: String

  """All values starting with the given string."""
  latitude_starts_with: String

  """All values not starting with the given string."""
  latitude_not_starts_with: String

  """All values ending with the given string."""
  latitude_ends_with: String

  """All values not ending with the given string."""
  latitude_not_ends_with: String
}

input BaseAddressWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Board implements Node {
  id: ID!
  name: String
  catelog: StudyCatelog!
}

"""A connection to a list of items."""
type BoardConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BoardEdge]!
  aggregate: AggregateBoard!
}

input BoardCreateInput {
  id: ID
  name: String
  catelog: StudyCatelogCreateOneWithoutBoardsInput!
}

input BoardCreateManyWithoutCatelogInput {
  create: [BoardCreateWithoutCatelogInput!]
  connect: [BoardWhereUniqueInput!]
}

input BoardCreateWithoutCatelogInput {
  id: ID
  name: String
}

"""An edge in a connection."""
type BoardEdge {
  """The item at the end of the edge."""
  node: Board!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BoardOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type BoardPreviousValues {
  id: ID!
  name: String
}

input BoardScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BoardScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BoardScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BoardScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type BoardSubscriptionPayload {
  mutation: MutationType!
  node: Board
  updatedFields: [String!]
  previousValues: BoardPreviousValues
}

input BoardSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BoardSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BoardSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BoardSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BoardWhereInput
}

input BoardUpdateInput {
  name: String
  catelog: StudyCatelogUpdateOneRequiredWithoutBoardsInput
}

input BoardUpdateManyDataInput {
  name: String
}

input BoardUpdateManyMutationInput {
  name: String
}

input BoardUpdateManyWithoutCatelogInput {
  create: [BoardCreateWithoutCatelogInput!]
  connect: [BoardWhereUniqueInput!]
  set: [BoardWhereUniqueInput!]
  disconnect: [BoardWhereUniqueInput!]
  delete: [BoardWhereUniqueInput!]
  update: [BoardUpdateWithWhereUniqueWithoutCatelogInput!]
  updateMany: [BoardUpdateManyWithWhereNestedInput!]
  deleteMany: [BoardScalarWhereInput!]
  upsert: [BoardUpsertWithWhereUniqueWithoutCatelogInput!]
}

input BoardUpdateManyWithWhereNestedInput {
  where: BoardScalarWhereInput!
  data: BoardUpdateManyDataInput!
}

input BoardUpdateWithoutCatelogDataInput {
  name: String
}

input BoardUpdateWithWhereUniqueWithoutCatelogInput {
  where: BoardWhereUniqueInput!
  data: BoardUpdateWithoutCatelogDataInput!
}

input BoardUpsertWithWhereUniqueWithoutCatelogInput {
  where: BoardWhereUniqueInput!
  update: BoardUpdateWithoutCatelogDataInput!
  create: BoardCreateWithoutCatelogInput!
}

input BoardWhereInput {
  """Logical AND on all given filters."""
  AND: [BoardWhereInput!]

  """Logical OR on all given filters."""
  OR: [BoardWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BoardWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  catelog: StudyCatelogWhereInput
}

input BoardWhereUniqueInput {
  id: ID
}

type Comment implements Node {
  id: ID!
  text: String!
  author: User!
  post: Post!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  text: String!
  author: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutAuthorInput {
  id: ID
  text: String!
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutPostInput {
  id: ID
  text: String!
  author: UserCreateOneWithoutCommentsInput!
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input CommentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  text: String
}

input CommentUpdateManyMutationInput {
  text: String
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutAuthorDataInput {
  text: String
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutPostDataInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author: UserWhereInput
  post: PostWhereInput
}

input CommentWhereUniqueInput {
  id: ID
}

type Competition implements Node {
  id: ID!
  name: String
  catelog: StudyCatelog!
}

"""A connection to a list of items."""
type CompetitionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CompetitionEdge]!
  aggregate: AggregateCompetition!
}

input CompetitionCreateInput {
  id: ID
  name: String
  catelog: StudyCatelogCreateOneWithoutCompetitionInput!
}

input CompetitionCreateManyWithoutCatelogInput {
  create: [CompetitionCreateWithoutCatelogInput!]
  connect: [CompetitionWhereUniqueInput!]
}

input CompetitionCreateWithoutCatelogInput {
  id: ID
  name: String
}

"""An edge in a connection."""
type CompetitionEdge {
  """The item at the end of the edge."""
  node: Competition!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CompetitionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type CompetitionPreviousValues {
  id: ID!
  name: String
}

input CompetitionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CompetitionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompetitionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompetitionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type CompetitionSubscriptionPayload {
  mutation: MutationType!
  node: Competition
  updatedFields: [String!]
  previousValues: CompetitionPreviousValues
}

input CompetitionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CompetitionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompetitionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompetitionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CompetitionWhereInput
}

input CompetitionUpdateInput {
  name: String
  catelog: StudyCatelogUpdateOneRequiredWithoutCompetitionInput
}

input CompetitionUpdateManyDataInput {
  name: String
}

input CompetitionUpdateManyMutationInput {
  name: String
}

input CompetitionUpdateManyWithoutCatelogInput {
  create: [CompetitionCreateWithoutCatelogInput!]
  connect: [CompetitionWhereUniqueInput!]
  set: [CompetitionWhereUniqueInput!]
  disconnect: [CompetitionWhereUniqueInput!]
  delete: [CompetitionWhereUniqueInput!]
  update: [CompetitionUpdateWithWhereUniqueWithoutCatelogInput!]
  updateMany: [CompetitionUpdateManyWithWhereNestedInput!]
  deleteMany: [CompetitionScalarWhereInput!]
  upsert: [CompetitionUpsertWithWhereUniqueWithoutCatelogInput!]
}

input CompetitionUpdateManyWithWhereNestedInput {
  where: CompetitionScalarWhereInput!
  data: CompetitionUpdateManyDataInput!
}

input CompetitionUpdateWithoutCatelogDataInput {
  name: String
}

input CompetitionUpdateWithWhereUniqueWithoutCatelogInput {
  where: CompetitionWhereUniqueInput!
  data: CompetitionUpdateWithoutCatelogDataInput!
}

input CompetitionUpsertWithWhereUniqueWithoutCatelogInput {
  where: CompetitionWhereUniqueInput!
  update: CompetitionUpdateWithoutCatelogDataInput!
  create: CompetitionCreateWithoutCatelogInput!
}

input CompetitionWhereInput {
  """Logical AND on all given filters."""
  AND: [CompetitionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompetitionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompetitionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  catelog: StudyCatelogWhereInput
}

input CompetitionWhereUniqueInput {
  id: ID
}

scalar DateTime

type File implements Node {
  id: ID!
  path: String
  filename: String!
  mimetype: String!
  encoding: String!
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  path: String
  filename: String!
  mimetype: String!
  encoding: String!
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge."""
  node: File!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  path_ASC
  path_DESC
  filename_ASC
  filename_DESC
  mimetype_ASC
  mimetype_DESC
  encoding_ASC
  encoding_DESC
}

type FilePreviousValues {
  id: ID!
  path: String
  filename: String!
  mimetype: String!
  encoding: String!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateInput {
  path: String
  filename: String
  mimetype: String
  encoding: String
}

input FileUpdateManyMutationInput {
  path: String
  filename: String
  mimetype: String
  encoding: String
}

input FileWhereInput {
  """Logical AND on all given filters."""
  AND: [FileWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  path: String

  """All values that are not equal to given value."""
  path_not: String

  """All values that are contained in given list."""
  path_in: [String!]

  """All values that are not contained in given list."""
  path_not_in: [String!]

  """All values less than the given value."""
  path_lt: String

  """All values less than or equal the given value."""
  path_lte: String

  """All values greater than the given value."""
  path_gt: String

  """All values greater than or equal the given value."""
  path_gte: String

  """All values containing the given string."""
  path_contains: String

  """All values not containing the given string."""
  path_not_contains: String

  """All values starting with the given string."""
  path_starts_with: String

  """All values not starting with the given string."""
  path_not_starts_with: String

  """All values ending with the given string."""
  path_ends_with: String

  """All values not ending with the given string."""
  path_not_ends_with: String
  filename: String

  """All values that are not equal to given value."""
  filename_not: String

  """All values that are contained in given list."""
  filename_in: [String!]

  """All values that are not contained in given list."""
  filename_not_in: [String!]

  """All values less than the given value."""
  filename_lt: String

  """All values less than or equal the given value."""
  filename_lte: String

  """All values greater than the given value."""
  filename_gt: String

  """All values greater than or equal the given value."""
  filename_gte: String

  """All values containing the given string."""
  filename_contains: String

  """All values not containing the given string."""
  filename_not_contains: String

  """All values starting with the given string."""
  filename_starts_with: String

  """All values not starting with the given string."""
  filename_not_starts_with: String

  """All values ending with the given string."""
  filename_ends_with: String

  """All values not ending with the given string."""
  filename_not_ends_with: String
  mimetype: String

  """All values that are not equal to given value."""
  mimetype_not: String

  """All values that are contained in given list."""
  mimetype_in: [String!]

  """All values that are not contained in given list."""
  mimetype_not_in: [String!]

  """All values less than the given value."""
  mimetype_lt: String

  """All values less than or equal the given value."""
  mimetype_lte: String

  """All values greater than the given value."""
  mimetype_gt: String

  """All values greater than or equal the given value."""
  mimetype_gte: String

  """All values containing the given string."""
  mimetype_contains: String

  """All values not containing the given string."""
  mimetype_not_contains: String

  """All values starting with the given string."""
  mimetype_starts_with: String

  """All values not starting with the given string."""
  mimetype_not_starts_with: String

  """All values ending with the given string."""
  mimetype_ends_with: String

  """All values not ending with the given string."""
  mimetype_not_ends_with: String
  encoding: String

  """All values that are not equal to given value."""
  encoding_not: String

  """All values that are contained in given list."""
  encoding_in: [String!]

  """All values that are not contained in given list."""
  encoding_not_in: [String!]

  """All values less than the given value."""
  encoding_lt: String

  """All values less than or equal the given value."""
  encoding_lte: String

  """All values greater than the given value."""
  encoding_gt: String

  """All values greater than or equal the given value."""
  encoding_gte: String

  """All values containing the given string."""
  encoding_contains: String

  """All values not containing the given string."""
  encoding_not_contains: String

  """All values starting with the given string."""
  encoding_starts_with: String

  """All values not starting with the given string."""
  encoding_not_starts_with: String

  """All values ending with the given string."""
  encoding_ends_with: String

  """All values not ending with the given string."""
  encoding_not_ends_with: String
}

input FileWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createPost(data: PostCreateInput!): Post!
  createComment(data: CommentCreateInput!): Comment!
  createAddress(data: AddressCreateInput!): Address!
  createBaseAddress(data: BaseAddressCreateInput!): BaseAddress!
  createFile(data: FileCreateInput!): File!
  createSubject(data: SubjectCreateInput!): Subject!
  createBoard(data: BoardCreateInput!): Board!
  createCompetition(data: CompetitionCreateInput!): Competition!
  createStudyCatelog(data: StudyCatelogCreateInput!): StudyCatelog!
  createSpecialization(data: SpecializationCreateInput!): Specialization!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateBaseAddress(data: BaseAddressUpdateInput!, where: BaseAddressWhereUniqueInput!): BaseAddress
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateSubject(data: SubjectUpdateInput!, where: SubjectWhereUniqueInput!): Subject
  updateBoard(data: BoardUpdateInput!, where: BoardWhereUniqueInput!): Board
  updateCompetition(data: CompetitionUpdateInput!, where: CompetitionWhereUniqueInput!): Competition
  updateStudyCatelog(data: StudyCatelogUpdateInput!, where: StudyCatelogWhereUniqueInput!): StudyCatelog
  updateSpecialization(data: SpecializationUpdateInput!, where: SpecializationWhereUniqueInput!): Specialization
  deleteUser(where: UserWhereUniqueInput!): User
  deletePost(where: PostWhereUniqueInput!): Post
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteBaseAddress(where: BaseAddressWhereUniqueInput!): BaseAddress
  deleteFile(where: FileWhereUniqueInput!): File
  deleteSubject(where: SubjectWhereUniqueInput!): Subject
  deleteBoard(where: BoardWhereUniqueInput!): Board
  deleteCompetition(where: CompetitionWhereUniqueInput!): Competition
  deleteStudyCatelog(where: StudyCatelogWhereUniqueInput!): StudyCatelog
  deleteSpecialization(where: SpecializationWhereUniqueInput!): Specialization
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  upsertAddress(where: AddressWhereUniqueInput!, create: AddressCreateInput!, update: AddressUpdateInput!): Address!
  upsertBaseAddress(where: BaseAddressWhereUniqueInput!, create: BaseAddressCreateInput!, update: BaseAddressUpdateInput!): BaseAddress!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertSubject(where: SubjectWhereUniqueInput!, create: SubjectCreateInput!, update: SubjectUpdateInput!): Subject!
  upsertBoard(where: BoardWhereUniqueInput!, create: BoardCreateInput!, update: BoardUpdateInput!): Board!
  upsertCompetition(where: CompetitionWhereUniqueInput!, create: CompetitionCreateInput!, update: CompetitionUpdateInput!): Competition!
  upsertStudyCatelog(where: StudyCatelogWhereUniqueInput!, create: StudyCatelogCreateInput!, update: StudyCatelogUpdateInput!): StudyCatelog!
  upsertSpecialization(where: SpecializationWhereUniqueInput!, create: SpecializationCreateInput!, update: SpecializationUpdateInput!): Specialization!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  updateManyAddresses(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  updateManyBaseAddresses(data: BaseAddressUpdateManyMutationInput!, where: BaseAddressWhereInput): BatchPayload!
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  updateManySubjects(data: SubjectUpdateManyMutationInput!, where: SubjectWhereInput): BatchPayload!
  updateManyBoards(data: BoardUpdateManyMutationInput!, where: BoardWhereInput): BatchPayload!
  updateManyCompetitions(data: CompetitionUpdateManyMutationInput!, where: CompetitionWhereInput): BatchPayload!
  updateManyStudyCatelogs(data: StudyCatelogUpdateManyMutationInput!, where: StudyCatelogWhereInput): BatchPayload!
  updateManySpecializations(data: SpecializationUpdateManyMutationInput!, where: SpecializationWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  deleteManyBaseAddresses(where: BaseAddressWhereInput): BatchPayload!
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  deleteManySubjects(where: SubjectWhereInput): BatchPayload!
  deleteManyBoards(where: BoardWhereInput): BatchPayload!
  deleteManyCompetitions(where: CompetitionWhereInput): BatchPayload!
  deleteManyStudyCatelogs(where: StudyCatelogWhereInput): BatchPayload!
  deleteManySpecializations(where: SpecializationWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  body: String!
  published: Boolean!
  author: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutAuthorInput {
  id: ID
  title: String!
  body: String!
  published: Boolean!
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateWithoutCommentsInput {
  id: ID
  title: String!
  body: String!
  published: Boolean!
  author: UserCreateOneWithoutPostsInput!
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  published_ASC
  published_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input PostScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PostScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  title: String
  body: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
  title: String
  body: String
  published: Boolean
}

input PostUpdateManyMutationInput {
  title: String
  body: String
  published: Boolean
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateWithoutAuthorDataInput {
  title: String
  body: String
  published: Boolean
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithoutCommentsDataInput {
  title: String
  body: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

enum PrismaDatabase {
  default
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address]!
  baseAddresses(where: BaseAddressWhereInput, orderBy: BaseAddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BaseAddress]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject]!
  boards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board]!
  competitions(where: CompetitionWhereInput, orderBy: CompetitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Competition]!
  studyCatelogs(where: StudyCatelogWhereInput, orderBy: StudyCatelogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StudyCatelog]!
  specializations(where: SpecializationWhereInput, orderBy: SpecializationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Specialization]!
  user(where: UserWhereUniqueInput!): User
  post(where: PostWhereUniqueInput!): Post
  comment(where: CommentWhereUniqueInput!): Comment
  address(where: AddressWhereUniqueInput!): Address
  baseAddress(where: BaseAddressWhereUniqueInput!): BaseAddress
  file(where: FileWhereUniqueInput!): File
  subject(where: SubjectWhereUniqueInput!): Subject
  board(where: BoardWhereUniqueInput!): Board
  competition(where: CompetitionWhereUniqueInput!): Competition
  studyCatelog(where: StudyCatelogWhereUniqueInput!): StudyCatelog
  specialization(where: SpecializationWhereUniqueInput!): Specialization
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  addressesConnection(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AddressConnection!
  baseAddressesConnection(where: BaseAddressWhereInput, orderBy: BaseAddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BaseAddressConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  subjectsConnection(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubjectConnection!
  boardsConnection(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BoardConnection!
  competitionsConnection(where: CompetitionWhereInput, orderBy: CompetitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompetitionConnection!
  studyCatelogsConnection(where: StudyCatelogWhereInput, orderBy: StudyCatelogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StudyCatelogConnection!
  specializationsConnection(where: SpecializationWhereInput, orderBy: SpecializationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpecializationConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Specialization implements Node {
  id: ID!
  name: String
  catelog: StudyCatelog!
}

"""A connection to a list of items."""
type SpecializationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SpecializationEdge]!
  aggregate: AggregateSpecialization!
}

input SpecializationCreateInput {
  id: ID
  name: String
  catelog: StudyCatelogCreateOneInput!
}

input SpecializationCreateManyInput {
  create: [SpecializationCreateInput!]
  connect: [SpecializationWhereUniqueInput!]
}

"""An edge in a connection."""
type SpecializationEdge {
  """The item at the end of the edge."""
  node: Specialization!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SpecializationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type SpecializationPreviousValues {
  id: ID!
  name: String
}

input SpecializationScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SpecializationScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpecializationScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpecializationScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type SpecializationSubscriptionPayload {
  mutation: MutationType!
  node: Specialization
  updatedFields: [String!]
  previousValues: SpecializationPreviousValues
}

input SpecializationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SpecializationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpecializationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpecializationSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SpecializationWhereInput
}

input SpecializationUpdateDataInput {
  name: String
  catelog: StudyCatelogUpdateOneRequiredInput
}

input SpecializationUpdateInput {
  name: String
  catelog: StudyCatelogUpdateOneRequiredInput
}

input SpecializationUpdateManyDataInput {
  name: String
}

input SpecializationUpdateManyInput {
  create: [SpecializationCreateInput!]
  connect: [SpecializationWhereUniqueInput!]
  set: [SpecializationWhereUniqueInput!]
  disconnect: [SpecializationWhereUniqueInput!]
  delete: [SpecializationWhereUniqueInput!]
  update: [SpecializationUpdateWithWhereUniqueNestedInput!]
  updateMany: [SpecializationUpdateManyWithWhereNestedInput!]
  deleteMany: [SpecializationScalarWhereInput!]
  upsert: [SpecializationUpsertWithWhereUniqueNestedInput!]
}

input SpecializationUpdateManyMutationInput {
  name: String
}

input SpecializationUpdateManyWithWhereNestedInput {
  where: SpecializationScalarWhereInput!
  data: SpecializationUpdateManyDataInput!
}

input SpecializationUpdateWithWhereUniqueNestedInput {
  where: SpecializationWhereUniqueInput!
  data: SpecializationUpdateDataInput!
}

input SpecializationUpsertWithWhereUniqueNestedInput {
  where: SpecializationWhereUniqueInput!
  update: SpecializationUpdateDataInput!
  create: SpecializationCreateInput!
}

input SpecializationWhereInput {
  """Logical AND on all given filters."""
  AND: [SpecializationWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpecializationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpecializationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  catelog: StudyCatelogWhereInput
}

input SpecializationWhereUniqueInput {
  id: ID
}

type StudyCatelog implements Node {
  id: ID!
  std: String!
  substd: String
  academic: String
  subacademic: String
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  boards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board!]
  specialization(where: SpecializationWhereInput, orderBy: SpecializationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Specialization!]
  competition(where: CompetitionWhereInput, orderBy: CompetitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Competition!]
  published: Boolean
}

"""A connection to a list of items."""
type StudyCatelogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StudyCatelogEdge]!
  aggregate: AggregateStudyCatelog!
}

input StudyCatelogCreateInput {
  id: ID
  std: String!
  substd: String
  academic: String
  subacademic: String
  published: Boolean
  subjects: SubjectCreateManyWithoutCatelogInput
  boards: BoardCreateManyWithoutCatelogInput
  specialization: SpecializationCreateManyInput
  competition: CompetitionCreateManyWithoutCatelogInput
}

input StudyCatelogCreateOneInput {
  create: StudyCatelogCreateInput
  connect: StudyCatelogWhereUniqueInput
}

input StudyCatelogCreateOneWithoutBoardsInput {
  create: StudyCatelogCreateWithoutBoardsInput
  connect: StudyCatelogWhereUniqueInput
}

input StudyCatelogCreateOneWithoutCompetitionInput {
  create: StudyCatelogCreateWithoutCompetitionInput
  connect: StudyCatelogWhereUniqueInput
}

input StudyCatelogCreateOneWithoutSubjectsInput {
  create: StudyCatelogCreateWithoutSubjectsInput
  connect: StudyCatelogWhereUniqueInput
}

input StudyCatelogCreateWithoutBoardsInput {
  id: ID
  std: String!
  substd: String
  academic: String
  subacademic: String
  published: Boolean
  subjects: SubjectCreateManyWithoutCatelogInput
  specialization: SpecializationCreateManyInput
  competition: CompetitionCreateManyWithoutCatelogInput
}

input StudyCatelogCreateWithoutCompetitionInput {
  id: ID
  std: String!
  substd: String
  academic: String
  subacademic: String
  published: Boolean
  subjects: SubjectCreateManyWithoutCatelogInput
  boards: BoardCreateManyWithoutCatelogInput
  specialization: SpecializationCreateManyInput
}

input StudyCatelogCreateWithoutSubjectsInput {
  id: ID
  std: String!
  substd: String
  academic: String
  subacademic: String
  published: Boolean
  boards: BoardCreateManyWithoutCatelogInput
  specialization: SpecializationCreateManyInput
  competition: CompetitionCreateManyWithoutCatelogInput
}

"""An edge in a connection."""
type StudyCatelogEdge {
  """The item at the end of the edge."""
  node: StudyCatelog!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StudyCatelogOrderByInput {
  id_ASC
  id_DESC
  std_ASC
  std_DESC
  substd_ASC
  substd_DESC
  academic_ASC
  academic_DESC
  subacademic_ASC
  subacademic_DESC
  published_ASC
  published_DESC
}

type StudyCatelogPreviousValues {
  id: ID!
  std: String!
  substd: String
  academic: String
  subacademic: String
  published: Boolean
}

type StudyCatelogSubscriptionPayload {
  mutation: MutationType!
  node: StudyCatelog
  updatedFields: [String!]
  previousValues: StudyCatelogPreviousValues
}

input StudyCatelogSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StudyCatelogSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StudyCatelogSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StudyCatelogSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StudyCatelogWhereInput
}

input StudyCatelogUpdateDataInput {
  std: String
  substd: String
  academic: String
  subacademic: String
  published: Boolean
  subjects: SubjectUpdateManyWithoutCatelogInput
  boards: BoardUpdateManyWithoutCatelogInput
  specialization: SpecializationUpdateManyInput
  competition: CompetitionUpdateManyWithoutCatelogInput
}

input StudyCatelogUpdateInput {
  std: String
  substd: String
  academic: String
  subacademic: String
  published: Boolean
  subjects: SubjectUpdateManyWithoutCatelogInput
  boards: BoardUpdateManyWithoutCatelogInput
  specialization: SpecializationUpdateManyInput
  competition: CompetitionUpdateManyWithoutCatelogInput
}

input StudyCatelogUpdateManyMutationInput {
  std: String
  substd: String
  academic: String
  subacademic: String
  published: Boolean
}

input StudyCatelogUpdateOneRequiredInput {
  create: StudyCatelogCreateInput
  connect: StudyCatelogWhereUniqueInput
  update: StudyCatelogUpdateDataInput
  upsert: StudyCatelogUpsertNestedInput
}

input StudyCatelogUpdateOneRequiredWithoutBoardsInput {
  create: StudyCatelogCreateWithoutBoardsInput
  connect: StudyCatelogWhereUniqueInput
  update: StudyCatelogUpdateWithoutBoardsDataInput
  upsert: StudyCatelogUpsertWithoutBoardsInput
}

input StudyCatelogUpdateOneRequiredWithoutCompetitionInput {
  create: StudyCatelogCreateWithoutCompetitionInput
  connect: StudyCatelogWhereUniqueInput
  update: StudyCatelogUpdateWithoutCompetitionDataInput
  upsert: StudyCatelogUpsertWithoutCompetitionInput
}

input StudyCatelogUpdateOneRequiredWithoutSubjectsInput {
  create: StudyCatelogCreateWithoutSubjectsInput
  connect: StudyCatelogWhereUniqueInput
  update: StudyCatelogUpdateWithoutSubjectsDataInput
  upsert: StudyCatelogUpsertWithoutSubjectsInput
}

input StudyCatelogUpdateWithoutBoardsDataInput {
  std: String
  substd: String
  academic: String
  subacademic: String
  published: Boolean
  subjects: SubjectUpdateManyWithoutCatelogInput
  specialization: SpecializationUpdateManyInput
  competition: CompetitionUpdateManyWithoutCatelogInput
}

input StudyCatelogUpdateWithoutCompetitionDataInput {
  std: String
  substd: String
  academic: String
  subacademic: String
  published: Boolean
  subjects: SubjectUpdateManyWithoutCatelogInput
  boards: BoardUpdateManyWithoutCatelogInput
  specialization: SpecializationUpdateManyInput
}

input StudyCatelogUpdateWithoutSubjectsDataInput {
  std: String
  substd: String
  academic: String
  subacademic: String
  published: Boolean
  boards: BoardUpdateManyWithoutCatelogInput
  specialization: SpecializationUpdateManyInput
  competition: CompetitionUpdateManyWithoutCatelogInput
}

input StudyCatelogUpsertNestedInput {
  update: StudyCatelogUpdateDataInput!
  create: StudyCatelogCreateInput!
}

input StudyCatelogUpsertWithoutBoardsInput {
  update: StudyCatelogUpdateWithoutBoardsDataInput!
  create: StudyCatelogCreateWithoutBoardsInput!
}

input StudyCatelogUpsertWithoutCompetitionInput {
  update: StudyCatelogUpdateWithoutCompetitionDataInput!
  create: StudyCatelogCreateWithoutCompetitionInput!
}

input StudyCatelogUpsertWithoutSubjectsInput {
  update: StudyCatelogUpdateWithoutSubjectsDataInput!
  create: StudyCatelogCreateWithoutSubjectsInput!
}

input StudyCatelogWhereInput {
  """Logical AND on all given filters."""
  AND: [StudyCatelogWhereInput!]

  """Logical OR on all given filters."""
  OR: [StudyCatelogWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StudyCatelogWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  std: String

  """All values that are not equal to given value."""
  std_not: String

  """All values that are contained in given list."""
  std_in: [String!]

  """All values that are not contained in given list."""
  std_not_in: [String!]

  """All values less than the given value."""
  std_lt: String

  """All values less than or equal the given value."""
  std_lte: String

  """All values greater than the given value."""
  std_gt: String

  """All values greater than or equal the given value."""
  std_gte: String

  """All values containing the given string."""
  std_contains: String

  """All values not containing the given string."""
  std_not_contains: String

  """All values starting with the given string."""
  std_starts_with: String

  """All values not starting with the given string."""
  std_not_starts_with: String

  """All values ending with the given string."""
  std_ends_with: String

  """All values not ending with the given string."""
  std_not_ends_with: String
  substd: String

  """All values that are not equal to given value."""
  substd_not: String

  """All values that are contained in given list."""
  substd_in: [String!]

  """All values that are not contained in given list."""
  substd_not_in: [String!]

  """All values less than the given value."""
  substd_lt: String

  """All values less than or equal the given value."""
  substd_lte: String

  """All values greater than the given value."""
  substd_gt: String

  """All values greater than or equal the given value."""
  substd_gte: String

  """All values containing the given string."""
  substd_contains: String

  """All values not containing the given string."""
  substd_not_contains: String

  """All values starting with the given string."""
  substd_starts_with: String

  """All values not starting with the given string."""
  substd_not_starts_with: String

  """All values ending with the given string."""
  substd_ends_with: String

  """All values not ending with the given string."""
  substd_not_ends_with: String
  academic: String

  """All values that are not equal to given value."""
  academic_not: String

  """All values that are contained in given list."""
  academic_in: [String!]

  """All values that are not contained in given list."""
  academic_not_in: [String!]

  """All values less than the given value."""
  academic_lt: String

  """All values less than or equal the given value."""
  academic_lte: String

  """All values greater than the given value."""
  academic_gt: String

  """All values greater than or equal the given value."""
  academic_gte: String

  """All values containing the given string."""
  academic_contains: String

  """All values not containing the given string."""
  academic_not_contains: String

  """All values starting with the given string."""
  academic_starts_with: String

  """All values not starting with the given string."""
  academic_not_starts_with: String

  """All values ending with the given string."""
  academic_ends_with: String

  """All values not ending with the given string."""
  academic_not_ends_with: String
  subacademic: String

  """All values that are not equal to given value."""
  subacademic_not: String

  """All values that are contained in given list."""
  subacademic_in: [String!]

  """All values that are not contained in given list."""
  subacademic_not_in: [String!]

  """All values less than the given value."""
  subacademic_lt: String

  """All values less than or equal the given value."""
  subacademic_lte: String

  """All values greater than the given value."""
  subacademic_gt: String

  """All values greater than or equal the given value."""
  subacademic_gte: String

  """All values containing the given string."""
  subacademic_contains: String

  """All values not containing the given string."""
  subacademic_not_contains: String

  """All values starting with the given string."""
  subacademic_starts_with: String

  """All values not starting with the given string."""
  subacademic_not_starts_with: String

  """All values ending with the given string."""
  subacademic_ends_with: String

  """All values not ending with the given string."""
  subacademic_not_ends_with: String
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  subjects_every: SubjectWhereInput
  subjects_some: SubjectWhereInput
  subjects_none: SubjectWhereInput
  boards_every: BoardWhereInput
  boards_some: BoardWhereInput
  boards_none: BoardWhereInput
  specialization_every: SpecializationWhereInput
  specialization_some: SpecializationWhereInput
  specialization_none: SpecializationWhereInput
  competition_every: CompetitionWhereInput
  competition_some: CompetitionWhereInput
  competition_none: CompetitionWhereInput
}

input StudyCatelogWhereUniqueInput {
  id: ID
}

type Subject implements Node {
  id: ID!
  name: String
  catelog: StudyCatelog!
}

"""A connection to a list of items."""
type SubjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubjectEdge]!
  aggregate: AggregateSubject!
}

input SubjectCreateInput {
  id: ID
  name: String
  catelog: StudyCatelogCreateOneWithoutSubjectsInput!
}

input SubjectCreateManyWithoutCatelogInput {
  create: [SubjectCreateWithoutCatelogInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateWithoutCatelogInput {
  id: ID
  name: String
}

"""An edge in a connection."""
type SubjectEdge {
  """The item at the end of the edge."""
  node: Subject!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type SubjectPreviousValues {
  id: ID!
  name: String
}

input SubjectScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type SubjectSubscriptionPayload {
  mutation: MutationType!
  node: Subject
  updatedFields: [String!]
  previousValues: SubjectPreviousValues
}

input SubjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubjectWhereInput
}

input SubjectUpdateInput {
  name: String
  catelog: StudyCatelogUpdateOneRequiredWithoutSubjectsInput
}

input SubjectUpdateManyDataInput {
  name: String
}

input SubjectUpdateManyMutationInput {
  name: String
}

input SubjectUpdateManyWithoutCatelogInput {
  create: [SubjectCreateWithoutCatelogInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  delete: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutCatelogInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
  deleteMany: [SubjectScalarWhereInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutCatelogInput!]
}

input SubjectUpdateManyWithWhereNestedInput {
  where: SubjectScalarWhereInput!
  data: SubjectUpdateManyDataInput!
}

input SubjectUpdateWithoutCatelogDataInput {
  name: String
}

input SubjectUpdateWithWhereUniqueWithoutCatelogInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutCatelogDataInput!
}

input SubjectUpsertWithWhereUniqueWithoutCatelogInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutCatelogDataInput!
  create: SubjectCreateWithoutCatelogInput!
}

input SubjectWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  catelog: StudyCatelogWhereInput
}

input SubjectWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
  baseAddress(where: BaseAddressSubscriptionWhereInput): BaseAddressSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  subject(where: SubjectSubscriptionWhereInput): SubjectSubscriptionPayload
  board(where: BoardSubscriptionWhereInput): BoardSubscriptionPayload
  competition(where: CompetitionSubscriptionWhereInput): CompetitionSubscriptionPayload
  studyCatelog(where: StudyCatelogSubscriptionWhereInput): StudyCatelogSubscriptionPayload
  specialization(where: SpecializationSubscriptionWhereInput): SpecializationSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  updatedAt: DateTime!
  createdAt: DateTime!
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  addresses: AddressCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutAddressesInput {
  create: UserCreateWithoutAddressesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAddressesInput {
  id: ID
  name: String!
  email: String!
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  addresses: AddressCreateManyWithoutAuthorInput
}

input UserCreateWithoutPostsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  comments: CommentCreateManyWithoutAuthorInput
  addresses: AddressCreateManyWithoutAuthorInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  addresses: AddressUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutAddressesInput {
  create: UserCreateWithoutAddressesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutAddressesDataInput
  upsert: UserUpsertWithoutAddressesInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutAddressesDataInput {
  name: String
  email: String
  password: String
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutCommentsDataInput {
  name: String
  email: String
  password: String
  posts: PostUpdateManyWithoutAuthorInput
  addresses: AddressUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutPostsDataInput {
  name: String
  email: String
  password: String
  comments: CommentUpdateManyWithoutAuthorInput
  addresses: AddressUpdateManyWithoutAuthorInput
}

input UserUpsertWithoutAddressesInput {
  update: UserUpdateWithoutAddressesDataInput!
  create: UserCreateWithoutAddressesInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  addresses_every: AddressWhereInput
  addresses_some: AddressWhereInput
  addresses_none: AddressWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

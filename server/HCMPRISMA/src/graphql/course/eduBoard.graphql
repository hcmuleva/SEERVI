
type Query{
  allBoard:[Board!]!
}
type Mutation {
    createBoard(data: BoardInput!): Board!  
    deleteBoard(id: ID!):Board!
    createStd(data:StdInput!):Std!
    createSpecialization(data:SpecializationInput!):Specialization!
    createSubject(data:SubjectInput!):Subject!
    createUnit(data:UnitInput!):Unit!
    createTopic(data:TopicInput!):Topic!
    
}

type Board{
  id: ID! 
  name:String!
  published:Boolean!
  org:Organization!
  subOrg:SubOrg!
  stds:[Std!]! 
  specializations:[Specialization!]!
}
input BoardInput{
  name:String!
  published:Boolean!
  org:String!
  subOrg:String!
}

type Std{
    id: ID!
    name:String!
    org:Organization! 
    subOrg:SubOrg! 
    board:Board!
    specializations:[Specialization!]! 
}
input  StdInput{
    name:String!
    org:String! 
    subOrg:String! 
    board:String!
    
}

type Specialization{
    id: ID!
    name:String!
    org:Organization!
    subOrg:SubOrg! 
    board:Board! 
    std:Std! 
}
input SpecializationInput{
    name:String!
    org:String!
    subOrg:String! 
    board:String! 
    std:String! 
}

type Subject{
     id: ID!
     name:String!
     org:Organization!
     subOrg:SubOrg! 
     board:Board! 
     std:Std!
     specialization:Specialization!
     units:[Unit!]! 
     topics:[Topic!]! 
}
input SubjectInput{
     name:String!
     org:String!
     subOrg:String! 
     board:String! 
     std:String!
     specialization:String!
}
type Unit{
     id: ID!
     name:String!
     org:Organization!
     subOrg:SubOrg! 
     board:Board! 
     std:Std!
     specialization:Specialization!
     subject:Subject! 
     topics:[Topic!]! 
}
input UnitInput{
     name:String!
     org:String!
     subOrg:String! 
     board:String! 
     std:String!
     specialization:String!
     subject:String! 
}
type Topic{
     id: ID!
     name:String!
     org:Organization!
     subOrg:SubOrg! 
     board:Board! 
     std:Std!
     specialization:Specialization!
     subject:String! 
     unit:Unit!
}
input TopicInput{
     name:String!
     org:String!
     subOrg:String! 
     board:String! 
     std:String!
     specialization:String!
     subject:String! 
     unit:String!
}
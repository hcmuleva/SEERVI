type Query {
    users(query: String): [User!]!
    me: User!
    usersForAdmin:[User!]! 
    roles:[Role!]!
    myRoles:[Role!]!
    orgs: [Organization!]!  
    groups:[Group!]!
}
type Mutation {
    createOrganization(data: CreateOrganizationInput!): Organization!
    createSubOrg(data:CreateSubOrganizationInput!):SubOrg!
    createGroup(data:CreateGroupInput!):Group!
    createUser(data: CreateUserInput!): AuthPayload!
    createUserByAdmin(data:CreateUserInput!): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput!): User!
    updateUserByAdmin(data: UpdateUserInputByAdmin!): User!
    createRole(data:CreateRoleInput!): Role! 
    createUserRole(data:UserRoleInput):UserRole!
}

type Organization{
  id:ID!
  name:String!
  description:String
  author:[User!]
  subOrg:[SubOrg!]
}

input CreateOrganizationInput{
  name:String!
  description:String 
}
type SubOrg{
    id:ID!
    name:String!
    author:[User!]
    org:Organization!
}
input CreateSubOrganizationInput{
    name:String!
    org:String!
}
type Group{
    id:ID!
    name:String!
}
input CreateGroupInput{
    name:String!
}
type User {
    id: ID!
    firstname: String!
    lastname: String!
    email: String!
    password: String!
    posts: [Post!]!
    comments: [Comment!]!
    org:Organization!  
    subOrgs:[SubOrg!]! 
    userRoles:[UserRole!]!
    createdBy:ID
    createdAt:String!
    updatedAt:String!
}
type AuthPayload {
    token: String!
    user: User!   
}
input CreateUserInput {
    firstname:String!
    lastname: String!
    email: String!
    password: String!
    org:String!
    subOrg:String!
}

input UpdateUserInputByAdmin{
    firstname:String
    lastname: String
    email: String
    password: String
    org:String
    subOrg:String
}
input LoginUserInput {
    email: String!
    password: String!
}
input UpdateUserInput {
    firstName:String
    lastName: String
    email: String
    password:String
}
type UserRole{
    id:ID!
    user:User!
    role:Role!
    group:Group!
}
input UserRoleInput{
    user:String!
    role:String!
    group:String!
}
type Role{
    id:ID! 
    roleName:String!
}
input CreateRoleInput{
    roleName:String!
}
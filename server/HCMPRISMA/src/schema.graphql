scalar Upload
type Query {
    users(query: String): [User!]!
    posts(query: String): [Post!]!
    myPosts(query: String): [Post!]!
    comments: [Comment!]!
    me: User!
    post(id: ID!): Post!
    address(id:ID!):Address!
    addresses(query:String):[Address!]!
    uploads: [File]
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput!): User!
    createPost(data: CreatePostInput!): Post!
    deletePost(id: ID!): Post!
    updatePost(id: ID!, data: UpdatePostInput!): Post!
    createComment(data: CreateCommentInput!): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput!): Comment!
    createAddress(data:createAddressInput!):Address!
    createBaseAddress(data:baseAddressInput):BaseAddress
    uploadFile(file: Upload!): Boolean!
    singleUpload(file: Upload!): File!

}

type Subscription {
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
}

type AuthPayload {
    token: String!
    user: User!
    
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

input LoginUserInput {
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
    password:String
}

input CreatePostInput {
    title: String!
    body: String!
    published: Boolean!
    updatedAt:String
    createdAt:String
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
    createdAt:String
    updatedAt:String
}

input CreateCommentInput {
    text: String!
    post: ID!
}

input UpdateCommentInput {
    text: String
}

type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    posts: [Post!]!
    comments: [Comment!]!
    createdAt:String!
    updatedAt:String!
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
    createdAt:String!
    updatedAt:String!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
    createdAt:String!
    updatedAt:String!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    node: Comment
}


input createAddressInput{
    house:String
    published:Boolean
    
}
type Address{
    id: ID!
    house:String
    published:Boolean
    
}
input baseAddressInput{
     officename: String
    pincode: String
    officeType: String
    Deliverystatus: String
    divisionname: String
    regionname: String
    circlename: String
    taluk: String
    districtname: String
    statename: String
    telephone: String
    relatedSuboffice: String
    relatedHeadoffice: String
    longitude: String
    latitude: String 
}
type BaseAddress{
    id:ID! 
    officename: String
    pincode: String
    officeType: String
    Deliverystatus: String
    divisionname: String
    regionname: String
    circlename: String
    taluk: String
    districtname: String
    statename: String
    telephone: String
    relatedSuboffice: String
    relatedHeadoffice: String
    longitude: String
    latitude: String 
}
type File {
  id: ID!
  path: String
  filename: String!
  mimetype: String!
  encoding: String!
}
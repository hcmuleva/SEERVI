# import Query.*, Mutation.* from "posts.graphql"
# import Query.*, Mutation.* from "users.graphql"
# import Query.*, Mutation.* from "comments.graphql"
scalar Upload
type Query {  
    address(id:ID!):Address!
    addresses(query:String):[Address!]!
    uploads: [File]
    getPhoto(url:String!):File
    getStudyCatelogs:[StudyCatelog]
}

type Mutation {
    createAddress(data:createAddressInput!):Address!
    createBaseAddress(data:baseAddressInput):BaseAddress
    uploadFile(file: Upload!): Boolean!
    singleUpload(file: Upload!): File!
    createStudyCatelog(data:StudyCatelogInput):StudyCatelog!
}

type Subscription {
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}


type CommentSubscriptionPayload {
    mutation: MutationType!
    node: Comment
}

input createAddressInput{
    house:String
    published:Boolean
    
}
type Address{
    id: ID!
    house:String
    published:Boolean
    
}
input baseAddressInput{
     officename: String
    pincode: String
    officeType: String
    Deliverystatus: String
    divisionname: String
    regionname: String
    circlename: String
    taluk: String
    districtname: String
    statename: String
    telephone: String
    relatedSuboffice: String
    relatedHeadoffice: String
    longitude: String
    latitude: String 
}
type BaseAddress{
    id:ID! 
    officename: String
    pincode: String
    officeType: String
    Deliverystatus: String
    divisionname: String
    regionname: String
    circlename: String
    taluk: String
    districtname: String
    statename: String
    telephone: String
    relatedSuboffice: String
    relatedHeadoffice: String
    longitude: String
    latitude: String 
}
type File {
  id: ID!
  path: String
  filename: String!
  mimetype: String!
  encoding: String!
}
input StudyCatelogInput{
  std:String!
  substd:String
  academic:String
  subacademic:String
  subjects:[String]
  boards:[String]
  specialization:[String]
  competition:[String]
  published:Boolean
}
type Subject{
  name:String
  catelog:StudyCatelog!
}
type Board{
  id:ID! 
  name:String
  catelog:StudyCatelog!
  
}
type Specialization{
  id:ID! 
  name:String
  catelog:StudyCatelog! 
  
}
type Competition{
  id:ID! 
  name:String
  catelog:StudyCatelog! 
  
}
type StudyCatelog{
  id:ID! 
  std:String!
  substd:String
  academic:String
  subacademic:String
  subjects:[Subject!]!
  boards:[Board!]!
  specialization:[Specialization!]!
  competition:[Competition!]!
  published:Boolean
}